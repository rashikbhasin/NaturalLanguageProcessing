problem Yes it works.
problem Test Plan section is missing.
problem The write up contains clear explanation to what the issue was and how it is solved. But there was no mention of design patterns of principles in the writeup.
problem The Wiki page did not have a test plan. However, it was stated in the video that the project requirement did not have Rspec test creation since the changes were minor. But the code did have tests.
problem There was no link to the test plan, so I couldn't see if all the test cases in Git were as part of the test plan.
problem Found no test case uploaded in the pull request
problem it is well written , but it doesn't have the references mentioned which is extremely important . References need to be added at the botton as the page ends very abruptly.
problem yes the writeup explains the project very well. this project was done to improve the code in the review_response controller, to give it better organizat
problem Yes the authors have considered all the pre- conditions in this project. the tests have been written and organized well making sure that every case is tested and the code passes for these tests.
problem the naming is done appropriately.
problem the purpose of the project was to improve the code and make it better, this has been achieved.
problem the tests added are done appropriately.
problem There is no mention of the approach to solving the problem. Maybe the steps followed can be mentioned
problem The test cases have been discussed but there is no evidence of them being implemented in such a way that they pass.
problem Suggestions: 1. test files have duplicate test cases with only HTML tags changed. (DRY) 2. No comments are mentioned in code at all. (More Comments) 3. Since this is not ruby code i cannot check whether Ruby Style Guide is followed. (Ruby Style Guide) 4. "Itemtypes" and "PropertyNames" have exact same code with hardly an attribute change inside. This does not follow two things(any of the code needs be extracted into separate methods, DRY)
problem The test plan includes test cases in the 2nd round. However, the coverage is less. Also, many of the edge cases are still not included. Not all of them are automated.
problem They have converted few test cases corresponding to issue as automated test cases but edge cases related to issues are still missing.
problem No test plan.
problem Yes, they have discussed the Test Plan in detail in the video. The team also needs to update the Test plan in wiki so that other reviewers could better review the functionality that the team modified.
problem Basically the team wanted to follow the DRY rules and Single Responsibly Principle. They divided a big method into several small methods and separate the functions. But they didn't do too much change on the existing code and some places are still not DRY and can be refactored. They changed some variables' name but not big changes.
problem `spec/models/response_spec.rb` line 127, there is a variable `existingResponse` that doesn't use snake_case. The same in line 137.
problem their code is not very efficient,they should use some good methods to solve their problem.
problem they should talk more on refactor process , how they worked to refactor it .
problem Nope, why was method names changed? Why did you change sort to sort_by? These questions are unanswered.
problem The Refactoring decision sections lacks any information regarding the rationale as to why a particular approach was taken, it only contains what was changed and the resultant outcome. As an outsider to this project, it is hard for me get why.
problem Some of the methods are still long.
problem A few functions seem long, but I think they consist of many steps so I think the code's fine. Also the code is doesn't completely follow the Ruby Style guide as can be seen by the code climate check.
problem The team describe how they did the work in details. The main principles they focused on may be DRY and Single Responsibility, and they split some long methods into small ones. Obviously the team did a lot of work on the page, but it doesn't make much sense by just listing the changes. Organization could be more reasonable, like they can demonstrate modified files along with problems but no need to put them in a new section. Actually the quality of screenshots and video is low, which made them useless.
problem Code is good. A few things - some formatting issues like no space after or before curly brackets. I saw some opportunities to use symbols instead of string variables. Also there are some very long if blocks that could have been handled betters, like in the redirection method. Overall the code is good but could have been greater. There is also this extremely long line in action_allowed_method: return current_user_id?(response.map.reviewer.user_id) || reviewee_team.has_user(current_user) || current_user.role.name == 'Administrator' || (current_user.role.name == 'Instructor' and assignment.instructor_id == current_user.id) || (current_user.role.name == 'Teaching Assistant' and TaMapping.exists?(ta_id: current_user.id, course_id: assignment.course.id)) That's bad!
problem Wiki has been detailed with the scenarios and why the changes have been made so it becomes easier to follow the code. The for loop that was used even though DRYed the repeated code, however it has become too long to follow in a single line.
problem Large clunky code in certain areas have been broken down into functions making it more easily readable and concur. Although some of the changes look overtly trivial and need not have been changed.
problem The test plan doesn't cover edge cases.
problem not complete ,they should give more test codes and their explanation
problem In the pull request, these codes are good, actually, what the author did is to refactor the original codes, and separate a method is too long. But in my opinion, the author maybe should add some comments of modified codes, because there're too many codes they changed, if you can add some comments, it will help reader understanding and much more easy to read.
problem The team have contributed many test code and refactor the existing code in "response.rb". But it seems that the team only reorganized the existing code but haven't considered if the code is reasonable. The most obvious problem of this file is it contains html code which should be in the view file but not model file. Therefore, it could be refactored further by putting these code in view files and rewrite part of origin methods. I have mentioned this last time but it seems they didn't take my advice. In newly added test code, they also put some new html code in it which make the code more complex.
problem The tests don't seem to be implemented. The orange/brown text on examples shows the tests are not implemented. They should pass with green. More work needed to have been done there.
problem No explicit test plan for the project is mentioned, just a section elaborating on how the existing test cases for response.rb pass. Makes no mention of how their changes impact a pre-existing (i.e. do they even affect it) or has a new test case been written to verify their changes. All of the above are missing.
problem Test Plan introduces the basic work and structure about their test work, but not much detailed explanation.
problem several places left only one sentence ,making it unclear , I only get basic idea,it should be more specific.
problem Good write-up. Don't like the pictures though. Could have indicated with something better (or at least enlarged pictures: some of them are, while some of them are too small to read)
problem Good enough description which just about does the job, but feel regurgitated from the problem description. Some effort could have been undertaken to add more depth to the description.
problem The writeup page includes many contents. So does the video. They describe the changes and how the team refactor the files, but to some extent, they just list all the changes they've made, but lack of detailed explanation. Like what they have done in wiki page, they use screenshots to mark the changes they made, but It's not necessary to do that. GitHub has already show that in a clear way. And as previously mentioned, it lacks some introductions content. For instance, in the "background" section, it is supposed to have a detailed introduction to "response.rb" file and what response is in Expertiza. It seems that the team didn't give a good understand or introduction of "response" as I think it's mainly related to review functions.
problem It does not clearly defines the patterns and design principles
problem could not find the link to pull request
problem There's no link to the pull request thus I can not check if the build passes or not. On the other hand, the names in provided in the code seem reasonable.
problem I can not find a way to manually test the work done in this project. But the execution of test cases in the screencast seems to work perfectly fine.
problem Yes, it has test part. Good job! But I think it is not enough. You should write some test for your refactored method and new method extracted from original method. For example, you'd better to test seft.export mehtod and self.export_not_nil method as well.
problem Generally, you finished your work on time and systematically. Good job! But some issues are needed to be modified. 1. "socre"method is very long, which should be refactored. 2. I think some method can be extracted from scores. For, example, from line164 to line 177 can be extracted to a new method called "get_rounds_scores". 3.Some comments are needed before refactored method and newly added method, which make reviewers to easy to understand your code. 4. The code style is good.
problem The write-up has been modified well to suit my previous review. The tasks have been properly mentioned and the modularity of the write-up is something that is commendable. Code snippets are too long in the write-up though.
problem Yes, the write-up does mention how the authors performed the task. The plan of work explicitly states so. Also, the test patterns are mentioned which is another plus point. I just feel a lot of unnecessary code snippets are present.
problem I do feel some of the test cases are very long and it would be better if those test cases could be modularised into smaller test cases. However, this is just a personal opinion and the test cases have been written in a fluent manner. Comments could be added to make the code seem more intuitive. CodeClimate shows 443 issues to fix, with many duplicate code segments.
problem The refactoring mentioned in the problem statement has been covered properly. The test cases however have multiple occurrences of creating an object eg: "@assignment=create(:assignment)" it can be declared at the top of the rspec file and reused in the respective contexts. This was mentioned as an additional comment for round one of the review, however I could not find any changes in the code.
problem The scores method has been modified, but it still very long, it should be separated into several simpler method.Method response_map_to_metareview has same issue. In the assignment_spec.rb file, a lot of code is similar, it can be merged through before method for each test case.
problem I don't think they converted all the cases listed in Test Plan. In the Test plan, they propose that they will refactor scores method, but it still to long. They should separate it into several simpler methods.
problem climate issues still need to fix
problem yes, the project has been well explained in the wiki page. I liked the part mentioning functional Tests for whether students choosing the same topic are in the same team. The wiki page mainly contains the code snippets and a bit more elaboration would be great. The team did not work much on elaborating more as suggested in the last review though.
problem This time basic logic behind such code has been given but very briefly, a bit more explanation would it make it easier for a non technical readers also to read what is going on!
problem The test plans have been covered satisfactorily. The team has although not worked on the last review suggestion regarding what happens if the invitation is declined and not tested that, maybe doing that would make the testing team functionality more exhaustive. Also, they can add the case in which the team size is in accordance with the assignment rules, say 3 participants allowed, so there could have been a check for that too. Again, as the last time the team could have elucidated more in each of the sections on wiki in testing plan. Although i appreciate they have included the test case regarding Functional Tests for whether students choosing the same topic are in the same team as mentioned in the last point of the functional tests on wiki.
problem The tests have been automated and good work by the team on this part, but on the part which I appreciated upon, Functional Tests for whether students choosing the same topic are in the same team, I could not find those in the code and maybe those have not been covered.
problem The features work as intended, it is just that some of the cases mentioned in the questions above could also have been covered to make it more exhaustive. On the whole, video, wiki and code all three make it better to understand their work as a bit more explanation could have been put up on the wiki page.
problem The writeup is clear. But they basically did not change or add something after the first round.
problem They should add some explanation about the tests they wrote. For example, they could add more comments about the code which is hard to follow now.
problem Different pre-conditions, edge cases, invalid input values are not considered. There are only tests with valid input values. However, tests with invalid input values are the most important. They should test what would happen if users input invalid values.
problem There are basically no comment. And the code in team_functionalities_spec.rb is too long. More than ten lines of code is commented out at the end. I think it should be deleted.
problem The features work as intended. But there is no edge case.
problem The scenarios are clearly mentioned in the test plan and the automation cases are as well mentioned in the test plan. But to me few other scenarios should have been implemented like student trying to select an topic when they already have one, Student with a topic joins a team then their topic is dropped and the new teams topic is added etc.
problem The code looks clean and can be understood from reading it. But more comments are welcome in the code to make it more clear when some one just want to know how the functionality has been implemented without going through the code
problem The written cases works perfectly. Good Job done. But as i mentioned earlier more scenarios could have been implemented.
problem Future work section is desirable
problem The coverage eventually increased by 0.2%, which is a clear demonstration of the purpose of this change and to what extent it was achieved. But I would really like the tests to be split across multiple files instead of cramming everything into one.
problem There are 14 issues reported by codeclimate pending
problem variable names are out of convention in few places. there are underscore separated as well as camel case names used. testDirectory for example
problem The video is clear about the test execution and results. Good if codeclimate errors are taken care of.
problem The writeup is unchanged and it is less focused on functionality.
problem it explains the approach but not the reason to choose that approach.
problem There can be some more comments to make the code understandable.
problem The write up is pretty clear on what feature is being tested but not as clear as to what led them to develop specific test cases. The writeup is less descriptive.
problem The writeup explains how the authors did the work using the code snippets. They can add descriptions so that it becomes more clear for every reader.
problem The authors have considered pre and post conditions while writing the test cases but haven't explicitly listed them in the writeup.
problem Students in the same team test case is not well documented.
problem Tests are good, not tested for invalid inputs again,
problem tests are still very lengthy like last time.
problem Could not test edge cases, Rest are working.
problem The wiki page explains what all test cases the team has covered and the code for it, but not enough explanation is given as to why they took this approach for their functional tests.
problem Test plan looks comprehensive with many test cases with pre-conditions, couldn't find many edge cases tor invalid input scenarios though.
problem few of the test cases mentioned in the requirement document are not documented/implemented.
problem write-up is not complete. Few of the test cases mentioned in the requirement document are not documented, like as team leader, selects a topic of assignment. its not clear from the test plan.
problem Few test cases could be divided into different smaller test cases. Comments could have helped reviewers.
problem case to check if a user with any other role can join the team. what happens in such case. what happens if any of the fetch actions fails during a test. What happens when a student already part of a team tries to joins the team. Negative test cases are not handled.
problem Only include their purpose. Didn't explain why the did the work the way they did.
problem Almost perfect. And the climate still has issues to fix
problem There is no test plan and neither its mentioned that there project does not need testing plan or not.
problem Satisfactory explanation. Missed some spelling mistakes at places. (Some letters are not in capitals at the beginning of sentences).
problem Functions have too few comments Some commented section of the code has not been deleted.
problem No test plan at all, maybe their task does not need a test plan just as ours.
problem There are too many unnecessary comments and many useless spaces in the code, which is not that DRY.
problem No tests added at all... same as the first time.
problem It works well, but there is no edge cases for this task.
problem Update: Initial feedback not considered, hence response is the same There are a lot of commented blocks of code, which i feel if not required should be removed. Such redundant or commented code hampers readability and bloats the codebase
problem The team has not included a test plan section but they explain how to test each issue in the video.
problem The team has tested the newly added code but have failed to include a test plan section.
problem The wiki was well written and the video clearly shows the implementation of the project done. The last 2 lines in the introduction section are not related to the current project and must be changed. The formatting in the wiki is also not perfect. Some statements of the code are not inside the formatted grey box. (Example in "Approach Taken To Implement Changes" section of the wiki, in 2) the end statement is out of place and in 3) def create is out of place ).
problem There are no test cases written in RSpec , only the UI testing is done. If tests in spec folder are written it would have been great.
problem Most of the names look intuitive. Only the name tmp_object doesn't appeal much to the functionality. This naming convention could have changed.
problem No tests are written for the functionality, only UI testing is done. Automated tests are not run for the changes made.
problem Through manual testing, all the changes made would contribute to the expected functionality. If teh RSpec tests are written it would have completed the testing scenario.
problem The video explained clearly how the test were written and the wiki page introduced the project task by task. It introduced the idea of refactoring and Test First Development which is really good.
problem As it it a test first development project they have written all the tests first. But they have not mentioned any design patterns that they used. I suggest they could add little code per function instead of adding all the test cases.
problem They put all the code of test in the wiki page, but I think it is better to have few comments for each test.
problem Most of the code is good enough. I can see they improved the code of refactoring and simplified the code of test. But please checkout the code climate, you have a lot of issues to fix.
problem The code followed good coding practices but still can be improved. Please checkout the code climate.
problem Yes, I ran the test manually on my computer and they all succeed so I think they have done a good job.
problem The names are quite intuitive as I think they have followed good coding practices and design patterns while implementing their project. All functions are named explicitly and hence I don't think there is any issue regarding this section.
problem Yes, all the tests have been covered and all of them have passed. Well done to the team.
problem Most of the code is good. But there are still some things I think you can modify. Firstly, the method score is still very long, more than 50 lines. I think less than 25 lines is good. Secondly, the name of new method extracted from score method is not appropriate. For example, in line 203, a verb name "get_score_max" is better than a nouns name "score_max". Then, you did lots of creation in your spec file. I think using double and build is better in order to improve your efficiency of your code.
problem They finished all the pending test in spec file and pass the automatic test tool in git, really good job, cheers! But I recommend you write some test for your new methods in order to make sure your refactor is good. And I think you don't implement TFD pattern as well as possible because you even didn't write the test for your refactored method.
problem This tam did a very good wiki write up. It explains every task they did clearly. Because they are TFD design project, so they explain what is TDD. But if you can add some details about how to write your test code and how to implement your TFD design method, your wiki will be perfect.
problem the write up clearly defines the project
problem The writeup has been updated according to review comments with proper explanation for the design decisions.
problem Could not figure out how to test the working of the code. It would be helpful if the steps to verify the functionality was mentioned in the writeup.
problem Detailed reason explained
problem same as before
problem Same as before
problem The authors did explain why and how they did it
problem Yes looks complete
problem code is awesome, nice and DRY.
problem The writeup is very detailed, the background and Problem Statement section mention what the project does and why it do that.
problem In the test plan section, they give a table to show what they will do in the test. It is very clearly and include the factor which is listed above.
problem The variables and methods and class names is nice. Every names are reasonable and suggestive, no thing should be change. But I think they did not create a pull request, because I didn't find any information I need in https://github.com/expertiza/expertiza/compare/master...rikenshah:master.
problem Yes, the section "Plan of Work", contains their work flow. They have also mentioned what refactoring is being and why it is being done.
problem Names are reasonable.
problem Yes. They explained clearly in "About Refactoring and why are we using it" and "About Test Driven-Development and why we are using it".
problem Yes. There are 4 tasks for test cases. Very comprehensive and clearly.
problem The write up explains the functionality very well. The authors have even used code to explain what changes have been made.
problem The write up has 2 sections "About refactoring and why are we using it" and "About Test Driven-Development and why we are using it" which explain why and how the authors did what they did.
problem The code is written nicely and seems to be DRY.
problem The tests in the Test Plan action do pass. The test cases run without any failure as depicted in the screencast too.
problem They have very well explained the work they did. It would be even better if the authors wrote which other approaches they tried and did not work out.
problem All the issues are covered into automated test cases and the tests are written in Rspec. In one of the test cases: + it 'returns false if directory path already in use' do + @assignment = create(:assignment) + expect(@assignment.check_directory_path).to eql(false) Here, input values are not provided to the new mock assignment created. So for all input values the test cannot be used to verify the feature.
problem it 'should contain course in path name' do @assignment = create(:assignment) @assignment.directory_path = Course.first.directory_path.to_s + "/finaltest" expect(@assignment.directory_path).to include(Course.first.directory_path) end this is a dummy and useless test. It is not testing anything in the model. I am not sure what has been tried to test. No tests added for assignment controller changes.
problem They have discussed their entire test plan properly in the wiki and looks complete in code. But codeclimate and travis build have failed in pull request so it seems some changes need to be made.
problem 1. I could not find any test cases in the test plan which includes prerequisites, edge cases and many more. 2. The project basically includes solving the issues and writing the tests for the same. The automated tests might not be required here. 3. The problem statement clearly defines the scope of the project which shows that the automated test cases are not required. 4. The test case description is not included in the wiki page. 5. I could not see information about any test/spec file in the wiki page, where you have implemented the test cases.
problem The authors converted all the cases discussed in Test Plan into automated tests. But it doesn't consider the case when a TA create the assignment.
problem Code change works perfectly, although there are some hiccups as mentioned below. Committed code without checking. Added a 'ddd' in code by mistake. -> Generalddd ^^ the above issue was mentioned in Round 1 as well. The team hasn't taken the review into consideration. Public and Private keys changed in schema.rb without explaining why it has been done. - t.text "public_key", limit: 16777215 - t.boolean "copy_of_emails", default: false + t.text "public_key", limit: 65535 + t.boolean "copy_of_emails", default: false The team must acknowledge all the changes made in the code with proper comments either in wiki or on git. Travis CI build fails because of some airbrake issue. Coverage is decreased by 22.7% .
problem assignment_new_path, my_dir
problem Names were intuitive but maximum of the variables were made instance variables even though their usage was only inside an if block, could have been local to the block.
problem In app/controllers/assignments_controller.rb: Varible "my_dir" in update action is not suggestive, I can't tell its meaning from its name. I suggest that you come up with a better name, the name should tell us exactly whose directory it is. @assignment_new_path, @course and @destination_path are not suggestive, because they are not used in the following action or erb file, it's uncessary to make them instance variables. I suggest that you should make them local variables. In app/models/assignment.rb: @assignments is not suggestive, because it is not used outside of this method, it is unnecessary to make it a instance variable. I suggest that you should make it a local variable. By the way, the pull request changed the schema logic, it decreased the limit of digital_certificate and public_key from 16777215 to 65535, which are irrelevant to this assignment. I suggest that you restore the schema.rb file.
problem Pull request link is not provided. The update method in app/controllers/assignments_controller.rb is too lengthy. The code for moving the files to the new directory can be made as a separate method and that can be called in the update method, because update here means updating an assignment. Every method should do its specific task. So putting more functionalities in one method is not a good practice.
problem Code is working and the team has really done a good job to solve their problem statement. However, there are a lot of nuances of being a good developer who contributes to open source projects. Code has been checked in with changes in files that are not actually needed. Example: app/views/assignments/edit.html.erb - changes made are not required db/schema.rb - changes made are not required spec/controllers/assignments_controller_spec.rb - changes made are not required spec/models/assignment_spec.rb - commented sections needs to be removed (redundancy and cluttered
problem They have followed the Ruby style guidelines and also kept the code DRY. Some comments could be added to important parts of the code.
problem The place where current functionality is added has become long after the change, It needs to be extracted. Instance variables are used where it is unnecessary. @assignments in the model, @assignment_new_path in the controller, @assignment in spec etc.
problem getting a destination path can be made a method which could take course and assignment path as a parameter and return destination path as most of the other logic has hardcoded url and it has to be at a common place.
problem There is debug code present is spec file for "#describe '#check_directory_path' do". They haven't added comments to the code. Other than that it looks fine.
problem Comments could have been added
problem More comments are needed.
problem 1. The methods are short and relevant. 2. The code has been divided in to parts which do the expected operation. 3. No comments are needed because, the code method names are clear to understand the functionality of it. 4. The code follows the Ruby style. 5. I did not find any code which is DRY.
problem All the methods are not too long. No comments is found in your code. I suggest that you should write the intention of your code in your comments. When processing string, too many '+' are used, which does not follow the Ruby Style Guide. I suggest that you could use "#{}" instead. In "app/controllers/assignments_controller.rb": Line 135 seems to be redundant, since the value of dest_folder would be set to other value before use. I suggest that you delete this line. It is not DRY to use @assignment = Assignment.find(params[:id]) in different actions. I suggest that you should define a new method set_assignment to set @assignment, then make this method a before_action for all the actions that need it. In line 127, statement "if !params[:course_id].nil?" does not follow the Ruby Style Guide. I suggest that you change it to: unless params[:course_id].nil? In app/views/assignments/edit.html.erb: It's strange that you add "ddd" in line 6. I suggest you give a good reason for that
problem The code works well in all cases. Few edge cases can be described: There are lots of edge cases here which are not addressed: Examples: 1. For the second issue, when we are copying the contents from the user space to a directory we are not checking if that directory is being used by any other assignment or if simultaneously another user is also trying to copy to the same location. 2. Before saving the assignment to a directory, you check if the directory is being used by any other assignment. But what if the directory is used for non-assignment purpose like storing all topics or storing all team names? So will you check each and every directory in expertiza if it is already used? How will this case be handled?
problem When creating an assignment outside of a course, the instructor may have specified a submission directory that has the course name in the pathname. This condition is not implemented.
problem 1. The manually testing steps written in the wiki page and the videos have helped in testing the project manually. 2. The expected features work as intended. 3. I could not see any edge cases for the features that have been implemented. 4. There is no description of the test contexts which are related to the implemented methods.
problem All tests passed. But no edge case is tested in the RSpec. There are only 3 unit test for model assignment.
problem The writeup includes explanation for all the issues but the background can be explained more clearly. The problem description given in the topics list had more details than the wiki page. So more details can be added here. Grammatical errors can be fixed: Even the assigning the assignment to a course is implemented in assignment.rb
problem The video explains what the problem statement was and what the output has been. The issues to be fixed are clear through the video and the wiki page. Easier to understand. Updated wiki page with code snippets helps for better understanding
problem Videos and writeup are informative.
problem It should have been more elaborate
problem The basic problem statement and the issue description are totally copied from the assignment document, which only proves the TA did a lot of work for this assignment. I suggest that you should: 1. write some of your understandings on what functionality the work is related to. 2. think about where these problems originate from, and write some of your own opinions. 3. describe in the Modified Files part, which file relate to which issue, and the corresponding position in the file.
problem The test plan is properly documented. Few grammatical issues can be fixed: "Now you will the updated path on assignment display list and instead of assign to course remove from course badge will be visible"
problem There is some test strategy for the bug 391. But no tests or test strategy for the other bug.
problem 3 tests were added and 1 test was commented out but edge cases were missing. Ex as per requirement "Make sure that the check is made correctly even if it is a TA who creates the assignment" was not considered.
problem For each issue, the author only gives one case, so there is no different cases. I suggest that you should give more than just one test case for each issue. For example, in the requirement it is says "Make sure that the check is made correctly even if it is a TA who creates the assignment." That's obviously a scenario, and you even copied it to your wiki. Unfortunately, you might not have read it and didn't write it in your test plan. By the way, I think your test plan includes too much unnecessary descriptions. I suggest that you should simplify it with just context, keep only the steps that is necessary for the test.
problem The pseuodocde provided in the writeup helps in understanding the code. No design principles are followed. The first bullet point provided in the problem description is not addressed along with the other two issues: "It is not possible to create an assignment that does not specify a submission directory." An automated test for this issue is written and is described in test plan, but the code for solving the issue is not provided in the main section
problem The authors have explained how they did the work but they haven't explained why they used the specific approach/ design principle or pattern
problem 1.The details of why the authors did the work has been explained in the problem statement. 2. I could not find the description of design patterns or principles in the wiki page. 3. I highly recommend you to write the description of design patterns in your wiki page if you have used in your implementation. 4. The issues have been explained properly in 2 separate videos.
problem The introduction for how to deal with the 2 issues only shows the method they took to solve the problem, no reason is given to explain why the authors did the work the way they did. I suggest you explain: Why you chose to forbid creating the directory? Isn't there a better way? Why did you choose only assignment_controller.rb, assignment_controller.rb and assignment/new.html.erb to modify? At least from this wiki, I can't see why this method is a wise solution.
problem Tests have been added but since write-up is not present, no test plan to compare.
problem Well the test cases doesn't seem to be automated.
problem 1. The authors have included all the test cases which they have implemented. 2. I could not see any description about the automated test cases.
problem Yes, the code added is great and intuitive, and a lot of work has gone to change class to instance variable and they have explained why. But the tests are not implemeted
problem Some of the methods are way too long. Could have bifurcated. Could have separated common set up in some other setup methods.
problem Code is good. Just in tests, the code could've been reduced in some cases where same object is being mocked multiple times.
problem 1. The test context are not tool long and the methods have included are to the point. 2. Some test contexts like .feedback_response_report are too big and difficult to understand. 3. These big contexts need comments to understand. 4. The code follows Ruby Style Guide. 5. I did not find any tests or the specs that are DRY.
problem 1) The function are not too long 2) No need to extract code into separate methods 3)Comments are not necessary as the code is short and easy to understand 4)I feel that it follows Ruby Style 5)No
problem The code perfectly follow the principle of ruby, though some function are too long; all cods need to be extracted into separate methods. There is no enough comments to solve the trouble so that some codes I can't understand.
problem They also tested that after deleting responsemap2, responsemap1 was not deleted. But there was no check for actual deletion of responsemap1.
problem I am unable to find a way to manually test the work of the authors but according to their screencast, the tests work without any failure.
problem 1. The video clearly explains what files are modified. 2. The video explains how the test cases are passed. 3. The team has not included the steps to test the implementation manually. Hence it is difficult to manually test the application.
problem All features are achieved and intended. But the features does not work correctly for edge cases. Because there is no enough information for code that I can pull.
problem Could have explained the write up more thoroughly. One of the subsections has title 'Work to be done'. This gives a false idea that this is still pending (it actually is the work that had to be done, and they did it).
problem Not able to find the write-up or video
problem Last time the author failed to provide the write up url. This time the author has provided the write up, but it should be more comprehensive. Test plan is explained in just one sentence. Testing requires the same amount infact sometimes more time than development itself.
problem The writeup is well detailed out. It would have been better if the video was smaller. But it was well done. Test plan could have explained the approach used.
problem In the writeup, your team just copy words from description of oss project, but there is not enough explanation for what is going with codes. The good point is that your team lists all files that had made changes. But your team did not explain how to make change and why need to make changes. This part need to be implemented.
problem The test plan section includes details of tests for two ResponseModelMaps. The team has described what was tested, what the inputs were and how the factories are being used. For other tests, the team has asked to refer the git repo. Bit more details of the other tests would have helped.
problem A Test Plan has been provided in the wiki but is really short - just 1 sentence.
problem Test plan is explained in just one sentence. Testing requires the same amount infact sometimes more time than development itself. The authors have not explained comprehensively the testing plan.
problem The test plan is generic with explanation of few test cases. It would have been better if the approach for it was detailed out.
problem There is no enough information for test plan. There is not enough information for how to handle cases for pre-condition, edges cases, invalid input values and other possibilities.
problem Could have explained why unit tests were important for these scenarios. The principles were accurate. They used the methods suggested in 'The Magic Tricks of Testing' video lecture.
problem The write up explains it really well, how the authors have worked on the project. But under the work to be done section, it seems like they have just copy - pasted the lines from the "OSS projects on Expertiza" doc.
problem Yes since it was a testing project they infact have a predefined tasks to complete so went with them(having no option to go in a particular way) and explained with reasons why they need to implement something like the factories were needed because each response_map needs its own object. But explaining with sample examples will make the write-up more easy to relate and understand which I think you will be incorporating it in the video which is not yet made due to technical difficulties as stated in the write-up. I would suggest while explaining try using some examples and relate your tests with them which will be better to understand
problem The author have not provided much insight of the things they have performed and how they have performed. Instead of just providing the file names to be changed or created or the file convention, the authors should have provided the details about the work they did, so that even the layman could understand.
problem Your teams' writeup did not provide enough information for the reason why these part need to be refactored and functions for these tests. I wasn't able to test the test plans because a link to the github repository with the code is not there. The pull request doesn't give access to the code to test, and since the video or the screen shots don't show test results, I can grade this.
problem The design doc includes all the necessary details like project purpose, design, along with the way will be followed to achieve the result with proper test cases.Although the design doc includes all the necessary details, it could have been a bit more better if more consistency would have been present in the design doc. For example- while describing Design Principles, either every principle should be explained or none rather than some being explained.
problem Use Case Diagram and Class Diagram missing. However the test plan is explained very well.
problem The wiki doesn't provide any code or logic design. I suggest that you should add code design for each functionality.
problem The wiki provides only a use case diagram without any explanation. It's hard to judge whether this diagram is reasonable. I suggest that you should first add some explanation for the current use case diagram, so we can make an assessment. Then I suggest you add more diagram to support your logic design, and give corresponding explanations, of course.
problem The complete functionality is included in the doc. They have nicely split the functionality into sections. The sub-tasks can be described as to how this task will help in achieving the big picture. so few points can be written under each task as explanation
problem The team has given only one example of mutation test. It would be more clear if they can provide more mutation examples.
problem The existing execution flow is a bit difficult to understand. The team can provide a brief description about the same to make it clear to the reader.
problem I was able to understand the explanations provided but felt some explanations were redundant.
problem The completeness of the design doc is almost perfect: the write-up contains a short description, the introductions of several terminologies such as Servo, Rust, Web-platform-tests and Mutation Testing, detailed project description such as setup, steps, strategy, execution flow, design pattern and testing. However, I still don't get what purpose is for this project. Maybe they should put more focuses on the purpose of the project, such as why they need to do this mutation testing? Is it for the performance or for finding bugs?
problem The explanations are quite descriptive, however there are a few domain specific terms used in the introduction. I would recommend explaining them first, eg. Servo, and then mention them in the introduction.
problem Project purpose and project design are elaborated well. The test plan should be elaborated more
problem All the points are covered but the content is a bit inadequate. Should have been elaborated for a better understanding
problem The design can be refactored to check for the existing gems
problem Explanation look okay ,but could add more information so that it will be clear to reader
problem A major drawback in the document is the lack of visual aid which is making it difficult to follow.
problem I think use case diagram can be written better, by using multiple links denoting "what leads to what"
problem Overall the design document for the project is good, it contains satisfactory project purpose and design. But the design portion lacks UML design - as pointed below in Review Question 5. Test plan is very basic with no explanation backing them.
problem All necessary changes are described. But the description accompanying them is non-existant, seems like they regurgitated these from the problem statement given. Additional information regarding the same is required, for example: how they will accomplish the tasks, what changes in those files.
problem Good visual design for the use-case required. But there is only a general description of MVC and DRY, there is no mention of how these principles are/will be implemented; And also whether using this in their implementation will help them achieve the desired final result. Advise the authors to remove the generic explanation and add something more in tune with their implementation in their project. Also since the authors have mentioned the DRY principle, they have talked about vaguely how they intend to use this to avoid code duplication.
problem Really well-made diagrams explaining the flow of their implementation. But as these diagrams are not UML diagrams, i.e.the implementation related design is missing. Also, the provided diagrams contain high-level design only which do not provide enough low-level details.
problem The design document is complete with respect to project purpose, design and introduction. However the testing plan needs more details. Maybe they can include the use case diagram and incorporate into testing scenarios.
problem Yes, they have incorporated all of the functionality as described in the requirement document. They have explained in a clear and easy way how they are going to implement those changes and which design principles are they going to use in their project.
problem The explanations are clear and easy to follow. I think that if the authors can elaborate more about the changes then it would be very easy for the reviewers to give them high scores.
problem More detailed explanation needed on modification proposed, also focus more on how to handle the third party api's;
problem needs a test plan
problem The Response_Controller should be able to iterate through a set of rubrics and display them Team table needed to be changed in db also;
problem More explanation can be elaborated on implementation of View and View Scores function as well as how instructor view is different than student;
problem you may want a data flow diagram to show the flow of data in system too.
problem They cover this part by addressing that their future implementation will include model view control design, dry principle, polymorphism and inheritance. Besides, they also consider what functions should be added to controller and view to finish their project.
problem In general, they have a complete design document, which contains introduction, changes to be made, use case and what should be tested. I think they could do better if they just talk more details about the how to test.
problem They provided a clear and good graph to help others to understand.
problem The problem statement is described well but what changes need to be done where is missing
problem Specific changes are not described
problem the authors do not define where and what changes they plan on doing
problem Use case diagram is shown
problem The team has given the good explanation of each topic in the design doc. However, I strongly feel that many bits are missing in the doc. The first and foremost is, they haven't included actual design of their solution in the document. They have mentioned how their proposed changes will appear on the UI, but they haven't mentioned how actually they will implement those.
problem The mockup screens are complete and covering enough details for me. However, I think it would be better to add some UML diagrams to describe use cases to make the whole description more clear.
problem The design doc has mentioned changes needed and the approach the author is going to follow. But there are few design flows that need to be addressed. Such as - The author mentions about the student able to respond more than one advertisement, but in the last project, this functionality was changed so that one student may not be able to request/respond to more than one advertisement at a single point of time. another one is where author mentions about showing up users how have not created advertisement would see students, but i think the list should be shown to all people except the students who have a full team, and the list should contain the student who don't have a team or who has a team but contains only one member
problem Visual aids are given properly about how the UI will look, but a flow diagram about how the functionality will work is missing.
problem UMLs are missing however, Screen mockups are extensively provided. The number of mockups is also a bit too much.
problem No UML Diagrams. Project design not explained thoroughly.
problem Lot of screenshots and less explanation, makes it hard to follow, how exactly the team is planning to implement the project. Also what methods do you want to add/change in which classes is not mentioned.
problem The doc simply has many screenshots but not enough explaination
problem Pretty short description, not enough for understanding
problem The design doc includes the project purpose but it could have been better if it included test cases as well. A lot of edge cases could have been considered like what will happen if- 1) What will happen if a student uses the invitation link to join a Team which already became full as someone else joined the Team using that invitation link. 2)If a student leaves a team, then is he able to see his previous teammates in the available list of students that do not have a complete team and have not created an invitation link. 3)The list of students contains only those students who don't have a team yet or whose team is not yet complete and who have not created an advertisement link. Although what has to be done is included in the design doc, but the way that will be done still needs to be added.
problem Explanations could have been better if the author would have told the way in which they will be proceeding to solve the problem along with what will they be doing. Like the author said that we will be correcting the position of the horn icon but the explanation of how will they be doing this is missing.
problem The author explained what to do, but "How to do that is yet to be added".
problem The designs are reasonable and they use Strategy Design Pattern which is good. Although the new design may increase the response time in some way, it is acceptable.
problem UI test can be performed to validate the validity of mutation test cases
problem it is not clear as to hot they are planning to implement "find heuristics for identifying false positives"
problem Explanation provided only in terms of flow chart
problem 1. The approach plan has been included in the project. 2. The UML diagrams are missing. 3. All the diagrams which are included are relevant. 4. UML diagrams have not been included in the design document. I would recommend you to include them and follow proper standards. 5. All the diagrams are easy to understand.
problem The design document looks complete with detailed project purpose, testing plan and the design. One thing they could talk about is how they would integrate the "HighChart" library in their project.
problem The doc shows the microdata feature developed as OSS project and the nee design proposed on top of that to convert it into vcard and notify the user. It would have been better if the author had picked out important design, structure details and put it in the doc for our understanding, instead of just puting all the links.
problem The documentation is complete with all the necessary details of their plan of implementation. Even though a basic testing plan could have been provided, the write up was still descriptive enough.
problem A use-case diagram and a flow diagram has been provided and a diagram that shows the computation of the composite score. A mockup of the user interface would greatly improve the document. A block diagram mapping out the files to be changed helps too. There is not much difference between the application flow diagram and the use case diagram since both essentially tell me the same thing i.e the sequence of events that will take place. One of the diagrams is redundant.
problem The overall design looks good. I found these deficiencies - 1) There is no test plan 2) There are no mock ups 3) The points under the Requirements heading do not actually describe the requirements, they mention the 'flow' . For example, in the Requirements heading the author has written the following - "1.The user should login as an instructor. 2.The instructor should create an assignment by checking allow self-review option." 1 & 2 are pre-existing functionalities, and are not requirements. Infact, 1 & 2 are steps or part of the flow of a use case. Please change the heading name for better clarity. 4) The 'Files to be modified' section is at the bottom. It should be moved up, and ideally transformed into a block diagram so that any viewer can quickly see whats to be modified in the existing Expertiza application.
problem Everything related to problem statement, design and future implementation has been mentioned properly, just that test plan is missing from the wiki page.
problem Test plan is missing completely. Apart from that, this is a good design document.
problem The most complete design document so far except the test plan. The problem description is properly elaborated along with proper explanation of requirements. Has good amount of diagrams and planned changes. But there should be a test plan.
problem I think this design doc is very complete, because it include description of project, the background information, the objective, and the idea of how to implement and design it. In my opinion, a good design doc is just like this. But I think the author also could improve something, for example, in requirements part, I think there is no need to say that much, because the author did the application flow following, which is the same as the requirement, and more reasonable, I think the requirement part can be delete.
problem The problem statement is not specified accurately. In the sense, they can specify exactly what are the current issues and what they intend to do. Also, the project design is just two sentences. They haven't specified the design of their project> I also do not see any test plan.
problem Testing plan is not included.Otherwise the design document is complete.
problem This wiki has already included project purpos, probelm definition, requirments and design, which covers most of the important parts. However, this wiki fails to provide a testing plan. Therefore, I suggest that you add a testing plan next time.
problem The detailed description is included in the design document, But I have a few suggestions: The problem definition is too short, please provide more detail about that. And the data base is fully implemented.
problem As mentioned, tests are missing completely.
problem The design seems sound, but some explanation towards the impact of calculating the composite score has on the runtime could have been provided.
problem Yes, all the functionality as part of the google doc has been incorporated into the documentation. However, the test plan is missing which is an important part of their project. They could also specify their tasks in detail.
problem The document does not explain what features would be added to what controllers; it only mentions what is to be modified. So I could not determine if the methods are added to a wrong class and/or any kind of impact new code would make to the existing code.
problem The author is trying to mix self review and peer review into 1 module. I would probably try to separate it out. Going back to 'peer review only' should involve as less steps as possible.
problem According to the document, this assignment requires 3 main functionality to be done: 1. It should be possible to see self-review scores juxtaposed with peer-review scores. 2. Then implement a way to combine self-review and peer-review scores to derive a composite score. 3. The author(s) should be required to submit their self-evaluation(s) before seeing the results of their peer evaluations. According to chapter "Requirements", only the first functionality is clearly stated, but it is not clear whether the other two are covered. In the "Application Flow" chapter the 3rd functionality has been implemented in the "Pre conditions". In the "Method to calculate the composite score" chapter the wiki finally mentioned the 2nd functionality. In fact, all the functionalities are covered, but they are not well organized, which make it not clear about what functionalities are designed. Therefore, I suggest that you should modify the content in your "Requirements" chapter, to explicitly mention the oth
problem Most of design are shown in this wiki and fully implemented, which is good. But I hope if they can provide possible file that would be better.
problem I don't think they need to add any methods to any class as this is just an algorithmic design to the problem, In no way would they cause any merge conflicts with the original branch, More focus on design should be there.
problem This wiki provides only the design of functionality, no design of code is provided, so it's impossible to evaluate the quality of the logic design. I suggest that you should add code design for each problem.
problem The changes that the author needs to make is shown by a table to calculate the composite scores based on the self review scores and peer review scores. The calculations seem legitimate. However, if mistakes are made by the reviewers (given wrong rating), it will indirectly reduce the composite score. This could be handled by using the "mode" i.e., the most common rating found in all peer reviews rather than taking the average of the ratings in peer reviews. I might be wrong, but that is what I think would be the best and it would be appreciated if you give it a thought and try with all the permutations and combinations.
problem Explanation looks adequate. However, I found 2 issues - 1) The files to be changed could be mapped out to a block diagram for better comprehension. 2) The document does not mention what functionality has to be added to what source file. Only the sources to be changed have been listed.
problem I think the explanation of current changes are good, it clearly and easy to understand. It's mostly about the design of database, but I think this project also needs some code implementation, I think the author should add this part, and give a good explanations.
problem I find the explanation of the problem lacking in accuracy and detail. They haven't discusses their plan of action and how they want to implement their changes. The logic has been discusses well using the table.
problem This wiki gives clear design of the requirement, and also provides multiple diagrams to support the description. However, the wiki fails to provide explanations on why they designed it this way. I suggest that you should give an explanation for each design.
problem This wiki employs two diagrams and one table to illustrate the functionality design, which helps a lot for the reader to get the idea. There is a little problem with current visual aids: no picture of the page is provided in this wiki to illustrate the effect of the design. I suggest that you should also include some snapshots of the page to enrich your wiki.
problem The design flow look good, but they did not provide us enough detailed information. Try to use UML diagram.
problem The changes proposed are replaced the existing mutation strategy with the newly added mutation strategies. The proposed mutation strategies still lacks exhaustive explanation for newbie to follow.
problem The design pattern seems not sound for just displaying an UML.
problem The design processing is clear, but visual aids is missing. It would be better to add some UML or User Case Analysis.
problem All the important things like Project purpose, design, and its test plan have been thoroughly explained and documented. The project description includes "At present the calibration functionality is limited", which uses calibration, so it will be better to explain calibration first and then use it or explain calibration somewhere else. As calibration is used various times in the description, its explanation seems to be very important.
problem The author has accurately explained where the changes are needed by explicitly specifying the file name which shows they have identified the problem's main cause. But a bit more explanation along with the file specification where changes are to be made could have been more useful.
problem The Visual aids have properly been used but certain images showing the difference in current stage(including problem) and after images(once the proposed solution is implemented) could have been more useful as it makes it easy for the user to exactly identify what is the thing that needs to be changed and how does it appear on the view.
problem The project purpose and design have been briefly explained, although some more information would have made it better like how will a user be assigned a role, whether he will be able to pick it up or some else will be assigning him that role or is it a first come first serve basis where a user who is able to select a role quite early gets the role as it is possible that he may not be the correct fit for the role, or the team members decide together and take on roles the but if this is the case there is no chance of being a conflict in the role of a team member by stating proper test plan which is yet to be added by the author.
problem The documentation seems to be incomplete. Not much details about the design or test plan is shared. No UML diagrams given.
problem The page involves the problem statement and the analysis as well as the test plan, generally it is complete with all the clear structure and adequate content, but in the analysis part they should provide more explanation about the way they did and try to design how they will do to realize those appearance on the page.
problem Looks pretty informative.
problem The design document addresses all the major headings that are necessary.
problem The mockups are good, but it lacks explanation on changes needed to be done in the files.
problem The design document has been started upon very nicely, including a lucid and concise problem statement and how they have planned the changes, screenshots make it easier to follow on which pages they are planning to make changes. But the test plan seems to be just one sentence long for both TDD, UI testing. I think that the team can work on planning their tests and mentioning their approach properly in the design doc. Also I found why team is taking such steps is missing from the document, adding on which the design doc would be better.
problem Project purpose is defined clearly. But the project design and the approach to generate those timestamps is missing.
problem The project purpose are not explained clearly and so does the test plan. I think you should talk more about how you solve the problems with more details.
problem Use case diagram is missing. The test plan needs to be more detailed
problem The design doc looks complete with important aspects related to the project covered, project purpose and future test plan. Couldn't see a detailed design analysis though.
problem Yes, in the design doc, we can see the Problem Statement, Design Analysis, Test Plan, all these sections are necessary. Especially for the UI Testing, the newly added functionality would be tested manually by the UI testing. The time line added should show the deadlines and the recently made changes to the project by reviewer or the author. It should also navigate author to the page he wants through the preview link provided for each stage in timeline.
problem The document involves all required sections. But after giving details on setting up Expertiza, the author has jumped directly to the problem statement. Some background information would have been helpful for understanding. In existing limitations, the very first point says: 1, No support for varying rubric by round feature. it is hard to understand this, as to what rubric they are talking about and why its a limitation. So some background information and explanation on why its a limitation and what is the expectation can be included.
problem The design document is thorough with the problem statement, the proposed design, and the testing plan. However, it does not address the steps that will lead to the change and how are they proposing to work on the desired features.
problem The design doc could have included a separate section for "project purpose", "project design". The test plan section is already present, so that seems in place.
problem The methods and the code that the author plans to add is not available in the design document.
problem UML diagrams are missing
problem The diagrams are okay but I think there are much space to improve.
problem Only screenshots are provided. Use case and UML diagram are missing.
problem No UML diagrams in provided in the design doc, such use case or sequence diagram, but the mockups of screens they provided are pretty well. Especially for the time line design.
problem 2nd and 3rd images are helpful. these images basically explain how the page looks after the graph is integrated. It would have been much better if some matter is added on top of the images. Suggestions: 1. The first image is of no use because it's just a login page. 2. 3rd graph would have better because this graph needs to have due dates, hyperlinks, file uploads. 3. UML diagram explaining how code integrates with each other would be of great help.
problem Mockups are informative. But there are no UML or class diagram.
problem The design document has screenshots for the design analysis but there aren't any UML diagrams to help aid reader understanding.
problem Future view is displayed, but flow of details that will hapen is not given
problem They have provide the graph of UI design in the page about the timestamps part, it is a good design but i really think if that appears in the page will take too much space and seems not compatible with other contents, so I suggest they should make the arrow smaller and maybe narrow the content box just to a line of word and if user want to see the details they can click a link to unfold the content.
problem screenshots have been provided along with the expected change but there is no UML diagram
problem No UML diagrams given.
problem Although Proper diagrams are shown that is supposed to be achieved after the completion of the project, but it could have been better if diagrams of the current problems could have been added(like when the horn icon does not appear), so that it will be easier for the user to understand and comprehend the difference between the two.
problem Introduction is missing Background information not provided on the issue. 1. In Issue 1, what are these links for? It is not clear. Is it for project or assignment or what exactly? 2. In issue 2 what does the color coding represent? Completeness of a review/assignment?
problem The method names the authors wish to modify are missing.
problem 1. The design document has a very good description about the problem requirements. 2. The document does not have any diagrams which show the flow of implementation. 3. There is no information regarding application flow is missing. I would suggest you to include this particular daigram. Because it helps to understand what exactly you are doing in the project. 4. The important use case diagram is missing.
problem 1. The authors have explained the design clearly in the all the sections. 2. The diagrams are always better because they are self explanatory. I would suggest you to include the diagrams. 3. The description is easy to follow and is adequate.
problem 1. The authors have described the problem requirements properly in the requirement specification unit. 2. The authors are clear about the methods and where to add them. 3. The design is simple but again there are no flow diagrams which can explain. 4. I could not find any information regarding the response time of the system in the document. 5. The team should spend more time to analyze each and every requirement and also to make some UML diagrams.
problem Many blank titles have been added to the document without any explanation whatsoever.
problem Only the basic requirements of the project documentation are discussed.
problem The explanation only discussed what is given in the documentation. Some more explanation could have been given towards possible implementation methods which would have made the documentation easily understandable.
problem The design talks very little about the implementation of the project.
problem No Visual aids have been provided to explain project other than the badges the team is going to use.
problem The problem description explains clearly about the feature and it was very easy to follow and understand. However while going through the document I realised that similar content is provided in all the sections like Project description, Problem statement, requirement specification. So the order can be changed to Background, Problem statement, Project requirements and all the above content can split and put in these categories. That way the flow of the document will be nice and easy for readers. In the requirements, the files to be added are mentioned. So those files could have been listed under Files Modified/Added section rather than leaving the section empty.
problem The entire functionality provided in the project description is covered in the document. The author can include the files involved section in the document which was given in the project description.
problem the changes to be made are very well explained. They have split the tasks in various sections which makes it easy to follow. However for certain points, a small explanation can be given below that as to why they are doing this task and why the db needs to be changed or UI needs to be modified for this.
problem The topic says lgithweight badging system but how I am not able to understand how it is lightweight. Because it will take time for all the images to load for the instructor as well as the student. So if the response time should be maintained, you can provide some explanation for that.
problem There is no UML diagram or flowchart provided. The badge icons are included, but where exactly they plan to place the badge in the instructor view and in the student view can be shown by taking a screenshot of existing view and adding these icons or showing arrows for their location. That way it would have been very easy for the reader to understand.
problem Design doc gives us the brief information about what is the requirement of this project but it does not tell us about how team is going to implement those changes. Testing plan is not included in the doc.
problem Design incorporate all the functionalities which are required, but it does not tell us about the testing plan.
problem team has not proposed any changes which they are planning to do. Design doc consists of only requirements, Project description. nothing is mentioned regarding proposed changes.
problem Team has not proposed any major changes that need to be done in this project. So I cant comment on the methods which they want to change in particular class. Design changes explained by team are not complicated. Cant comment on the response time of the system.
problem team has only mentioned the preliminary mocks for the different badges. Except that there are no visual aids in this doc
problem Most of the document is incomplete
problem No functionality written
problem The author hasn't proposed any changes
problem No design proposed
problem no Diagrams included
problem Well the understanding of the project is good but there is no test plan and more importantly the action plan is not clear like what modules and methods need to be changed.
problem More description as to what are modules and methods will be added and why they are needed and maybe a brief of design patterns which improve the design.
problem Badges required are given properly. They can try to add uml diagram of flow diagram to better explain the design plan or action plan.
problem The design document is incomplete. Only the subheading are added. The actual plan of work is not mentioned
problem Design should be refactored to consider the use of existing gems
problem There are no visual aids provided.
problem The details of project purpose and design plans are clearly specified. However, they have not explicitly stated the files that will be modified and testing plan. They can include a class/ UML diagram to represent the relationship and structure of the classes.
problem Most of the functionalities are specified but they are not detailed as in they haven't explained the designing pattern.
problem Explanations are provided but using proper subheadings and diagrams can make it easier for user understanding.
problem Explanations are properly provided but no specific implementation is explained.
problem They have provided the table names but they need to add UML diagrams and a visualization of tables they will create as it becomes easy to follow.
problem I see that the wiki contains the page copied from the projects document page nothing else is added.
problem As mentioned I see no details in wiki, how you implement, Use cases, tests etc
problem I see no changes proposed to tackle the problem
problem Please go through the additional comments to see the expectation of wiki page
problem As mentioned no UML diagrams
problem The author had exactly copy pasted from google doc. So there is nothing much to review. Suggestions: 1. Add a description on top of the page which explains brief background about the project.(project purpose) 2. it seems there are 5 issues in your project. add problem, solution and design for each issue so that it makes easy for the reviewer to review. 3. Some functionalities like "badge should be configurable" can be tested with RSpec. Add a test plan section for each section
problem No design at all mentioned in wiki page. I want to give some suggestions: 1. There are different tables that need to be added. Show a UML diagram how these are related.
problem The wiki does not have any explanation at all. I am trying to give some suggestions. 1. explain your solution clearly in solution section of each issue. 2. add pictures of dummy tables in the design section.
problem 1.No methods are added in wiki at all bu author). My suggestion is also to add code in solution section of each issue so that it will be easy for reviewer to understand the code.(add method(s) to a wrong class 2. Add UML diagrams, Dummy tables, and screenshots so that design won't look complex.(new designs look complicated)
problem the team had copy pasted the images also from google docs which does not seem good at all. As suggested 1. Add dummy tables "badges", "assignment_badges", "awarded_badge". 2. This project has completely new functionality so adding a UML diagram of whole structure will be helpful.
problem There are a few missing sections in the design doc
problem The author finished part of the project and posted it in the design doc, there are some other parts still need to implement, e.g. the file changed, and work completed part.
problem Because the author didn't post their implementation part, so I can't know what they have changed.
problem In this current version, there are no many visual aids available.
problem Files to be modified is remaining
problem Some of the problems could be to elaborate more on number of files to be changed.
problem No UML diagram present
problem Project is described well. Test plan is not complete.
problem The approach seems to be good in terms of DB. UI could be refactored a little
problem No UML or use case diagram or screenshots are provided. Difficult to visualize what is about to be developed
problem the project is a continuation. the current design document does not have much content. so many headings are there but there is no content under them yet maybe because implementation has not started.
problem there is only a preliminary mock used. there could be a flow chart used to make the design more visually appealing
problem -The Wiki page look good, which explains what is the project about -But there are no screenshots -There are no UML diagrams -Didn't describe what files and tables to modify
problem #NAME?
problem -They haven't written much in wiki page, can't judge the overall explanation -The same is present in the google document
problem I appreciate that author has provided the list of the file needs to be modified and provided the details of analysis done by the author. After reading the write-up, though I know the problem and the details of the functions causing the issue, I am still not able to figure out the solution to the problem. For example, update_fnode_children method is one which is causing the issue and needs to be refactored but what exactly needs to be modified and how that will improve the performance. I believe this will be included in next submission.
problem I believe that this part can be better graded as we move ahead and start working on our implementation. Still, if possible now, I will suggest if an author can provide some structure of the code which an author is planning to refactor.
problem Only tree_display/list example has been given. So we are not aware of what functionality is being looked upon in other 3 use cases 2)expertiza.ncsu.edu/review_mapping/response_report 3)expertiza.ncsu.edu/grades/view 4)expertiza.ncsu.edu/users/list
problem The example given tells about the aim but does not cover how exactly they will achieve it. For example, the document just talks about reducing delay, minimizing SQL calls but have they explored if it is really necessary to make those calls or in reality its possible to reduce calls. We are provided no data on that. For now its just being assumed that they can reduce calls.
problem The low score here is only to denote that these changes have not yet been proposed. The team has identified some of the code that will need to be changed, but still needs to decide how exactly the refactoring will be performed.
problem All sections are impressive. Sadly the section of test plan is missing. This project would definitely require an automated test plan.
problem The team has already solved one of the tasks it seems. Yet, the proposed solution for the second task is a bit vague to me. Refactoring of code can happen from various angles. Please mention what exact features you want to refactor in the code snippet present that actually reduces the time time to load the page.
problem The design documents includes the project purpose, project design but is missing the testing section. They should include how the team plans to check the refactored code to check bugs and if any existing functionality breaks by adding this refactoring. Even if there are existing tests present which will automatically check their refactoring, I think they should mention it in the wiki page to clarify.
problem The authors have only mentioned what code they will change, but haven't mentioned the changes they will make, so can't really judge if their work will make the code smelly or violate the DRY principle or things like that,
problem At most places, the visual aids have been used well in the favor of the team, they have explained them well. I felt the explanation of the first visual aid (Flamegraph statistics) could have included more details, it was hard for me to follow. The author could probably have mentioned how the graph is displayed and what the various terms mean.
problem The design doc is quite completeness, structure is plentiful and involved each step of their work, but the weakness is that they did not describe clearly for the task content in the first part of Task Description, reader can not get the main idea of the project at the first glance of the description, btw they should give an explanation about the proprietary words they use otherwise readers will have no idea of that, also they did not include the test plan in their doc.
problem Test plan section missing
problem tmp_res is not an apt variable name
problem The authors have included project purpose as well as project design and described it thoroughly. However, I couldn't find any test plan in the design document. They have proposed a solution however they haven't mentioned how they are going to test it.
problem The authors have incorporated most of the functionalities as mentioned in the requirement document. However they have yet to incorporate test plan in design document as well as UML.
problem The details of the project tasks have been mention well, but no test plan has been shown.
problem Test plan is missing in the wiki page. Project Design is missing in the wiki page. The authors should include these important missing part.
problem Test plan is not given in design doc.
problem The design for the project is missing. They have only stated the problem statement.
problem The author have not detailed out the solution. It would be better if they give more details.
problem The author has not provided any UML diagrams.
problem The approach part explains how they using flamegraph generation method and statistic to identify loading time. However, the most important solution part is skipped, this section needs more specific explanation.
problem The design looks a bit complicated as there is no UML diagram.
problem Some visual aids need to be added to make the doc more understandable.
problem The design doc does not contain any UML diagrams. So it is not easy to understand the design easily.There is no test plan in the design doc.
problem The team has not given any visual aid in terms of a UML, use case diagram or architectural model that would have helped the reviewer to review better.
problem The team has given some thoughts on the list of metrics which can be used, which is appreciatable but could have better explained why they are using it. For example, They can have cited few actual scenarios where the metrics they mentioned are currently in use.
problem The design Doc is almost perfect. The code snippets of the current implementation shows only the model part of execution. They team could have added a section about all the controllers and views that are also going to be effected to change or if they think no changes are to be done on that, even that could have been explained.
problem The team could have added details about their test plan. Also the key concepts of Design principle, Design Patterns though are present in the document needs to be highlighted enough as they are key portions of the design doc. Example: The team could have added them to separate sections or bolded them out.
problem No visual aids used other than code snippets.
problem The code is mentioned however no description is given. SO it is hard to follow.
problem COmplete functionality mentioned in detail. Please mentioned a proposed test plan.
problem The document has been written very well. However, the required submission is mentioned as a wiki page. Please take care of that in future.
problem The purpose and design are stated completely along with the model improvement, but the test plan is missing and hence the document is only partially complete.
problem The author has failed to provide any visual aid with which understanding the project would become easy.
problem I think the in depth analysis is required whether what they are thinking is possible or not. They should provide an example as in if they can reduce SQL calls without affecting the functionality.
problem The authors have presented what methods need to refactored. They have given an overview of what that refactoring will eventually lead to. It would have been easier to understand if the team had explained how that refactoring will lead to the desired results or how they plan to go about it.
problem The project design is missing in the document. The authors have included the proposed solution but it should be more comprehensive rather than just attaching the code snippet.
problem The authors have provided just a very narrow solution. Instead of just attaching the code snippet they should have explained it in more detail.
problem The authors have failed to provide any UML, class diagrams. They have not mentioned the use cases as well. I hope they will soon make the changes in the wiki page.
problem Design proposed is not complicated but a bit broad. The first task states that they found where the problem is, but their approach isn't well explained.
problem It would be more helpful to label and explain further into the FlameGraph;
problem expands further on the approach for solution
problem Checking the spelling, grammar, and UTF-8 encoding may increase the response time of the system, but as the main idea is to improve the experience of the reviewer, it is worthwhile. And maybe there are better ways to realize this.
problem Project design could have been mentioned better
problem Explanations are stated clearly with screenshots. Could have been verbally explained better
problem Visual aids are provided clearly and can be understood easily. Could provide the details of the files to be changed in detail
problem The design document states the problems and expected solutions to them clearly apart from one problem where no text is written after a subheading 'Approach:'. Also, the test plan does not contain detailed information on how to test the implemented functionality.
problem In case of automatically saving text areas, there can be a massive number of transactions per keystroke. So, what approach would be taken to avoid that has not been mentioned.
problem The visual aids provided cater to the screen-responsiveness which is not present currently but will be added by the team. These diagrams are helpful. An additional set of images can be added that show that a form half-filled can be retrieved if accidentally the page is refreshed.
problem The design should be modified by considering usage of exiting gems
problem Missing project purpose.
problem Mockup of screens presented but there's a need for small explanation for the design of each screen like how exactly is the new layout helpful or if the buttons be refactored, then why would it make a difference to user's readability, etc.
problem There is a newly added requirement on the original link "Replace the text area with a rich text editor". Should add that soon to the design doc. Otherwise looks complete.
problem There is a newly added requirement on the original link "Replace the text area with a rich text editor". That is missing. Please take note of that and add to the design doc.
problem There is no UML but otherwise the design doc seems very well. Would make this much more better if a design approach doc is added.
problem The team has provided enough details about their project in the design document. They should just add the design principles section in their design document, especially since their project is not a ruby heavy project thus mentioning what special design principles they will be following.
problem All functionalities have been added by the team.
problem The explanations are very clear. They are straightforward and easy to follow.
problem Since this is a view heavy project, there is not much ruby coding involved. Thus not many new methods, classes are going to be created. The design is good, but there is only one problem. For storing the review beyond the session for a user, the team has proposed a javascript functionality. Since this is a rails app, the team must first try to accomplish the task using a rails gem. Then they can use the javascript as a last resort.
problem Everything else looks in order. However, the writeup is missing the part which describes the project purpose. When that is added, the design doc will be complete.
problem The design doc specifies which files and tables need to be changed and also includes the test plan. It looks good for now.
problem For now, none of the designs look like they would make the code smelly, or the response time might increase. Looks good for now.
problem A couple of images of the badges were included, but no other diagrams like UML diagrams have been used.
problem Only figure showing 'edit' and 'teammate' are shown in the document. No use case/UML diagrams are shown. Adding a flow chart with nodes like "add a badge" and showing actors with permition to access nodes will make the design document more clear.
problem The document could have been formatted in a better way, also does the project involve building only 2 pages? If so, I do not think it is sufficient work for a group of 3-4 people. They have given sufficient explanation regarding purpose but given no design from an implementation perspective. Test plan section is present.
problem The design has considered all the required functionalities. The authors also have explained what exactly needs to be changed, and their plan for accomplishing the said tasks.
problem Mock-ups for badge present, no information of how the code will be implemented, i.e., reusing existing code or completely rewriting. The former is preferred as the latter may lead to smelly code and would involve more rigorous reviews. As a new DB is being added the response will increase, how will this affect User Experience? Thoughts on this would be appreciated.
problem The team could have used additional visual aids to convey their information much more effectively. None of the aforementioned aids were found in the document.
problem The authors have gone through the design document completely and have given the to-do things as is in the requirements document. If they go through the minute details as to how they are implementing it would have been much better.
problem The explanations provided are too abstract and small to follow how the authors are going to implement the changes. They should add more content and explain how they are going to implement it.
problem The team has used very few diagrams and that too of the badges which they are going to implement this semester. They need to add UML diagrams and a visualization of tables they will create as it becomes easy to follow.
problem The design doc includes the appropriate headings but fails to explain how they arrived at what changes they are making in tables and why they chose that design. How they are connected. For someone who has not explored the functionality, it is tough to understand this.
problem The design incorporates many things but they are just straight forward statements which only the team working can understand. A little bit explanation for each point is required. For example :- what exactly the new method do that they are inserting and how they work together to make the functionality work.
problem I feel they should expend more effort in the schema design. I do not understand why they have chosen three tables. According to me, one table should be enough that should be indexed along the reward type and existing tables should be modified to add a column with the boolean variables. Again, they have not explained very weel why they chose this schema, so I might be incorrect there.
problem No diagrams for flow of control or how the classes are related is given. That could be added here.
problem No UML diagrams or expected screenshots on how the badges will look like on the page.
problem Functionality wise the doc covers all the requirements
problem Explanations are properly provided for the proposals. But lack of diagrams make it a little bit non intuitive.
problem Visual aids are completely missing. Screenshots of the webpage with badges is expected.
problem The details of project purpose, design, and testing plans are very clearly stated in the doc. It is easier to understand the purpose of the work, I like the idea of including a section like " Description of the Badges". One suggestion, Since I can see additional classes and models coming in as a part of this project, I will appreciate if an author can include a class diagram to represent the relationship and structure of the classes.
problem Yes, the team has included all the functionalities required to be implemented as a part of the project. I like that author has provided enough details about the models needed to be added as a part of this project. One suggestion, the document shows that some team has already done this project and it was rejected because of some reason. It would be a good idea to include some details about the work done by the other team. Like what was their approach and how things are done differently this time.
problem Author has provided enough details about the proposed changes and I like the idea of the addling one-line description of what changes needed to be done as a part of a modification of each file.
problem Though an author has provided enough details about the changes to be done as a part of this project, and since I can see additional classes and models coming in as a part of this project, I will appreciate if an author can include a class diagram to represent the relationship and structure of the classes.
problem The design doc covers all required parts. However, I think the project design part needs more details. The authors need to give us more details about what kind of code they are going to insert in those files.
problem The design incorporated all of the functionality required. But more details are needed.
problem The authors did not mention the specific implementation. So I cannot know if the new code will make the code smelly or not.
problem Under files to be modified. I think the student view should also be modified. Since the student who receives the badge should also be able to see his badge when he logs in.
problem "In Expertiza students are required to give reviews to the work of other teams." This is wrong since the Good Teammate badge is awarded when one is giving the teammate review, so this line should be removed
problem They have added diagram of the badges.
problem Explanation of why only two why two badges would be created is not documented well, there could be possibility that more badges can be created.
problem Yes according to the design requirements all functionality is incorporated.
problem The heuristics of how the badge will be assigned to the student is not addressed. Is the project only dealing with nomination or will address the issue of assigning the badge.
problem Almost same as requirement document. Nothing much useful is added.
problem It includes all functionalities.
problem It might have performance issues similar to the previous team. No changes are explained clearly.
problem No UML diagram or mockups. The icon does not help in understanding anything.
problem Authors have came up with the good design document with good amount of information regarding their project and design. However, I feel that they could not come up with the actual design. I somehow could not find the difference between the actual problem definition and their design. I found the same information in both of them.
problem The team was able to cover all the functionalities in their design document, and they have done good job in giving attention to details.
problem As I said in the first review comment, I could not actually find the design proposed by the team in the design doc. So I am not able to assess the quality of the design.
problem The team has used visual representation of the badges that they are going to use. However, that does not contribute toward explaining their design. Team has not used any other visual aid. I would encourage the team to use some kind of visual aids for the final submission of the design document.
problem The total design doc is very neat. Good job. But I think this doc lacks the project purpose and project design parts. Whatï¿½Ûªs more, some mockups of screens are wanted here, I recommend you add them to your doc.
problem Yes, all of the functionalities described by mentor are written in this doc. But some explanations are wanted here
problem Changes seem good here. But lacking explanation makes me hard to understand your changes. For example, you can add some comments below your file that you will change.
problem There are some new tables designed in this project, which is reasonable. But I think some methods should be newly added for realizing the badges, which is not mentioned in your doc.
problem Two badge pictures are very good. But UML char, flowchart, mockups of screens and tables are not written in your doc. So It's hard to understand your doc deeply.
problem The design document could also contain a few more details like the system design, use cases, screenshot of the views that are going to be changed, students aspect of badging i.e. where will the badges appear in the student profile.
problem All the functionality required has been covered in the design document.
problem I could not find any design proposed by the team. The files which will be modified have been mentioned, which gives only a little idea about what could be the possible outcome. Example: student_task/list page should mention which page is being referred to, along with a screenshot or a description of how to reach that page.
problem Visual aids present are the badge icons that will appear in the application. However, the UML diagrams, screen mockups are missing from the design document.
problem They have described everything in the design doc very well. They have even explained in detail about their description
problem They could have added screenshots/UML or system design for better understanding to users.
problem They given in detail explanation . about the changes they would propose along with what files they would change.
problem They have even mentioned how they would make changes that would follow DRY principle also no existing gem file could simplify them
problem They could have added the UML diagrams or screenshots to improve the design doc.
problem I see the project purpose in "Problem Statement", project design in "Modified Files" and test plan. Just the name of "Modified Files" should be changed into "files to be modified" since there are no files modified yet I think.
problem I think the team explains the change pretty good. I totally understand what are they going to do.
problem The design document ins complete and includes all the features like test plan, project design, project purpose, possible extentsion. The use case diagram helps us understand the project better. but can mention the files need to be created
problem The document is good but test plan is missing
problem On their wiki webpage, they described the introduction for the background of Expertiza, the definition of the problem, the scope. Next, they mentioned the requirements of their project, the use cases that they will face, the database design they will use, the diagram of classes they designed for implementation, and the design practices for their projects. For me, the completeness of the design doc is great enough.
problem The design docs is great and captures all the changes that need to be done in detail. I however expected to see additional visual aids such as screen shots for the proposed changes, that way I can visualize how the design document implementations look like. Check some formatting issues and fix them. Like this one - The writer clicks the ï¿½ï¿½ï¿½Upload paperï¿½Ûbutton. Remember the space after the close quote mark, and after full stops, commas and so on. Makes a great article.
problem I don't think this design documentation is completed because the only thing I see in this document is use cases of the project. Important topics such as project plan and problem statement are missing in this project. It is difficult to deduce from the use case what the project is all about. The use cases have been written very well.
problem Testing plan is missing or its not mentioned whether its required or not for the project.
problem I think for the current design doc, the use case part is good, it's complete and clearly, but other parts are not as complete as use case, I think the author needs to improve other parts.
problem The authors have done a good job in the project design document but have failed to include testing plan which they can do it before 2nd submission.
problem Testing plan, project design missing
problem There's no test plan.
problem Test plan could also be mentioned.
problem Everything seemed complete, with visual aid supporting your design, requirements are listed. Designing practices are listed, but can be explained in more detail and add some edge cases in this project
problem The team has properly covered design doc but they have failed to provide test plan for their project.
problem All 3 requirements are incorporated in the design documents. However, an improvement could be to write one or two liner descriptions for each.
problem In the requirement section, they gave us some ideas that the problems they are going to face. And next, they gave us some use cases that they might face in this project, and some database designs and class diagram that they will use to deal with the problems they mentioned in the requirement section. However, although with this information, I still have no idea how they are going to implement their solution with these use cases, database designs, and the class diagram for the requirements.
problem In the final project requirement doc, there is a description as follow: There is considerable latitude in designing a UI. Perhaps a particular ï¿½ï¿½ï¿½courseï¿½Û or ï¿½ï¿½ï¿½assignmentï¿½Û should be designated as a classroom or professional activity, or perhaps there should just be a way to select how to submit and how to review. The team and the mentor can discuss this and make a decision. In the design doc, I don't think the author mention it.
problem Yes, this project does incorporate all the functionality as specified in the google document. The use cases cover all these functionalities but there has been no tasks or plan of action specified to let a reviewer know how they are going to go ahead with this project.
problem Problem definition is mentioned well. However the background of the requirements are not in detail as mentioned from the topic list. Review bidding has been moved to E17A7? That point is not clear.
problem requirements can be more specific
problem No changes are proposed. Only the requirements are documented.
problem They gave us lots of information, such as use cases that they might face in this project, and some database designs and class diagram that they will use to deal with the problems they mentioned in the requirement section. However, although with this information, I still have no idea how they are going to implement their solution with these use cases, database designs, and the class diagram for the requirements.
problem There are no explanation given regarding the tasks to be performed. Just by specifying the use cases it is difficult for me to gauge the quality of explanations. I suggest them to add a plan of action and a design component so that they can be more explicit in their documentation.
problem Authors have failed to provide proposed solution, testing plan. The information provided by the authors is not enough to understand the work they intended to do.
problem Actual sample code is not given. The description seems adequate. DRY code to be followed during coding.
problem Need more explanation not just listing 3 steps. When you mention Try not to violate DRY principle, How?
problem The author has not provided the solution that they will use and the test plan
problem Not much information is provided upon the design and thus a proper review can not be provided on the design
problem Currently I do not see any wrong methods added to classes and no code looks smelly. The design is simple and sleek and won't disturb the rest of the project. The class diagram also seems to be compact and will be integrated easily.
problem Nothing is mentioned about the authors plan to add methods, class or change any logic in the code base. They should include these details as soon as possible.
problem No design offered
problem more effort should be expended on the design especially in the designing practices part of the project.
problem Nothing mentioned about changes to the code thet will be done to class methods variables, etc
problem Mockup screens are missing but provided good use case diagram along with class diagram
problem Only database design and class diagram are drawn. An improvement could be to draw data flow or sequence diagram
problem Adequate visual aids, but I still expected screenshots.
problem The link between user login/sign up to upload paper is missing.
problem This question is only based on the class diagram and the use case diagram. The use case diagram has been explained brilliantly. All use cases have been covered. The class diagram is also self-explanatory. However, they could have shown a diagram which indicates the flow of control.
problem UML diagram is descriptive. Static html page could have been created for better aid.
problem The table for contributors has some non-conventional names like Contributor Id and Paper ID. Keep these consistent with Ruby standards and use underscores instead of spaces and keep the type lowercase. A lot of field names have a similar problem, like Name and Description. While I think Rails may actually fix some of these for you during migration, have then presented well in the design document. You have already indicated this in your 'Designing Practices', yet not implemented in your UML.
problem for the current version, the author just talk about the design of database, so there are nothing for specific implementation description, I can't give any advice of it.
problem Compared to the last submission, the completeness of the design doc is great: the write-up contains a short description, the introductions of several terminologies such as Servo, Rust, Web-platform-tests and Mutation Testing, detailed project description such as setup, steps, strategy, execution flow, design pattern and testing. However, there is something I felt they missed, for example, I still don't get what purpose is for this project. Maybe they should put more focuses on the purpose of the project, such as why they need to do this mutation testing? Is it for the performance or for finding bugs? Maybe they should mention about what they can acquire from the mutation testing. That would be a great help for us to understand the goal of their project easily.
problem The changes proposed by the team are proper but more details should have been provided about what exactly will be modified/updated in ï¿½ï¿½ï¿½response/show_calibration_results_for_student.html.erb" to achieve the functionality of displaying multiple expert reviews. This is where the previous team lost points so they should have explicitly talked about this.
problem The authors have provided a gist of what changes will be made to the system, but some more amount of description would be better.
problem the author has mentioned all the changes they are planning to do and also categorized them into refactoring, functionality changes, db related, front-end related and list of files to be modified is exhaustive, but the author can explain a bit more in about the changes and how they are going to implement it, which would have made it better.
problem The author has properly explained the changes that are required to be made in the system but I will still suggest one thing which I did in the previous review as well which I think was very important for a reader to understand and that is "The project description includes "At present the calibration functionality is limited", which uses calibration, so it will be better to explain calibration first and then use it or explain calibration somewhere else. As calibration is used various times in the description, its explanation seems to be crucial for the project".
problem Yes, this doc explains the changes they will make to this system in the tasks involved part. But Some details are wanted here and some expressions should be modified here. It's helpful for reviewer if you can tell us how to change the files you mention roughly. For example, if you want to change the checkbox in the "General" Tab from ï¿½ï¿½ï¿½Calibrated peer-review for training?ï¿½Û to ï¿½ï¿½ï¿½Add expert peer review?ï¿½Û, I think you can write that you prepare to change the name of this tab and change the redirect address of this tab.
problem Yes. In their project, they plan to use MVC and DRY pattern. But in my opinion, there are some other patterns you also need to use. For example, Test Driven Design is a good approach to accomplish your project. If you will use it. It's better to write this in your doc.
problem Very good test plan! All of the features mentioned in the design doc are written in the test plan. This test plan has 3 part, instructor, TA and students, good design. But I think this is not a completed test plan. For example, In the last line of your test plan, you say to test the varying-rubric-by-round feature, I think some detailed steps are needed here. How to test this feature?
problem The test plan seems to be good but it would have been better if edge cases would have been handled as well.
problem 1. The test plan is present and is explained properly by describing each test case. 2. The expected output of the module is very important and the team has included it in the description. 3. Most of the projects follow the template of test plan. I suggest you to put your test cases in a table which makes your test plan complete.
problem I have to say very good job team. You have mockups of screens, UML chart, and process flow chart. These diagrams help me a lot when I'm reviewing. But I suggest that you should add some mockups of Database table you will modify. These mockups of the database tables will help your team to work smoothly. For example, you will change ï¿½ï¿½ï¿½calibrate_toï¿½Û field in the response_map table to ï¿½ï¿½ï¿½expert_review_toï¿½Û. You should draw a new table for the response_map table after changes.
problem The authors have mentioned appropriate principles as well as patterns that they will be using in the project. Design appears to be sound . The authors however didn't mention exactly which pattern is used where.
problem The team have mentioned test plan of action in their design document. Their project doesn't require much testing. Since they have mentioned testing plan then they should present the complete scenarios instead of just action without specifying the actor and object.
problem The design appears sound, but in the design pattern section, the authors only talk about the expertiza follows MVC patterns instead of what their design obeys.
problem Their graphs show the logic and control flow of their modification. I think it would be better if they add some UI stuff like which part they would add the button.
problem I think their test plan covers almost functional part but few edge cases are considered. And I think they'd better describes their test plan more detailed instead of just list what things they'd like to test.
problem The test plan does not contain detailed information on how to test the implemented functionality.
problem the testing approach is clearly defined and has a good description of test data and scenarios being tested.
problem Team has proposed good changes as per my opinion. But, because of the lack of description of implementation details i.e. the details of code modifications, I could not vouch for the soundness of the design.
problem The team has given the good explanation of each topic in the design doc. They have included use case diagram which adds to it. However, I feel that many things are missing in the doc. The most important, they haven't included actual design of their solution in the document. They have mentioned how their proposed changes will appear on the UI, but they haven't mentioned how actually they will implement those.
problem Team has written through test plan, which will test all the functionalities mentioned in the problem statement. Also the test cases which they have written aren't shallow, it will actually test the functionality. However, I feel that they have mentioned all the test cases under edge case, which is not the case. Some of them (e.g. 3,5,6,8,9) are normal test cases which does not test the edge case scenarios of the system. So they should have different sections to accommodate such cases.
problem 1. The document is simple and it is easy to understand. 2. The issue statements and the approach followed section has the complete information about how the team will be implementing the project. 3. The document includes the images of the design as well mainly the graphs. This makes the design simple. 4. I suggest you to include UML diagrams which are very important part of the design phase.
problem 1. The mocks which has been included are really good and those diagrams describe the changes to be made to view. 2. The UML diagrams might have explained the functionalities implementation. 3.I suggest you to include atlas one UML diagram which shows your project design in detail.
problem The test plan is clearly stated for all the six issues. But the team can add more edge cases to the test plan.
problem They have provided a lot of diagrams but have not provided any mock of how the website will look after the changes they will make.
problem Section "Approach to be followed to fix the issues" could be changed to "Implementation Plan"
problem Update: Suggestion not considered One workflow is mentioned, however, given the problem statement each scenario can be converted into a sequence diagram to better represent the sub-problems
problem Yes, they have explained what changes are supposed to be made and what issues they are to work on.But as stated last time, the files on which the team has worked on or will work on has not been mentioned.
problem It has all the necessary details along with the diagrams for explanation. Apart from that it starts with the issues and approach of explaining how they will be solves. They have mentioned that in which files they will be doing changes but, they have not actually mentioned they what changes they will be doing.
problem The function changes are mentioned well but not the code changes
problem The scrrenshots are provided but the UML diagrams would be more helpful in understanding the system and project
problem A bit more explanation related to file changes and possible method changes should have been provided for better understanding
problem I think the authors need to give us more details about what kind of design they are going to follow. They have only included the higher level of what files will be modified and the problem statement but there are specifics about the design. They just included one uml diagram but no explanations provided.
problem Design looks good based on the diagrams but not sure about the pattern used as not mentioned in the document
problem They use a flow diagram to show their design but as they donï¿½Ûªt provide any explanation, it hard to judge.
problem Not much detailed. There are not much information about the design pattern. They have included the higher level details about the problem and what they will modify.,but not why and how.
problem They have included few uml digrams about how they will proceed with the design and execution flow but since no details are provided as explanation it is inadequate.
problem I think the authors has used two proper diagram to show their ideas. However, they should provide some UI diagrams to show their results.
problem The diagram in the design doc are well done, but there are more diagram needed.
problem They have mentioned the files that they will be testing but not the test cases scenarios and also no mention about how they will handle the edge test cases.
problem Just describing the test plan in word, it is better to add screenshots.
problem The author has explained the changes made to the system but a more brief explanation would have been better as compared to only one line description.
problem Test cases have been showcased but edge cases still need to be considered.
problem The authors have explained the changes to be made adequately.Overall the design document for the project is good, it contains satisfactory project purpose and design. But the design portion lacks UML design. Test plan is very basic with no explanation backing them.
problem In the previous it was suggested to the authors that the test plan be more detailed, unfortunately the test plan hasn't been modified and seem very shallow.
problem Would prefer to point out where change would be made in code sample
problem explain polymorphism and inheritance - where would they be used
problem Would be better if logic behind the review can be expanded further, like expanding on how student and instructor views would be different on UI side. picture snippets would be great.
problem Some snippets would be great to demonstrate the visual differentiation between student and instructor sides.
problem Would prefer some more testing explanation for each of the tests refered such us what to use for testing specific case and how to go about it.
problem provide more detail would be better
problem Didnt mention what is the current problem that they are trying to solve or trying to create a new feature. jjust mentioned the changes to be implemented . THere is no design related content. no uml diagram like flow diagram. Also didnt provided any sample code changes that need to be made.
problem There is no design mentioned just mentioned the design principles to be followed.
problem Just mentioned the design principles needed to be followed
problem Provided detailed use case diagrams but no design diagrams like data flow diagram.
problem they just added what to be tested. but there is no manual test plan or automated test cases.
problem class diagram is missing
problem no classes are given in which the changes are to be prepared
problem The use case diagrams is great, but class diagram is missing
problem Briefly explained test plans, could have given the steps in a better way
problem The authors have done very well in explaining the project
problem screenshots have been included in the design document to ensure that the viewer can note where exactly the change will show. no flowcharts are used because that would not be required.
problem there is no test plan
problem 1. Previously, the definition of calibration was vague. Now it has been explained clearly. 2. The changes have been listed as points with implementation strategies. 3. Not mentioned which .rb files will be added/modified in the program.
problem Specification 1 is not clear.Not sure what "All all pending test related with the calibration function" means. Please be more specific.
problem "Task Description" section is redundant. Already been explained above.
problem The design has not been explained in terms of the logic involved.
problem Only edge cases have been mentioned. Some of the visualizations mentioned in the planned changes can be used to depict the tests in test plan.
problem The test plan was missing last time, but now a complete detailed test plan is in place. The problem description is properly elaborated along with proper explanation of requirements. Has good amount of diagrams and planned changes.
problem I think this design doc is very complete, because it include description of project, the background information, the objective, and the idea of how to implement and design it. To explain the changes to be made, the author gives the overall description, Files to be modified, etc. That's part is clearly and resonable. But I think the author also could improve something, for example, in requirements part, I think there is no need to say that much, because the author did the application flow following, which is the same as the requirement, and more reasonable, I think the requirement part can be delete.
problem Very well explained document clearly specifying the current issues and the overall system description and the changes they plan to make. Maybe the purpose section of this project could be touched upon a bit more.
problem The design appears to be sound. I found scope for minor improvements - In the Design Pattern section MVC has been mentioned as a pattern. Here it would have been helpful to mention what source files are changed in each layer. The 'Code Modification' section mentions the source files. Both these sections could have been combined. The 'Files to be modified' and 'Code modifications' sections contain duplicate data.
problem The design appears sound, the explanations, use case diagrams and design patterns being used are explained properly.
problem yes the design seems perfect for the requirements.Proper use of patterns and approaches is shown.
problem I am a little concerned about mixing peer review and self review in 1 module.
problem I don't think this design doc is simple, I think in this design doc, the author could add more screen shot about the whole project, it will help reader understand the project, in this current version, there are too many description and no some important screen shots, for me, when I read this design doc first time, I met some problems of understand.
problem From the description and diagram, I didn't find anything redundant, and the function design is as simple as possible. But, since this wiki doesn't provide any design on the code implementation, I can't tell whether the code design is as simple as possible. I suggest that you should provide your code design for each function design so I can determine whether your logic design is as simple as possible.
problem The sequence of steps have been illustrated well and the mock ups help understand the design better. As stated in my previous review, the block diagram highlighting each modified component is not provided.
problem Use case diagram mixes use cases and components block diagram. Instead of showing database, should have mentioned 'Save',
problem Great use case diagram with appropriate information regarding use cases and actors have been employed. The flow chart seems very intuitive as well. However, a class diagram would be great too.
problem This wiki provided two figures of the page, which clearly describes the effect. It's clear the summary report for assignment has been improved. It also employs two diagrams and one table to illustrate the functionality design, which helps a lot for the reader to understand the changes on the function. But all the diagrams only describes the function, no diagram on the code is provided. I suggest that you should also provide some UML diagrams to describe your code design. For example a class diagram is useful in describing your code architecture, a sequence diagram could better describe the logic sequence for the student and instructor's application flow.
problem The test plan is comprehensive and consists of test cases with preconditions, testing steps and expected results. However, the testing methodology, and framework details should be added.
problem The team has made an excellent attempt at formulating test cases, but the author could have went with few test scenarios first to avoid making it seems too few.
problem In this design doc, there is no a part named "test plan", but in the final part, the author gives the test cases of this project. In this part, the author gives the different cases of testing the functionality of the self-review after modification. I think this part is enough to describe the test plan of author, but as an advice, I think the author can add the test plan plan for stating the test plan more clearly.
problem Only the file the team aims to use for testing is provided. No test cases are given.
problem The changes are very well explained using appropriate mockup screens. Few things are not clear, are the badges awarded automatically to the student/team once their score reaches the threshold or the instructor has to manually assign? Does the individual badge also appear along with the badge that the team earned?
problem There is no design section or plan in the document. They have explained the changes to be made but what is the principle followed is not explained. It has to be MVC.
problem The design appears to be simple: once the badges are created and activated for an assignment, they will appear/will set by the instructor for each student or team. But how the team and student isolation is brought out, if the DB migration is going to exhaustive because for every assignment there is now a new modification. So this can make it complicated.
problem There are lot of mockup screens showing the delta between the current display and the proposed display which helps in understanding clearly the changes to be implemented. However, a use case diagram/class diagram would have been helpful in understanding from design perspective Like for instructor and student, what are the use cases and roles.
problem There are no test cases listed in the test section. It is mentioned that they will add it. Based on the functionality, for now they can add tests like, checking if the the badge is activated for the student once the instructor provides it. Checking the rendered output for every action like - activation, viewing the page where badges are to be displayed etc
problem test plan is missing
problem Maybe more explanation is needed around test plans
problem I could not actually find the design proposed by the team in the design doc. They have mentioned that in which files they will be doing changes but, they have not actually mentioned they what changes they will be doing or what patterns they will be using.
problem The screenshots are given but it would be more helpful if they had provided UML diagrams of the system.
problem They have mentioned the test plan but have not really commented on what functionalities will be covered in the test plan
problem The details of project purpose and design plans are clearly specified. They have included the modified files and the screenshots of how the functionalities implemented are different from existing one. However, they could include more details about the design pattern and explain them with help of UML diagrams.
problem The functionalities are properly specified but more details about why this design pattern is being followed or that why they have modified these files or design strategy could be given.
problem No details about why and how this design pattern are interpretable.
problem They have provided screenshots of the functionalities being implemented and how they are different from the existing functionality. But no class diagrams or use case diagrams are provided for explanation of the designing strategy.
problem Although not all the edge test cases are included like what happens when some students did not receive a badge at 94 marks. And after that, the instructor updates the threshold to say 92. But they have properly included the simple scenario test cases for each modified file.
problem I do not see any design pattern, but the design implementation is mentioned in project description. Please include MVC design pattern if it is your design pattern.
problem The design is mentioned in project description. But i think it can be shifted to separate heading with more details included. That would make it more meaningful and easier to read.
problem There is no test plan but the team mentioned the test file to be created and also cited that more information will be included as the project progress
problem Good: 1.Introduction on top of the page is very good. I am able to understand the project clearly. 2."Preliminary Mocks" section is very good and very easy to understand. Suggestions: 1.In Project Requirements section more matter can be added to each issue.
problem Good: Tables information is good. Wiki explained each table clearly. Suggestions: The user can keep separate design section for each issue so that they can be easily tracked. Now its almost difficult to see where they are.
problem Good: 1.Adding badges in "Assignment Participants " section seems easy good. Suggestions: As already said please add "design" section for each issue to track easily design for each issue.
problem Visually the page is best. Wiki explained everything in sequential order. Good: 1.Add dummy tables "badges", "assignment_badges", "awarded_badge". 2. Screenshots are also very clear. They are very easy to follow. Suggestions: 1. UML diagram can be added to some issues so that design can be easily understood.
problem They do have before and after photos and the images of the tables but it lacks software design diagrams.
problem In the file modified part, the author listed all the files changed, which is complete, but I think the author could improve it with some screen shots and comments, which will be better.
problem I think this doc is simple, but I think it still needs to be more completed, for example, the author maybe add some figures and diagrams for simplier understanding to reader.
problem I think in this the use of visualization is the most urgent part the author needs to improve, a good figure or diagram can help reader a lot and give a more clear and accurate understandting of project.
problem In the Test part of the doc, it only inlcude one line description, but the author said the more specific test plan will be showed in the development process.
problem More visualizations could have been used.
problem No test plan
problem No UML or class diagram is provided. Since it is the implementation of a functionality, there should be a separate class diagram as such. However, the screenshots are meaningful
problem The test file that will be changed is only mentioned. However, the test plan is not explained completely
problem -Wiki page looks good but could have included more description about the solution -All the descriptions are about the screenshots or the table. Suggestion: -Try adding description about the approach
problem -Design is very clear and easily understandable with all those images. -It is the most simple design a team can go with -Looks very simple not at all complex to a naive user Suggestion: -Don't put too much of spaces between lines, try removing them
problem -Team have included they will be implementing test plan but it has not yet been included in the wiki. -Test plan section looks empty. Suggestion: -Write some thing in the test plan section in the wiki
problem 1. The design document has an adequate description about the problem requirements. 2. The document does not have any diagrams which show the flow of implementation. 3. There is no information regarding application flow. The description is adequate enough which explains the changes to b made to the system. But the diagrams would have been better. 4.I would suggest you to include this particular daigram. Because it helps to understand what exactly you are doing in the project. 4. The important use case diagram is missing.
problem 1. The authors have explained the design clearly in the all the sections. 2. The diagrams are always better because they are self explanatory. I would suggest you to include the diagrams. 3. The description is as simple as possible and easy to follow..
problem 1. The team has included the preliminary mocks which are good. 2. The team has not included the UML diagrams which is very important is design phase of the project. 3. There is lot of description about files to be modified, user interface to be changed and methods to be implemented. 4. It is always better to explain your design in diagrams which will help to understand the flow of the application.
problem 1. The team has mentioned about the testing and is not adequate. 2. The team has also mentioned that more information will be added as the project progresses. But the design phase testing plan is important. 3. The test plan of design phase and the overall project always changes. 4. I suggest you to include the test case plan of the design phase. 5. It is mentioned that the tests will really check the modifications made to the project. But it is not clear.
problem The general approach for addressing the project requirements is effectively described. I am grading "4" here is due to the fact that it is unclear from the Wiki alone whether the proposed fixes apply to all four of the pages listed in the project requirements, or only the first one. If the fix applies to all the pages, a note saying as much would be helpful. If there are additional fixes needed for the other pages, then similar information should be included for those pages. Also, more detailed explanations for the proposed changes would be helpful as the project progresses, but I understand that this information may not be known yet. The "Proposed Solution" section is adequate for now.
problem The problem statement portion states just a few lines without elaboration. Its hard to know what exactly is the issue in the system.
problem The design approach needs more explanation like what is mini profiler, how will it help the team, significance of the flamegraph.
problem It does appear complicated to me because there's less explanation and more codes in the document.
problem I dont see much change in visualizations from the last review, like I has mentioned the visuals are good but don't really click with someone reading the doc up as different components of the visuals havent been explained well. This part still needs some reworking.
problem Yes the design includes the test plan and looks sound. They have added how they are gonna test whether the changes have made an effect or not. Would have been better if they also mentioned how they will check if their changes will break the existing functionality or not.
problem Yes, Visualization are good enough to explain everything. However class diagrams are still missing.
problem The design appears to be sound, the team did mention about he principles and design pattern that they are going to implement however they didn't include exactly what changes they think would need that design pattern.
problem The authors have failed to provide any UML diagrams including class diagram, user case diagram for describing the changes to be made to the system. If possible kindly add those missing things to the wiki page.
problem The author has described it very well. It mainly is performance improvements. Although they have given that they need to reduce number of SQL calls, they have not given insight into how they are going to do it.
problem The author doesn't mention what design pattern or principles they are followed.
problem No appropriate class diagram is added, there are lots of screenshots instead, but those screenshots are not helpful for a design doc.
problem The required visualizations are there. However, a bonus point could be for showing how the classes are related that they are looking to modify.
problem The changes that have been made to the system have only been mentioned but they haven't been explained. The author fails to explain why they refactored the code like they did and why it creates a change. I couldn't really understand what the code meant.
problem Please see the notes on the previous review about cropping and highlighting some of the screenshots for readability. Otherwise very effective use of visualizations.
problem The authors should be more thorough with explaining the changes to be made to the system. Instead of just attaching the code snippets the authors should focus more on explaining it.
problem The authors have done a decent job in explaining the identification of pages using flame graph, miniprofiler statistics, but it becomes bit difficult to understand these technical slangs for naive users.
problem Authors have provided the Test Plan but I didn't find it much comprehensive, the project looks very critical, hence the authors should really work on providing the edge cases and extensive testing.
problem There are certain screenshots which help to understand the project a bit better but there are no diagrams innovated as such to help visualize the proposed solutions better.
problem More automated test cases can be included . Little more description of the test plans needed.
problem The design is simple and very clear but I was wondering if we can put some more details about the refactoring of the classes impacting the performance. For example, children_node_ng action is the one impacting the performance so we can more how this action is impacting the performance and how refactoring the mentioned methods will improve the performance.
problem It would be better if some more explanation on optimization part of design analysis.
problem Give some automated testing also, I am sure there are plenty automated testing tools for network performance testing
problem Activity diagram could be included.
problem The authors use two long paragraph to introduce their project design, it would be better if essential processes are extracted and listed as steps
problem They have test plan in the wiki and it is all of manual test.I suggest that you could try to use RSpec to test the funtions.
problem Though the approach is stated, the changes to the system are not explained clearly.
problem Test plan is explained to some extent. However, it could be explained in more detail considering edge cases
problem The design principles section is missing in the design doc. This section should be included explaining the patterns they will follow in their implementation.
problem The design has considered all the required functionalities. The authors also have explained what exactly needs to be changed, and their plan for accomplishing the said tasks. But the authors should have given a low-level design of which components in the expertiza system will be affected.The project makes no mention of any particular principles or pattern being applicable to their project, any comments on this should have been incorporated into this.
problem The authors have mentioned which files their changes would be incorporated in and have given minimal explanation for each of them respectively.
problem The authors have added the Use-case diagram which was missing in the previous round of reviews, once again have failed to visually depict schema changes to the DB and UML diagrams of class where code would be added.
problem It was suggested to the author to provide a more detailed test plan so as to better gauge how effiectively they would be testing the new code, but unfortunately only minor changes were observed. Although they mention tests pertaining to their core functionality/UX, overall test plan has to be classified as shallow. Additionally as a new DB is being added the response will increase, how will this affect User Experience? Thoughts on this would be appreciated.
problem The authors have explained the changes that need to be made to the system but they haven't explained them in a lot of details. They should describe the code as well as the pattern they think would mostly suit in their project.
problem The team has not mentioned the pattern and principle they are going to use to implement their project. They have however studied the requirement document and know the changes that need to be made in the system.
problem The test plans are present however they are not too helpful to completely understand or test the functionalities. They should include checks to the database changes as well.
problem The changes are just said.! No explanation why the changes are being made and why those components have been chosen. For instance, they should have explained why they are creating three tables and if the design is normalized or not. I am still not able to get why they require 3 tables and why not it can be done in 2. I maybe wrong but no explanation exists whats the functionality of making 3 tables.
problem They could have shown where exactly they are trying to put up the badge. Also, the use case diagram has some mistakes- For instance, the 2 use cases for student and instructor to view badges is one directional. It seems as if the database is initiating the functionality. Improvement is needed in the effort spent.
problem Test plan is not upto mark. They are pretty much testing the simple scenarios. Test plan should contain a lot of edge cases for their project. For example, what happens when some students did not receive a badge at 94 marks. And after that, the instructor updates the threshold to say 92. Will there be a job running to update the students who should now get the badge. There are lot of edge cases and this is just one of them. Lot of improvement needed.
problem There is no mention of any design principles.
problem Use case diagram is clear but there is no proper data flow visualization present
problem Very high level description on test plan. Need to go into more details.
problem The design is simple and very clear. I appreciate that author has provided few details about what changes need to be done in different files rather than just providing the names of the files to be modified. This makes the design more clear when the reader tries to understand the changes to be done in each file.
problem No class diagrams, just a flow chart depicting the flow. should have made separate flow chart for student and instructor and separate chart for different scenarios i.e., for the 2 badges
problem As I said in the first review comment, I could not actually find the design proposed by the team in the design doc. They have mentioned that in which files they will be doing changes but, they have not actually mentioned they what changes they will be doing. So it is difficult to understand whether the design is simple or not.
problem They have added the use case diagram into their design document, which aids very much in the explaining their design.
problem The way they design their project and modify the files are reasonable, which is easy to follow. But in the doc, they don't say what design pattern they will use. I recommend you to add a part called design pattern, describing the design approaches you use. For example, you will use MVC frame and TDD, you should mention them in your doc.
problem The use case diagram has been included in the design document. However, I could not see the screenshots or mocks of how the UI will appear. A little description about the screen where the changes would be reflected, gives a better understanding of the functionality. An insight into how Credly is been integrated or used to implement badging would have been a better approach to clearly explain the changes.
problem The features to be added is written well. But the exact changes which need to be done can be explained more.
problem I don't see any patterns being used. It might not be applicable also. The design is missing the how the new change embeds with the existing DB entities or ruby classes. Existing things are not considered properly during the design. Missing design for Good teammate badge.
problem Use case diagram is good. But the class diagram or ER diagram with the entities involved is missing.
problem UML diagram and badger pictures are drawn in the design doc, very good job. But I suggest you guys draw some mockups of screens and database tables in your design doc. There are some reasons. First, mockups are the best reference if you write the test plan and use TDD approach. Then, Mockups can help you and your teammates to understand your project better and low the risks of making mistakes when developing.
problem They have explained the files to be modified but they have not explained the existing implementation and how the changes would improve the implementation.
problem They have included a new section tables to be modified in the wiki page which makes the implementation more intuitive. But I could not find any appropriate patterns usage.
problem Inclusion of the badges is a nice touch in the wiki page but they could have added screenshots of how the current application looks like or screenshots explaining where the badges would appear.
problem They have included the test plan but a more detailed test plan could have been written along with some edge cases if possible.
problem The wiki page summarizes the issue that though the instructor can see the submission records of students currently as a table for each assignment, student can't see the time stamps of submissions and deadlines of the assignment easily. The Use Case Diagram is really clear to understand. However, in the Design Analysis section, I think it's better to put the design in the picture showing changed view instead of screenshots.
problem The diagram is of good design which clearly explains the design. But in Design Analysis section, you could do some modification on the screenshots to show the change . It will be better.
problem Most of the explanation has been done through visual cues. I was expecting some more textual based explanation because using visual aid I am only able to understand UI changes or UML Diagrams but now understanding the tasks that the team would accomplish to make these changes. Apart from that, very well documented.
problem The authors seriously needs to work on the design document, the authors have not provided any details about the changes to be made to the system. They have only provided the code snippet. How will the reviewer understand the reason these change needs to be there?
problem Authors have given a sufficient explaination to understand the project. However more details would be welcome, like the meaning of the "role" id in the usercontroller
problem I do not see much explanation in your wiki. I only see list of requirements. Try to add some idea on what approach that you are planning to use.
problem They need to add more explanation, because in their wiki, they just told us what they will do, however, we need more information about why they will do that, which can help readers to understand their whole work.
problem Because their project involved the front-end and the back-end, they use MVC framework here to separate the functionalities of models, views, and controllers, which is a nice design. And they are going to use the standard naming convention for variables and methods, which is also useful for maintaining the project afterward. And they are going to apply "Do not Repeat Yourself (DRY)" principle, which is also good for keeping the functionalities for themselves and other developers in the future. Although they are not going to use some fancy design pattern, such as the strategy design pattern. However, sometimes a simple idea is better than a fancy idea. But I found that they didn't mention the model part in their write-up, which is in charge of communicating with the database. It seems that they put too many jobs in the controllers, but some of jobs should be done in the models.
problem In all, I think this design doc is sound and follow appropriate principles, but in this design doc, I didn't see the design pattern used in this project, I think the author needs to add this part, with the illustration of design pattern used in this projcet, reader can get more clearly and accurate understanding of the jobs the author have done and check if these changes meet the appropriate design patterns.
problem Yes, the design does follow the appropriate design patterns and uses proper convention. They have only stated what kind of patterns they are going to use. They haven't mentioned the way in which these patterns would be implemented.
problem In the designing practices section, they only mention that they will use MVC, DIY, but we need the explanation and reason to prove that these principles is appropriate.
problem Expaination of the design patterns would be appreciated. Design appears to be sound
problem The design proposed is in line with the problem statement mentioned. Specific algorithm changes to be done for the bidding as mentioned in the project overview not mentioned however I assume it was taken over by another team.
problem The design has been explained in detail, however there is a designing practices section that just lists down the standard design practices. The authors could improve it by explaining in each point, how they will implement that practice. Example, they could explain how they're not violating the DRY principle. As for the simplicity, it is as simple as it can get.
problem I think for this part, the author did a good job, in the design doc, the author added many figure to help reader understanding the project, when I read this design doc, these figures help me a lot, I just follow the screen shots the author provided and do the same as the use case mentioned. I think this design doc is friendly for reader.
problem The Use Cases are easy to understand. However in the use cases, nothing is mentioned about the Reviewer.
problem would be great if mentioned about the automatic testing as well
problem The test plan talks about automated tests, but then goes on and talks about 2 manual testing scenarios. Details for automation test cases are missing. If the team does not plan on writing automated test cases, then it should be mentioned in the documentation. Otherwise, the team should provide more details about the test plan for automated test cases.
problem The test plan only described what events they are going to test, such as when users publish papers or users edit the attributes of papers. However, what I expect to see is what kind of tests they are going to implement, such as integration tests or unit tests. For the unit tests, what units and what corner cases they are going to test. For the integration tests, what controllers and what the flow of usage they are going to check. If they can mention these details more, this part will be easier for reviewers to understand their idea.
problem The test plan is not comprehensive as it does not describe the tests or the framework to be used. The test plan just explains what is to be tested without actually specifying how to test. I expected to see at least mock-up code for the testing and the test framework to be used.
problem Yes, I found this test part in the final of the design doc, but I don't think this test plan is complete enough, the author just brifely introduce some plans. I think the author needs to improve it, for example, can list some pre-conditions and expected result.
problem I am not very convinced with the test plan for this project as it is a very shallow test plan. They haven't mentioned how to implement these tests and what the test cases will uncover. They need to follow a specific testing pattern to write these tests.
problem The authors have included the test plan stating the automated tests they are going to implement, but I find them bit shallow. It's a very generalized test plan, they should provide the edge cases which they need to test and if it's gonna impact the implementation.
problem They have described their test for UI but omitted the test plan for the methods to be written. I think it will be better if they can include the automated test plan.
problem Nothing is mentioned about automated tests.
problem Test plan is mentioned on how to do it manually. No scope for automated cases? If so please mention a sample case
problem I think your need to add what your are planning to do with your project not what the page can do or that steps to get there. You need to add the steps for your future project.
problem Test plan is added which was previously not there. They have explained the test case that must be satisfied.
problem Yes, they added test plan in their wiki, but this part is not clear enough. They mention what they will test in the future, it is good. But they should add some example or demo of their code or pending test.
problem All code seems to follow good RoR Design practices, as described in class and in the online lectures. There does not seem to be server-side validation of many user actions, however.
problem The interface is straightforward, but has several form fields that are extremely particular and do not accept valid entries, often emptying the form on errors. For example, the LinkedIn profile field would not accept my (the reviewer) LinkedIn url as valid, and kept clearing the form every time.
problem follows the good practices that I am aware of. The views don't contain much ruby code (other than a few collects), the models perform the validations for the data types, and the controllers implement all the CRUD functionalities. The naming of a few files (mainly the application_tracking) files doesn't seem 100% accurate as they perform more than just application tracking methods. Very well done though
problem 1. The code was written following good Ruby and Rails coding practices 2. There were lack of comments in the code, which is necessary for a new person reviewing the code base. For example in the companies controller, some amount of comments for each of the GET/PUT/POST methods would have been useful.
problem The proper naming convention i.e snake case for naming symbols, methods, variables and Camel case for classes has been used. In the models eg-Application model and other models used, the in-built DSLÂ Rake methods such as validate, have been written without parentheses. The code is clear to read and self explanatory which doesn't necessitate comments. There is a controller named as ApplicationTrackingSystemController. It violates the Ruby way of naming classes on nouns eg:-Â ApplicationsController, CompaniesController, JobController etc. The name ApplicationTrackingSystemController is the functionality of the entire app and doesn't illustrate the function of the class. Single line definitions can be adapted for empty methods eg- In the show method of jobs_controller. The method can be defined as def show; end In the Users Controller, there is a statement "puts Viewing all users". This statement can be displayed in the vie for the index method, thus clearly separating the r
problem It follows the best practices to the best of my own knowledge. I see most of the functionality its stored within the models, and the views do not perform business logic. The controllers implement the CRUD functionality required.Â Models contain validation fields and the errors returned are succinct and inform the user of how to correct their forms. To improve maybe add a password confirmation field in your /users/new functionality. Also include a method of preventing non-logged in people from accessing portions of the site they should not be able to. For instance I can visit the site while logged out and simply type /jobs and view all open jobs as a non-user.
problem Your code looks great on GitHub!Â Most of the models, controllers, and views are setup similar to the scaffold build in RubyMine.Â One thing that I would recommend doing is either in your GitHub commit messages, your ReadME file or in your code, you should document any Ruby files that act as helpers to other Ruby files.Â For instance, try documenting any Ruby files that work with the gem Devise.Â I am not familiar with this gem and some documentation on why is it used would be helpful for me or any other reviewer to understand your thinking process for this project.
problem I think they did an excellent job especially they thoroughly completed the authorizations of controllers by using "before_action" But there're still a few flaws: 1.there is no validation for company attributes except for company name. 2.In user model, user should not "belong_to" company because a user can be a job seeker who doesn't have such a foreign key. (you may add "optional: true" to "belong_to :company") Â 3.In the partial "_form.html.erb" of user view, the company selection field will be shown in both recruiter and job seeker signup view and make choosing a company mandatory. (you may create a radio button for selecting role and a if statement before company selection field)
problem Code is clear and easy to follow. Use of enums for types in model would make it easier to update in the future and easier to use throughout the application.
problem The interface is simple and intuitive while there is not much information in README.
problem You all have done a good job following the "good Ruby and Rails coding practices". It looks like all of your major components were built using a rails scaffold, which is good because it helps to organize the code in a good "ruby on rails" way.Â You also did a good job following all of the ruby on rails style guidelines such as using "each" were it is appropriate over "for", and using 2 space indentation.Â Â I have taken one star off though because you did not comment all of your code very well.Â Specifically the models could use with some documentation.Â For example, "app/models/company.rb" has no documentation.Â While it isn't necessarily a difficult to understand file with only 4 lines of code, it would still be helpful for anyone working on the project say in the future to know exactly what the model is used for.Â It could be adding something simple such as a small inline comment explaining what the validation is for, and what the model is used for as a whole.
problem Easy to follow and use the user interface here. I like the big jumbotron approach. Also the table views for indexing having lines delimiting the columns and rows makes it easier to read. I would maybe see if you change the "been clicked" color of the links in the home page. It becomes hard to read them. Or maybe change the color of the background, either way.
problem The app is deployed on Heroku platform. The README file contains the login credentials of the admin. The app is simple to use and the flow of views comes naturally without having to search all over the place. I appreciate the optimistic "Find your Dream Job, guaranteed!" message at the welcome page and also the Help prompt.Â The Home and Logout button are available on all pages and thus making navigation easy for the user. also,the password authentication is much like the ones that most websites use.One suggestion would be to keep the Log-In and Sign-Up links next to each other just as a matter of convenience.The README file also instructs the user to run rails db:seed to initialize admin details. I was able to correctly login in as admin so you might want to edit that line from the file.
problem 1. Yes, the user Interface is easy to use. 2. The "sign up with Google " functionality does nit seem to be working 3. The steps written in ReadMe were not enough. A new reviewer may find it difficult to test all the functionality sparsely written ReadMe file
problem The user interface looks very nice and it's easy to use.Â Â I also appreciate the Admin details in the README file so that I can log in as an Admin.Â There are a couple of things that I noticed that you should consider fixing.Â First, when I check the "Sign Up Now!" button, you should switch the order of the sign up and login page.Â I think the user should be first treated to the login in page and then if they want to sign up, they can click the sign up button and be directed to the sign up page.Â Second, I think you should reconsider the way you are handling user roles.Â While I get what you are trying to do with setting roles other than then Admin to a Boolean, I think the functionality to determine a user's role could be condensed to one column in the Users table.Â For instance, you can make the User's role a string and maybe have the User select which role they want to sign up as.Â Alternatively, you can use the Boolean values to display text that displays the
problem The application interface is good, sparse but easy to follow. There are some missing functionality buttons. I cannot seem to find a logout feature/button, nor an apply button when viewing an open job listing. I would suggest including these two buttons to make the user interface with the system more intuitive. I am also not sure which/what system you are using to deploy the production version of this system but I would also suggest updating the URL to something more human readable if possible. Overall a good job with room for improvement. I really like the table view you added to your index and show values, where there are lines separating the cells.
problem The UI is aesthetically pleasing in addition to being intuitive.Â A usability suggestions would be to add a "Log in" button next to the "Sign up now!" button.Â Even though there is a Log in link in the upper right hand corner, the appearance of log in/sign up options appear together on similar web applications I have seen.
problem The application was very intuitive to follow throughÂ and also was visually appealing . Log inÂ button if present in the central view , would have been better Â Back buttons if present would be helpfun in navigating
problem The signup webpage keeps telling me that my Linkedin URL is wrong while I was entering a real Linkedin URL.
problem Overall pretty easy to user. Would be nice to be able to quickly switch between pages instead of having to go home every time.
problem Good number of tests in the test folder. They mostly focus on the controllers, and the happy paths of the controller. Would recommend including some tests that are expected to fail, and edge cases. Maybe include some user interface testing as well via Capybara.
problem The application is deployedÂ successfully to the AWS cloud.via IP. Visually, the application looks good! everything is very intuitive, and the design is easy to follow.Â The read me is a little bland, but gives just enough information for the user to get up and running.
problem No, apart from the built-in tests, there are none. But as the README file indicates, the team is working on it.
problem The UI is very good. Description should be present in the readme
problem No tests have been made for both a model and controller at the moment.
problem I see test cases for the functionality, but do not feel that it is thorough. My definition of thorough is that the tests are coded to all the bullet points for a particular role/table in the program description.
problem Some functionality were missing and could have been well tested. For example, 1. In the user sign up page, when the admin logs in as user, the header of the page has "Admin" written two times. 2. The "Logout" button could have been put on the right hand side of the page header instead in the left hand corner in between the type of User.
problem testing is yet to be implemented fully
problem Yes, they do, but one of the members seems to commit much less than other members.
problem I didn't see any tests in the test folder, and I couldn't find any spec folder for Rspec either.
problem They have wrote 4 controllers for users, jobs, applications, companies respectively testing actions such as index, show, destroy, etc, but no model test.
problem Controllers are tested with what looks like generated tests. No models tested.
problem Yes, the team did thoroughly test at least one controller.Â Take for example the "test/controllers/companies_controller_test.rb".Â Here, the team has successfully and thoroughly tested all of the crud operations associated with the controller.Â They have not however tested any of the models.Â This should be done!Â here is some documentation on testing in ruby on rails that you might find helpful.Â http://guides.rubyonrails.org/testing.html
problem 40 commits but seems only two people work on this project
problem No mention in github readme. However you can use Rspec if you havent and mention it in readme.
problem There are consistent updates, and it seems like there may have been pair programming going on. I see multiple commits per day, and they each have detailed names and comments on them. The only thing I can suggest here is maybe some more evenly spread committing from all teammates. Very good job on this.
problem Yes, they has one branch with 76 commits from about Feb 18 to Feb 27.
problem Yes, the team did an excellent job pushing continuously thought the projects life cycle.Â It appears they have committed 84 times which is a lot!Â This is an effective way to make sure that everything is implemented in small pieces, and that it is not all implemented in one big chunk. Implementation in small pieces allows for the project to develop more fluidly, and is less prone to error.Â Good job!Â One suggest I have with regards to pushing, is using issues.Â Using issues helps to segmentation the project, and allows for chunks of code to be pushed toward an issue.Â This is something my team did not do either, but we are going to try it in the future.Â Maybe consider using github issues in the future as well!
problem The application is deployed on Heroku and the admin details are provided in the README file. So no issue in testing the application. The interface is more than what was asked for and hence is appealing. The topic wise links is a smart move, which helps fluidity across pages.Â One improvement in terms of moving across pages is including a Home page button that would take us back to the home screen rather than hitting the Back button multiple times. The back button is missing when an admin tries to create an account and there is no option to cancel as well. Also the placement of the Back button changes across different pages. Keeping it constant (either at the top or bottom) would be helpful. Also, the placement of the Logout button could be better (probably place on top-right) since it's too close to other links and I ended up clicking that by mistake.
problem It is easy to use. However in github it is not documented very well.
problem The website is easy to use, but it lacks the instruction in the README file.
problem The code is well structured throughout. Proper naming conventions has been used for variables, classes and methods. I like the use of Pundit for authorization. Most code is self-explanatory and commenting for code not auto-generated by Rails isn't necessary.Â However, in controllers, after mentioning an access specifier, there should be an indentation. For eg: In Companies controller, after line 71 that contains the private access specifier, there should be an indentation for the code that follows. Also, the index.html.erb in views contain redundant table rows. Eg: Line 42-50 of users/index.html.erb.Overall, Ruby coding practices have been followed well.
problem The code is developed in good standards. However, the github readme needs to be more informative rather than just account details.
problem The functionality looks tested , but some functionality could have been tested better. For example, 1. When a Recruiter , is creating his profile and selecting a Company from the drop down, a recruiter profile is getting created even with a phone number that is < 10 digits and > 10 digits
problem This team has tests for applications controller, companies controller, dashboards controller and jobs controller but no test for model.
problem There are test cases created for the controllers created by default. However, no model has been tested and no controller thoroughly.
problem There is no mention of testing as such in Github.
problem The team has thoroughly tested almost all models & controllers. Multiple test case have been added for each model. All field validations have been tested. Extra credit features have not been implemented.
problem The model does not look to be thoroughly tested because , for example: 1. When I keep on clicking the back button, after it takes me out of the application, then when I click on the forward button , it logs me back in without authenticating the credentials 2. Even while , signing up as an job seeker, the company dropdown is enabled which should only be the case when a recruiter is logging in
problem The GitHub pushes were not that frequent
problem Pros: - Good number of commits at regular intervals. - Good and balanced contribution by all the team members. - Clear commit messages. Â Suggestions: - Try to work on multiple branches.
problem The team has been pushing changes throughout the project period, with the number of commits increasing steadily as the deadline approached (perhaps you guys needn't push everything to the last minute next time). All 3 members have contributed more or less equally. Good work!
problem Pros: - Good number of validations added for each models. - Proper naming conventions used. - Proper relationships described between each model. Â Suggestions: - Add comments to explain the code.
problem Variable and class names have followed the standard naming conventions, and the models have extensive validations. However, I think the views have a lot of "if-else" statements - we've learned in class that most of the code should be in the model. It's probably easier to write code directly in the views, but it might not be very maintainable in the long run. Another thing that I noticed is that you guys have used an integer to represent user type, and check for the type of user in the view to render certain elements on the page. I think it would be better to use anÂ enum in place of the integers - that would make your code more readable.Â Other than that, I think you guys have done a really good job writing code and documenting it!
problem The User interface is not that easy to navigate. For example take the following examples: 1. While logging in as an job seeker, the first user page that he encounters is cluttered and not easy to navigate 2. The "Logout" button is top of the "Home " button 3. While logging inÂ even as an job seeker, the the companies dropdown is available which should not be the case. Â The ReadMe file is well documented
problem User Interface Pros: - Simple & easy to navigate. Â User Interface Suggestions: - In signup page, hide the company field if user type is selected as job seeker, and hide phone number field is user type is given as recruiter. - Successful sign up message is displayed twice. Remove one. - Align the text and fields to make it look cleaner. - Add basic styling. Â README: - Very well written with clear headings and descriptions. - Admin login credentials are given in the beginning as needed and is hard to miss.
problem I was unable to login into the system using the username and password provided in the README file for admin. The link given for linkedin form format in the README file is not working
problem The README file is very well written, with clear instructions on how to carry out actions.Â The user interface is minimalisticÂ but easy to use. The buttons work the way one expects them to work, and the form validations are on point. However, I noticed that there are some buttons such as "deleting a company that a user is not a part of" that is displayed for every recruiter or job-seeker. While you guys do generate an "Access denied" message if these buttons are clicked, I think they need to be displayed based on the type of user that is logged in. I also think you can try and change the layout of the buttons a little, to make the pages more appealing.
problem I think they did an excellent job onÂ project code. For example, they didn't put too much logic in view,Â they followed the naming rule thatÂ plural for controllers and singular for models and theyÂ avoided duplicated code by rendering a partial '_form.html.erb' in 'new.html.erb' and 'edit.html.erb' of jobs view. Just a little advice: you may put some frequently used methods in helpers and in 'include' them in controllers which may make your code more 'dry'.
problem Yes, the User Interface is very easy to navigate. I came across an issue in the the create new application page. 1. In this page when a job seeker is creating a new application for a job, the "Additional" Information field is given mandatory, which ideally should not be the case.
problem The git hub pushes did not look frequent and large amount of pushes were done in one go
problem All commits in a span of last 2 days.
problem Yes, but I can only see 10 commits on Feb 23 or Feb 24 and one master branch in the provided repo.
problem Yes, push as made on a regular basis with each push corresponding to each additional feature helping the developer to track changes over the period
problem Yep regular updates are seen in the master branch. Very few push's are present. There are no additional branch created for any feture addition.
problem 1. The name "jobapplications_controller.rb" doesn't conform to camel style which should be "job_applications_controller.rb" 2. The code in views/users/new.html.erb and views/users/edit.html.erbÂ are the same, so they can be extracted and put in _form.html.erbÂ in order to avoid duplicate code.
problem Code isÂ not hardÂ to understand. I see what you are trying to do by using another model "role" to classify each user. And in users_controller, you have CRUD for jobseeker and recruiter. I don't know if this is a clean way to do this. https://codepany.com/blog/rails-5-user-accounts-with-3-types-of-roles-devise-rails_admin-cancancan/ Check out this post. I think it is helpful. I am not a big fan of cancancan. I recommend pundit.
problem 1. The Code was written with good Ruby and Rails coding practices. 2. Comments could have been included in the code base for intuitive understanding of what each method in a controller does, i.e to what functionality a method performs when invoked.
problem There are some instances where you can implement a more DRY approach, look at users_controller line 24 - 35. Each of those 3 functions does the same thing, why not make a generic method to show the users? I would also like to see more being done in the models rather than in controllers. Overall the vast majority of the code seems to follow good practices, I did not notice many glaringly obvious issues or code smells. The work here is good but there is a good room for improvement.
problem Code seems to rely heavily on complex if statements and JAVA-like style. However, in general, the code follows a structure of a good RoR program.
problem 1. They didn't update the README file because they still say their app runs onÂ http://localhost:3000. 2. The buttons on home pa
problem The user interface is easy to use. After logging in, there is a list of things user can do, maybe put a little space in between them, or stack them. It would be more clear. After signing up, there is no confirmation message, it is directed back to the homepage again, this is a little confusing whether I sign up successful or not.
problem 1. The ReadMe file could have been better. For example there were two admin login credentials
problem Cannot see the UI , seems to be a problem with the server.
problem Interface is relatively clean and easy to read. The main page has many links 'crushed' up against each other, but every other page is relatively easy to read and simple to use.
problem For what works it is pretty easy to use and works well.Â There is one MAJOR flaw.Â I keep getting errors when I try to create a job recruiter or job seeker.Â Because of this I could not check most of the boxes below.Â While there already might be users in the system I did not know their password (besides the admin) so I could not check recruiter and job seeker functionality.Â Overall though.Â The admin seems to be fully functional, except there should only be one admin.
problem There were some testing lapses in the functionality. 1. For example, Phone Number validation was not correctly implemented. A user can be created even with an in valid phone number like "919" 2. While a new company is being created, the "Founded" and "Size " fields are are using a numeric increment-er, which is even taking negative values for the Year and Size fields
problem There are some things missing in each of the controllers. But these can be easily worked on.
problem Team needs to test the model and controller properly
problem Yes! The jobs model/controller seems to be very tested. The reason I did not give 5 is because I was never able to test with a job seeker/recruiter so I am not sure how it does with these users.
problem Yes the GitHub pushes were regular and consistent
problem Several commits a day, multiple team members committing, good use of branches for bug fixes. I see a few commits by EC2 default user, not sure how to count those in whether or not the number of commits was fairly even among team members. Overall very responsible with committing changes in small incremental steps rather than 1 big merge.
problem 1. You can combine job_seeker and recruiter somehow into an entity like user, which I think would lead to less duplicate code. 2. Some statements in controllers/recruiter_controller.rbÂ can be extracted and put in a private method, e.g.Â current_user = User.find_by_id(session[
problem in JobsController There is lack of authorization for each function which has specialized feature, if one can just access url, he will be able to make the modifications needed with easeÂ /jobs_list is used which could be changed to /jobs as it is achieving the get request and just plain /jobs would do the work for params[:company
problem Your code on Git looks good so far.Â Most of the code that you have written seems to be similar to the scaffold build in RubyMine alongside code that you have written yourself.Â There are a few minor issues regarding some of your Ruby files that could be improved in terms of "good Ruby and Rails coding practices". First, you should look back at your code and double check that your instance variable names correspond to the action(s) it is storing information in.Â For instance, in your recruiters controller, all of your controller actions except view_jobs are storing a recruiter user as @recruiters.Â You should only keep this pluralized name if you are gathering all recruiters from the database.Â Otherwise, you should use a singular name like @recruiter for the new, create, and destroy actions.Â Not only will this help differentiate in terms of what actions handle one or many recruiters, but it will also be easier to use each instance variable for other classes.
problem There is no changes in the readme. However the code has followed good practices.
problem Looks pretty straightforward scaffold generation with not much deviation. The job filtering mechanism is very clean and works well. Wondering why there are controllers for each type of user instead of 1 users controller? Having multiple controllers like this violates the DRY principle of ruby since these controllers do roughly the same things. Try to combine them into one users_controller and consolidate the three controllers into one.
problem I am not sure if the team has only one member. I could not see other people's commit.
problem The code followed the good Ruby and Rails coding practices. The code was well maintained. The code implemented almost all the functionality. But here are some points that I observed could be improved. Points to improve 1) When the admin tries to create a user for the first time it pops up an error but creates the second time we create the user. 2) The URLÂ could accept standard conditions or display appropriate messages toÂ guide users in entering a valid URL. 3) The revenue field in a companyÂ is taking 0.0 for every input provided. 4) The job seeker also has a field company.
problem Very intuitive, the views are nice. The home page buttons could be space slightly better but there is nothing wrong with them. For a few forms (user sign up/create/update) if you try to put a password that is too short it crashes. Update this so that instead it gives an error and tells the user what to change and to try again. On users there is also no validations for your phone number field. Please update the color of text after the buttons have been clicked, its hard to read them. I really like the Jobs in this company portion of the company show view, same for applications and jobs. The job seeker application process is a bit wonky, would add an apply button to job show and index.
problem The user interface is elegant and well designed. The navigation is easy but could make some changes to make it easier. Like guiding the user to enter text fields in an appropriate format.Â The README File contained information about admin login details and deploymentÂ details.
problem Buttons on the main screen is not that user friendly.(becomes grey out after 1 use). applying to a job is not straightforward.
problem The spec folder has tests for the search controller and the user model. the tests are okay, they cover a decent amount of the possible paths, but they are not fully tested. The test folder contains the scaffold created tests, I do not see any team added tests in these files.
problem The team made good effort to test all the functionality of the application. They tested the models and controllers but there are some functional issues which I have mentioned in above review comments.
problem Models and controllers need to be tested.
problem Most of the code is straightforward scaffold generated code. So,it is easy to follow and well-written. The method search_companies is defined in "search.rb" file i.e.in the Model file. This can be done in the controller to clearly separate the M,V,C components of the architecture.
problem A good practice was used in using helpers and models to implement business logic.Â The use of a separate Searches table could have been grouped with the companies and/or jobs logic.
problem The UI is intuitive, the readme is slightly lacking but the UI doesn't need much explaining so its okay. When I attempt to create a new user with a blank password I expected a form error. Instead I got an error from Heroku saying something went wrong and to check the logs. When a recruiter is creating a new job you can hide the company select drop down.
problem Yes, the app is very interactive, user-friendly and easy to follow. The README provides login credentials for default users and like it says there, the app is pretty intuitive.It is very much like currently used job-finding portals. Only concern is that the text displayed in red color in the menu bar is not easily visible. While searching for jobs using filters, there is a lot of scope for making mistakes while typing the search parameters. It would be easier to have a drop down for the filters.Â Also, after clicking back after viewing companies, jobs or job applications, it lands on the index view rather than going back to the previous page. So, we have to click on the Home page again to view all the actions.
problem Rspec testing done on the controller for companies, the model test for controllers is in the Test folder, but it lacking a few tests. Maybe instead create an rspec test file for the models.
problem The default tests have been done for one model and controller.
problem 13 more commits than last time. and three people contributed. just one of them only pushed one commits.
problem The team made a lot of smaller commits, but some had a few days in between. There is a decent number of merges between different branches that might have been avoided if they had some communication among their commits/pushes. I might recommend just committing more often, 53 commits is a good number, but it could be slightly higher.
problem There are some inconsistencies which were observed. For example the admin cannot edit application information,only the applicant can do so. Similarly the recruiter cannot destroy a company, only the admin can destroy a company. An applicant shouldn't be able to edit jobs which is being done here.
problem 1. The code in users_controller.rbÂ can be dryer like what it looks like in other controller files. Extracting User.find params[:id] and params[:user].permit(:first_name, :last_name, ..) to become new private methods and then call these two methods from the public methods. 2. The if statements in update method is a little bit hard to read, maybe in this situation, you can add some clauses between conditions to make it easier to read.
problem It seems no big problem.Â They followed the naming convention, properly used partials in views. Code is clean and well-written. Maybe I can give a little advice: If you do not need some actions in a particular controller, for example you do not need edit and show actions in dashboards_controller, then you do not need to write a blank method in it which may raise some issues when a user try to access them by URL, and instead you can write: resources dashboards, only:[:index, :new, :create, :update, :destroy]
problem The code is well structured throughout. Proper naming conventions have been used for variables, classes and methods. Devise has been used for authentication which is good. Most code is self-explanatory and commenting for code not auto-generated by Rails isn't necessary. The updates have been consistent with Ruby practices and MVC architecture.However, as earlier, in controllers, after mentioning an access specifier, there should be an indentation. For eg: In Companies controller, after line 75 that contains the private access specifier, there should be an indentation for the code that follows. Also, the companies/index.html.erb in views contains redundant table rows. Eg: Line 41-48 of users/index.html.erb.Overall, Ruby coding practices have been followed well.
problem It's much better than I saw last time.Â Apart from the functionalities specified in the requirement they did a lot extra user-friendly design. The slide bar on the left is quiteÂ intuitive for different roles and you can easily find and perform all functionalities that you want to. There is always a friendly flash shown above when youÂ change something. README is exhaustive and covered every functionality they have implemented.
problem The team has done a great job in terms of the UI. The application is deployed on Heroku and README file is very well detailed out. It includes information about what the application is capable of and what it is not. So no issue in testing the application. The interface is more than what was asked for and hence is appealing and intuitive. I loved the way there was a sidebar giving the user necessary options.An improvement could be that all options be listed out in the sidebar since initially I thought there was no way to view other users or applications. Another improvement could be to do an authorization check on the view level instead of just on the controller side. This would hide options such as 'Create'/'Edit' when the user is not allowed to. But I don't think this should result in any deduction of points. Great job!
problem Since the last review the UI has changed a lot. It has become easy to use and very informative. However some button links such as create a new job is present to job seeker. Using IF condition u can remove that.
problem 3 contributors and 44 commits from 9 days ago but with only one branch. This is not quite agile, maybe next time you may consider "write in respectiveÂ branch then merge into master branch".
problem The team has tested the company model thoroughly via rspec which is good. They also have the default test cases that are generated for the controllers in the test folder. However, I feel that is not sufficient testing for a controller since it is essentially the 'brain' behind the company model. Well done to the team for taking the extra step of being honest in their readme about how they've gone about it.
problem Yes, but it seems that almost everything is done by one person because most of the commits are done by him.
problem The number of commits has gone up from 11 to 44 since the last time this was reviewed. This is good, however it seems only one person did most of the commits. As mentioned in their readme, most of the work was done through google drive, which is not good for a collaborative project. However, had the team pushed code equally among all members, one would not lead to believe that one person did all the work.
problem Yep regular updates seen throughout. Good practise of keeping up with the project. However there is only 1 branch present
problem The naming convention has been well through out The indentation has been taken care of There is a bit of Java style which has been followed for example array assignment in seesions, that could have been done a bit better but overall a very good code
problem Your code on Git is very organized and everything based on what I saw follows good Ruby and Rails coding practices.Â I like how you organized your views for the admin, recruiter, and job seeker in separate folders so that you demonstrate specific functionalities for each User.Â Your models look good also.Â I noticed that for models like company and job that you don't have validations for your attributes to check if they are present or not.Â While it's not a major issue, I think that you should be checking if the user actually enters in information to create a Company.Â Otherwise, you are allowing the User to make blank Companies and Jobs associated with blank Companies, which would not be a good idea in a real world setting.
problem The code has followed good practices but readme needs to be more informative.
problem 1. README looks like a sample text file not being revised too much. 2. The user interface is not friendly, no "back" or "home" button for me to go to other pages.
problem User interface was very easy and intuitive!Â Well done!Â There were a few things I noticed and tested that I was not able to do below.Â I was not able to view the admin's profile due to a NoMethodError which states that the user is not associated with a company.Â When logging in as a Recruiter, I am not able to delete any of jobs he/she created due to again, a NoMethodError in which the user_id does not exist.Â Finally, while I was able to view applicants as a recruiter that posted an application for a job, I was not able to update the status of said application.Â Besides those, most of the functionality is present and the page routing looks efficient! Some minors things I have with the program.Â While I don't mind the switching of user roles, it would be good to have this done when the user edits their profile so that one user is associated with one role.Â Alternatively, you can keep what you have, but only show the switching of job seeker or recruiter if th
problem The screen real estate is used well.Â Switching between roles is easy.Â Using table borders in the View All pages would make the pages easier to follow visually.
problem The UI is pretty easy to understand but navigating through the pages is a bit tedious. Admin account has a lot of loopholes if a user is deleted. The readme is very well described but the navigation still is tedious.
problem Navigation is a little tedious as some pages do not have Back option So interlinked links are difficult to get back to. Readme file is well described.
problem The UI is pretty easy to use. Can use more colors and components for UI.
problem They got someÂ codeÂ in theÂ test files but I think they didn't run it to find out most of the bugs.
problem The recruiter model has some errors being displayed on the screen. For example, while viewing jobs posted by the recruiter, an error is displayed on the screen. Due to this, the recruiter cannot perform many of the tasks which he/she should be able to.
problem Thoroughly tested at least one model and one controller by Rails testing.Â If any of you are doing unit testing for the OSS project, I highly recommend you check out RSpec and practice writing tests on your application as practice so that you can use it for your OSS project.
problem It looks like they just started it from six days ago which means they don't keep commitingÂ during the period.
problem the amount of commits is around 144, which does state the work has been continuesly pushed into but some of the later commits have been just about readme, but still the team did a good job in keeping the commits on time
problem Based on the number of commits, it looks like a lot of your commits for the final submission week happened on the due date and after.Â While that's fine since you all contributed to the project, I think all of you should try to at least work and commit your changes every 2-3 hours a day so that you don't overwork yourselfs with getting everything done the day of submission.
problem There are a number of commits but most of them done on the day of deadline and a few after.
problem The code is clear and easy to follow. However, it is pretty much the basic code generated by scaffold generation. In the authorize method of the application controller, the notice just says "XYZ". This could be changed to a more specific message.The homepage controller has only two empty methods, create and new. This implies that its function is just to manipulate the views. I feel that this could be implemented in the user controller itself instead of creating a new controller for it.
problem Pros: - No violations of Ruby on Rails coding practices. - Proper naming conventions used. Â Suggestions: - Validations need to be added. (regex, empty values, etc.) - Relationships should be defined clearly. (eg: has many, belongs to)
problem The code follows good Ruby on Rails coding practices. The code implements most of the functionality. The code was maintained properly in Git. However, There are some functionality issues that I have come across during my review process. They are points to improve 1) The job seeker is associated with a company by default which needs to be changed. 2) The recruiterÂ was not able to see the applications that the job seekers haveÂ applied.
problem The code follows good Ruby on Rails coding practices. The models clearly describe the relationship between different tables of the schema and contains validations including regex validations for email. The controllers contain code for basic CRUD functionality. The views do not contain the logic and are used only for displaying necessary information to the user. Two space indentation was used instead of four space indentation. The team used DRY concepts and I couldn't find code duplication. The only odd thing was an empty homepage controller and also no validation for website field of company.
problem The author does a good job following "good Ruby on Rails coding practices".Â Their controllers/models area ll indented with 2 spaces and "each" is used instead of "for" when applicable.Â most crud operations are documented well, but as a whole, the documentation could use a bit of work.Â I have suggested it to a few teams now, but using Javadoc really helps with code readability by giving the reader a better understanding of what the code does.Â It also helps give the reader context, by explaining the parameters that go into the function and the return value that comes out of the function. If there is one suggestion that I have for your team in the future, it would be try javadoc.Â Here is a helpful resource regarding javadoc and how to use it!Â https://dev.liferay.com/participate/javadoc-guidelines
problem The README file contains login credentials for admin. There is also information about the implementation all bundled into one paragraph. This is however just the specifications given as part of the project. It could contain more detail about how to use the app rather than listing out what has been implemented. There is no Home button or Logout button on all views so it becomes difficult to navigate through the application.
problem User interface is very simple and basic. Â README can be formatted better with subheadings and bullet points. It is hard to read. Doesn't explain all possible things that can be done in the application clearly.
problem There is no user interface. All the actions canÂ be performed through links. The user interface could have been much better. Like using stylesheets to make the interface elegantÂ and smooth.
problem Deployment: The application was deployed on the Heroku platform and the corresponding github repo was also shared. The deployment was done properly and I had no issues opening up the application and running it. As soon as I clicked on the deployed app link, I was redirected to the home page of the system, which was the login page. The database migrations were also done properly as I was able to register and login. Â User interface: The user interface was minimalistic and easy to use. Everything was self explanatory and most pages were linked properly. Only the back button of the view job applications page was wrongly linked, otherwise everything was fine.
problem Yes, the application has been deployed successfully.Â The user interface is clean, and though it is a little bland, it is easy to use.Â The ReadMe is helpful when getting up and running with the application.Â It does a good job explaining how to login as an admin and such.Â One area I see for improvement still is in the readme layout and styling.Â Github allows for the use of markup to style and edit readme and wiki documents on github.Â This is a great tool for creating tables, headers, and bullet points to help make documents more readable.Â If I were to give your team one suggestion moving forward with this section, it would be to give markup a try to help make the ReadMe and other documentations more readable.Â Here is a helpful resource regarding markup shortcuts, and how to use them!Â Â https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet
problem No, the testing has not been implemented.
problem Extra credit features have not been implemented. Testing of one model and one controller has not been done.
problem The models and controllersÂ have not been tested properly. The code for testing the models and controllers is not present. The could also have developed the testing code.
problem The admin model hasn't been tested at all. The configured email and password is not being authenticated.Â When the show button is clicked while viewing the company/job information , the recruiter is being able to edit the job &/ company info even if not belonging to that company. Furthermore, if a recruiter leaves a company, the jobs created by him/her are retained and can be edited/destroyed by the same recruiter which shouldn't happen according to the spec file. All these things should be take care of . You just have to put certain conditions in the appropriate views to display links to certain pages.
problem no clear implementation of testing was found
problem I could see that the team had tested four controllers, namely, companies controller, job applications controller, job posts controller and users controller. However, none of the models were tested.
problem most of the controllers were thoroughly tested so good job there!Â That being said, It does not appear that any of the models were tested.Â In the future, model testing should be done!Â Also, javadoc would be helpful when writing tests, as it allows readers to better understand what each test does.Â I would suggest trying to javadoc tests in the future.Â Here is some helpful information on testing in ruby:Â http://guides.rubyonrails.org/testing.html
problem All the 6 commits are made at once on 03/02/2018. The changes and progress made are not reflected in the repository.
problem Cons: - Very few commits done - Entire project has been pushed in one commit - Did not work on multiple branches - Only 1 contributor
problem It seems likeÂ the team have been working offline and pushed the code into git after all the code has been developed. There are only 6 commits. The team pushed their changes once a while.
problem The major problem which was observed during the last review still exists. There are few commits to judge the changes which were pushed through in the given span of time.
problem very few commits were found during the complete developmnt process
problem There were only 6 commits in total, that too by one person and four of those commits were after the deadline. For future projects, I would recommend to start pushing early and have more frequent commits. This will ensure continuous integration practices are followed.
problem It does not appear that the team pushed many changes to the project as there were only 3 commits to master.Â Â Committing and pushing to github regularly is helpful for many reasons.Â One, it makes building a large, shared application much easier as everything can be built in little bite sized pieces.Â And two, it helps the rest of the team know what is going.Â Github provides two really helpful features I suggest you trying to use in the future.Â These are branches and issues.Â With issues, you are able to lay out a plan for your project and assign little pieces of the plan to each of the members of your team.Â This way, everyone can contribute, and knows what everyone else is working on.Â Branching is helpful, as it allows you to make a new branch for each issue.Â This way, when you are merging into master, the only changes that need to be reviewed are those that are contributing towards a specific issue.Â This makes it easier for the reviewers to unde
problem In the companies _form view there is a long list of options to select that are placed on subsequent lines and im unsure if thus would count as good practice. I dont know if the good coding practices include the logical if statement within the jobs index view page, as this sort of style is well known to be used in other languages such as Java or C. Throughout the models, there seems to be a great use of ancestry to create the relationships that make the MVC idea work well. Within the controllers, i can see that you all used the relationships between the controllers and views well, to create the logic for searching through the list of jobs in the jobs_controller ruby file. After looking through all of the project, I think you all showed pretty good instances of rails design, though im unsure of a few matters. Truth be told, i think my group did a similar type of if conditional, just wondering myself if a better option is available.
problem They create really similar models and similar controllers. Controllers, like admin, job seeker, recruiter could be just one controller. Models, too, like, auser, ruser, user, jobseeker, recruiter, admin could be just one model.
problem The team has followed good Ruby and Rails coding practices. The code was properly maintained and well organized. The team has improved a lot of functionality changes when compared to the first submission. There are so many functional improvements. I observed some other changes that needÂ to be added/improved to make the application much better. Points to improve 1) Headquarters should have been a text field instead of existing states. 2) Company field could be dropdown of existing companies. 3) Website Url validation regex could be much better to accept different types of website URLs. 4) Job seeker account cannot be created from admin. 5) The Recruiter was able to publish jobs for any company. 6) The Recruiter was not able to view applicants for a job. 7) The job seekers functionality is not implemented. Like job seeker is not able to sign up and login etc.
problem From the looks of it, the team followed good ruby and rails coding practices. The controllers were simple and easy enough to manage. However, they seemed to have been unchanged from the one the the default scaffold generator makes. The models also seemed pretty standard (they give associations and validations in the models). The team used the models. Unlike the other teams' work that I have reviewed, this team defined a functions in the model for other part of the app to use, which is definitely the ruby on rails way of doing something. The example is job.rb. The team also made their veiws straightforward. THey mostly avoided using ruby code in the views, which kept things nice to look at. Overall, the team used the MVC well.
problem Naming does appear to have taken care of, every controller name gives specifically what it doing like the widget contoller or static page controller, I would suggest that that the admin, jobseeker and recruiter controller should have been clubbed and formed as a user controller, it would have been better I would suggest using before_action even in job application controller Naming is good and one can get a clear picture of what it does comments is something i didnt find
problem The code is well structured throughout. Proper naming conventions has been used for variables, classes and methods. Most code is self-explanatory and commenting for code not auto-generated by Rails isn't necessary. The access specifiers have proper indentation for the code following it. Devise has been used for authentication. So everything good there. However, devise authentication hasn't been used the way it should have. Roles should be used to manage access to certain pages. Even a recruiter can view all users of the application via the url. Also, there is some redundancy in the code like creating multiple views for each user when it could have been done using one.
problem Y'all seemed to use good ruby conventions/practices including the model-view-controller architecture and the coding syntax.Â In addition you had a large number of commits from different people. You did not use the "issues" tab from git but I don't view that as a necessity but it would have been nice to have (still gave you full points).
problem The UI is rather understandable, though i'm not sure what happened with the Job Seeker functionality. Perhaps it wasn't able to get working, but it doesnt seem like they can do anything but edit their profile from what i saw. Other than that, I had no trouble, and i like the way you all listed the actions that could be taken down the page. It made it easy to locate the option i was looking for, as well as telling me who was logged in at the top of the page.
problem The user interface is quite user friendly and display all the required information. Although for the Job seeker the views lack certain links apart from that everything else works just fine.
problem The user interface is a little bit confusing. Especially the part, where admin creates new jobseeker or new recruiter, who is actually logged in at the end? Both the admin and new created user? And it seems like when admin creates job seeker, the email in the job seeker's profile is not the one admin just used to create the account. README helps a bit. Just feel it is an interesting design choice. I think it is because of the cross model visits. The same link would trigger different behaviors. (such as if admin creates a recruiter, and tries to create another one, it won't go back to the signin page anymore, it will just go to recruiters/new). Here is a solution I found (point 6): https://github.com/plataformatec/devise/wiki/How-to-Setup-Multiple-Devise-User-Models Â And for a job seeker to be able to view companies and jobs, he needs to type in the url by himself.
problem There is no user interface. There are links to perform actions. The user interface could have been much better.
problem I tried to login as an admin, but I got the error below. I also got the same error when I tried to sign up as either a recruiter or a job seeker. As a result, I could not test this app well. However, from the looks of it, the UI seems to be a little too complicated. For example, there are 5 links on the login screen, each of which allows the user to login as an admin/recruiter/job seeker or sign up as a recruiter/job seeker. This seems excessive and the code could definitely made more DRY. We're sorry, but something went wrong.
problem The outer view does appear to be a bit un designed but, that wasnt the objective so its ok, The view is clean, it gives enough information on whats going on and what actions are possible Its a bit complicated in understanding what create recruiter means after i have signed up as recruiter, it creates a bit of confusion there should be a option of having no company even for the recruiter The readme is pretty descriptive
problem The UI is intuitive to some extent but some times it is difficult to navigate as there is no back button that is consistently present in all the pages. The readme briefly but precisely explains what is expected of the application.
problem The application is deployed on Heroku and admin details and certain applications details are provided in the README file, so that's a plus. The interface is simple and nothing fancy which is alright since that is not the focus of this application. However, the interface is lacking the navigation and fluidity that it should have. It could have a single log in and sign up rather than having multiple options to do so based on role. Also, the job seeker doesn't seem to have any options but to update profile.
problem User interface is a little hard to use. Having sign in/sign up options for different roles is confusing.Â Would be nice just to have 1 sign in option.Â Also the searching of jobs for a job seeker is not working for me.Â But overall, seem to have most of the functionality working
problem No, it seems all i could locate is the scaffold created controller tests that test basic functionality, and empty model test files. It does not seem like they implemented anything of the sort that I believe was required.
problem No code for testing is seen.
problem They did use rspec to do the testing. But the testing is not that thoroughly. Only one test case for model widget. I didn't really understand the purpose of this model widget.
problem The team seems to have tested the models and controllers but there is no testing code implemented to test models and controllers.
problem The team seems to have tested their controllers. However, the test for the controllers is very similar to the default ones tat are created by the scaffold generator. Furthermore, none of the models were tested.
problem They have used rspec for widgets which is something i found good. Default test cases found only for controller I was not able to find test for models, i did look into rspec and test package
problem couldnt find full testing though rspec was present
problem Default test cases are available for Controllers in the test folder. The team has used Rspec for testing which is good. However, it would be helpful to test one of the important models like Company / Job/ Applications.
problem I think the range they committed from was pretty good, since they committed through two weeks the majority of their commits. They committed slightly more than half across the week of February 18th and the rest basically one day in the next week. Perhaps that could have been spread out better, but other than that I think they showed a good push history.
problem They have 54 commits, and 2 branches. But I think they mainly work on the master's branch, which is not that a good practice. But I know it is hard to integrate work.
problem The team seems to have started on the project very recently (Feb 18). However, they seem to have been making a lot of commits to the repo since then. To be exact, the team made 44 overall commits to the repo, with the last one being 5 days ago.
problem Not really.Â After the initial due date there was period of inactivity and then some inactivity for 1 single day.Â I don't necessarily think this is bad if there was not much to fix but considering some things could still be fixed in this, I think it could have been worked on a little more.
problem In the jobs_controller.rb file I see if statements that were checking a negative condition in the search method; for this type of set up, 'unless' could be used as a ruby term to represent that negative condition better. Also this if structure seems reminiscent of Java or C, and could potentially be done in a better way. I do see good use of the sessions_helper.rb file in the project, which I have come to appreciate through the completion of my own team's project. Helper classes can be very useful to return functionality with great coding practices. The models have the good ancestry and relationships set up between models, to allow the sort of functionality needed in the system. The homepage index view file seems to have a lot of embedded ruby code, which I believe is not indicative of good coding practice. I think some of the functionality, such as figuring out which type of user is signed in, could be levied to the controller, where you then use what the controller returns to decide how the view responds
problem Your code still follows good Ruby and Rails coding practices.Â Your models/views/controller look good in terms of functionality, establishing relationships between classes, and your routing from page to page.Â I did notice some files that were blank as I was looking through your code.Â For example, a few controllers like welcome_controller.rb and homepages_controller.rb contains just the template and nothing else.Â In the future, you can individually make your own files in the terminal if you need just a model/view/controller (i.e. rails generate(or g) model Model_Name Model_attributes).Â There's a scaffold I believe for models/views/controllers also if you prefer to use RubyMine's way of generating code.
problem There looked to be Java/C++ conventions (for example, != "" instead of .blank? or .nil? and if blocks instead of if/unless at end of statement.Â While not necessarily a coding practice, there was no validation of user access in the controllers, only the views.Â Also more of a general Git convention, they uploaded things like tmp files that shouldn't be committed.
problem The code is well structured throughout. Proper naming conventions has been used for variables, classes and methods. Most code is self-explanatory and commenting for code not auto-generated by Rails isn't necessary. MVC framework was followed.However, in controllers, after mentioning an access specifier, there should be an indentation. This has been done in most cases however it is missing in the Applications Controller starting line 65. Also, you could have used Devise for authentication. Entire information regarding jobs/user/companies/applications was visible/editable/delete-able by any user which shouldn't be the case. Overall, Ruby coding practices have been followed well.
problem You appear to have done a more then adequate job following "good Ruby onÂ Rails coding practices".Â For example, in your controllers, all lines are indented with 2 spaces.Â You have used "each" instead of "for" when applicable and all end points are documented in the controllers.Â One thing that could still be improved is the javadoc or over all code documentation.Â As a whole, it is a bit weak.Â I would suggest checkout out this resource on how to javadoc methods.Â Â Javadoc helps readability a lot by giving the reader a better understanding of what the method does.Â It also helps give the reader context, by explaining the parameters that go into the function, and the return value that comes out of the function.Â If there was one suggesting I would make it would be to work on javadoc in the future.Â Here is a resource that you might find helpful!Â Â https://dev.liferay.com/participate/javadoc-guidelines
problem The user interface is very simple and easy to understand It provides the necessary links. But certain views are not properly detailed. Certain views show links that are not needed in that view, like a recruiter should only be able to view the available jobs there is no need to provide an apply link for the job for the recruiter view.
problem Application is successfully deployed on Heroku platform.Â The user interface isÂ basic to function and is not too distracting despite not having any CSS styling pages.Â Most of the functionalities for each User is present except for a few functionalities with a Job Seeker.Â Your filtering system is present in the Jobs View page, but doesn't function when trying to filter jobs based on a company.Â All I am treated to is a blank page.Â Â One thing you could do to improve on your filters is to use a dropdown menu of existing items instead of asking the user to type in what to search for.Â While this may not be good in the real world, for a small program like this, I think this is appropriate to include so that job seekers can easily find jobs based on available company information in the system. The resume uploader doesn't seem to work even though I can include files while creating an application.Â When I look to edit the page, it doesn't stay selected next to
problem It wasn't easy/clear to switch between jobseeker/recruiter role.Â While technically possible, you had to disable one role to make it work.Â As a recruiter, you couldn't see the companies in a list.Â Job applications had no way to see the job they were connected to which made it difficult for both job seekers and recruiters to do anything useful with the job applications.
problem The application is deployed on Heroku and the admin details are provided in the README file and there are some more lines about the application. So no issue in testing the application. The interface is simple and gets the job done.However, that being said, it was difficult to navigate around because the admin could be deleted and thereafter I couldn't test further functionality of the admin. Also, the README says a user can login using gmail and receive notifications using a gmail id. But neither worked for me.
problem The team has only tested the Jobs controller. According to the spec file a model and a controller has to be tested
problem Only the controller for jobs was tested, and it is not thoroughly tested.
problem Controllers had autogenerated tests and Job controller also had a single RSpec test implemented. There were no tests on the models.
problem Models need to be tested, controllerÂ is checked
problem The default tests for controllers are present in the test folder. The team has however used Rspec for testing which is good. They have tested the Jobs controller. However I do not feel it is thoroughly tested. Also, there are no tests for any of the models.
problem The jobs controller was thoroughly tested using proper rspec techniques.Â The tests were well named and easy to follow and understand.Â On top of that, the team did a good job testing all of the crud operations associated with each controller.Â What I did not see though, was model testing.Â This should definitely be added, for instance, filling out "test/models/compnay_test.rb" shouldn't be difficult.Â For some information on how testing in ruby on rails works, I would suggest this resource.Â http://guides.rubyonrails.org/testing.html
problem Only tested one controller. And not thorough testing. Did not test fail cases.
problem The commits were not that spread out. In fact there were only 2 commits before the first review period and then the rest of their commits came in the next week before the final review time was to take place. Not only was it in this last week, but centered around one day, so they pushed at the very end basically. Honestly you can get into trouble with this sort of approach, especially if you are working for some client and they just don't know how anything is turning out. I would definitely recommend pushing new functionality each week as a much better practice to become familiar with.
problem While there are more pushed changes in the commit history,Â your changes throughout the project period were on the due date and after.Â It's possible that you may have worked on this throughout the week and not pushed your changes, it's hard to say.Â In the future for future projects, try to start as early as possible and try to put in at least 1-2 hours a day working on the project, whether it would be working by yourself or with your team.
problem There were only a total of 27 commits for 3 contributors and almost all of them were on the Friday of the final submission.
problem A good number of commits since the last review. However, it would have been good to see an equal or almost equal contribution from all members. One seems to have contributed very low towards the project.
problem Yes, the team pushed a total of 27 commits toÂ master.Â On top of this, each team member contributed a decent share of the commits so this is good!Â This number of commits suggests solid group contribution.Â Committing and pushing to github regularly is helpful for many reasons.Â One, it makes building a large, shared application much easier as everything can be built in little bite sized pieces.Â While it appears you all had no problem achieving this, one thing that might prove helpful in the future, is utilizing separate branches, and the issues section in github.Â Using separate branches, allows each issue to be associated with a specific code branch off of master.Â This is useful, as when a pull request is made into master, the other team members are able to see exactly what that pull request contains.Â Creating Github issues is helpful in that it makes chopping up a large project into smaller, easier to understand tasks very simple.Â Each issue can be
problem Only 23 commits over 3 days of committing
problem Code on GitHub looks great so far!Â You are following good Ruby on Rails coding practices and it looks like you are implementing your code to the scaffold build with a bit of Ruby on Rails Tutorial by Michael Hardt to add on as well.Â There isn't much in terms of what should be improved except to maybe talk a little bit about Devise and what it's functionality is to your program.Â I don't know what Devise is and it is helpful for a reviewer like myself to understand certain third party gems.Â You can either do this in your README file, your git commit messages, or as comments in your code.
problem The code is well structured throughout. Proper naming conventions have been used for variables, classes and methods. I like the use of Devise for authorization. Most code is self-explanatory and commenting for code not auto-generated by Rails isn't necessary.Â However, in controllers, after mentioning an access specifier, there should be an indentation. This has been done in most places but has been missed out in some. For eg: In application_controller, after line 35 that contains the protected access specifier, there should be an indentation for the code that follows. Also, the views are not indented according to Ruby standards in some places. For Eg: companies/index.html.erb from line 35 to line 41 do not follow the indentation guidelines. The models were missing necessary validations in the first review, however that has been taken care of now. Kudos for improving on the feedback provided.Overall, Ruby coding practices have been followed well.
problem Very well laid out I like how it looks and flows. Some of the forms need a bit of work, there are a few missing field, or the errors/validations aren't fully realized. Just for fields I remember needing validations, phone number, websites (company and users) and revenue.
problem Your application is almost there in terms of meeting all the requirements.Â Very well done so far!Â A couple of things I ran into while playing around with your application.Â First of all, the provided admin email and password didn't work for me as I was not able to sign in as an admin.Â I don't know if this was a mistake on your part and maybe forgot something or the field that contains the admin row was lost from your database.Â Either way, because I couldn't log in as a preconfigured admin, I can't judge on whether the admin functionalities work or not.Â Secondly, I liked how you used confirmation passwords when the User wants to link themselves with a Company.Â While no necessary, it's a good security move to have the user approve of their changes before submitting the edited form.Â Other than those two, everything seems to be easy to maneuver and the user interface is intuitive.Â I appreciate you also mentioning functionalities that are not working in your
problem The team has done a great job in terms of the UI. The README file is very well detailed out and contains most information necessary regarding running the application. A note about what is not implemented would be helpful so the user wouldn't look for it would be beneficial. The interface is more than what was asked for and hence is appealing and intuitive. An issue that I faced was I had to give a Linkedin and portfolio url, which shouldn't be expected from every applicant. Also, it threw an error when I fixed that but under "My Applications" , the application was submitted. An improvement in terms of the Recruiter page could be to include an option to view all applications rather than have it against the job the recruiter posted. Also, there should be an option to change the user name or switch profile as a recruiter to an applicant, which wasn't available. Overall, good work in terms of the UI.
problem I see the scaffold made tests but no rspec or team added tests
problem No tests have been made for one model and controller at the moment.
problem Controller tests have been done, but none for any of the models.
problem Did not find any tests.
problem The default tests for controllers are present in the test folder which check for basic functionality of the application. However, they are not thorough. And no tests for models have been implemented. Rspec could have been used for testing to check for expected behavior of the application. I do not see the same nor is there a mention about it in the readme.
problem not sure, they did't use rspec, and the test files might be generated by rails default. i'm not sure about this part.
problem only 19 commits, they are fairly even between the team members though. Would recommend committing more often with smaller changes.
problem Very few commits after the 1st round of reviews. And only one contributor.
problem A few commits are made. Most of them in the last few days of the deadline.
problem There are regular comments starting 18-Feb which is good. However, the number of commits seem to be very low at just 18. And this is equally distributed among 2 members. I'm not sure if this was a 3 member team or a 2 member team since the Readme doesn't specify it. Committing after implementing important functionalities is a good practice and doing the same would warrant a higher score.
problem The code has been well looked into, naming conventions are good, one thing i didnt like about the code is there was there was very litle or no comments, It would have been really easy to look into the code if there were comments It can be seen that the code follows heavy java convention, but that comes naturally for java developers I liked the fact that before action was used well
problem The application seems to follow good ruby on rails coding practices. Most of the code is scaffold generated hence they strictly adhere to the applications structure for MVC. They code is also properly formatted with proper indentation. One things missing is the lack of comments in the code. The authors could improve on that.
problem The code looks good and "dry", and the team followed â€œgood Ruby and Rails coding practices". However, Iâ€™d give some suggestions: Â Â Â Â use indentations: for instance, when declaring â€œprivateâ€ (applications_controller.rb, line 35). It makes a declaration more visually noticeable. Â Â Â Â use blank lines between methods (applications_controller.rb), which improves readability.
problem The controllers' code is sometimes not DRY. For example, the team specifically checks if the user is logged in with "if !logged_in?" in the companies_controller.rbÂ Â Instead of this, they can use a before_action in someplace thats more common for the flow of code (like the application_controller.rb). The code in the controllers also seems to "play it safe" when creating or editing things (they use new and save instead of functions like create! o
problem In general, it is easy to navigate within the team's web application. I think it'sÂ goodÂ that they added some additional instructions on UI in README.Â Although, I'd like to give some suggestions that would probably improve the UI: Adding "home" (for an easy jump to homepage) and "log out" buttons would be helpful on every page, maybe, in the upper right corner. Keeping "back" buttonÂ consistently at the same spot throughout the web app, maybe, even a little bit away from other buttons. Adding drop-down lists forÂ Employment Type,Â Gender,Â Race,Â Veteran Status,Â Disability Status. Making 'additional information' for a job application optional.
problem The README could be made more clear with different sections for each user type
problem The user interface was slightly hard to use. In my opinion, there were too many clicks to get to applying for a job. By looking at the URL in the browser (and in routes.rb), I see that you guys have 3-level nested resources. This may be a bad idea. I suggest looking at the following link for more information: https://medium.com/@jaredrayjohnson1/4-things-i-learned-toying-around-with-nested-resources-in-rails-fed6d761e924 Â Furthermore, the readme.txt on github provided enough information for me to get started.
problem The UI is not very intuitive. Much of the things are cluttered in a small space. Routes are somewhat haywire and are not very well defined. The readme is well described but doesn't compensate for the lack of intuitiveness in the UI.
problem a little bit too simple, also has no design.
problem I went through each file in test/models, and couldnâ€™t find any tests for any model.Â There are some tests in test/controllers folder though. Some information on tests in README would be helpful. One suggestion is to restrict some data types on data fields. Like, revenue should be only integer, phone number should be max 15 digits long, email addresses should follow conventions.
problem The team seems to have testedÂ job_applications_controller_test.rb thoroughly enough. They have tests like: Â Â - should get index Â Â - should get new Â Â - should update job_application Â Â - etc. Tough the team seems to have tested this controller, the tests also seem to be very similar to the ones that get automatically made by the scaffold generator. The team did not fully test any model.
problem They didn't use gem to help them build log in system. They did it all by themselves, which is really cool. Only thing is in the users_controller create function,Â I guess what they try to do is giving admin a way to create job seekers or recruiters. But this code does not actually prevent other users to create a job seeker or recruiter, only after they create it, they would get an exception, but the created job seeker or recruiter would get saved anyway.
problem The code looks good, and the team followed â€œgood Ruby and Rails coding practices". They use indentations and blank lines between methods appropriately.Â However, I'd make one little suggestion: breaking lines in your code into several would improve readability (line 77 applications_controller.rb, ln 9 inÂ application.rb, ln 7 inÂ company.rb).
problem Basic code was well written following the mvc architecture. basic conditions of programming were followed
problem The company has followed most of the good ruby and rails coding practices. I noticed that you have hard-coded option values for gender, disability etc.. It would be better to use enums here instead of hard-coding values, as there would be lesser code change in the future if you decide to add more options.
problem After each role signed in, the homepage is showing different tasks each role could perform. This is very nice. However, the action each role could perform is not really restricted. Each role can basically do everything admin did by directly going to the url. Another thing is, when an application is submitted, it is associated with the company, not the job. I find this is a little strange.
problem The team did a nice job recording a step-by-step video, and adding instructions on github. In general, the UI is pretty intuitive, andÂ it is easy to navigate within the team's web application.Â Â However, I'd like to give some suggestions that would add some improvements to their UI: Adding drop-down lists forÂ Employment Type Adding a neutral option choice for Race,Â Veteran Status,Â Disability Status ("Decline to state", for instance)
problem The program wasÂ easy to navigate through
problem The UI is highly unintuitive. Except for the login and sign up pages, it is very difficult to navigate through the other pages. In a number of places, the back button leads to an unexpected page. Some things I noticed are: It isn't possible to edit user profile information - we can only view it. For a recruiter, we can edit profile information while linking them to a company but not after that. The job filtering mechanism does not work. As a recruiter, clicking on "View Applicants" lists every applicant to every job.Â As a job seeker, while applying for a job, it is not clear what has to be entered in theÂ applicationÂ field.Â As a recruiter, while creating a job, it isn't clear what needs to be entered in theÂ jobÂ field. Also, the recruiter is asked to select his company while posting a job - not sure why this is required. However, I liked the use of CSS - it looks pretty app
problem The team followed the program descriptions, and included the information of their test in README, which helped toÂ place their test easily.Â Company's modelÂ is thoroughly tested with RSpec. All fixtures are added. There are some tests in test/controllers folder as well.
problem None of the models have been tested. However, most of the controllers have been tested.
problem They did good on working on the branches and merging the work. But it looks like mainly two of them were working on the project.
problem The team used github within a week before the submission. Total commits are 51. If the team used the other source for sharing the changes, the additional information would be helpful.
problem The team has been pushing changes regularly. However, the number of commits is very high on the day of the deadline. Two of the contributors have a significantly higher contribution that the third member.
problem This team is very diligent and had been constantly updating/fixing their code after getting their reviews. I need to learn from them. Another thing they did very good is that they uses model's method in the application model to help listing all the applications for a job seeker. I think we did it in the controller. I like their way better. I gave 4 stars: because they put a lot of logic in their views, such as index.html.erb for companies and jobs, trying to hide edit/delete button from job seeker or recruiter. I feel what you need to do is using authorization gem such as "pundit" to restrict user's ability for some actions on the website. Hiding buttons is good. But I don't think it is enough. Job seeker can still go to "https://fathomless-brook-57752.herokuapp.com/companies/1/edit" for editing companies. (I don't know where to put this point, I will put it here) because I tried to update user's profile, eg "Name", but it kept tell me to include "@", I felt strange
problem They must've made their github page private because I cannot access it. I get a 'Page not found' error. As a result, I could not access their admin details...
problem The interface is probably the best among what I review. They improved a lot since my last review, by indicating what the website is for and what can user do after logging in. I gave 4 stars, because as an admin, there is button "Your Applications" -- I think what they mean is actually all the applications. And there is another button "Users" -- I think it is supposed to show all the users, but it will give you the error (page does not exist).
problem Yes, the user interface is easy to use. There should be a prompt for the jobseeker that he/she cant apply till they have updated their profile. Readme is well stated.
problem I don't think the team has tested thoroughly one model or one controller. Is it in the spec folder? There are only three testÂ cases. In the test folder, I only find rails default testing. We didn't do well on testing either. So let us do better next time.
problem The admin model has some problems: 1. When clicked to show users, an error screen was displayed 2. The admin cannot destroy all companies, just the ones created by him/her as a recruiter 3. The admin shouldn't be able to edit company info which he can in this application. The applicant model has some problems: 1. While editing application info, error is displayed.
problem Model and controller tests havent been added. Feature tests have been added though.
problem Tests for only controllers are written. No test for models were found.
problem Decent number of commits during the project period. But 32 commits after the deadline on 2nd March.
problem A lot of commits are close to the deadline. Some even after
problem The code looks great. The team followed â€œgood Ruby and Rails coding practices". They use indentations and blank lines appropriately.Â Just oneÂ suggestion: breaking some lines in your code into several would improve readability (lineÂ 85Â applications_controller.rb, ln 41 inÂ companies_controller.rb).
problem The code for the most part follows good coding practices.The code is clearly written and is easy to understand for the most part.However, the use of comments especially for non-scaffold generated methods will help the user to understand the code much better. For eg:- filter function in the jobs controller. Some of the empty-body methods can be written in a single line For eg:- "show" and "edit" method in users_controller. In the applications controller, there are parameters "j_id" and "job_id" which is slightly confusing. Also, there are two controllers application_controller for authorization of users and applications_controller which handles CRUD methods for job applications. You could name it differently to avoid confusion. Methods for destroying and closing an application have been defined in the Model "application.rb" and similarly, in the Job Model file "job.rb" This negates the use of MVC architecture where the controller controls the interpretation of actions.
problem Everything a user could see (job applications/jobs/companies) could also be edited by adding /edit to the url even though the edit button was hidden. A jobseeker could also add companies and jobs by adding /new to the url. This means the controller wasn't doing the same validation checks that the view was.
problem It's pretty easy to navigate within the team's web application. They have drop-down lists whenever it's useful and appropriate, which makes it easier to choose, not typing. They also addedÂ a lot ofÂ additional instructions on their UI in README, which could be a bit shorter.Â There is one suggestion I would give to the teamÂ that would probably improve the UI: -PuttingÂ "home page" and "log out" buttons in the upper right corner, which wouldÂ make them more visually noticeable, and prevent an accidental log out case.
problem The last time, when I checked the deployed app on 03/05/2018, the app was not working. However,it seems to be working fine now. The layout of the app is clean and simple and easy to follow. There was no confusion in navigating the app. However, it took quite some time to enter the address in proper format. Same goes for the website and revenue while creating a company. You may put a sample address and phone number in the README if you are strictly restricting the format. When applying for a job as a job-seeker, the error prompt for the portfolio format says that it should be of the form http(s)://www.website.com/org/etc however it only accepts the format http(s)://www.website.com. The same issue arised while creating a company while signed in as a recruiter. Otherwise, the README file is very detailed and helps the user to understand the working of the app very well. It could be a little brief or be displayed as bullet points instead of paragraphs to make it easier to read.
problem The radio button on the bottom made it easy to switch between roles.Â An improvement could be recruiters being able to view job applications for a specific job.Â If they are viewing a job, they should be able to view its applications.Â It's ok as is in this system, but in a larger system with a lot of applications, a recruiter would want to be able to go from a job to its applications directly.
problem Readme is well described. But the sample accounts are not working.
problem readme file is very detailed. it's easy to see that they spend some time working on it. just still can't log in with the account in readme file on the cloud platform.
problem No testing has been performed for any of the models or controllers.
problem Didn't find any tests written.
problem Yes, there have been constant commits throughout the duration of the project as well as after the submission date. In fact most of the commits have been made around the deadline and after it.
problem There weren't many commits before the first deadline but they committed frequently between that deadline and the final submission.
problem A lot of commits doneÂ but all of them in the last 3-4 days of the deadline.
problem Overall, the code looks good, and the team followed â€œgood Ruby and Rails coding practices". They use indentations and blank lines appropriately.Â However, I'd make oneÂ suggestion: breaking some lines in your code into several would improve readability (lines 57, 62 applications_controller.rb).
problem Pros: - All necessary validations added (for regex, etc.) - All relationships like (has_many) defined clearly - Good naming conventions used - No evident violations of Ruby on Rails coding practices Â Suggestions: - More comments to explain the code
problem The code followed goodÂ ruby on rails coding practices. All the code is well organized in models, views, and controllers. The code functionally implements most of the functionality but only some mistakes exist. Overall, the project code was good. Here, are some points which have been improved and which needs to be improved.Â Good Improvements 1) Company Information perfectly organized and automatic assignment of company id. 2) Submittal status has been added in this submission Â Functionality Mistakes 1) Recruiter company information is not displayed for admin. 2) An invalid number of numbers in phone number is accepted. 3) Job not creating for existing companies 4) Job seeker himself can set the application status.Â 5) A phone number cannot be viewed by an admin of users in information. 6) A recruiter is able to create same company with all identical details.
problem The team has used standard scaffold generations and have extended it. Standard naming conventions have been followed. However, the models have not been validated thoroughly. For example, there is no check to see if a linkedinÂ profile URL or a portfolio URL is valid. The gender, disability status, veteran status etc.. can take arbitrary values as long as they are less than 255 characters long.
problem The code has good standards. Logic is present in the views to hide buttons and elements. This can be better implemented using pundit gem.
problem The user interface is mostly easy to use. I liked the use of CSS. However, there are a few things that were out of place. I have listed some of them below: Â While applying for a job, the user is expected to enter his current company. This should be auto-populated. Also, there are no drop-downs for fields such as gender. race, disability etc. While creating a company, the founded field expects a date format. I kept trying to enter just a year initially, and the error message I got was "Founded can't be empty". It was only by chance that I figured out that the founded field needed to be a date. Applying for a job isn't intuitive. There is an option to view all jobs, but there is no way to apply for a job from there. One needs to click on Manage applications, create a new application,Â enter a job id, and then apply. I don't think it is reasonable to expect a job-seeker to remember the job id of the job he's applying to. Also, the job filte
problem The user interface is very elegantÂ and appealing. It was very easy to use and navigate. All the information is perfectly organized but some improvements could make this even better. Like a drop down for existing companies and job id, company id information cannot be remembered by the user.Hence, drop down with existing entries would be helpful. And a drop down for gender, veteran status, and disability status could make it even better. Appropriate comments for the information entered in the comments would be helpful. Like phone number only 10 digits are permitted etc.
problem The team added on the top of the requirements a nice user interface, which helpedÂ easy to navigate within the team's web application. However, I'd like to give some suggestions that would add some improvements to their UI: Adding drop-down lists forÂ Employment Type,Â Gender,Â Race,Â Veteran Status,Â Disability Status, Size of company. Making 'additional information' for a job application optional. Making the job list more informative, not just showing the job id.
problem App deployed on heroku with clean and intuitive interface. README gives bare mimimum, though supplies enough information to use the app.
problem The UI is very normal. Some UI improvements can be implemented on the top.
problem The team has tested the models and controllers but have written the testing code for only one model and one controller. Testing code for other models and controllers could also be implemented to make a peer programmer easy to test.Â However, most of the functionality is correctly implemented. It is also tested to ensure it is correctly working.
problem Extra credit features have not been implemented. However, testing has been done properly.
problem Yes the team has been constantly pushing the changes to the repo. However the team has not taken the last review into consideration as points from last review are still to be implemented.
problem The team has been committing throughout the project. But the number of commits is very high towards the end of the deadline. Also, the contributions of both the team members are not equal. One member has about twice the number of commits when compared to the other.
problem Was not able to find any major flaws. One minor improvement that could be made is locking in the version of the gems used, as this could lead to issues with maintainability down the line.
problem 1. I think you can find a way to put admins, job seekers, and recruiters as one entity like "users". That way, the .rbÂ files in /controllers, /views, and /models etc. would be dryer. 2. How do they create routes for applications under jobs? I think resources :jobs do resources :applicationsÂ would be more clear.
problem In the models, the team seems to have followed good Ruby and Rails coding practices. They make validations in the models that actually seem to matter for their code. In the controllers, the seem to not have deviated much from the default code put into the controllers when the scaffolds were generated. When looking at the views, I got the impression that the team did not make much progress with the website. This is because the _form.html.erb for the admin only had two fields: email and password. Other views seem to have enough appropriate fields in them. However, from what I have seen so far, they seem to be making good useÂ of MVC.
problem The majority of the interface was not accessible. All I could see was the login screen. I clicked "Login," entered the admin credentials, and pressed Login. I got this message: The page you were looking for doesn't exist. You may have mistyped the address or the page may have moved.
problem The seems seems to not have thoroughly testedÂ one model and one controller. The current files under the "test" folder seem to have been automatically generated when the team created the scaffolds.
problem 1. README file can put some bullets before different topics so that it's easy to read. 2. The webpage was down when I just want to begin to try all the functionality and the error message was "The page you were looking for doesn't exist". It seems that Heroku has some problemsÂ because last team's webpage I reviewed also became down at some time.
problem Yes, they did, but it looks like that almost every commit is only done by one of them. Maybe other members contribute their code in another way which can't be looked at on GitHub.
problem Recruiters controller appears well built out, though I did not see any completed model tests.
problem Pros: - Worked on multiple branches - Explained in the README that their main branch is not master - Multiple and timely commits done - Clear commit messages used Â Cons: - Looks like all contributors have not contributed evenly
problem Clean UI, Login page is neatly designed. Proper tabs are given for Jobs, Users, Applications which are well accessible. Switch between roles are easy to perform. And the current role shown at the top right corner of the screen is easy for the user to know his state. CSS, AJAX are used to create UI screens, good work done by the team. Best User Experience I had among the projects I reviewed. Logout button is placed in all the screens, which is very easy for the users. Though there were very minimal information given i
problem testing is not upto the mark, they should have added more test cases other then the default ones
problem Even though the number of commits were low, they have pushed code at regular intervals,the later changes have been related to bug fixes which shows how they have matured the project. the commits were done by everyone and at regular intervals
problem Yes. There has been a steady increase in the commits. I can see the maximum activity on Thursday. The commits are also properly named. Although the frequency of commits not high (43 total). The team should commit more often so that they don't lose valuable work. Apart from that, good work.
problem Seems good over all. Some of the functionality that is in the controllers methods could potentially be moved to the models, but it is also fine as it is now. Variables are stored in snack_case for the majority of variables, the views contain a bit more functionality than just the UI. This could be improved by moving the functionality into the controllers or the model where appropriate.Â one convention to consider is the character length of lines. Look at Jobs Index, line 66 is far too long to read on one screen. Chop it up and make it two lines.
problem I can not find big problem in their code. They did a good job with naming convention, using partials, model validations, authorizations, etc. This may be the best design I have ever reviewed. The only flaw is I can hardly find commits in its files. It's gonna be better if more comments are added to their code.
problem You have done a good job following the "good Ruby and Rails coding practices".Â It appears that all of your major components were built using a rails scaffold, which is good because it helps to organize the code in a good "ruby on rails" way.Â You also did a good job following all of the ruby on rails style guidelines such as using "each" where it is appropriate over "for", and using 2 space indentation.Â One area that could still be improved though is code commenting.Â While many of the controllers are well documented, the models are not.Â Additionally, using javadoc to comment methods would be a nice addition.Â Â I would suggest checkout out this resource on how to javadoc methods.
problem The code follows good practise. The readme can be more informative.
problem I think over all the code is really good and minimal. We used way more models and controllers to make app to meet the requirement. But I am a little confused by a function defined in user.rb, create_new_user. At first, I thought, this is such a good idea, we went through a lot to make Admin to be able to create a new user. Then, I try to see how it is used and where it is used. But I could not find any. Another thing, maybe some of the controller code could be included in the model, such as index function in the jobs controller.
problem The code followed goodÂ ruby on rails coding practices. The code was well-designed. There are a bit of some functionality issues with the admin and job seeker. Good improvements 1) The team has linked the apply button directly in the job description which is very useful. 2) When the apply button has clicked some fields like job id and company id are auto-filledÂ which reduces the effort of the end user. Â Points to improve 1) The admin login details mentioned in the README file seems to log in as a job seeker and not as Admin. 2) The admin functionality is similar to jobÂ seeker which is suspicious. 3) The recruiterÂ was not able to view the applicants for a job.
problem Overall it looks like it matches common coding practices.Â The main thing I noticed that could be improved is the use of enums or similar for a lot of the dropdown fields. The options were listed individually in the edit form and also had to be listed again in the model validator.Â Any updates would have to be done and match identically in both. Enums would let them update in one place for coding consistency and maintainability.
problem The code is well written with standard naming conventions and use of scaffold generations. All models have thorough validations, and the methods names are self-explanatory without the need for comments. The job-filtering mechanism works very well.However, I noticed that you have hard-coded a lot of option values. For example, you could have used enums to represent Gender, Disability status, Veteran status and Race instead of hard-coding strings. Similarly, you could have used enums to represent the job application status. The benefit of doing things this way would become clear if you decide to make changes to the list of options in the future. For example, if you decide to add another kind of race in the future, you might have to make changes in all the views where these values have been hard-coded. However, if you use an enum, you would only need to change it in the model.I loved your extensive use of page level authentication to check if the right kind of user was trying to do an
problem Yes! 204 Commits. That is admirable. Only downside is they only works on one branch. But 204 commits deserve 5 stars.
problem Pros: - Over 200 commits - Very clear commit messages - Contributors have contributed equally Â Suggestions: - Could have worked on multiple branches
problem There have been a number of commits and more or less equal contribution from all members. However, it seems like the team did most of their work towards the end of the project deadline.
problem The testing could have been better
problem They very thoroughly tested the job applications model and controller. There were tests for the admin user but I couldn't replicate them on the actual website so either the tests didn't pass or the user given in the README wasn't an admin.
problem The user interface is very clean and easy to navigate. I like they put a long list of companies/jobs/users/applications into several pages. That makes website look really good. A minor thing, that I notice is when viewing all companies, at the bottom, there is something like this:<<<<<<< HEADÂ Back=======
problem The User Interface design could have been better. I could find a few glitches: 1. When I opened the URL of the application, I found that someone was already logged in and I had to logout before I could login in as an admin. 2. After logging in as an admin, the message in the top of the page showed "ABC" logged in successfully. 3. After logging in as admin, I could not see the button which would list down all users.
problem The user interface was intuitive and elegant. The navigation was easy and smooth. Overall the User Interface was good. The README file contained information about the admin login details but the details seem to log in as a job seeker. And the file contains guidelines about format of filling the fields which seemed useful. The format for filling various fields could have been added to the application itself. Like guiding the user with appropriate error messages.
problem The readme could be a bit more clear regarding page navigation and the location of each user activities
problem It was ok to navigate but not that easy.Â Most things had to be done by going back to the home page and restarting from there. Certain fields like the Recruiter company would always reset when editing profile so the user has to be careful with that.Â Job applications would have been easier with nested urls so the job ID wouldn't be reset if there were any errors.Â It also would have been nice to be able to see the user's current role when navigating pages as it can be confusing when a user has both roles.
problem I could not find the functionality for creating new recruiter and new job seeker. I tried to see if I am doing something wrong, but there is no description regarding the same. If you are having trouble doing that, you can probably look into how you can create a link on the page which redirects you to a path. Overall the app is well designed.
problem The user interface is very appealing to the eye. The team has put in a considerable amount of effort in the CSS. I particularly liked the use of pagination while listing all jobs/ companies etc.Â However,Â there were a few places where it became unintuitive and even the README didn't help. Â Â When a user edits his profile, he must enter his password to confirm the changes. While you have used a label above the text field for the password to indicate this, it isn't very noticeable. Every time I tried to save my changes after entering changes, I was re-directed to a "Something went wrong" page. It took me a while to realize that I needed to enter my current password in order for the changes to take effect. You can probably add a JS validation saying that the current password is a mandatory field, before redirecting. Clicking "New User" on the admin home page redirects to an error page. While applying for a job, the current company field is
problem The Admin user interface is very easy to navigate.But , I found that while viewing the list of companies, the table formatting is not proper.I mean, the table exceeds the inner page dimensions. The Recruiter UI is also easy to navigate but the publish job functionality is a bit tough to navigate to. It could have been better, if there was a prominent "Publish Jobs" button after creation of a new job role. In theÂ Job Seeker, UI, I found a glitch.While clicking on the View/Apply Jobs button, I could see that "Closed" Jobs have still a "New Job Application" enabled. While clicking on it, the page is editable with the dropdowns stillenabled.It also has a "Create Job Application" button for a Job Seeker role, which ideally should have been "Apply to Job"
problem Visually very good, the user interface is intuitive for navigating around the pages. Super well done. One minor thing might be the errors, they mainly say "Please enter a ..." but nothing on what the correct format is. (I see this in most of the URL inputs). Also the jobs index pages shouldn't show the ID of the row or the ID of a related DB. For example, you could use the Job Id to get the name of the role and display that though. Job.find(job_ID).name but I wouldn't display just the Job ID. Also the length of the page should be resized when you update the forms. The back button usually is unclickable as it is below the "bottom" of my screen. The show pages have a similar issue
problem UI is quite intuitive and easy to use. README is detailed and covers all information needed to use their app. But to my knowledge there're still some little weakness that is worth mentioning: 1.can not leave password and password confirmation blank when editing profile, which causes a little inconvenient when a user just want to edit name or email instead of password. 2.When I enter "Edit Profile" page as admin through Home page and then hit "Back", it jumps to users index page instead of jumping back to Home page. 3.A recruiter must have a company before created which means recruiters can not have a "no company" status. 4.they did not actually implement logging in with Google successfully. When I hit "sign in with google" and select my google account I was directed to sign up page with email filed in with my google email.
problem The UI is pretty neat. Not well defined in the readme. Should have proper navigation buttons.
problem There is a spec/models folder but I do not see a spec/controllers folder. in the models folder is a single file testing the user model. The test file covers the validations required to create a valid user, and tests the model function created in user.rb. I would just recommend adding the tests for the controllers. That being said in the test folder is the basic scaffold testing created by the rails generate function. So there are tests for the controllers, just not enough of them.
problem Both the User controller and model were thoroughly tested using good rspec techniques.Â The tests were well named and easy to understand.Â Additionally, the team did a good job testing all of the crud operations associated with each controller.Â One suggestion I do have though, is that the tests could be documented a bit better.Â Javadoc would be very appropriate in this case as it would help the reader to understand what the test was doing exactly.Â If I had one suggestion to the team for testing, it would be adding javadoc to each test method.Â Other then that, great job!
problem The commits are frequent and detailed, they solve small issues and generally don't require merge functionality. The number of commits is a bit uneven though, This could be caused by pair programming though.
problem 109 commits since 15 days ago but with only 1 branch. They may write code in same branch but I think write code in respective branch then merge into a main branch is better because if something go wrong it's easy to figure out whose part's code need to be improved. Anyway, they kept pushing changes throughout the project.
problem Yes, the team made a total of 109 commits!Â This is an impressive number.Â Additionally, the team did a good job working together, as it appears each team mate made multiple commits towards master.Â Â Â Committing and pushing to github regularly is helpful for many reasons.Â One, it makes building a large, shared application much easier as everything can be built in little bite sized pieces. You all did a great job utilizing the issues and branching techniques in github.Â Using separate branches, allows each issue to be associated with a specific code branch off of master.Â This is useful, as when a pull request is made into master, the other team members are able to see exactly what that pull request contains.Â Creating Github issues is helpful in that it makes chopping up a large project into smaller, easier to
problem There are git commits for every new feature implemented. The git documentation is very good and they have brought to notice the AWS bug pretty nicely.
problem the commits were unequally pushed in git by the users
problem test were not present for controllers
problem The readme specifies that both the company controller and the company model had been tested.Â It appears that the companyÂ controller has been tested, but the model has not been.Â For some good information on testing in ruby, here is a helpful resource.
problem the readme file was very concise, this could be more explanatory
problem The authors appear to have done a good job following good Ruby on Rails coding practices.Â For instance, they indented all of their lines 2 spaces, etc...Â Â One thing I noticed though that was missing was documentation.Â One way to improve this would be to add javadoc to the methods.Â Javadoc helps readability a lot by giving the reader a better understanding of what th emethod does.Â it also helps give the reader a better understanding of what the method does by giving the reader context.Â Here is a helpful resource on javadoc for future reference!Â Â https://dev.liferay.com/participate/javadoc-guidelines
problem User interface is intuitive. It was easy to test the application following the readme file and the way screens are developed. Â Welcome Admin page displays a message as Hello Admin, and a message ADMIN! below that, this could be removed. Add a company to your profile to post a job is shown for Admin, Admin doesnâ€™t have job posting function so this isnâ€™t necessary. Update company dropdown is shown which is needed for the admin. Search jobs link is displayed for admin, Admin doesnâ€™t have job apply functionality.
problem The test plan written in READme is inadequateÂ to perform the Test Plan. The author did not automate the tests.
problem It's good to follow certainÂ naming conventions for naming variables and strings. Variable and Function names should be lowercase with underscore to seperateÂ words likeÂ 1) Using random_html() instead of RandomHtml(). 2) Using random_css() instead of RandomCSS(). 3) Using random_body() instead of RandomBody(). 4) Using random_sentence() instead of RandomSentence() etc.
problem The author did not provide adequate writeup to set the environment and test the work.
problem The Writeup is not adequate to understand the functionality of the work. Although the brief description of the functionality of individual programs like the start_servo.py, servo_automation_screenshot.py the description about Servo and others could have been helpful. The author could have given the more detailed description of the functionality implemented. It could have included the project description, implementation done so far.
problem I honestly have no idea what this project is intended to do.
problem The test plan was not adequate to understand the test plan. The authors could have worked more on the writeup. And the testing and environment setup for other operating systems environments could have been helpful.
problem the testing plan is in the README on the repo and all it says is that files were generated during testing. Not how to run tests or what to expect when testing.
problem The Readme file could have been more descriptive about the implementation. Giving a more detailed description of the platform setup could be helpful. And details about the testing would have been helpful.
problem There is no mention as to why any work was done
problem (2) The code in the program rendering_mismatch.pyÂ is long and can be modular dividing the code into separateÂ methods (2) The code implemented in programÂ screenshot_servo.py can be modular i.e the program can be divided into a set of functions. (3) The programs code_generation.py, rendering_mismatch.py, screenshot_servo.py should be properly commented to understand the implementation. Lack of comment lines makes it difficult to understand the functionality of the code and following it.
problem No test plan in wiki page, so it's hard to judge this section
problem There was no test plan associated with the project.
problem There is no test plan again as it is a mozzilla project it is hard to understand how/what the tests should be.
problem From the comments seen in the pull requests, i beleive only minor changes are required to be done. Rest from the comments it is fairly ok work.
problem This project doesn't seem to need a build. However, every file that the team wrote seemed to have been doing its job. Because of this project, the Servo team will be able to test a few more things in the future. Although the team's pull request is a good start, there seems to be many changes that would need to be made in order for the pull request to be merged into the master branch of Servo.
problem Since the project is a mozzilla project based on automation so there is no need for test coverage however through the comments of the pull request some refactoring and code changes needs to be implemented as suggested by the admin.
problem Overall this is well done, additional comments would be helpful.
problem The functions needs to be explained it the wiki. The code is not well commented, but they have tried to explain everything in the pull request, which is think is not required.
problem The functions are not to long but the commenting could have been helpful tp better understand the flow of the code,Â some restructuring needs to be done as suggested by the admin for cleansing up the code.
problem Can't manually test it now, don't even know where should I go to test the functionalities.
problem The code works as intended. The code needs o be more commented and there is requirement of a wiki
problem The features work as intended , the code is generated , however cleaner approach can be implemented as suggested by the admin.
problem Between the writeup and the video, I have a pretty good idea of what the project is doing. The video does a great job of showing how to run the program and explaining how the code operates. For someone like myself who has little/no understanding of Servo or Rust, I did not completely understand what problem was being solved with this program and why it was necessary.
problem There is no wiki present for the project and it is hard to understand what they are trying to establish. Some description needs to be present in the readme or something.
problem The writeup explains what the team wants to do but the wiki is not present, through the readme in the github repo the authors try to describe what they wanna establish
problem The positive is that the write gives a very basic idea of how testing was done, and gives the location of where some test files are held. To improve, I recommend adding notes on what exactly is being tested and how it was tested.
problem They seem don't have a test plan for now.
problem There is no test plan for the project. However, since it is a mozzilla project and from the github pull request i can see that it may be not required. If the is the case the authors should put a notice regarding the same.
problem The writeup had no test plan.
problem There is no writeup for the project present. SInce it is a mozzilla project, it is hard to determine whether they should have a wiki or a readme. From the readme given in the github repo, the overview of the project os understood but it needs to be more informative.
problem Although the writeup tells the reader about the "Initial Steps" and the "Subsequent Steps" required, it does not go into much detail about how the team's implementation of the project. It seems as though the team was not able to finish the writeup before the first deadline since the end of the "Implementation" section gets cut off: Â "After successfully building servo," Â The team was also not not able to complete the conclusion portion of the writeup.
problem Yes , Although they have not mentioned in the readme but the git pull request informs on what they want to implement. The github needs to be more informative and can help with the reviews. some programs have been mentioned like servo_automation_screenshot.py could have been described in the radme
problem Although they did mention automated tests on their wiki page, I didn't see code about testing in their commits, maybe the test is built by the previous programmer?
problem There was no Test Plan so could not verify this.
problem The authors have converted most of the test cases. The "response_report" controller isn't getting a coverage of 100%.More automatic tests need to be added for this controller.
problem There is one variable count inÂ automatic_review_mappingÂ which does not clearly indicate what it does even though the team has mentioned its significance in the wiki and in a comment in the code. One suggestion would be to change the name of this variable to something that is more suggestive of its functionality. Rest of the naming convention seems quite reasonable and are suggestive of the proposed functionality.
problem They seem to have done a really good job at refactoring blobs of code and breaking them into meaningful modules and also stating what, where, why and how they did that. Even though they have done a good job at breaking down the code, I would add comments on functions to make code better and easier to understand for a 3rd person.
problem The code is the result after the original code was dried, so it's structure is dry. Yet, there is no comment in it.
problem The main approach of the project as seen from the documentation is to refactor long, complex methods into smaller methods so there is no evidence of functions that are too long.Â One suggestion would be to add more comments so that it becomes easier for someone who is analyzing the code for the first time. As comments help such users to understand what exactly happens in the code.
problem In theÂ app/helpers/response_report_helper.rb, the class SummaryRevieweeReport has many attributes contained in the class SummaryReport. Using Inheritance would be a better option to keep the code DRY.
problem For the Class PlagiarismCheckerAssignmentSubmission. It includes 4 nouns and somewhat too long.
problem I still see that some of the function names are too long but since I have not worked on expertiza project so I do not know for sure whether there is still room for improvement. But I do feel that some names are long. They have broken down the blobs of code into smaller modules, stated the names and the reason for doing so. No suggestions here. Great job! I definitely believe there is a lot of room for improvement by adding comments to the functions describing briefly what they do They have done a really good job at following the ruby style guidelines.
problem They haven't deployed yet, so I can't manuallyÂ test it.
problem The link for the app has not been given. I feel that there must have been issues while deploying the app, like most of us did.
problem There isn't any view associated with the controller action and hence i am unable to manually test it. But as i can see that the automatic tests aren't getting 100% coverage, there certainly are some corner cases which i am unable to test.
problem The code is not deployed.Â There is no link to an accompanying video for the test cases.
problem As the reviewer I had a good understanding of this, but additional commentary on why the testing strategy was the best option would be helpful.
problem The authors have not explain their work. They havent said which design pattern they have used and why. The wiki is just loaded with basic information about the code.
problem They use succinct words to describe the tasks and how they finish their plans. It could be better if they can add more explanations to their codes.
problem Everything looks good, they also screenshot the result of theÂ test. Yet, they didn't explain details about their test codes.
problem The writeup does not include a test plan.
problem The writeup does not include a test plan. However the team has mentioned that since it was a refactoring project, the tests have already been implemented.
problem There isn't any test plan mentioned on the wiki page. They have included snippets of the test which they ran and has passed without any failures.
problem They did not use the word "plan". They just describe what they have done.
problem They have done the best job at this as I can see that they have pasted the piece of code which was supposed to be refactored and the piece of code after they refactored. TheyÂ have also written about how they broke down the exisiting bulky method into smaller modules and they have also provided the names of those modules along with code snippet. I did feel that certain names were really long, but they did make sense as to what they mean. I would recommend if you can still cut down on the length if possible.
problem The team has elaborately explained their work in refactoring the existing code. They have also explained why they have taken a particular approach for example in Exceptions in Helper method section, the document explains the issue with the previous code and how it has been resolved .This gives more context while reviewing the code. However in some sections, the reasons for making so could be more specific. For eg:- in the Approach for Refactoring response_report method, the statement "Â the controller method originally was sharing a lot of instance variables with the corresponding views, and it has the long switch statements is quite abstract." You could name or highlight in the code snippets, which instance variables are being referred to. Similarly in ,Â Approach section of
problem The purpose of the project and what all changes the team did in the project is made lucid in the writeup. The impact of the test looks promising enough. But again, I think you guys could have been more descriptive of the actual changes that were done and the results thereof. If the explanation was done on the basis of the actual code implemented, it would have helped a lot.
problem Need to mention in a more descriptive way what changes have been made and why they have been made. The tests are meaningful and seem to impactful to the project.
problem All the tests are working with a success. I can run the test with rspec command Â I might be reading the wrong number but when I ran your test case on expertiza linux virtual machine I getÂ Coverage report generated for RSpec to /home/expertiza_developer/expertiza/coverage. 1232 / 16971 LOC (7.26%) covered. Â 7.26% coverage?
problem Yes. The authors have written rspec for all the test cases in their test plan. The test coverage (as seen in the screenshot) is 100%, which is good. One thing that the authors can add is markers (comments) in the rspec that correspond to their test plan so that the reviewer knows which test corresponds to which plan.
problem The code in the file spec/models/collusion_cycle_spec.rb follows DRY principle.Â However, the code not well commented to help reviewer understand the the flow of the code. Also, the code has long methods which can be broken down to smaller functions.
problem the newly added code in the pull request has not been excepted and the code lacks explanation of why the tests were written.
problem The pull request that is submitted has not passed. But the code submitted is well written. It follows the ruby style guidelines and proper formatting. the method names also seem to be proper.
problem I am not having trouble following the code, but comments should be added, currently there are no comments. You have used the 'let' well to keep it not DRY. There are good enough methods and no more methods needed to be added. The it statements clearly explains what each example will test.
problem Comments need to be added so that the reviewers can know what the authors are doing what they are doing. This makes it hard for the reviwers to understand the functionalities. The code follows the dry principle.
problem The code submitted is well written. It follows the ruby style guidelines and proper formatting. the method names also seem to be proper. The authors can add a few comments to describe the code which will make it better.
problem I could find the code contributed easily, which I appreciate. The Ruby guidelines have mostly been followed. There seems to be no issue there. No function is longer than necessary. There are a few redundant spaces that RuboCop has detected. Also I would suggest adding more comments to make the code and tests more readable.
problem The code has no comments and it is very hard to understand the functionality of the code if we only look at the code. The wiki does explain what the author is trying to establish. However, they need to mention the flow in the code as comments as well so that reviewer understands this clearly.
problem The features work as intended when manually testing the code. The question I have is what if the score inÂ cycle_similarity_score is a zero or a negative value?
problem The code takes care of all the major functionalities and just needs to explain the flow more. The build is passed and the coverage has increased
problem The authors must provide a screencast of their tests so that the reviewer can see how their testing works. There is no screencast in the code at the moment. They have only added a screenshot to the code that tells about test coverage.
problem The work takes care of all the functionalities. The coding style and standard can be improved to better explain the flow of the code and have more comments in the code.
problem Since there is no feature or link for a deployed application to test and I do not see a screencast or a video of the tests in action to know if the test cases are working as intended. I recommend adding a screencast explaining all test cases covered and how all corner/edge cases have been handled.
problem The project is well documented on wiki they have explained some of the changes but they have not mentioned where the changes are and the reviewer has to find it manually.
problem The authors have given a brief introduction to their project. They mention that they are required to add rspec forÂ collusion_cycle.rbÂ model. They can add a brief introduction to TDD process and a Wikipedia link can be provided. Other than that the document is well written.
problem I really like the way they have written out their writeup. It is detailed and has relevant headings/sections providing a good flow and readability to the user. The use of images for explanations is really helpful. I would like to see a little more information about what the project was about as I could not quite understand what they meant by a collusion cycle and I had to go through the project description. Overall very well done.
problem The writeup is pretty well explained. However, the writeup does not explain the changes that are being done in the code and if they have been tested it properly.Â They have mentioned different functions that perform certain actions, However, where are these functions written and in which file is mentioned in the wiki. The reviewer has to manually find the file where it is located.
problem cycle_similarity_score and cycle_deviation_score test cases have been tested well with using 2,3, and 4 nodes tests.Â Two_node_cycle method has been shown and it was used to explain how second_node_cycle, and third_node_cycle tests were implemented. You tested by checking if each reviewer was nil and using expect to check if it return the correction result. I would assume from the document that second, third node cycles were implemented in similar way but used another participant to test for nil.
problem The authors have explained the test plan very clearly. It's is really good that they have used images to define different edge cases and possibilities. I believe the authors have covered all the scenarios upto my knowledge. I really admire the way of using images to explain different cases. However, they need to mention which files these unit tests are included in.
problem Although, the writeup explains the functionality very well, they haven't mentioned which design pattern they have used an why?.
problem No they have not mentioned which design pattern they have used. They have mentioned how and why the changes they have made.
problem The writeup explains well. The only question I had was why is 'context' being used to test the methods and not 'describe'. It was good that you have used let to create objects, as well as used let at the beginning of the code.
problem A test plan is not included in the writeup.
problem I do not see a test section
problem The team has not written about a test plan.However it has been mentioned that they are unable to access the assignments section which has prevented them from testing their code.The team has however considered edge cases as they have mentioned in Adding past due assignments to task page - a helper method to break long file names into shorter ones, and adding pagination to handle a huge list of assignments.I was wondering if in the separated teamed-with list from task list, are there different task box for students that a user has teamed with in different courses or if it is a single task box containing all the students a user has teamed with. Also, if it is the first case and if the number of courses increase, won't it clutter the page with multiple task boxes.
problem Testing has not been done. The authors explained in the document that they were unable to test due to some issues.
problem There isn't any test plan associated with the writeup. Hence unable to comment on it.
problem The test plan section is missing.
problem The writeup does not include an explicit test plan section so it is hard to say what all cases the team has considered while implementing their changes. Making the writeup a bit more elaborate would have helped here. The result seems to indicate that they must have exhaustively covered all the edge cases, but would be unwise to form an opinion without a solid writeup.
problem Although write all required tests was mentioned as one of the tasks in the writeup overview, I couldn't find any test plan as such in the document.
problem Again cannot find the test plan so no way to check these.
problem No tests are added, test plan is also missing from write up.
problem As mentioned above, the author has not proposed a test-plan.
problem Test plan is not included in the document. Testing has not been done. It is mentioned in the document the reason why the authors were unable to test.
problem There aren't any changes made in the spec folder. Hence i'm assuming that the authors haven't added cases to the existing one, if any.
problem Testing is pending.
problem There is no test plan that is included in the writeup so it is hard to say what all cases the team has considered. Clarifying all the cases in the writeup would have helped here.
problem There was no test plan mentioned in the writeup nor did the code contain any rspec files.
problem Overall very little stands out, the class, variable, and method names mostly adhere to the expected good ruby practices. Two things stood out to me in this section, list_current_student_tasks is slightly misnamed. this seems like it lists the tasks of the current student, not the tasks that are currently due for the student. The method breaking_wrap_warp has an odd name as well, the double wrap just makes it difficult to intuitively know its use.
problem The pull request has been sent but the build hasn't passed. Also the code coverage has decreased toÂ Â 13.896%. Most ofÂ the code follows good convention and can be understood easily.
problem The link to pull request has not been submitted. Â Upon searching and finding the link to pull request, I saw that the Travis CI build failed and there are 15 code climate issues.
problem The authors have added comments for almost all the changes which they have made. They have used simple names for methods and variables which are self-explanatory. The only part i didn't understand was this:Â +require 'will_paginate/array' Why is this being used? It will be great if comment could be added for this.
problem Your pull request couldn't be found. All the naming conventions seem appropriate and it is easy to understand what everything stands for. Since the pull request was not found, it is difficult to investigate any further.
problem The functions that are used appear to be of reasonable length. Also the team has included certain comments that signify what is being done but I feel there should be a bit more number of comments so that it is easy for someone who is observing the code for the first time to understand what is actually going on in the code.
problem Majority of the code looks great, DRY and following good style. One function does stand out as a bit odd, due_date_color. I understand that it needs something akin to the large if-else chain so you can correctly apply the color based on due date. But it seems there might be a better way? If nothing else you can explicitly call return on the color rather than storing it in the rtn value and returning at the end, this makes it so that readers will not have to read extraneous information before reaching the exit of the function.
problem In theÂ def due_date_color(due_date
problem Upon checking the code contributions, the mentioned problems do not exist. Â Suggestions: Simplify the method 'due_date_color', as it is hard to read.
problem The code follows good rails practices. But I would have loved it more if the team would have been more descriptive of the changes they have made in the writeup.
problem By reviewing the code, I made the following observations: 1) None of the functions are too long, they are all around 8-15 lines each and good modular approach was followed.
problem The app is not deployed so I tried to download the zip from github and tried to run it on localhost but failed to start the app. Errors are found when I run rake db:migrate. I suppose there must have been certain changes that is not allowing the app to run on my machine. Although the team has included screenshots of the changes to the UI in the wiki so by looking at those the whatever the team has claimed to be working appears to be working.
problem From what I was able to test it seems fine, I can't really think of any edge cases for this project. Maybe if the date is negative? Or if it is incredibly far into the future (not sure what errors this would cause, just how should the functions handle something like 1/1/3000)?
problem I was able to run the project but I was not able to test it, as the instructions were not given in the document on how to test it. It was stated that the authors themselves were unable to test it.
problem Not all features are working as stated in the writeup. The segregation of assignments and student partners has been done but i cannot see any colored assignments which are present in the assignments page. Furthermore, as per my understanding, the past assignments should be included in the past assignments section but these aren't included in those and are present in the current assignments section.
problem All the functionalities seem to work just fine. The code does exactly what was expected of it. They follow good rails practices and the code is easy to follow.
problem The project was not deployed on any platform such as Heroku or AWS, hence manual testing was not possible. There was also no screencast demo so I had no way of testing the new features.
problem The document is very thorough and precisely explains what was supposed to be done and what has been done by the group. Also the group mentions which files required editing for each task. This helps the reader to understand what was exactly done by the group. The document significantly helps the reader to understand what the project does and how the project does what it does. If I have to provide any suggestions for the Wiki then all I would ask is to write it in a more categorized like dividing each task into two section like first what is the problem and second what is the proposed or implemented solution for the stated problem.
problem Very easy to read and follow, good work. Some of the wording can be improved, for instance the Adding past due assignments to task page section, reading the first paragraph it feels rather repetitive. Perhaps you can combine some sentences, or try to change the wording among the similar sentences 1&3, 2&4. I think you did a good job in describing the changes in both a technical and non-technical way, but seeing a small snippet of how the views code was changed might help here. Are there any tests being done on the dates before adding them to the tables? For instance what if an instructor accidentally assigns a task a date for say 2108 instead of 2018?
problem I was going through the Wiki page and the first thing I read was the Project Overview. There is a random Issue#80 mentioned in the Overview. I was wondering if the numbering could be consistent for all the issues. The team has described in detail as well as posted screenshots of the issue and the solution. This makes it easy to understand the work done by the team. The writeup is clear and consice. It is sufficient to fully grasp the project objective and the work done by the team.The only issue is that the team has used screenshots of the issue and the solution for all the bullet points in the overview except "Separating current and past task list" This feature has been implemented as mentioned by the team. Just to be consistent in the formatting, you can add pictures to this heading as well.
problem Pros: - Project is explained as a list of tasks in points which is easy to read and understand - Screenshots are used which makes the project easy to understand Â Cons: - References are missing - Test plan is missing - List of files modified or added can be mentioned in the document
problem The write-up is clear showing, for the most part, screenshots of the functionality.Â Please add screenshots for the last two sections.
problem The writeup is very descriptive of what all changes were expected and the changes the team has made. It is very well written and comprehensible. The team has been very has been very illustrative of how the changes they made have affected the application and have attached screenshots wherever required. But I do think they could have elaborated a bit more on exactly how they did all the changes that they did.
problem The writeup was well written. It clearly explains the problem statement, the solution and the files added/changed. Some screenshots were also provided which helped me in understanding the problem statement properly. From the writeup, I could easily understand that the aim of the project was to add past due assignments to task list and highlight current due assignments with different colors. I liked the way they had split up the whole project into smaller sub tasks. Overall, it was written in simple, easy to understand manner and hence I am giving a 5.
problem The writeup does explain how and why the authors did the work they did. There were no mentions of specific design patters, but they also don't seem rather applicable to this problem. Something that might be improved upon is the section covering the highlighting of current and past due assignments. Perhaps you could describe what each color means? For instance shouldn't all past due assignments be red by default? And for assignments that have not yet reached their deadline, how many days away does the color green/yellow/red represent?
problem Specific changes in specific files have been mentioned such as "A helper function was also added to the student_task_helper.rb file to break a string into multiple lines, even in the middle of a word, if it contains a word that is very long. " in the adding past-due assignments to task page. This removes the need to look at all the files individually to figure out the code.Â All the issues mentioned in the overview have been clearly explained in the following sections except forÂ Check for correction in due dates o
problem Design patterns used are not mentioned. Â The way the project was done is explained clearly - the methods, variables, tables added/modified, and was easy to follow. Â Suggestions: Code snippets can be added along with the explanation in the document to better understand what was done. It is hard and time-consuming to look at the explanation in the document and search for the corresponding code in the repository.
problem Yes, the changes and addition of new code has been explained. Also the reason for those changes has been adequately stated. I cannot see any code on their wiki page so i'm unable to comment on the code related aspects like design pattern etc. They haven't mentioned this in their writeup atleast.
problem Please add a list of the changed files with a high-level explanation of what was changed in each file.
problem The "whys" and the outcomes of the project are very well described. The purpose and the outcome of the project are easy to understand and the writeup is very lucid. Having said this, as of these two areas seem to be the major focus of the writeup. The 'how' part of the project could have been elaborated to a better extent. It's difficult to understand what exact changes the team has made to arrive at a solution. I think this can be taken care of in the next submission.
problem The writeup explains the problem statement and then goes on to explain how the team went about solving it. It mentions the name of the files that were modified/added for each task and also tells what functionality was added in each file. Screenshots of code snippet were added, which was very helpful in understanding the implementation of the project. Â I am reducing one point because
problem There is no such mention of any test cases present in the wiki. even in the code there is no information present regarding the same. It has long functions which i believe can be broken down and code commenting is required.
problem There are very few cases mentioned in the writeup but they have managed to include a lot of cases within, the test cases are well thought out and well written.
problem The team seems to covered most of the tests required for testing the functions.
problem The code follows ruby guidelines. However, there are no comments present in the code which makes it very hard to understand the flow of the code. The code follows dry principles but lacks a good coding style
problem There were very few or no comments and it does become extremely difficult to work on such next time for someone, I would consider adding more comments.Â It can be seen that the Ruby Style Guide has been followed and there isnt any code smell.
problem It being a test file and the conditions being in plain english already , it was easy to read through and follow them .Â if it was possible to move few of the object creations into the earlier / common steps , like in four node cylces . it would be good to make it look more dry
problem The functions are adequate in size and cannot be extracted in a separate methods. It would have been helpful if more comments were given on the test cases. the code fillows good ruby and rails practices.
problem The test plan has been implemented and properly explained. There are no screen captures to show the coverage or if the test have passed.
problem The authors have written the detailed test plan but they have not written the actual rspec code for automation. The authors must provide link to the pull request so that a reviewer can review their code.
problem I had to search for the unity id of the student to locate the pull request. You might want to rename it to include the group number and name of the project. TheÂ Coverage increased to 44.696% Some of the checks in the build were not successful. The test file has elaborately named tests which are indicative of its function and also which method they are testing.
problem Yes. They made a pull request and coverageÂ will increase (+0.8%) to 44.696% when pulling, butÂ one check is not successful:Â the code seem to have to similar blocks needÂ refactoring. This team is working on unit test for a model, so their pull request just include one newly added spec.rb file which is correct.Â I'd mention a minor problem: the "describe-context-it" hierarchic structure is not used properly. As seen in their code, they used "describe-context-it", "describe-it", "context-it" or "context-context-it" for one "it" block. It's not clear what the differences are.
problem The pull request increases the test coverage. Certain changes are required in the code as highlighted in the pull request. The variables and method names are reasonable and with only some changes in the code the tests can be inter=grated.
problem The authors have not provided any screencast of the testing they have performed. They have also not created any pull request (not mentioned anywhere). They authors must add a screencast of their work if they do not deploy their application so that reviewers can see their work.
problem The authors have not provided any pull request. So it is not possible to review their code at the moment.
problem Code Climate produces several notifications, namely issue with spacing, tabbing, and potential for minor refactoring.
problem The team explains in great detail about the menu items, which is the focus point of the project. The sections Table explains the database entries. Instance methods and class methods are explained which makes it easier to review code. The team has clearly stated the issues that the project aims to solve and also explained them in sufficient detail. The screen captures to show the menu items gives context to the explanation provided. However, I feel that there is some extra information on the wiki as well. As this is a wiki page for the project,I would suggest putting the information about Test Driven Development and Unit Testing as embedded links or maybe at the end of the document as it is does not serve as an introduction to the project but rather gives a background to the project. I have similar views about the section in the document - Expertiza Environment Setup. Setting up the environment again is not the main function of the project.However I do agree that it helps someone who is completely n
problem wiki for this project is well written and organized. The hierarchic structure almost covered every thing need to be mentioned: There're "introduction", "problem statement", "plan of work", â€œimplementation stepsâ€, â€œconclusion and learning outcomesâ€ and â€œreferencesâ€. But I'd make 2 suggestions: 1. The â€introductionâ€œ part isÂ very long and all aboutÂ explaining what expertiza, TDD and unit testing are, which I think is not necessary. "introduction" should focus more on your projectÂ rather than something so general. 2. There's no result shown in the write up such as how many coverage percentage they finally got.
problem The project is based on Testing and the team looks to have covered many test cases. You can include a section explicitly called Test plan just so that reviewers can put a tick mark on that criteria
problem The test plan was very thorough but missed a lot of edge cases and invalid values. For example, #above and #below don't test cases when there is no above or below values to return.Â .find_or_create_by_name should also test both cases (find and create) but only one of the cases is tested. .items_for_permissions is a good example of a more thoroughly tested method
problem The test plan is described very well in the wiki. The test plan includes different conditions that they need to test. There is no mention of any edge cases in the testing cases. If there are the authors need to add that in the wiki as well.
problem Although the section is not titled test plan, as this projectÂ is testing, the document gives a lot of detail on the reasoning for each of their tests. It does not, however, give much detail into describing edge cases and invalid input scenarios, and how those situations are handled.
problem The team has explained the testing part properly.They have mentioned why they have created a specific number of tests-(Here 16) to test the functions in the model file. Each test is properly explained.They have mentioned "using factories"Â in the Test Entries creation section and I'm not sure if they are referring to the Factory command pattern.
problem Yes, it seems they have thoroughly listed and explained every steps they took in detail. But I'm a little confused about the "expertiza environment setup" part cuz they didn't includeÂ installing bower code in "setup commands" which is essential to run expertiza on local host. Also, I didn't find database migration in their setup process.Â It's a minor problem but I'd recommend making that part complete.
problem The only part that could probably be rename is changing from @test to @test_menu_item to more clearly show what the test variable is like you did for @controller_action
problem Some blocks are long but that is expected for test files. The code doesn't follow the style guide in its indentations. There are different levels of indentation throughout the file. Also, all of the "# Write your test here!" should be deleted.
problem The functions all look short and concise.Â One suggestion I have though is to extract some of the redundant code out of the functions.Â For example, in a few of your tests, you create and save the objects "test7, test8, test9".Â These could easily be put in a before(:each) block to reduce redundant code. Other then that the code looks great.Â You did a good job following the Ruby Style Guide.Â All in all good job.
problem The app has not been deployed and no link has been provided. However I feel its due to an issue most of us were facing while deploying the app.
problem Any failures for this would be because of the actual menu_item implementation, not the tests this group created.Â But because they don't test all edge cases, if there was an implementation problem this might not get caught.
problem The project is aboutÂ testing a model in expertiza. At the moment, the users do not have a pull request. So there is no way to test their code or tell if their code is working properly.
problem While the write up does not contain an explicit "Test Plan" section, it does contain a section explaining the different tests that were written.Â These tests do a good job presenting the reader with the code and a what the code does.Â That being said this section could definitely be improved.Â I would suggest adding an explicit "Test Plan" section as ell as updating the test conditions and what they do.Â I like how you included the test cases in this section, but instead of including the raw code and then farther down the page a description of what the code does, maybe add a description first, and then the test.Â This would help with readability.Â Other then this though, it seems like you hit all of the main scenarios within the scope of the tests.Â good job!
problem They got Plan of Work instead of Test Plan which I think is almost the same thing. In this section, they concisely present their plan and it turns to be reasonable and easy to understand. But it just briefly talked about the main steps they've taken and it's too short to cover different-conditions, edge cases, etc.
problem Yes, the write up does do a good job explaining what the authors did and why the authors did it.Â Since this project mainly focused around Unit Testing, there wasn't really any "design patters or principles" that the team needed to follow.Â That being said, they did write clean code that followed the Ruby on Rails style guidelines as far as I could tell.Â OneÂ small problem I had with the write up was the amount of information that was presented on Test Driven Development.Â While I appreciated the section they wrote on Unit testing since it related directly to what they were doing with their project, it seems that including a section on why TDD is good is a bit ironic.Â I say this because while TDD is good, this is an example of testing after development and not TDD.Â Because of this, having a large section in the write up that explains TDD seems out of place.Â I would suggest removing this section.
problem No writeup link provided in the submission. There is a documentation file attached that gives information about the project.Â Fair explanation about what project is about. Could have added more background information about servo, rust. Few lines are only added.
problem There were no tests added that I could tell, and so I would work on figuring out how you will test your contribution to Expertiza.
problem No pull request submission. Couldn't check theÂ test planÂ added/modified by the author.
problem There are no test cases added, please try and add them at the earliest, some cases could be finding the total commits made by each user and comparing against the expected, wrong github link check etc
problem No test plan was added in the Test plan writeup and similarly no rspec files were added. Also there were no instructions for manual testing. So I wasn't able to check any of these.
problem As mentioned earlier, there was no test plan created (going by the wiki). There is an automatically created test case :github_data_controller_test but it doesn't have any tests written out. Do plan on testing it rigorously to make it foolproof.
problem They do seem to have a file: github_data_controller_test.rb but I do not see any piece of code written in it. As per my understanding according to what was written on the wiki page, I did not see anything in the testing section. So, I do not have any idea of what I should expect to see in the code. I am assuming the team would still be working on this and probably have it done by the next round of review.
problem I can't find a PR for this group, using the name of the PR or contributors. Honestly I dont know where to find the code to even check this, since there is no PR and its actually quite difficult on Github.
problem No pull request in the submission.
problem I couldnt find the pull request associated, please complete this at the earliest.
problem Pull request couldnt be found for the project .Â It would be good if the authors provided the pull request nameÂ The code , variables names and class names look well written
problem There was no pull request link given, only the link of the team's github repo. Hence I looked at the commits section of the repo to look at the recently made commits. By looking at all the changes in Git commits, I could note that proper namingÂ conventions were followed to name variables, methods and class names. They have ensured that the newly created variables and methods use the same style as the code that is already present in the file. I felt that every named item in the code was self explanatory and the purpose of each variable/method was understood from the name. I'm deducting a point because I looked at the commits and not the pull request.
problem I could not find a pull request that matched the project description. Have you opened a pull request yet? Consider opening a pull request at the earliest so that the Expertiza team can check the work you have done and integrate it if it passes their requirements.
problem There are gem related updates in the gemfile which majorly seem to be for a newer version of gems. But this is not the primary concern of the question. Apart from that, I reviewedÂ github_data_controller.rbÂ file. The actions defined in this file seem to have understandable names (assignment, assignment_team). However, a brief description about a function (action_allowed?) would have made my job a little easier and code would follow a better practice ofcourse. Was able to understand what this meant (possibly for checking if it is a pull request?) GI
problem No pull request submission. Couldn't check the code modified by the author.
problem Somethings I found a bit odd, but thats my opinion, changing gem files could lead to serious complications so i wouldnt touch them, please remove puts, A java like coding approach has been followed
problem The newly added code looks dry to the most extent . There were some instances in the old code though that could be modified , like the long brackets /with nodes
problem By reviewing the code, I made the following observations: 1) None of the functions are too long; all are around 10-16 lines each and good modular approach was followed.
problem It was a bit difficult to find the files modified by the team. I went through the commits and found two files that have been created/modified: github_data_controller and github/show.html.erb. The code mostly follows good Ruby practices and there are a few comments provided that tells what that particular code should do. The functions don't seem to be too lengthy either which is good. I am not sure how the GraphQL should be, but it seems to use many lines for a couple of words which I don't think it should be. You could add some more comments for someone else to be able to follow the GraphQL lines. Overall, good work.
problem I do not think that they have any of the functions which are too long. They have followed a pretty neat style of coding As said earlier, the code does look good however, I see there is some cleaning up left to do (file ex: github_data_cotroller.rb, lines: 65+) I worked on a mozilla project, so I did not have a chance to work on any part of the code of expertiza. Overall, they seem to have followed good modularity. However, as I mentioned earlier, for better practices and for making reviewer's life easier, a brief description for a not-too short function could help. The code does seem to follow the Ruby Style guidelines very well. They have defined actions in the controller which is a good practice.
problem Unfortunately as we can't deploy our projects, I am unable to test their implementation. They did provide 3 pictures, though it is unclear to me when they were taken and what they truly indicate.
problem No instructions given to test the work of the author. Please add a screencast/ wiki page to ease reviewing process.
problem There are just images of expected output, no deployment was found so there was no way to check cases
problem Deployment of the code wasnt seen to present , to test the functionality . Images to some extent show the work done by the team
problem I couldn't manually test it as the app was not deployed on a platform such as Heroku or AWS. Neither was a screencast demoing the application running on the local server provided so I could not test the features of the application.
problem Since the code could not be deployed yet, as is the case with most teams, there is no way to manually test the features implemented.
problem The team has provided the screenshot of their working code's output, which is great! However, I have not worked on expertiza project and I do not have idea of how to build and test their code. I am not sure if they were supposed to deploy it. But a screencast of their demo would have been a lot better to understand their work. I would create a small screen cast explaining briefly the aim of the project and show a demo of your work.
problem The first think i notice is in the problem statement they say they want to calculate "meaningful" metrics from github. What does that mean? it isn't explained further in a sort of implementation section. That sounds good as a base problem, but I think they should expound upon that to include specifics. They do explain the background, that they want to include functionality to take metrics from Github and display them to instructors, which is pretty good. They describe their planned implementation, but don't go into project level specifics and actually explaining them going through the plan or how it works. They simply provide the interface by which they will receive these metrics, but not how it will talk specifically to Expertiza. I think they need to work heavily on shoring up their logical flow of information and explaining the implementation, as well as their thought process going through the 'how it works' section.
problem No writeup provided by the author. Please provide the writeup for the next submission.
problem The objective has been clearly stated but there is no additional information related to anything else, there is no test plan, no images or diagrams
problem Basic functionality is writtenÂ well that they wanted to give the matic after parsing the github commits information . If more detils of what was bad with the earlier design is written , it would be easier for the reader.Reference could be added to the earlier implementation.
problem The writeup seemed to end abruptly. Improvements and testing sections were blank presumably because they are still working on it. I liked the way they had broken down the problem statement into smaller tasks, so I was able to understand the requirement. Although they had provided a link of the previous team's writeup, I couldn't really understand how this team's design works. Perhaps they could have explained the proposed design with design patterns, or screenshots or code snippets.
problem The problem statement is explained well and one can understand the need for it in Expertiza. There are well formed headers distinguishing between each section. However, the contents haven't been filled yet and need further work on. Adding a section on items completed and tasks left would help the reviewer understand the flow better. The team has identified the sections they want to include and I believe the next submission will include it.
problem The wiki page is pretty clear as to what the project aims to achieve. There are some things I would do after getting the first round of reviews: The word metrics is a little ambiguous from the first time reading according to the wiki. It would be aÂ littleÂ more clearer if you could also add in specifics/details to that. I have looked at the screenshots which tell information for each commit like: commit message, committer, time of commit, additions, deletions, files changed. They are also showing total number of commits of each user and number of commits by day. Overall, I liked their description of write up as they have included the previous work link and the proposed design to improve it. Â P.S.: The first line in introduction is missing the name of instructors for this project. Something that will not take more than a couple of minutes to edit.
problem They do not have a test plan or any talk about implementation of tests. First i would recommend starting with ensuring everything works assuming all inputs are logical. Then i would ensure these metrics update in the Expertiza DB as commits are added, or whatever other metrics are being considered. These are just some ideas to start from, because testing in my opinion is truly the most important aspect.
problem No test plan was mentioned in the wiki, It gives the impression that testing cases has not yet been considered, I would start adding test cases in the wiki and also mention what corner cases are to be considered.
problem Write up had the testing section blank. It was not part of the requirements document i suppose
problem The writeup did not contain any Test plan. Hence I was unable to review the different test cases.
problem There is a Testing section but it is yet to be implemented. This gives an impression that the users have not tested their implementation yet (even if they might have). Consider writing detailed test cases on how you would test the commits made and scenarios when the user uses a different git account but has still contributed towards the project.
problem At the time of reviewing, I was able to see that the testing section was empty and hence I believe that they are yet to work on that. However, if this is something not mandatory, I could be totally wrong.
problem There is no explanation of the actual implementation, only of the proposed plan, so I can't say they explained any of the work they did. I think they should work on adding these to the website as soon as they can, so we can get a idea of how things went.
problem The images submitted should have been part of the Wiki, there is no mention of design patterns or principles, It would have been very useful if they had mentioned what files would be affected and what plan of action would be, the objective should have been disintegrated so that it could have been relatively easy to understand.
problem Baisc steps were explained, but having a more detailed infromation on 'how' they did the work, different steps taken etc , would be encouraging to have.
problem Although the writeup explains the problem statement, it does not explain their work extensively. The proposed design simply says they are using GraphQL Git API but doesn't explain that further. They haven't mentioned the use of any design patterns. However, the writeup does say that theÂ Github statistics API used by the previous team doesn't produce the required results and that is the reason for using GraphQL API. I'm deducting points for not clearly explaining the proposed design or adding any screenshots.
problem The authors have included images as part of their submission which gives a little idea about what they're trying to achieve. However, the images could have been included as part of the writeup on wiki giving brief descriptions and instructions on what was done and what a user needs to do to see it working. There is a proposed plan section that briefly describes their intended plan of action, however I feel it could have been more thorough with the use of images and examples. Also, plan on including the design principles/patterns you have used.
problem The write up was certainly well structured and covered the basic sections (why they are doing it, what needs to be improved, how they plan to improve it). Not that this is something mandatory, but something I would like (as a person who is reviewing) is, I would also put up a side by side comparison of how their information would be different from the previous work. They have done their part of the job by adding link to previous work. I did try to skim through the link, however this is not your part, it was a long read and I had to figure out what was going on just by looking at the figures. Apart from this, good work on explaining your project.
problem There is no design principles or pattern information about the project mentioned anywhere. I could see the 2-3 lines of description about the rust language and servo in the documentation. Please add the flow of the project or any design followed for better understanding.
problem No test plan present in the writeup. Try to add the test plan implementation for the next submission in the writeup.
problem No pull request added to the submission. However the author has mentioned the file changes in the documentation. In the net-traits/Cargo.toml the author has mentioned a changes and a comment has been given which is good programming practice.Â In the net-traits/lib.rs file there is a comment, there is a comment "not sure on syntax", since it is open source project avoid comments like that.
problem No test cases added in the test plan and so there were no test automated in the code. I could see only existing code committed in the github repository shared.
problem The application is not yet deployed, so i couldn't manually test the application. Try to deploy the application to review your work.
problem The team clearly wrote what was done by them. But being an outsider to the project. It was difficult to follow and understand the document. example Step 3: Added the path to include "Rust-Har" Library in net-traits/Cargo.tomlÂ .. more clarity about this step would be helpful , like what is Rust Hat was not clear when i read it and cargo.toml Â A little more information ofÂ giving background would make the document really good
problem I couldnt find a clear section with test plan written . There was no indication in the document about testing being done . Being a Mozilla project , I am not sure if i should be expecting it
problem The writeup had no test plan. However, the team will have to wite a unit test if they choose to proceed to the "Subsequent Steps."
problem I could not find the pull request in list available on servo's repo.
problem As of right now, I'm not understanding your project.Â For your introduction, while you do mention what Servo is and how Rust is used for it, what exactly does a Servo do?Â What are Servo sessions?Â Is it used anywhere in the real world?Â For your project description, there needs to be moreÂ information then what is given.Â Maybe try to include some pictures or visuals to showcase whatÂ the intention of a Servo session is suppose to do when creating HTTP archive files.Â I appreciate you displaying your steps as to what you have implemented so far.Â It's a good way to tell me what you have so far up to the first submission.
problem Since there is no pull request and no way to know what exactly you put in your Servo project, I checked your commits and based my review on those for this review.Â Based on those, it looks like your variables, methods, and class name conventions look fine.Â Hard to say personally as I am not fluent in Rust.Â Good job though!
problem I would recommend making detailed comments for your Rust code so that a reviewer reviewing your project that doesn't understand Rust has a general idea as to what something is doing.Â Either that or mention it in your documentation.
problem As of right now, no test plan.
problem Can't manually test your work because I don't know how to.Â I would recommend deploying your work on Heroku if applicable or perform a screencast to showcase what your project is suppose to do.
problem I can see that the author has added tests, but since the pull request into the Expertiza project was not made I cannot tell if they pass or not. These tests are all thorough and follow the test plan well.
problem (NOTE): I was unable to find the PR, these results are from their fork Â Code is simply test cases.
problem No, for the seventh part in their Test Plan--the test for function items_for_permissions, they only test the first situation. But they miss nearly all the situation they mentioned in 7.2.
problem The web address of pull request is not provided.
problem First off the code does follow the test plan described, which means that it is very likely a thorough and complete test plan. The strings following the 'it' statements should read like a sentence, and some of yours do not (ex.Â it "Find or Create by Name"). Also the 'it' statements in the spec file could be organized better with a 'context' statement to help group the statements together.
problem There is no formal test plan and so cannot verify this. However, this team has included a testing section in the wiki which explains the conditions being tested. Not as thorough as a testing plan but these tests are inclusive of most of the cases.
problem The author does not have a Test Plan.
problem After looking through the code, I think they chose good variable and method names that are representative of the function and role they play. The build passed, but the codeclimate test checking device has issues that haven't passed, so i'm unsure why that is. I did mark that the build passed because the one labeled build passed, though this codeclimate issue should be looked into.
problem The team has modified a model and added a new rspec model file. For these code changes, they have used proper naming conventions to name variables, methods and class names. They have ensured that the newly created variables and methods use the same style as the code that is already present in the model file. I felt that every named item in the code was self explanatory and the purpose of each variable/method was understood from the name. For eg, row_average_score was a variable used to store the average of all the entries in a row. Hence I am giving a 5.
problem The author has successfully put in a Pull Request to expertiza.Â Furthermore, the code successfully increases coverage.Â The code itself is well written with variables and methods being named appropriately.
problem There is no comments included, as well as its DRY. Use "let" to create the objects which can be reusable with before(:each) instead of defining scores every single time for each test. The code is easy to follow and is straight forward.
problem Overall there isn't too much code to look at, but I think the format and place of the code was very logical. It was all in a model, where they altered aspect to exclude nil from the calculation. There really isn't too much that had to be added, so i don't think any needs to be extracted into a separate method. They did comment next to a line of code, which is not encouraged, since it can get confusing where to look for comments. Comments should be made before a method is defined on their own separate lines. Other than that, I think the model and testcases added are written in good Ruby style, is DRY, and overall structured in a logical and coherent fashion.
problem The function is not long at all. And they are nicely written, easy to read and easy to understand.
problem By reviewing the code, I made the following observations: 1) None of the functions are too long; Neither the method added in vm_question_response_row.rb nor the methods in spec file are long, they are all around 8-15 lines each and good modular approach was followed. 2) I felt the code was already modular and hence no new method is needed. 3) Apart from a couple of comments in the model file, I couldn't find comments anywhere else, especially in the rspec file where they have made a lot of changes in their different commits including the hex codes. 4) Proper Ruby conventions were followed throughout, including double spacing, having the logic in the models and no code felt repetitive.
problem The code seems reasonable and well written.Â The functions are of appropriate length and common code has been extracted successfully. One thing that would be helpful would be adding code comments to help the reader understand what is happening in the code.
problem The features work as intended, there aren't any edge cases I can think of in this situation, since the only choices you have to answer a question or leave it empty.
problem Unfortunately since we can't deploy our projects, i cant test the author's work.
problem This is only because we haven't figured out how to deploy it. And I could not test it manually.
problem Yes, the intended features are functional. The repo has not been deployed and thus i cloned the repo on my local machine and ran it. The features are working correctly. I cannot think of any corner cases where this code will break.
problem The project was not deployed on a platform such as Heroku or AWS and hence I was not able to test any of the newly added features. However, I am awarding two points because I was able to see a screencast demo of the project where the team was able to run the project in their local server showcasing the new functionalities.
problem It explains that in calculating the score it ignores the empty fields, so the score does not calculate the empty fields as a zero in the final calculation of the score. It does explain well on how you have implemented it. Â Could you rename the solution heading to something else or merge theÂ Explanation heading with the solution. It would be easier to read if all the information of the solution is in one location.
problem I think the write-up very clearly and accurately describes the problem and issues to fix. I can easily understand the project is focused around the subject of fixing peer review scores, as fields that are left blank are included in the math to calculate average review score. I understand that their project and goal is to fix this issue, to enable a more accurate calculation of average peer review score. They also describe very coherently how the project fixes the issue. They explain in the '/app/models/vm_question_response_row.rb' model file, they alter code to exclude nil values from the calculation of peer review score, which are the values of those blank review score entries. Overall, i appreciate the thorough method in which they explain the project.
problem The writeup was well written. It clearly explains the problem statement, the solution, the files added/changed and the test cases included. Some screenshots were also provided which helped me in understanding the problem statement properly. From the writeup, I could easily understand that the aim of the project was to ensure that empty fields should not be included while calculating metrics such as average score. Overall, it was written in simple, easy to understand manner and hence I am giving a 5.
problem The author has done an adequate job with their write up.Â I feel as though they could have added more information about what their project was about and what it did.Â That being said, the attached video helped a lot with understanding the projects scope.
problem It looks complete to me. You have tested when there is no empties, when there are some empties mixed in, as well as when all the fields were left empty. The only concern I have with the Test Plan section is you using nil and empty interchangeably. This could be confusing, it is best to stick with one, unless you are referring it has two different things then explain when nil occurs separably from empty.
problem Due to the scope of their project, I can say the test plan looks complete. They tested essentially the three types of cases and then variations of them to thoroughly test their model. They test when scores are all non-nil, all nil, and a mixture of the two, which conceivably are the 3 separate blocks of cases. Then they further try tests where you have 0 in some, not in others, or nil mixed in, and it goes on from there. I think they covered all of the scenarios which pertain to their contribution.
problem There is no formal test plan section included. However this team has taken testing into account and have mentioned a testing strategy in the wiki. The test cases seems exhaustive. But including a screenshot of the running tests or coverage report would have been better. I tried to run the rspec file on my local machine but faced an error saying could not load the file. This may be because , i am using my local environment and the database config might differ. Were the tests running for you.? If not, given the fact that your functionality is functional, you should check the tests once.
problem The wiki does not include a Test Plan.Â It does include screenshots of the authors test cases which is helpful, but without explanation, it is hard to understand.
problem It was explained underneath the solution heading of the method used but does not clearly state why they approached it by "If a score is empty, it should not be counted while calculating average score. Only not null review scores are to be counted while dividing by the total number of reviews, for the average score calculation.
problem They do explain how they did the work. In fact, they have a section well named 'Explanation' which talks about the implementation, and what they changed to enable correct functionality. Another note to point, it explains that the implementation directly corrects the problem they describe earlier on, meaning they talk about nil fields, and then they explain in the implementation how they fix this problem, which is good consistency. They don't explain why necessarily, but I think the explicit way they describe the problem and implementation implicitly answers the question. They did it this way because it leaves out those nil values recorded as an empty score field. They didnt use any design principles or patterns, but simply came up with a simple and quick fix to the issue.
problem The algorithm they used toÂ calculate the average peer-reviewed score is well explained. I don't think any design patterns are used in this work.
problem Yes, the wiki clearly indicates the proposed solution of the problem. No design patterns have been used. This is because the controller method that was modified to achieve functionality is relatively small and therefore does not warrant the use of a design pattern. Overall the method is well written following ruby conventions and the method name is descriptive of its functionality.
problem The writeup explains the problem statement and then goes on to explain how the team went about solving it. It mentions the name of the file that was modified and test scenarios are also explained clearly. Screenshots of code snippet were added, which was very helpful in understanding the implementation of the project. The writeup talks about the issues faced by the current system and then explains why the team used number of columns to calculate average score. I am reducing one point because the write up does not mention any design patterns.
problem No Test plan was included in the documentation.
problem I could see sample_submissions_controller_test.rb created for testing purposes, but it is not properly tested. Try to add more test plans. There was only test plan that scaffold approach created.
problem There are tests added, and they are automated. They all pass for me currently, but there is no test plan to compare them against.
problem I dont even see a pull request i can match to this project. Looking through the names of the pull requests and even the names of the accounts that opened them, as well as the contributors to this project, i couldn't find a match. So I would recommend you immediately open a PR as that is a vital component and the expertiza team can't test your contribution until you have a PR open.
problem I could not find the pull request. Have you created one yet?
problem Pull request is not attached to the assignment submission.
problem Could not find a pull request for the given project name or by the contributors name. If pull request is made the heading or title of the request is not clear enough to figure out which one to refer. So could not find the code that is changed. They have not stated the code file that are changed not the code snippets have been provided to check the code.
problem I would recommend at the beginning of the new controller perhaps writing a few comment lines to explain what the new file will do, if it is to be integrated into the existing Expertiza system. It does look like inÂ app/views/student_task/list.html.erb, they tried to get the correct tab spacing, which is good because it certainly makes code easier to follow if it follows the same format. Ultimately it looks fairly well defined and it even shows more to as they implemented things I didn't see on the website, and so I would urge them to include these implementations and describe their thoug
problem It took me a while to find what are the code the author wrote for this project so far. I needed to go through all their commits. In the SampleSubmissionsController, line 8, there is puts statement. Is this just for debugging? What is purpose of putting this statement there? I am confused.
problem There does not seem to be any of the 5 issues listed above. There are a few lines in the views that are approaching the too lengthy side of things, but nothing that is bad as of yet. Perhaps these could be written on two separate lines to simplify reviewing the code. Very good job on this.
problem Due to unavailability of code or changes made to the files cannot comment on the code altered.
problem No pull request attached to the submission, so i need to check the github link attached. It was difficult finding code changed by the author. Please attach pull request for the next submission.Â I could see a change inÂ app/assets/javascripts/submissions.js, the function is not too lengthy, have followed proper coding practices. Sample_submissions_controller.rb is the controller file created by the team. Good ruby on rails practice followed. No comments given, please add comments to understand the code more.
problem The link provided for the deployed app does not work.(It goes to heroku homepage) When I test the app on my local environment by the repo provided, I see the link for sample submission when I ligin as a student. Bt if the link is clicked it shows an error message: "A student is not allowed to index this/these sample_submissions" The use of the link is not stated in the documentation or what it should route to. Functionality is unclear.
problem The author has given the heroku link, but there was no application deployed. I couldn't manually test your application.
problem Write up only states the problem statement and the task that are to be done.Â Section: "Development so far" only contains the screenshot of the link added but does not include what changes are made or why they are made in the code. Sections for Tests, Proposed Design, References have been left empty. Functionality implemented can be explained in more detail for better understanding.
problem The problem statement is very well explained.Â Crisp introduction about how Expertiza works. The tasks to be implemented are explained well and it provides the reviewer to understand the project easily. Good work team. But try to give more introduction on the project and technologies used as it is wikipage.
problem The problem statement sheds some light into what the functionality is related to/what it does. But the write up is rather lacking currently.
problem The writeup was not so clearly for me to understand what this team's work is about. I had to go to our assignment file to find out. I think you guys should include most of the write up for the project in the assignment file in your "problem statement" section. And maybe also add another section saying what needed to be done, and what is the purpose/objective for this project (currently this is part of your "problem statement"). I personally think your current "problem statement" and "tasks to be completed" are the same thing.
problem The writeup explains pretty well the tasks that the team set out to accomplish. It lists them in a coherent section labelled "Tasks to be Completed" as well as indicating in the "Problem Statement" the issues they were bade to solve. However, I can't quite understand what their development does, as there is only one small section and a picture indicating they added a "Sample Submissions" link in the view. It does say that it is to allow a student to view sample submissions of reviews, but i'm not sure i understand how. I think they need to indicate a bit more coherently and explicitly what each specific development does and perhaps several diagram to help in explaining why it does that specific development. Though, they did a great job in explaining the tasks to be done.
problem No Test plan is included in the documentation. No tests that may have been performed are mentioned. So unable to comment.
problem No test plan section introduced by the author. I could see only the test plan section in the writeup. Please add the test plans for the sample submissions controller you are testing.
problem The only portions the write up currently covers are the introduction and the problem statement. There is nothing covering this information currently.
problem Testing is not included in the writeup. I don't think they included any rspec testing in the code yet.
problem There is no test plan or testing section included on the wiki page. I'm not sure if they considered how they would test different cases, but I would certainly start to consider the possibilities as if the contribution isn't tested well enough, it may break other areas of the project and they won't integrate your contributions. Simply put, you can start by testing the basic functionality works assuming everything is correct. Then you could move to other cases, like what happens if it tries to pull a submitted review that has been deleted by either the user or an instructor? I would certainly urge them to think about testing and their testing plan, because in my opinion testing is just about more important than the new contribution, because if it breaks old code, then the project didn't accomplish anything to be worked around.
problem There is no mention of how or why they made their development. It simply states that they added a link to the "Sample Submission" view and that they added the relevant controllers and views. I think they should spend more time considering they were pitching this to their boss, or others who hold stake in their work and work harder to describe their contribution in a way anyone could understand. Also, i'm not sure if the first or second 'task to be completed' are complete, because there is only the third task referenced on the page. So in summary, I would say try to explain your contribution with plenty of pictures as if you were explaining the project to any random person. Trying to clearly describe what you did, how you did it, and how this improved the expertiza project. Clearly mark these sections in a logical flow of information, as well as describe the other two tasks that have yet to be included.
problem They listed what needs to be done, but how they approach this is not really clear to me. Maybe they could include the file they edited and the code they wrote to make things clearer. And I am also confused by the second task they needs to do: 2. Add column grant_permission[----] to table [--------------------------] for storing user permission (published or not) for each project. Isn't this already included in our current production version? There is a column for "Publishing Rights". Am I missing something here?
problem The development part shows the link added to the student_task/view. There is a Header for Design pattern but no explanation has been given. As you have stated that Add controller, add view etc in the tasks to be completed, you could have explained about the design pattern used in your project.
problem The explanation for the changes are not provided. Only the screenshot of the link added for sample submission is shown. They could have included code snippets of the changes made to implement the functionality.The problem statement did not require implementation of any design pattern.
problem No test plan for this group
problem The authors have't added any automatic tests in their test plan. I saw their repo and there aren't any automated tests associated with the project. Cannot run any automatic tests due to this.
problem Test plan is not provided in the writeup. Try to add the test plans in the next submission which could enhance the quality of the delivery. Try to find the controller spec associated to the tree_display_controller.rb and make the necessary updates.
problem There are no test cases written in the newly added code. The authors must add rest cases corresponding to the new features that the add the project. Also, they have not mentioned details of the test plan in the documentation.
problem There are no automated tests as the authors have not mentioned any test plan in their wiki.
problem No Tests added.
problem 1.Â selected in app/views/menu_items/_suckerfish.html.erbÂ is not a suggestive name.
problem Although the code seems to follow proper naming conventions and indentation, there is no clear explanation of what the code does, in the form of comments. The users can add more comments in the code to make it more understandable. Also the build did not pass for the pull request. So the users need to recheck the code syntax again.
problem The code is not well commented which makes it hard to follow the code. Style of code can be improved and problem solving approach is lacking. Every changes has been implemented on the view. The author needs to implements some helper functions.
problem The code doesn't have any comment besides the codes.
problem The code is well structured throughout. Proper naming conventions are used for classes, variables and methods. Comments are added before each and every method that increases the understanding of the code. Code for menu items are explained well. Impressive coding practices. The "display_item_condition" in _suckerfish.html.erb seems to be a complex statement, which could have been written with less complexity (though your code work :) ).
problem Code follows good coding practices. The functions are not too long but not described well. There are hard coded values also present in the section. Helpers needs to be implemented with the code.
problem I thought you code was pretty easy to read but a few more comments may make it involve less using context clues to figure stuff out.
problem They haven'tÂ deployed it to public space yet, so I can't test it.
problem Cannot check the author's work as no link has been provided for testing. I tried to run the app on my local machine but there are some errors related to database which i'm experiencing.
problem Couldn't test the application as it is not deployed yet
problem The authors have not provided any link to their deployed project. They must deploy it in a publicly accessible server and provide the link in the submission. So it is not possible to test the features of the code that they have implemented.
problem The features work as intended but the features fail during edge cases. The authors have not considered the edge cases.
problem The authors have clearly mentioned the requirements of the proposed project. They mention about adding a new view for instructors to see what a student sees. The only thing that I find missing is that, every student view can be different. So how does the instructor see the a 'generic' student view? How is this different from impersonation? The authors should be more clear on this part.
problem The writeup is very well documented. The wiki explains very well the functionality of the code and what the project does. The wiki has not mentioned the test cases and how they would like to test their code. There is not future scope present in the wiki.
problem Very clear what the project does. One thing that made it harder to read was the larger snips of code like tree_display_controller. I don't think it is necessary to show all the code you wrote but more important to tell where you changed code, aÂ summary of what you changed about it, and why you changed it the way you did.
problem They didn't include test plan. Only manual test is introduced.
problem The writeup includes a testing section which states the steps for checking the expected output. I'm not sure if this is the testplan section. The authors haven't listed any preconditions,edge-cases or invalid inputs.
problem No test plan or testing done for the project. Though there seems to be a change made at the view level for the files routes.rb, _navigation.html.erb, _suckerfish.html.erb i could see a controller file tree_display_controller.rb change. You can try writing testplan for this to enhance the quality of the delivery.
problem The test plan does seem to be complete. There are some screenshots provided about navigation in the application. But that does not clearly tell about the tests that have been performed in this case. There are no conditions or cases mentioned in the test plan. This needs to be added.
problem The test plan section is missing. The authors need to work on testing their code.
problem Not many edge cases here. Maybe what happens if logged in as an admin or super_admin?
problem The writeup didn't talk too much about why they do the work that way, instead, it's just some description on how they implemented. For this project, design pattern might not be necessary.
problem Writeup is missing this information. As expertiza is based on rails, you could have explained about the MVC architecture followed. If possible you can give a flow from routes to view to controller.
problem The write-upÂ explains various changes in the view and controller code. But it could be better if they five a high level introduction first. A high level introduction can be something in the form of user stories/ short requirements. For example: 1. Adding a link to this view. 2. Adding code for navigation 3. Adding code for control logic. and then describingÂ code changes for these.
problem The write has a background section which explains the need to do this work. However, it can be more informative describing the edge cases and all would be preferred.
problem Good explanation of how the use of AJAX and JSGrid provided the desired functionality. Could add some detail as to how the code was implemented to solve the problem.
problem Testing is very thorough in some places, but as acknowledged in the documentation, additional testing is required.
problem I don't see any major issues with the code, and comments are used effectively in certain areas. However, some areas lack comments, making the code somewhat unclear to somebody not as close to the project.
problem No Test Plan at the moment in their documentation.
problem The project document describes the basic components of the project but does not describe how they are integrated. The first line says "The Project is to Implement support for creating HTTP archive files from Servo sessions." - this line is not clear at all. The authors must explain more. Also, the authors have provided the documentation in a file. They need to add the documentation to Expertiza wiki.
problem The authors mention the steps completed so far and explain their approach to the project. But again, they need to expain in high level what the steps do. For example step 3 says "Added the path to include "Rust-Har" Library in net-traits/Cargo.toml", but it is not clear why is step is taken.
problem The authors have not added any test plan to their project yet. They must include detailed test plan and test cases to complete the project.
problem The authors have not added any pull request. But there are some screenshots of their code in the documentation. The code samples provided in the documentation seem to properly written. But the complete code is still not accessible.
problem The complete code is not accessible for review. There are no pull requests made by the team. The only code that is visible are the two snippets in the document provided. The snippets seem to be properly written. But it is not possible to review their entire code at this moment.
problem The authors have not provided any test plans or test cases. They need to add test plan and test cases to make the application complete.
problem The authors have not deployed their project into any publicly accessible server. So is not possible to review their work. If they cannot deploy their application then they must provide a screencast of the work they have done. They have not provided any such link at this point.
problem The write up does not include a test plan section.Â I would suggest adding oneÂ as you finish up your project.Â It seems that in your current stage, you are still working on implementation, so I can understand why you might not have created a test plan yet.Â That being said, it is an important part of projects like this.Â Here is a great website that might help you understand what a Test Plan is used for, why it is important, and how to implement one.Â https://www.guru99.com/what-everybody-ought-to-know-about-test-planing.html Hope this helps!
problem It does not seem as though the author has of yet put in a pull request to the base branch of the project.Â I would highly suggest doing this soon as it allows other developers to look over your code and point out potential shortcomings before you get too far along.
problem The author does not have a test plan as of yet.
problem I couldn't find the pull request link submitted, please add the link in the next submission so that it is helpful to review your project.
problem The wiki is properly documented. The problems are explained in detail along with the proposed solution. The unimplemented functionality is mentioned which is neat and helps the reviewer in accessing. The result are depicted in the form of screenshots displaying the implemented functionality. This part is done well. However, i think the wiki could have been enhanced if some code snippets were including showing the previous code with faulty migrations and the corrected one. This would enhance the overall understanding. The proposed model with karma points is impressive.
problem Yes, the writeup clearly mentioned the approach followed by the authors. I believe code snippets should be included to display the changes made. There are three problem statement included in the wiki. However, it seems only one of them has been implemented. I believe this did not warrant any change in the controller methods , only migrations.Â But i believe when the proposed model for karma points would be included, it is best to use design pattern to make the code concise. Example - Factory pattern can be used to get rid of large switch cases.
problem No test plan was included. No form of testing have been performed by the team. As some of the functionality mentioned in the problem statement is incomplete, i would suggest writing thorough tests beforehand and writing the functions till the tests passed. Once the said functionality is included, the code can be refactored to make it DRY. Â These test cases will formulate your test plan and thus increase the coverage.
problem No controller code has been altered by this team and hence i would not be able to accurately review this. The changes made only includes a migration which is done in a standard manner. However, there is an empty migration UpdatingBookmarksRatingQuestionaire which kind of adds redundancies.Â i would suggest to rollback this migartion.
problem There is no test plan mentioned nor any tests added. i would suggest to look into this and add tests when implementing the remaining functionalities.
problem Since , the repo has not been deployed , i cloned the repo and ran it on my local machine. The functionality of problem statement 1 has been correctly implemented. It works as intended. All the links for adding public and private items in the add bookmarks sections are functioning correctly.Â Problem statement 2 and problem statement 3 have not been implemented so unable to test it.
problem No Test Plan section was found in the write-ups.
problem The only changes that are made are changing the variable name from "Bookmark Rating" to "BookmarkRating" so cannot comment onÂ variable names bring reasonable or not. Test coverage in the pull request decreased by 0.01%
problem Changes that are made in the code by the author are in migration file. Variable name is corrected to BookmarkRating which was previously "Bookmark Rating". There is an empty migration created. Cannot comment on the functions as they are not altered.
problem Did not find any Test plan in the documentation.
problem The issue that was stated to be solved, works when manually test on local environment. But there are a few issues that are yet to be fixed so was not able to test them.
problem The test plan is only from the UI perspective and doesn't describe any RSpec testing.
problem Instead of creating a new migration, they edited a migration from 2012 which means it won't be updated on the expertiza server.Â The rest of the changes were just fixing a misspelling of Bookmark Ratings.
problem They didn't add any test cases.
problem Yes, i can understand the project and the issues related to it due to correct and concise description on the wiki page. A lot of info has been provided with examples for understanding. But, the changes which are are not explained and code isn't provided for the same.
problem The authors haven't listed any work which they have done in terms of coding in the write-up. They have listed the files which were modified, but no more.
problem No plan has been provided. Hence unable to comment on the tests.One case should be added to restrict the min score to be greater than the max score.
problem I couldn't find the project name on github easily, had to search for it due to different name.I can see the the changed code on github. But the authors have not provided explanation everywhere for the changes.
problem The authors have't written an automated test. Atleast it's not mentioned under the files changed part.
problem I can only see the link of sample suggestion when logged in as student and on clicking the link, it displays an error message stating "a student is not allowed to index this/these sample_suggestion".
problem Pros: - Screenshots help clearly understand the problem statement - Use case diagram is really good and helpful to understand the proposed design - References mentioned - Future enhancements have been mentioned Â Cons: - No screencast to better understand the project
problem Pros: - Files modified listed - Use case diagram given Â Cons: - Design pattern not mentioned - Solution could have been explained in detail - Code snippets missing
problem The writeup only includes UI testing. Other test cases are missing. No test plan is given.
problem Cons: - Pull request link was not submitted or mentioned in the document - There are 12 code climate issues - Test coverage has decreased
problem No automated tests are given. Only UI testing is mentioned.
problem The writeup explains the current project and the issues related to it and then goes on to explain how the team went about solving each of those issues. I like the way they had written about the proposed solution for each problem separately and I liked their idea of issuing 'karma points'. I am reducing one point because the write up does not mention any design patterns.
problem Although the writeup does include a Testing section, it is for manual UI testing and does not have any automated rspec test cases. They had clearly mentioned the steps for performing UI testing, however I am reducing points because I was unable to check for edge cases and invalid inputs and others.
problem No automated test cases were mentioned in the write up and also no corresponding rspec files were found. However, the team did provide instructions to perform UI testing.
problem Manual Testing was not possible because the app was not deployed on a platform such as Heroku or AWS. There was also no screencast demo so I had no way of testing if the new features worked correctly.
problem There is no pull request present. Since code is hard to understand, the authors need to work on commenting the code and changing the wiki.
problem I found some methods to be long, but that does seem okay as we are dealing with test cases.Â Some variable names do seem to be a bit invalid:Â participant55555
problem The pull request hasn't been submitted so I was not able to review it.
problem The team needs to request a pull from so it is easier to review.
problem The features work as intended, however, there is no mention of different test cases that are required to be checked. The wiki needs a little more work
problem The writeup is not well documented. What functionality of the code is tested and how they have implemented is also missing. It is very hard to understand the work by just reading the readme. Some background info rneeds to be present in the wiki.
problem yes, it can be clearly seen what the plan of action is and what they intend to do in the project, the one thing i would add here is a brief about what the test case would be doing or some minor piece of information indicating what work would be done and what checks would be taken care of and some additional images.
problem The writeup describes clearly what functionality the work is related to but it is not descriptive enough when it comes to describing what all change the team has done and how they have done it. Adding screenshots and elaborating on the code that was incorporated would be helpful.
problem The write up is not descriptive enough in describing what the team has done in the project however it describes the functionality and the work
problem There is no mention of a test plan in the wiki. From the code it ishard to identify what they are trying to test and how. Even the code is not commented.
problem The writeup does not have an explicit Test Plan section. The work you did looks promising but you could have included all the cases that you considered in the writeup. Again, I understand there is a not a lot to describe, but it is difficult for a reviewer when not all aspects are described in a proper manner.
problem A little bit more explanation on what wasÂ Two Node Cycle or three node cycle does would help the reviewer understand in more detail on what test is being accomplishedÂ through this task
problem The writeup lacks the Test plan section. The work has been implemented but it could have been made better by assuming all the boundary conditions.
problem There really wasn't much of a Test Plan described, so I can't say they converted the cases. There certainly are test cases described and implemented, so I would assume that in the plan they had, they did do some conversion there.
problem The Wiki doesn't introduce the exact functionality of the on_the_fly_calc model.
problem The Wiki only doesn't explain how and why the authors did the work. More is about the schedule and how to test.
problem Not enough. The test plan shouldÂ have the detailed process of testing including the why and how you set the condition, and something like that.
problem It doesn't provide the link of pull request.
problem I can see there are some repeated lines, particularly the 'let' instruction. I think many of the test can share the same data, so it is better to combine them at the beginning.
problem The code failed when I test it on my VitualBox.
problem There were no tests added or any test plan documented for me to reference. As I said previously, definitely make this the next major priority.
problem The writeup shows there are still several tasks to be completed before the functionality can be fully tested. This is reflected in the current version of the code on github.
problem (NOTE): I was unable to find the PR, these results are from their fork Â Names are intuitive & test descriptions are clear.
problem The normal level of unit test I think is describe > context > it. Describe is for the class, context is for each method and it is for each condition. And I think the code lacks the context level without schedule the tests into each method. It makes me uncomfortable when learning the code.
problem All testing functions (or in this case 'it' statements) are an appropriate length. Even though spec files are supposed to be self-documenting you still need to add comments to aid the understanding of the reader. Again with the organization of the test file, I would recommend using the 'context' statement to help with grouping.
problem There are no comments which makes it extremely difficult to follow what each piece of test case is exactly testing, other than that everything seems to be working fine
problem The code follows good ruby and rails practices and is easy to follow. However, I think adding comments would have made the functionalities easier to understand.
problem I could not find code contributed through a pull request. However I looked at the Github link provided in the description and that seems to follow most standard Ruby styling guides. No function is longer than necessary. There are a few redundant spaces and empty lines that could be avoided like on line 59 of the menu_tem_spec.rb file. Also I would suggest adding more comments to make the code and tests more readable.
problem (NOTE): I was unable to find the PR, these results are from their fork Â Code is simple, clear, and easy to read.
problem 1. no comments 2. Under "describe MenuItem do", they use many tests to test all the situation separately without classifying these tests based on different functions. They should use different contexts to divide the whole tests into 7 parts as they discussed in the Test Plan.
problem There was no screen cast added so there was no way to verify the features
problem You do a great job giving background about ExpertizaÂ and the usefulness of Unit Testing and behavior driven development. I wish you would have added a thorough description of the purpose of the model that you are testing in the background section rather than in implementation. I still think this merits a five because I did have a good understanding of your portion of the project after reading the wiki.
problem Amazing job in representing what the intention of project is and what they want to achieve and how to intend to achieve. There does seem to be a lot of boiler plate data which can be avoided something like information about BDD and Unit test could be avoided.
problem The writeup is very descriptive and clearly defines what the goal of the project is. The team has very painstakingly defined every aspect of the project. Everything is explained with the help of a screen shot, which is very appealing and easy to understand. However, I feel the initial part is a bit redundant and is not at all necessary.
problem The writeup for this project is well written and has a lot of information that lets the reviewer know what the team is trying to accomplish. They have well formed sections that gives a nice flow to the task at hand. I did not have to go to the project description file to understand what the project was about. You could also consider showing test cases that failed earlier and that were fixed now as part of the wiki. That would give an idea as to how thorough you were in your implementation. Also, avoid using excessive descriptions about things other than the project description and instead consider providing a link to the user in case he want to read more (For eg: BDD). Overall, well done.
problem I think it's clear but not that detailed. The Wiki introduces all the things including the functionality of the menu item model, the meanings of each testing condition and other background messages. But I think you use too much space on the background. What I am really interested with are the the functionality of the menu item model, the meanings of each testing condition (these 2 are implemented but need to be more detailed) and the process of each test (like why I want to set this kind of input and output).
problem Since the project is itself adding tests, and you cannot test a test class in the same way you test a normal class, so I will treat the project itself as part of the test plan. While the test plan is not documented in the wiki the actual testing is thorough.
problem Can't tell if they pass or not since there is no mention of it.
problem There are four functions that need to be tested. The team seems to have tested these four but the tests aren't exhaustive.
problem public function interfaces were seen to be tested .After talking to the team. it was know that few test cases were to be removed because of the problem with parent model file.
problem There are four functions that need to be tested and the rest are private functions so the authors have tried testing all public functions although they seem to lack completeness.
problem There is not too much to comment on the code, because it is simply a lot of test code, which uses fairly logical names in order to store fake objects. I would recommend delving into why the build has failed and the coverage had a 30% decrease, when this is a testing project, so I would assume the coverage will increase a fair bit.
problem Does not appear to be a pull request from the repository. Looking at the commits that were added the names of variables methods and class names are clear throughout the test plan. The 'it' statements are clear and read like sentences and provide a good level of self-documentation.
problem The pull request link is missing
problem The documentation gives little to no implementation details. Test names themselves seem fairly reasonable, however.
problem The writeup is quiet clear. The objective has been clearly stated and the goals of the teams have been mentioned. I like that the part that the team was unable to finish has been stated. The wiki also states what the team plans to do before the next submission which is neat. The appropriate code snippets have been added to show the change. However, I feel the explanation provided for each of the changes is a little short. You could try to explain it in some detail along with mentioning the functionality of each part with comments which would make the wiki absolutely easy to follow.
problem Yes, for the most part, the implementation is intuitive as it just attempts to solve the problem statement so there is no problem in understanding or following the implementation. The team has written the tests quite well describing most of the cases, though missed a few. In this case, I don't think there was a need to use any design pattern as most of the changes are in the views and the controller methods are quite small too. However , I feel the implementation of the first issue 'Change create topic UI to AJAX' was not described in detail. The code snippet for this change in the code have not been added. I think a detailed explanation about the changes made and why they were needed to be made along with some code snippets would have made it easier to follow for someone not having enough background on AJAX.
problem There is no formal test plan. But this team has done a lot of testing. Â Most of the different cases have been thought about by this team, but it misses some of them. Some of the missed scenarios to be tested before the next submission are : 1)Â If you login as student, you can't add/delete topics in the table 2)Ensure students cant see which students are on other topics I suggest to use the coverage report generated by SimpleCov to see which part of the code has been missed and write tests accordingly.
problem The newly added code has reasonable method and method names. There are changes made in three types of files. Controllers , specs and views. The controller method names are apt as they each describe a particular action being performed following ruby conventions. The instance variables defined are also very intuitive as suggestive of their functionality. In the controller methods, there are two variables suggestions and suggestionscomment. Most likely suggestion comment refers to the suggestion associated with a comment. However , I think maybe this variable should be renamed as comments_for_suggestion just to avoid any ambiguity. Also including Â underscores in variable names is more ruby like.
problem The code is well written by this team. The ruby conventions have been followed. The code is reasonable DRY, however I have suggestion which can contribute towards making the code DRY @suggestioncomment = SuggestionComment.new(vote: params[:suggestion_comment][:vote], comments: params[:suggestion_comment][:comments]) @suggestioncomment.suggestion_id = params[:id] @suggestioncomment.commenter = session[:user].nameÂ Â These lines have been repeated in three methods , add_comment, approve_suggestion and reject suggestion. This part can beÂ extracted in aÂ separate method and called each time to avoidÂ repetition.Â Â </
problem There is no formal test plan provided by this team. However, this team has done a lot of testing. Â You all know the edge cases that still require testing as they have been mentioned in the wiki. Include these tests in the next submission and you are good to go. Also I suggest to look at the coverage report generated by Simplecov to see if there are any unanticipated conditions that you might not have thought of. This will make your work full proof.
problem Since the repo has not been deployed, I have cloned the given repo and ran it on my local machine. The suggestion functionality is working correctly. Suggestions can be added and remove. The instructor can approve or reject a suggestion as well as add comments and vote for the suggestion. This is neatly implemented. There is a slight error. When I click on edit comment and submit, the app breaks showing no routes found error. I suggest look at the routes generated, maybe you have missed a mapping link between the submit and a controller action.Â The other two issues, I couldn't figure out how to test it through UI as there is no guide provided on testing. Thus , I ran the said spec files.Â In assignments_controller_spec.rb, the test fails and I get an error saying undefined method visit and in sign_up_sheet_controller_spec.rb , I get an error of getting nil flash error message. You should look into these tests. Or maybe the functionality has not been implemented yet. I don
problem The write up is well documented. It clearly states the issues to be solved. They have also stated the parts that have not implemented and what needs to be done. The changes made could be explained in details as to why they are made. They have only included the code snippets which makes it difficult to follow the changes.
problem The problem statement did not require any implementation of design pattern so cannot comment on that. The contributors have written descriptive tests.Issue 971 could have been explained in more detail as to how and why the changes that are made were made. It becomes a little difficult to follow.
problem Functions in the code are small and depict single functionality. Although there are few lines which repeat in some of the methods (related to suggest comments) which can be split into a separate method making the code DRY.
problem No Test plan was included in the documentation. But most of the part of the code is tested. And tey have also included the tests which need to be written.
problem As the code was not deployed, after testing the repo locally I was able to tset the suggestion functionality. Was able to add comments but incurred an error while trying to edit comment. Routes for this have not been set. Was unable to test UI fro the other two problems. They should include guidelines as to how to test the functionality next time. While running Tests: Tests for assignment_controller fails stating an error for nil flash error message.
problem The write-upÂ of the methods tested is excellent. Every detail down to the parameters of the methods that are tested is shown. There is an issue on the page in the implementation section where some of the text runs off the page. This is the code block under Test Entries Creation.
problem The writeup is very well written and describes everything in depth. However, the team hasn't mentioned what design patterns they have used. Also, I think they could have included future scope in their writeup.
problem They don't explain why they do the work they did. And they don't mention anything about design principles or patterns either. But their tests are based on all the possible situations.
problem The team seems to have covered all the cases but they haven't described what the cases are.
problem The intent of the project is clear. However, what was actually accomplished and how it works was not thoroughly described.
problem The portion of the documentation explaining how the authors completed their tasks and how has not yet been completed. There are headers for, presumably, this information, however.
problem This project is writing unit tests. However, pre-conditions, edge cases, invalid values, etc. are not mentioned at all. As mentioned before, the part of the documentation which I would presume would include this information has not been completed.
problem The PR causes the tests to fail and the code coverage to decrease dramatically. Also, there is a lot of commented-out 'dead code'. There are also some 'magic constants' which are not explained. Otherwise, however, the tests do seem to be very extensive at a glance.
problem No "Test Plan" section is present. However, this project is itself writing test cases.
problem More information about the model functions / what each function did and what exceptions were tested , would help the reviewer understand it in more easier way
problem Plan of work was present in the document. More details about each in a little bit more details , like what are the edge cases being tested if included would be helpful
problem Different test cases were written for different functions . If there was a chance of making the code dry by adding more number of common test cases to be used, it would make it look better .
problem All test cases were not complete for this project
problem I believe it gives a good basic understanding and even laying out a plan of work, which I think is a good touch. What I wish was explained more, was what exactly doesÂ on_the_fly_calc_spec.rb do? You explain the places where you need to add tests, but I am having difficulty simply understanding the point as to the model and tests. The names themselves arent even defined enough to provide me the insight, so I would recommend explaining the point of the project in that regard. As such, what functions would performing these tests provide to Expertiza? What do they do? Explaining this would also help me and any other users the ability to understand how the project carries out these calculations and performs its purported function.
problem I suppose my answer to the previous area could be used here as well. Basically, I like the way you explain your plan, but i think it would be very helpful for us and yourselves to explain the true function you are trying to bring, besides just saying you are testing this model, but not explaining what it does. I believe you could definitely come up with a great explanation and then this area would be perfect! To be honest, it looks like its a work in progress, as you have the sections made already, and so I'm sure once you explain the sections this area will be fulfilled.
problem It does in a way include a to-be-added test section, but i'm not 100% if its going to have a more logical format. Before this, they didn't explain their plan beforehand,, which I would recommend a possible next step as well. However, it is yet to be seen what these testing sections will hold, and I cant quite comment on what type of tests they are preparing, because as i mentioned previously, it is not explained what these functions do.
problem In some cases, such as when you included this statementÂ allow(on_the_fly_calc).to receive(:score_assignment).and_return('
problem Unfortunately, as with all of our projects, we can't test them since we can't continuously deploy them.
problem The writeup is well written and briefly explains all the functionalities. However, the team could have elaborated a bit more about what functionality each of the functions carries out and how these functions are tested.
problem The writeup clearly explains the purpose of the project. But I guess it is found lacking in explaining how the team has implemented whatever changes they have incorporated. The writeup clearly states which functions need to be tested but what these functions do isn't elaborated. Also, it would be nice if you could explain what a particular test is for.
problem I couldn't find the team's pull request. The team has followed a proper naming convention and it is easy to understand what functionality is associated with a name.
problem The functions are well written but the lack of comments makes the code hard to follow. The code follows good ruby and rails practices.
problem Two functions seem to fail and they need to be checked. Rest two seem to be working fine.
problem Write up is minimal at best for the first round, but that's okay since this is still under development.Â I can understand the project clearly since I am doing a similar unit testing project myself.Â Your template looks good for now, keep up the good work!
problem There isn't much aboutÂ about this review other than what you mentioned in your Thoughts section.
problem Test Plan is just a template at the moment.
problem I would recommend trying to build your factories rather than creating them.Â The difference between building and creating is that if you build an object, it won't be saved in the database while creating does save it to the database.Â The goal of testing is to create objects that you can use for testing purposes, so you shouldn't need to save them in the database.Â If you do want to do that, I would recommend cleaning your database with a gem called DatabaseCleaner.Â Also, you don't need to re-introduce factory builds if you are already doing them outside of your tests.Â You can remove those and your tests should run fine.
problem Can't test manually, but based on what you have in your pull request, it sounds like most of your tests working correctly and you are getting decent coverage.
problem There are a lotÂ of section headers with text missing.Â The author does state that the wiki page is not complete yet, but unfortunately, I have to review it based on its current condition. It is not very clear what the purpose of the model under test,Â on_the_fly_calc_spec.rb, because many of the sections where this would go are missing.
problem A plan of work is outlined, but the details of each of the steps are not given any details. Since it is a test class there is no need to discuss design principles or patterns. Most of the reason that the section is hard to follow is that many of the portions where the explanation would go are missing at this stage.
problem Unfortunately, all of the subheadings under the Test Plan section do not contain any content. I cannot review this portion. Please implement this section ASAP.
problem (1) Functions are not too long (2) None of the code needs to be extracted into separate methods. (3) I would recommend adding more comments to the test file. Even though it is self-documenting this does not remove the need for comments, which could be used to explain how the code tests each condition. (4) The code does follow the ruby style guide (5) One recommendation
problem Running the test class myself it does appear that it covers all of the possible edge cases. The test class runs as one would expect and does appear to add coverage. While I cannot prove this from the pull request I can see the results on a local end, and it appears to be thorough and complete.
problem The team has included a test plan section and is details about the functions they covered. But there are some of the functions they did not cover: score_assignment and participant_score. They also seem to have missed out on one of the conditions in the calc_review_score.
problem Comments in the code are missing.
problem The writeup is really detailed. Maybe include a little bit more explanation in the problem statement, and hide the links that are showing in the writeup.
problem suggestion_controller.rb#add_comment @suggestioncomment maybe the name should be suggestion_comment
problem The wiki is quite thorough and explains what tasks the team has been assigned with and how they have approached them. By reading the wiki one can easily understand what the project is supposed to do. One suggestion for the wiki would be to discuss Issue 926 in the wiki in a bit more depth.
problem All in all the writeup briefly explains why the project is implemented in the given fashion. The only question I had was what why AJAX because I am not much familiar with it so if the authors could have stressed on this in the wiki then it would have been more clear.
problem No Test Plan was included in the writeup.
problem The functions used are of reasonable size and the code seems to follow the Ruby style guide. Similar to the other projects, I see a lack of comments. One suggestion would be to add a few comments so that it is easier for someone who is trying to understand what exactly is happening in the code.
problem No Test Plan was included so couldn't verify this.
problem The code is not deployed so I tried to download the zip from the repository and tried to host the application on localhost but I faced some errors while running the application so I was not able to manually test the functionality. The error that prompted on my command prompt were regarding certain migration but I am not sure if this has to do anything with this particular application. All I could refer was the wiki and it did not include any screenshots that I could use to verify the working functionality. So, one suggestion would be to add screenshots to your wiki that would depict the working functionality of your application.
problem Problem statement simply lists the issues. The issues need to be explained in detail. Goal is stated very vaguely. How are you improving the functionality? Quantifiable or specific goals will be better. Â Suggestions: - Adding a screencast will help better understand the project - Add screenshots to better understand the project
problem Pros: List of files edited is given in the document. This makes is easier to check the code. Â Cons: Design pattern is not mentioned. While the issue fix solution is given, clear explanation of the code snippet is missing and is hard to understand.
problem Pros: Steps to test through UI is clearly given. Test seems thorough and complete. Â Cons: Explanation of test cases chosen and what the expected output should be is not given.
problem Cons: - Travis CI build failed. - There are too many (146) code climate issues. Â Suggestions: - Submit link to pull request. This will reduce the time it takes to review as we don't have to search for the pull request in the repository or document.
problem Suggestions: - Method 'load_add_signup_topics', 'edit_comment' are hard to understand and can be simplified.
problem As far as the writeup is concerned, the writeup in my opinion has all the details I would expect. They have documented the steps for manual testing which is great. IÂ would still add description or comments in the functions describing the intention/purpose of that function.
problem As per the information provided in the wiki page, they have specified that the tests already existed for the methods. They seem to have added corner cases which were not present before. From the pull request it seems that the test coverage has increased but it does not seem significant to me. However, this shows that they have tried to add some more test cases which is good.
problem Overall they have followed a good naming convention for most of the variables what that variable is apparent from the name. There some names which I suggest changing likeÂ if_condition_1 , if_condition_2. Â Apart from these, I found most names convincing.
problem Most of the functions seem to be short sized and the code does seem to be modular which is really good. I found one of the methods a bit long (peer_review_strategy in automatic_review_mapping_helper.rb). I would try to see if there is possible methods I can create (if participants_with_min_assigned_reviews is blank, or only one element in participants_with_min_assigned_reviews, prohibit one student to review his/her own artifact) could be a separate function?, then
problem I think they have done a really good job at ensuring whether all the tests are passing and they have also added additional corner cases. I would try to see if there are still some additional cases which are missed just in case, this is because I believe the test coverage has increased but not significantly.
problem They did a good job at refactoring the previous code as they did not break it and the tests passed in the first round itself. They have demonstrated their work in the screencast which is pretty neat. There are some issues that I mentioned which could be solved to improve the code quality and increase test coverage. I would try to ask mentors or professor if they can provide any suggestions on how to increase the test case coverage. Apart from that all seems well.
problem the writeup explains the functionality briefly but needs more information about each function and about how the testing of each function is carried out.
problem The authors have mentioned what functions that need to be tested but what these functions do or what test cases they have written and what are these test cases actually testing needs to be mentioned
problem The test cases seem to lack different conditions that can be tested and invalid inputs have not been tested.
problem The test cases could have been commented as they are hard to follow as each function that the tests are written for are calling other functions for which the tests call mocks .
problem two tests of compute total score and compute review hash seems to be working well the rest of the two functions need to be checked as they fail.
problem Y'all just ignored Josh completely. Â Y'all included an autogenerated file in your pull request and then didn't get rid of it when Josh told you to.
problem Impossible to tell. It's a Mozilla project and they require squashed commits.
problem Most of what's there is lifted straight from the spec, so it's not very useful. Â The conclusion is a single, very simple, sentence. Â It gets the job done, but it's not anything special.
problem There's not much reason for me to repeat what Josh said, but y'all have a lot of work to do to get it to a place where this can be pulled into servo.
problem I don't really know why this isn't a checkbox? It does.
problem Yes Travis C! passed , but when I enter / look at the details it showed up as failed . It was not very clear .Â codeclimateÂ â€” 39 issues to fixÂ - had to be fixed which seems to be a general code repition issue which was comingÂ for all testing projects
problem A good number of commits could be seen after the first deadline
problem It improves a lot. But still something looks not good like 'xcontext' and the spaces don't match well.
problem Code is well written. However some of the fixtures used (question1, questionnaire1) don't quite give a description of what the data holds.
problem Code seems to be fairly well written overall. It's organization could be improved, however. For example, the test "computes and returns scores" contains many assertions, and uses several variables defined outside the method which are not clearly related to that specific test.
problem Yes, the features work as expected, except for the features which is dependent on the : context 'when current assignment does not vary rubrics by round'
problem The testcases have brought the code coverage to 92%. However all scenarios haven't been covered. Score_assignment function and participant_score are completely untested
problem It is good. It introducesÂ the code of the model with detail. But I think it need more introduction on the test.
problem Yes, the code that is written is extremely well written. But I found that one context , context 'when current assignment does not vary rubrics by round' was not implemented.
problem 2 more functions need to be covered for this test case to cover 99% of the code. Would have preferred if the team mentioned in the write up the difficulty they faced in testing these two methods.
problem Code is very good! Variable names make sense and ruby syntax/style is followed. There could be a little more comments but I think the names of the variables help as a substitute for comments.
problem While this project excelled in all areas (best project I have reviewed), the documentation was its weakest part.Â The documentation wasn't bad (very good) but was a little hard to read/understand everything. Specifically in the introduction of the problem.Â You go into detail of the task plan but I had a hard time understanding it all because the intro wasn't as strong.Â The youtube video helped fix this but I think both should stand alone.
problem There are 40 issue conflict, most of which is related to Block has too many lines of code. but its not much comparatively so nice work
problem Code is clean and pretty concise. I would recommendÂ maybe adding a command lineÂ param for the number of random files generated though. That way when using your script I wouldn't have to change the source to generate a different number of files.
problem Overall, the code seemed to have been well written. From the comments made on the pull request, it seems like the team has some logic errors that must be sorted out. Other than that, the code is relatively dry. However, in some places, some duplication can be removed. A comment on the pull request was made for this by Josh. Furthermore, there are many comments in their commits. This allowed me to easily go through their code.
problem The code is well written. Looking at the pull request we can see that some changes have been done following round 1 reviews. Though some things are still missing as pointed out in their comments in the pull request.
problem There was new code committed during the second round they are servo_automation_screenshot.py and start_servo.py. The code could have been modularized.
problem Yes there are changes present for round 2 review. New code requires some more changes but can be removed with small changes.
problem Code was pushed after the first round in github and changes to servo automation screenshot.py were done after the first round.
problem Looking at the pull request we can see that the system is operational. Few changes is required in the code as seen in the pull request comments.
problem The System operation works as intended. The UI works well. There is an enhancement that can be done to the project.Â The Random HTML files are produced manually when we run the program. Instead, the pages could have been generated directly in the browser. Rather than first running the program to generate and open manually. This could be one of the good enhancements to the project.
problem This does exactly what was asked. I don't see why it wouldn't be deployed
problem The code can be deployed as all the feature the project promises are implemented and the team has followed the correct approach in solving the problem.
problem According to the pull request, the code still needs a lot of changes. The code doesn't need to be redone from scratch, but this is not a good place for a future team to pick up on. Because of the changes, the code should not be deployed onto the production server. This is mainly because the changes seem to be dealing with these things (all of these things are changes that need to be made according to the comments from Josh): forgetting edge cases the scope of a few things is inefficient the code is not DRY enough
problem The wiki is pretty bare. If more details from the video were added it would be very useful. Added screenshots accompanied with explanations would do wonders.
problem The Readme file has mentioned some of the work that the project seems to perform. The team has also uploaded a youtube link of their work which is more helpful. I feel some description that they have mentioned in the youtube video could have been added to the readme as well so that the reviewer dooes not have to go through the whole video to understand a part of the project. This could also be done by adding annonations to the video or by mentioning timestamps in the youtube video description for the features the project has. For example you could mention @4:00 part two of the project (screenshot) feature, or something similar.
problem Overall, the writeup was good. The one area the team could've done better is the implementation section. As of the time this review was written, the implementation section has two things: the process of building the project the process of running the python script Â I would've like to have read more about the structure of the python script. This is mainly because looking through code can be a strenuous process.
problem The write up explains the project well as well as what was accomplished. It is quite short, so some areas needed to be fleshed out and detailed some more. In addition, screenshots of the end product or the system would have been a nice touch, as it provides a better understanding to the reader regarding what was done.
problem The team could have also spent time on the write-up. The write-up is unclear and takes long time to set up the environment. Instead, the write-up could have been detailed illustrating the project. The write-up of the project could have been better.Â The write-up just included the project description which was in the project description given initially.
problem The code is well written and organized. However, there are some problems in the code after the second round. They are 1) The program code_generation.py did not include comments which makes it difficult to follow the code and takes more time to understand and review. 2) In the program servo_automation_screenshot.py, the entire program is implemented in the main function(Long or Complicated function). Instead, the program could be modularized which makes it easier to maintain and reuse. The names of functions are appropriate and simple to understand its purpose.
problem Overall the code is very readable and quite easy to follow. Variable names don't always follow the naming conventions exactly but they are named in a way that it is clear what their purpose is. There are a few instances where a try-catch blocks are needed, or some other way of ensuring certain edge cases don't break the program. For example, one of the functions that saves a screenshot to a local directory does not check if the directory exists before trying to write to it. In addition, the code is commented quite well. Functions had headers that explained what they do, and in some instances certain lines had comments that clarified their purpose.
problem No new tests were added. Even though the project specification didn't state to add tests, it would have been beneficial for the team to add some.
problem The team did not add test cases. This is one of the caveats of thierÂ project.Â The primary purpose of the project is satisfied but including the test cases could have increased the coverage and range of the project.
problem The team's work looks pretty neat with no DRY problems. Every test case is commented. However, the RSpec codingÂ structure is not fully met. According to the provided videoÂ https://www.youtube.com/watch?v=dzkVfaKChSU&feature=youtu.be&t=35s which gives a good test structure, every method being tested should begin with 'describe' block, and a condition of the method can be tested in 'context'. For instance, the method #above from menu_item.rbÂ could have been written as: describe '#above' do context 'whenÂ an item with parent id'Â do it ..... end end context 'when an item without parent id' it ..... end end end.Â Some of the lines are too long. It would be easier to follow the code with some lines being broken.
problem The Ruby guidelines have mostly been followed. There seems to be no issue there. No function is longer than necessary and variables are named the way they should. This follows what was seen in the first review. They have also fixed the issue of having no comments and now it is pretty much how it should be. There are some minor issues that CodeClimate has detected that the team could work on.
problem Commit has been done during the 2nd round. I only see one commit which has been done.
problem The last commit was made on 31st. There is no new code written after that. The authors need to take the comments into account and modify the code.
problem The new code was committed. However, it is very hard to understand the flow of the code just by looking at the code. I mentioned in round 1 review that code commenting is required which the authors didnt take into consideration. Overall the coverage has increased but it is hard for the reviewer to understand the flow of the code and why different variables are used.
problem Since during round 1, the authors covered majority of the test cases thats the reason I cannot find new tests. However, the coverage has increased by the code.
problem Since it is a testing project, by looking at their wiki I think they have covered all the cases. However, it is hard to determine whether that from the code itself as no comments are present in the code to make the reviewer understand the flow of the code.
problem The write-up, when combined with the screencast video, explains thoroughly the background and execution of the project. It does suffer from grammar and spelling issues which make it slightly more difficult to follow, however.
problem The build passed TravisCI but did not pass the code climate check. The authors need to fix these issues to make up to the coding standards of the repository. Code climate checks for maintainability of code by checking various rules. It is a must for the code to meet these standards.
problem The pull request passed the Travis CI build successfully. However, Codeclimate indicates 76 fixes to be implemented. Most of them seem to be block similarity issues or methods having too many lines. But those issues cannot be fixed in this case I believe. Howver, there are some spacing and indentation issues. So the team could fix that easily.
problem The team has done a pretty good job in terms of writing the code. However I still feel there are some minor issues. I had mentioned that that some of the code is repeated in theÂ SummaryRevieweeReport class andÂ class SummaryReport. That is still an issue. In the Â In the module
problem I can see that the coverage has increased.The team has modified the existing test plan according to the refactoring done. Also inÂ spec/helpers/automatic_review_mapping_helper_spec.rb, I feel that the testÂ describe
problem Since it isÂ a refactoring project, extensive code changes have been made. The team has posted snippets of all the changed code in the wiki. This has made the document unnecessarily lengthy without much information about the project or the refactoring itself. Mostly, the code is repeated except for the addition of helpers. Also, it would be more helpful to explain which sections of the test were already present and which sections were newly added. Other than that, the team has explained the different aspects of the project very well.
problem Well even though the team has done a commendable job on refactoring the required methods, Code Climate mentions few issues that need to be fixed and I think until these issues are sorted out the code is not ready to be deployed onto the production server. Having said that, the work that the team has done can be used by future teams that intend to work in this particular area.
problem I still feel that the helper methods are a bit too lengthy. Work can be done to improve that and merge these changes to the production server
problem The Travis CI has been passed by the build. There are some issues which are needed to be resolved such as presence of multiple cognitive complexity in the code.
problem I believe their code looks well written with few DRY problems. They certainly follow a Ruby style when they have created the controllers and view. Though there are spots where they dont follow basic guidelines that were especially outlined for us before starting these projects. Unlike another project I reviewed, their view looks more clean and easily manageable.
problem The code seems proper. The names used and length of functions are reasonable. The code could use a few more comments which will help the reviewer to understand the code in a better way. Also Code Climate shows instances where identical blocks of code are found thereby indicating a less DRY approach. The team should use the suggestions suggested by Code Climate to fix these.
problem The names are intuitive like retrieve_commit_data which makes it easy to understand what the method is intended to do and functions are not complicated. But more comments can be added to the code.17 files were modified. So all changes are not explained.
problem other then some issues with indentation the code seems to be following ruby convention, naming convention is good and gives a good idea of what it is doing.
problem By reviewing the code, I made the following observations: 1) None of the functions are too long; they are all around 8-15 lines each and good modular approach was followed.
problem The code mostly follows good Ruby practices and there are a few more comments than in the first round that tells what that particular code should do. The functions don't seem to be too lengthy (some are, but the code seems to require it), which is good. The functions and variable names are intuitive as well. There seem to be a few problems with indentation and spaces which could be fixed.
problem this Link to the pull request was not provided. I foundÂ (link above) pull request. I see that there are a lot of commits regularly done which is really good. I was not able to see my previous response but I believe there were no lines of code in this file (20180402023525_create_github_data.rb) which now has the piece of code. They have considered the first round of reviews and improved significantly. Apart from that, they have some other minor changes aimed at improving which is good. They have added new functions in
problem New code was committed and it was good to see that they have followed up on previous review and made code changes. But I am reducing a point because there were many commits well after the deadline of April 2.
problem Yes, there seems to be significant change in the code and new code has also been added which was probably missing in the first round of review. Great work. I would like to still see more comments for better understanding and easy job for reviewers.
problem They added what looks to be two test cases, one for the controller and one for the model. I dont think the coverage passed, especially with them only having two test cases. They had a large amount of code to set up the situation for the model, but ultimately there was only one test done in this case and you won't have too much assurance with these results. Perhaps it could be a future project's task to add tests to such a design or to fix the code climate problems, but more tests need to be added.
problem The pull request does not mention anything about the coverage so I cannot comment on that. Although the team has modified a spec and also added a new spec. The tests seem to cover a significant area of the project.
problem The wiki page is not well written. The improvements and the testing topics have been left blank. So , it is difficult for a new reviewer to find out the details that needs to be done to have a proper overview of the work done by the team. A better explanation of the steps would have been beneficial.
problem Few test cases were added to github data controller spec and github datum spec which cover the functionality like retrieve_graphql_data, retrieve_github_url, show method in controller etc. So the test coverage has increased.
problem Yes, basic test cases have been added for controller and model, but there must be more test cases directed towards corner cases, some sample cases could be if the repository is private or link is wrong or some other issue, it would have been better to have such cases.
problem The team had added automated tests for a controller and model, which was also mentioned in their test plan document. However, since the build never completed, there is no coverage report from which I can tell if the coverage increased or not. The majority of the logic for this project seems to be in the github_data_controller and github_datum model and these two files were extensively covered using tests.
problem The team added two tests, one for the model and for the controller. The tests seem to cover the basic expectations of the project i.e to retrieve the expected data. I would think the coverage would increase, but I am not sure since there is no mention of this. I believe the team could have a few more test cases testing edge cases or scenarios where the values are not retrievable due to a private repository or when a student uses multiple accounts to push commits.
problem The team did a great job at this as far as I understand. The testing plan in the wiki page clearly specifies where to look and what to expect which I really liked. The files specified has a new functions and the content in one of the files was not present earlier in the first round of review which is now present. I believe they have done a great job at this. I had seen a team working on expertiza show the test cases passed and put a screenshot which could be a possible improvement.
problem The project is not deployed so I was not able to verify this for myself, however from what they display on the wiki page, you can see various graphics and it shows Github metrics and how each team member contributed in kind.
problem I could not manually test the app due to some issues with my ova file which even I faced during my submission. Although the screenshots included in the writeup by the team are suggestive of the working functionality of the project.
problem it was not possible to test the UI as it mentioned to clone and deploy the server, I would rather have one user associated have git profile associated with him and let user view it, also the images just give a static view and a video could have been much better.
problem The project is seen to be working . If the team would have deployed or have added a youtube video , the taske would have been easier . Screen shots were seen though
problem The system seems to work as intended with the Github data being pulled up. However I am not sure how much of it was done after the deadline and hence reducing a point.
problem The team has provided a brief description of setting up the project on our local environment and testing it out since they couldn't get it set up on a hosting service. I believe it would work, but going through a series of steps might be out of the scope (I believe) as a reviewer. The team could have looked into creating a detailed video showing the improvement work as expected.
problem As I said earlier team has really put in efforts to improve from the first round and they seem to have added functions as well as improve the code. However, a screenshot of a terminal showing the test cases have passed/failed would have better helped understand for the reviewer. I would suggest try running the tests and put some information regarding the same and if the tests are failing reviewers might be able to help if they would have faced a similar issue.
problem They present their design in a concise method and the background as well which is good. They talk about improvements made as well as show the code which is making the improvements which goes a long way to justify the efficacy of changes made. Results have several graphics on each of the metrics saved, which allows a viewer to understand precisely what their solution did. The part that could have been done better is the testing section, as there is just a single line that only says where the tests are kept. I think for this project the team did a lot of great work on the implementation but not a whole lot to test the routes through which the data flows, which is in a lot of ways the most important aspect.
problem Well the writeup briefly mentions what the project is about and what is the team's approach towards the same. One suggestion that I would like to give regarding the writeup is that the authors should elaborate a bit more on the Proposed Design and Improvements section.
problem I found the writeup to be not sufficient. If a step by step guideline or explanation was written in the wiki page, it would be easier for the reviewer to review. For example , the Implementation and the testing headers were completely left blank.
problem In the pull request it shows that 17 files were changed. But in the writeup only a portion of the change is mentioned. And the code is not described as well. Detailed steps can be given as to what the code is about and why its written the way it is.Files modified/added section is highly required because 17 files were modified in the pull request.Test cases need to be explained at the end.
problem The writeup does seem good and gives the complete idea of what the though process was, Â Sample view does give a idea of how the view would be and they have improved from the previous Wiki page and have taken suggestions into consideration, I would remove the code part from the wiki.
problem The write up has improved in comparision to the first review , but in totality more information could be added , example the test sub section is written in a line , probabily more description would have been better
problem The write-up looks complete and informs the reader about what the functionality does. The use of images to explain things done and achieved is helpful as it's more powerful than words. They have improved it significantly since the first review. They could add more information in the testing section about what tests were made and the results. But overall, job well done.
problem The writeup has significantly improved for sure. They have added an improvements section which shows what they did in this round. They have also added screenshots of their outcome which I really liked. However as I suggested earlier, I would putÂ more information about whether the test cases are passing or not. If they are failing then reviewers might be able to help solve the issue
problem I do not think this code is ready to be deployed mainly because of the staggering amount of code climate issues and the fact that the build failed. I think they did a great job in implementing such a useful feature, but there are hardly any tests done to validate that this won't break any pre-existing code. I think that maybe this could be used by a future team and built upon by fixing said issues and adding tests, and after that teams contribution could certainly be deployed to the production server.
problem The code should be only deployed to the production server when all the issues suggested by Code Climate are fixed and also there was an error because of which the build could not complete. Although the future teams could use this as a good start point to continue this project as the efforts by the current team are commendable.
problem Honestly speaking, I had a tough time finding out the specific contribution the team made to the project. The documentation and steps a reviewer should perform to get to the specific part of the code was not there. So, apart from the snapshots, it was tough for me to find out the exact changes in the code made by the contributor.
problem The Travis build failed and there 87 code climate issues to be fixed. Also more files are added/modified. So care should be taken so that they dont affect other features. So the code is not ready to be pushed onto production.
problem I would keep the code out of deployment until all the test cases have been met, which could be a different project as there are many aspects to be considered and many things will be looked into, even though the team has done a good job, but due to lack of test cases and more corner cases needed it would be better to keep this out of deployment.
problem The code still has some issues which is evident from the build failure. However, the team has done a great job with the design and test cases to have progressed so far! So I feel this will be a good starting point for a future team to work upon.
problem Yes, I think the code in terms of functionality based on the writeup and images is ready to be deployed in production and the team has put in a good effort. However I have two big concerns - one needs to manually test it to see if it's working as the team describes it does. Second, there could be more test cases covering different scenarios. But this could be added as a future responsibility to a different team. In terms of use case, I believe it would be helpful to the instructors in assigning a grade.
problem Apart from the issue that the Travis CI build is failing, they have produced a neat and understandable code. If they can overcome the issue that would be really great. I would add more comments in case if this project will be continued by members who have not worked on this. Even if the same team or same members are continuing the project, it is always a good idea to add comments for better readability and understanding of code.
problem The build did not pass and there are a multitude, about 90 issues with Code Climate. Ultimately I think these things need ti be fixed because it is general style guidelines that should be followed.
problem The Travis CI build could not complete due to an error. No conflicts are found but there are a lot of problems indicated by Code Climate such as instances of identical blocks of code, blocks with high number of lines, etc. The team should follow the guidlines suggested by Code Climate to fix these.
problem I could not find much pull requests. I could only find only 1 active pull requests in the past one month.
problem Travis build failed with deployment error. Code climate has 87 issues to fix. The problem is because of the new gems added.
problem The build request did not pass, and the codeclimate does indicate alot of issues, my suggestion would be to use ruby mine options of refactoring before push. Please look into the issue with Gem file
problem The authors did provide link to their workÂ forkedÂ on to their repository butÂ a merger(pull request) was not found onto the actual repo
problem The Travis build did not complete due to errors and hence the status was also not shown. Moreover there were code climate issues as well. However, there were no merge conflicts, hence I am giving a score of 2.
problem The pull request did not pass the Travis CI build and Codeclimate indicates 83 fixes to be implemented. Most of them seem to be indentation errors. So the team could fix that easily. The Travis CI build indicates a failure in building the gem file.
problem I checked that Travis CI build does not pass for their new pull request. I further investigated on why it is not passing and found that they are trying to run install commands in deployment which seems to be the major issue why the build is not passing. This issue can be solved either by finding another way to resolve dependencies before the deployment mode. I would first search what would be the ideal way to install dependencies and if not, ask mentors on how to solve this. This does not seem to be a big deal as fas as the code is concerned, there are no issues there.
problem There is no comments in your code as well as there is someÂ DRY problems. score1,2,3 could be used in a before(:each) statement as well as let can be created. Even though its dry it is very well formatted and easy to read.
problem Overall the code is written really well. Good work. And testing is really thorough. I suggested one variable name change. Maybe they don't think it is a good idea.
problem The code is pretty concise and well written. The controller method that has been changed by the team is quite small and dry. The variable names used are spot on and ruby conventions are followed.Â In the first round, it was suggested that the lines shown below could be clubbed together using method chaining to make the code more ruby like. However this does not seem to be implemented. This is not really a major flaw as this cannot be considered as repetition as such. However, this certainly helps the code look more concise. "row_average_score /= no_of_columns unless no_of_columns.zero? Â Â row_average_score.round(2).
problem The last commit was 9 days ago on March 26, I don't believe they committed there code in the 2nd round
problem It does not look like any commits were added after the first submission.
problem No. They did good on first round. I did not see new code committed.
problem No new commits have been added by this team. The last commit made is on 26th march which was the last day to submit for the first round.
problem No new commits were seen during the 2nd round period
problem There are no new commits to the code after 26th March.
problem There were no new commits after the first submission.
problem No new tests have been added
problem They did add test cases to test their fixed calculations. The coverage seems to have decreased by 1%. This is likely due to the fact that they added code, but the code added to test this added functionality wasn't enough to increase the coverage. I think they did a good job, as the added tests test for the various types of score data they may receive to verify that the system does as it should
problem Yes. The team added test cases for the method they modified. I don't really know where to find the coverage. But I would assume it increased. I don't understand this question: "How well do the newly added tests cover the range of this project?"
problem The team wrote / tested for the updated functions
problem The team has given detailed test plan in the writeup and also implemented the plan accordingly. The tests cover a range of scenarios and seems to cover the range of the project. Coverage has also increased marginally from 44% to 44.09%
problem Yes the functionality does work correctly. Essentially, when a score was blank or nil, it was taken into consideration when calculating average score, even though it contributed nothing to the score. This in essence divided the score incorrectly to create the average. However after adding their code to fix this, the score is then calculated correctly. I definitely like how they included a video that explained what their project was, what they did to fix the problems outlined, and then going through and showing on the UI that the solutions worked.
problem I think their writeup is sufficient. What I mean by this, is there is not too much explanation, but ultimately due to the scope of their project, there doesn't need to be much explanation. They explain the problem, the implemented solution, and then have a concise but well crafted explanation of the tests they added. So when i say sufficient, i don't mean it as a bad thing, but as they kept it concise but satisfying all of the important conditions. They haven't added anything, but it seems in general they didn't fix anything between submissions, which I am a bit disappointed about.
problem The write-up is good, gives me the general idea of what you been testing doing, but it does not explain what the difference between a nil score and a zero score, you end up testing them, but never explain if they are the same or different.
problem The writeup is very descriptive and well documented . The problem statement is clearly mentioned. The approach of this team is explained in detail. The different testing scenarios and their implementations are also includedÂ and are explained in detail which makes it easy for the reader to understand. The screencast is also illustrative of the feature that has been implemented. The suggestion made in the first round to add the screenshot of the Rspec result has been implemented and thus is incorporated. Another suggestion, which was to include the original code along with the changed code in the wiki has not been implemented. I believe this would have made it easier for the reader to understand the changes made by this team.
problem The code is ready to be deployed onto the production server. The only concern I have with it is that there is no comments in the code as well as its DRY.
problem I do think the code is ready to be deployed on the production server. I do think the tests should implement a more DRY procedure, instead of redefining what is essentially the same code. There are a few code climate issues which I consider to be very insignificant.
problem The code is somewhat ready to be deployed. This team has done a great job in implementing the said features. The code written is concise and DRY. The functionality is working correctly and the tests included are exhaustive. Some minor code climate error persists which requires fixing. Only three fixes are required. Once this is done the code is ready to be deployed. This team has almost done everything and with a few minor changes , i believe the code is ready for deployment. I believe, to use this project as a base for future projects wont be very productive and the next team rarely has to do anything as most of the part is done and what is left is minor code fixes.
problem The build passed and there are no conflict with this branch except for a few code climate errors.
problem After checking the pull request, I can see that the Travis CI build has passed and the coverage has also increased marginally from 44% to 44.09%. Moreover, there are no merge conflicts. However, they haven't fixed the code climate issues and hence I am reducing a point.
problem The code is well written with appropriate comments for every step. Names are appropriate like set_student_view. But action_allowed? seems generic. It can be more specific like instructor_action_allowed?
problem Most of the code written by the authors seem to be neat. Some code seem to require refactoring. For example: Â display_item_condition = (session[:user].role.instructor?)?(session[:hidden_menu_items].include?item_id)?false:true:true Two condition checks in the same line should not be done since it makes the code less readable.
problem Everything looks dry and names are self-explanatory. In the _suckerfish.html.erbÂ file though, I recommend adding a comment to the long line of ternary operators because it is not immediately clear what this line does
problem Yes, the code was committed multiple times in the next round. But the commits were fewer. It would beÂ more helpful if the authors made more frequent comments.
problem The team has added tests for two of the functionality. As i am unable to find the specific rspec file, i cannot comment on the coverage.
problem The team did not add any test cases. So test coverage reduced.Test cases are described in the writeup that they can be added. But no file changes are made.
problem From what can be seen in the Pull request, and from the seven commits so far, there were no test files modified or added. I believe the team will be able to write the appropriate tests to increase coverage and thoroughly test their changes. The team also describes their test plan in the wiki, and it is apparent that they are aware of what to test.
problem The team has added test cases. The tests are also clearly described in the documentation. But there is no evidence of the test coverage. This might not be in the scope of this project.
problem The problem which was stated in the wiki page has been partially addressed in this project on manually running the code. There is a loophole which the authors have missed which i have explained in the subsequent answers.
problem The write-up is properly presented. The implementation is explained with the help of code snippets. Furthermore the Ui testing has been explained with the help of diagrams, making it simple to run the test manually. The only difficulty i had was while testing the automatic test. The authors haven't provided the spec files with which to perform the tests. The team hasn't included the files which were changed in their wiki page which would have made it easier to access the specific files for checking if needed.
problem The writeup is well documented. All changes made in the files are described and the UI description is also given which makes it easy to follow.Since there are several roles like instructor, student and each role has specific functionalities, a use case diagram could have been inserted in the beginning to give a clear picture.Also, the problem statement can be explained in a detailed manner as to why its a problem and why this needs to be fixed.
problem No, this code is not ready to be deployed onto a production server. The reason for that is: there are various aspects which the authors will have to take care of. Firstly, when clicked on course evaluation when in student view, i am redirected to the manage content view. This shouldn't happen as i am a in a student view.
problem The code is simple and neatly done. The build passed and all checks passed. The functionality is also working. Only concern is with testing. No test cases have been added. So when a new functionality is built on top of this feature, the test coverage will reduce.
problem The code seems to written fine. The only concern is to actually test the functionality live on a deployed project. At the moment it is not clear if there are side conditions that need checking.
problem Yes, it seems the majority of commits were made between the first and second round of submissions. Several of these commits seemed geared towards solving code climate issues and ensuring that the build passes Travis CI. The team did a good job of evenly dividing the commits between members, and a great job of committing changes early and often. The only suggestion I have is maybe more explicit commit messages.
problem There were lots of commits made during the 2nd round.Â In addition it wasn't just one big commit.Â Most were very small which is good. While I think y'all did a good job with the commits a little longer description could be nice.Â I had to go into the commit to truly know what was changed.Â But besides that good job!
problem I was unable to access the AWS deployment so I attempted to test in my personal environment. After pulling the repo and building as normal I ran into several errors and was unable to test the functionality. I would leave the stars section blank but I cannot seem to remove my rating for some reason.
problem From the screenshot, it is seen that the functionalityÂ is well implemented both from student view and from instructor view.A screencast could have been attached to verify the flow.
problem The UI operations work as expected. Though not a testing project, the authors have included tests to verify their functionality.
problem Everything works as intended, but I had some difficulty making sure that the sample submissions were actually being displayed for the correct student.Â Nonetheless, great job on the UI ya'll!
problem The writeup is amazing! I really liked the graphics that helped explained everything.Â While it probably could have been explained in words, the pictures really helped make things clearer.
problem The writeup is quite descriptive. It contains explanation regarding the project issues. The authors have included code snippets which makes it easier for the reader to follow the changes made in the code. They could have included explanation regarding why the changes were made by adding a few comments. They have included a Test Plan stating all the test cases considered, they can also add a screenshot of the test passing so that the readers know that all the tests work.
problem The writeup looks great and I was able to understand what your project is suppose to do.Â One of the highlights that I thought strengthen your writeup was your use of diagrams and pictures to show the flow of how students are able to make their assignment public and how they are able to view sample submissions based on what an instructors makes public for students.Â The only thing that I think it lacks in is direction of how to guide the reviewer on how to test your application.Â Â In other words, when a reviewer wants to test your deployed application, which student/instructor should they log in as to ensure that what they see matches what your sample submission pictures in the writeup.
problem The writeup is descriptive and well written. The project objective and the proposed solution has been clearly stated. They have added snippets and explained them which is an improvement from the last submission. This has made the wiki a lot easier to understand. The test plan section has been included with detailed descriptions of the different testing scenarios and the corresponding spec snippets have also been added. It would have been better to include the screenshots of the Rspec results. Adding comments to the code would have been beneficial.
problem The writeup is very well written with the flow, steps, test cases, well described. The flow is neatly drawn with what is to be expected. The file changes are also described for every file.Files modified/attached section could have been added because lots of files have been modified. So files modified and files added section would make it easy to understand.
problem The writeup was very well written, the flowcharts for both user types at the beginning was a very nice touch. The sections are divided well and each one is explained in an easy to understand manner. They are not too verbose, but not terse either. The minus 1 is for the things. The developed code sections feels slightly redundant as you included the pull request at the bottom, a reviewer can check the pull request rather than read the wiki. This also introduces potential for version control error, so I would recommend sticking to just the git. The second is there is no explicit mention of design patterns.
problem The write up could have been better. Any new reviewer should be able to seamlessly able to navigate to the exact part of the codes where changes have been made
problem From my first review, I remember they still had quite a few aspects to explain through well, like the testing area. They certainly improved upon the readability of their document! They have a nice graphic that explains the couple of different control paths that were created and improved upon, which helped me to test out the deployed application. They clearly laid out the project tasks they had set out to accomplish, which is a nice touch. They then separated by each task and showed the code they added to accomplish said procedure, which i like because it gives an organization that is easy to follow as viewer. They have a clearly laid out test plan section where they show the test situations they added in RSpec. This is good, but perhaps it would be better if they would explain their reasoning behind the tests, which i feel would be more representative of a testÂ plan, rather than show the test implementation right off the bat. They end on a future scope which is a great idea because it makes i
problem The improved the writeup a lot since last review. Now it is really easy to understand, especially with flow chart.
problem One concern I have is that the Gemfile.lock file is conflicting with the current expertiza repo, which could be concerning. If they used things in a different way than other aspects of the code base, then perhaps it could break those aspects for the entire system. I do think this is a good starting place though, because they definitely seem to have done great work! I do think the views should be limited in the inclusion of logic, and they were not quite aligned with this though, but other than that they wrote fairly well styled code. Testing-wise it could be taken as a slight concern when considering how well the paths were justified, as it seems the test coverage may have decreased slightly.
problem The pull request does not mention that the build has passed. There are conflicts with these branches. The conflicts are with the Gemfile.lockÂ file andÂ Â app/assets/javascripts/response.js
problem Their latest build passes in Travis CI from their latest push to GitHub.Â There are a few conflicts that must be resolved in order to successful push to the expertiza master branch.Â Those being Gemfile.lock and response.js in app/assets/javascript.
problem No , the build on this has failed. There are a few conflicts with the base branch. The conflicting files are : Conflicting files Gemfile.lock
problem The build passed in travis ci. But there was some conflict. I think maybe they changed some gem file and javascript thing in order to deploy it.
problem Yes, the build passed. There are two conflicts, in the Gemfile.lock and app/assets/javascripts/response.js files.
problem I did not find any mention about the tests written to test the functionality. So, without exactly writing the tests, it may be risky to deploy the code to production. Rest of the code looks ok and any team can pick it up.
problem The pull request passes both code climate and Travis CI without any issues. The project seems to do what is required according to the write up (Again I was unable to test this for myself) and the test coverage increases. I think the pull request is ready to be deployed. Great work!
problem All checks have passed. There are conflicts with the base branch.Â app/assets/javascripts/response.js shows as conflicting file.Â Since lots of files are modified (20 files), care should be taken that the feature does not affect existing features.
problem This team has done a great job in implementing the said functionality. However, this code is not ready to be deployed just yet. There are a few conflicts with the base branch. These conflicts should be resolved. There are a few code climate issues that requires fixing. After making these changes and after the build passes successfully, this code can be deployed. This can also be used a base and future teams can work on adding features which the author has mentioned in future scope.
problem Once the conflicts has been merged, I think this is ready to be merged with the Expertiza master branch!
problem The build did not pass the Travis CI. The team made good efforts to merge and made several changes to convince that their build works but the pull request has not been accepted till date. The team made good effort to correct all the code and requested for new pull request.
problem The code follows ruby style. There are a few fragments that have been repeated and can be made DRY. The variable names given are apt.
problem The build and checks have failed.Â There are conflicts in the following files: app/assets/stylesheets/application.scss
problem The team has added test cases and extensively tested their functionality. But since the build did not pass I cannot see the overall coverage of the tests.
problem The writeup written is quite detailed. They have explained the problem and the proposed solution included the files altered. They have also included guidelines for UI testing. I would suggest that they could have explained a little more about AJAX as not everyone is familiar with it and explained why they have done what they have done.
problem The code is almost there. As the build did not pass and there a few issues that need to be fixed before the code is deployed. The team has done a great job and hence this can be a great baseline for the future team to start upon.
problem The code is nicely written. One minor thing is in the suggestion_controller, lines 43-45, maybe remove commented out code?
problem It didn't pass travis ci. There are some conflicts.
problem Although there were not many problems with names selected, Code Climate reports few serious issues like function itemTemplate and method load_add_signup_topics exceed the allowed number of lines, few blocks have high number of lines, etc. The team should look at the suggestions provided by Code Climate for these issues and should fix these
problem The pull request shows that all checks have failed so that means the build did not pass. Also there appears to be two conflicting files "app/assets/stylesheets/application.scss" "app/views/assignments/edit.html.erb". The team should look into these and figure out how to sort these out.
problem The team has added test cases for the second submission. Although there is no comment on the pull request about the coverage change so cannot comment on about coverage increase.
problem The writeup is very well written and covers everything required for the project. The authors have done commendable job by throughly going through all the required details. Having said that I still cannot find much information regarding the use of AJAX. This is something that was also mentioned in the first review.
problem Well as seen from comments on the pull request, the build has failed and also there are some conflicting files. Also, Code Climate mentions few significant issues that needed to be fixed. I suppose that once all these issues are sorted out the code can be deployed on to the production because as far as the functionality is concerned the team has done commendable job. The current work is worthy enough to be considered as a starting point for future teams that are assigned this project.
problem Code is well written, but problems not fixed.
problem There is conflict in 2 files: app/assets/stylesheets/application.scss app/views/assignments/edit.html.erb Â There are still over 70 code climate issues.
problem Code climate issues are too man and need to be fixed first before deploying.
problem The team made a pull request, but the build didn't pass in Travis Cl. These are: Conflicting files app/assets/stylesheets/application.scss app/views/assignments/edit.html.erb
problem The build has passed in Travis CI. There are no major issues as such. The only issues are codeclimate issues, which the team tried taking care of so as to make the code as DRY as possible. The code needs some minor refactoring in some places.
problem I think the team has followed the right approach and has painstakingly made sure that they follow good coding practices. I do think the code, with a little refactoring, is ready to be deployed onto the production server.
problem The Travis CI build has passed, however, they are having code climate issues yet and the coverage is 45%
problem As mentioned from the wiki, they have covered all the test cases Since comments are not present, it is difficult to understand the flow of code
problem I feel that by making changes to the code and removing unnecessary and repeated statements in the test cases the code can be improved more and thus can be dried up a lot, which will then be ready for deployment.
problem The build passed in Travis CI. The codeclimate issues still exist and they could be taken care of, moreover I feel the code could have been dried up more by removing repeated let statements.
problem The code is well written but could have been dried up more, there are some repeated declarations in the let(..) statements of rspec that could have pushed up in their before(:each)
problem No comments are added in the code. Less number of changes are made and the names seemÂ to be intuitive.
problem There areÂ very less number of commits. Commits were done either 1 week back or 10 days back.In the changes done 10 days back, less modifications were made. Most of the new code seems to be added after first round.
problem No test cases are added and it is not mentioned in the writeup as well. So test coverage has reduced.
problem No screenshots/video/youtube link is provided. So its difficult to understand the flow and find if the feature works. Steps to test the code are provided in the writeup but images and what is the expected output is not mentioned.Based on the build status, the feature might have issues to be fixed.
problem Major improvements are needed in the writeup. Sections like files modifed/added, Testing, Automated test cases, Screenshots etc are missing.The problem statement can be explained in detailed manner like previously how it worked and how the new feature improves the functionality etc.
problem The build failed and there are issues to be fixed. Since less number of modifications were made, it should be easy to troubleshoot and should not cause issues with other features. Since test cases are not added, coverage might reduce after pushing it to production.
problem No commits were found
problem Couldn't find any explicit testing done for this code . A general description on how to build was given . Also testing was not menthioned as part of the requirement document
problem firstly no deployment was done and they was no clear understanding / explaination on how the code changes the complete system as a whole . so it was not possible to do a UI/ any kind of test
problem The write up was too minimal . It did explain a few aspects but they didnt tell clearly on how the steps were done or good general introduction of the system which i felt was necessary as it was a mozilla project and background understanding was minimal
problem The project seems to be half done . also it was mentioned in the commits that "Created framework for adding har files to servo part 1. Incomplete, but pull request is required for class. Will fix for part 2." which was not convincing fully .
problem The wiki explains how the authors wish to solve the problem. However, what changes are done in the code has been mentioned by the authors. Also, comments are not present in the code which makes it hard to understand.
problem The new code is committed. They tried to remove some bugs which can be seen from their pull requests. The pull request was not accepted which indicates some changes are required. The build failed and there are some merge conflicts present in the code.
problem They have mentioned it in their wiki page but from the pull request it seems there are no testing code present. The build fails and merge conflicts are present. From the comments it is seen that the code requires more changes.
problem Since the build failed it is hard to determine whether the project works as intended. The testing section in the wiki page but the code lacks testing code.
problem The writeup is neat. The authors have explained what they wish to establish with the project. However, I feel the wiki can be more informative and should have images to understand situations.
problem The pull request is rejected as the build fails and there are merge conflicts. The project requires major changes for it to be deployed on the production server.
problem Some changes were made to code after 1st round, however, build has failed after that
problem The build has failed, so am unable to verify whether it would work correctly or not
problem The pull request is rejected because build has failed, they require some major changes to be merged
problem Code did not change from last review. So, it seems fitting to use my description from last week: "The code pushed to the repo seems to be just right. The team uses comments where ever necessary. None of the functions seem too long. And, most of the code added doesn't need to be split up into functions. There seems to be opportunities to make the code more DRY, but, as someone who has contributed to Servo myself, making the code DRY may not be the best course of action in certain situations." The authors did not make any new commits. As a result, their code was not merged because it still needed some changes.
problem The team did not add any tests. As a result, the coverage did not increase.
problem In my opinion, this code is not yet ready to be deployed onto the production server. This is mainly because the status of the pull request shows that the code needs changes. Furthermore, there are 10 commits that the team made in total. Usually, in a pull request, all the commits must be squashed into one commit. This will make the easier to merge with the actual code.
problem No new commits have been made since the first review.
problem No new test cases were added for this project.
problem Given the pull request, it looks like the system is not operable at this point and does work as intended due to merge conflicts.
problem The author do not mention about tests they have conducted in the project. Although there is a test plan section, it is not clear what test cases/scenarios are being tested. Testing might also be out of the scope of this project.
problem The authors seem to have added the write-up in the wiki user page of one of the authors. They need to add a new section the expertiza wiki page. Although there are relevant sections in the write-up, many of them need to be clearer. There are no screenshots or images in the write-up. There are no examples or code given as well.
problem From the comments in the pull request, it seems that there is some pending work that the authors need to do.Â There is also suggestion about adding tests, that the authors have not done. At this point, it is difficult to say if the code is production ready or not.
problem This team has only made changes to the migration files. The team has not added any significant code since the last submission. One more migration has been committed. This migration adds the bookmark to the menu. These migrations are made according to the ruby conventions and are DRY. Comments have been added by the team stating the purpose of these migrations. I can see that two of the issues are still not resolved. Probably as mentioned by the authors, they were facing some kind of JavaScript error.
problem This team has made very few commits after the first submission. Major changes includes a new migration added. I can see commits in a few controllers such as the questionnaire controller and the tree display controller. However, the authors have not mentioned changing anything in these controllers in their wiki.
problem The coverall coverage report indicates that the coverage has increased by 0.05%. However , no new test cases has been added by the author.Â I believe in this project, this team did not require tests to be written for the implementation they have done. The code added only involves migrations which involves changes in the variable name and thus need not be corrected.
problem This team has not deployed this app and thus it is not possible for me to test the UI manually. i tried to run the repo on my local machine but it did not run as i faced a lot of error. These errors may be due to my local machine. However , they have included a screencast which is pretty descriptive and indicative of the functionality included by the author and thus it can be concluded that the functionality included by the authors is working fine. The screencast lacks audio. I believe adding audio to the screencast would have made it easier for the readers to understand. It seems that the team faced a major javascript error , due to which the add bookmarks option is not included in the menu. Thus the team has justified why they were unable to implement the other two problems.
problem The writeup is very descriptive. It clearly defines the problem statement and proposed solutions of the author. The karma points system designed by the author is pretty impressive. The instructions for UI testing are illustrated in details and thus are easy to understand.The authors have also proposed solutions for unimplemented problems which is impressive. They were unable to do it due to some other Javascript error which is not really their fault. One suggestion i had was to include the db files or the new migrations created in the wiki for the reader to understand. This would have enabled the reader to understand how the previous migrations were faulty and how it was changed.Â Plus the functionality of the new migration would be clear. At least the names of all the migrations altered or created should have been included.
problem No the code is not really ready to be deployed. Only one of the three issues have been fixed. Even though the build passes, there are some code climate issues which needs to be looked at. Unfortunately , this team faced a lot of problems with their interactive menu javascript. Firstly, these issues needs to be resolved. Secondly , since no tests are included, the newly added features should be thoroughly tested before deployment. I believe the project should not be completely scrapped. Rather , the issues with it needs to be fixed and the future team can use this work as a reference.
problem The team has uploaded a video showing the UI demo. The app was not deployed so after manually testing the app as per the instructions given in the wiki, the functionality works as expected. The reasons for the issues that are not implemented areÂ justified and a proposed solution is also mentioned.
problem As a few issues remain unresolved this code is not ready yet according to me. The functionality of the menu editor needs to be tested and after complete implementation should be deployed on the production server. But as the implemented functionality works fine this can be a good baseline for the future team to work upon and fix the remaining issues.
problem It passed the Travis build and only had minor whitespace issues with code climate.
problem No new tests were added to this pull request.
problem The first two cases they describe work well but there was no implementation of the additional features described in their writeup.Â There was no work towards adding additional bookmark rating criteria.
problem It was a very clearly explained writeup that gave helpful information about their task as well as images showing what the problem looked like in the current implementation.
problem No tests were added
problem Clear what the project was. One thing though,Â the images on the page are all huge comparatively(again this doesn't really matter but)
problem The bookmarks functionalityÂ was broken therefore meaning this should be deployed to fix the issue.
problem The project was an expertizaÂ project and the pull request did not get accepted yet, this is one of the reason, I could not test the code. Since the "Manage" Tab did not reflect in the expertiza page.
problem Since the pull request has not been accepted. We could not test the project. But as mentioned in the write up and taking a look at the code, the code could be deployed with good testing. The team must include a wide range of test cases to make it more credible to deploy in the production server.
problem I cannot see the changes which were made in the code as i don't know what exactly the changes were. The authors have mentioned that the migrations have been added and i can see those migrations.
problem The Travis CI has been passed by the build. There are some issues which must be resolved. But these are very minor changes and related to the spacing for example.
problem The project doesn't have any automated tests present to check the functionality.
problem Out of the three issues which the team were assigned, only the first issue has been implemented..till a certain limit. The authors have said that the problem lies in the menu editor and it wasn't their responsibility to fix that. The second and the third issues also haven't been implemented as expected but the team has explained the second issue and the error which causes the failure.
problem Most of the aspects are fine. The authors should include some code related to their functionality even if it is just the migrations.
problem No, there are a lot of issues which need to be resolved before deploying the code. The third issue has not been dealt with(at all).The future team should resolve the menu editor which is causing one of the problem as well as the problem causing the error message to appear.
problem Screencast has been added based on first round review suggestion.
problem The code was clean and well written. I could understand that there was some amount of refactoring done on the project just by looking at the code. I only feel that one or two comments could have been added to explain one of the DB migration files.
problem The coverage increased marginally by 0.05%. No test cases or automated tests were provided, but I don't think it's necessary for this project. But the team did provide a Manual UI testing plan.
problem Apart from maybe adding a few comments in a migration file, I think everything is fine and could be deployed to production since the Travis build has also passed.
problem There's random comments added like "#changed" and Â "## Â ##" Â That just make everything worse. Â Otherwise, there's not any massive changes as part of the project, so it's hard to say.
problem There's three commits total, and this isn't a Mozilla project, so it's not like y'all had to squash your commits together.
problem I understand perfectly what the goal of the project was. Â There's some awkwardness in the English, but nothing that's super important: Â "The current functionality only allows for the author to review the bookmark, and the reviewer is not able to assess the usefulness of a bookmark." has a random "for" in it and is a bit excessively wordy. -> "Currently, only the author can review the bookmark, and the reviewer cannot assess the usefulness of a bookmark." Â But that's picky and something that would be dealt with by the editor for a document, not the developers.
problem It's a decent starting place, I guess. The bigger deal is the fact that codeclimate is justifiably super mad at the code. The issues it reports are bad and should be dealt with accordingly.
problem The authors did provide link to their workÂ forkedÂ on to their repository butÂ a merger(pull request) was not found onto the actual repo .Â The code / work seems to be complete as such , but not knowing the effects on the complete build of the system it might be difficult to comment about completion / pushing into production server
problem Its coverage satisfies the requirement 90% but not 100%
problem It is not clear that these tests coverall many edge cases or invalid inputs. Otherwise, however, the tests seem extensive, and this is reinforced with the high code coverage achieved.
problem I think there are just a couple ways to DRY out their code, where some of the assignments were done when they could have been done in one before(;each) block before all of the tests. the allow, expect style is well done and the kind of style which makes it easier to see what you are testing. In general this could have potentially been done in a more DRY fashion, which what that really does is make it easier for those in the future to use.
problem Yes, several new commits were added between submissions.
problem The build did pass, but there are 80 conflicts with Code Climate. A lot of these issues seem rather trivial and easy to fix, simply being stylistic problems, such as extra spacing or indentation here, or extra line there. These things are so simple to fix I don't think they pose much of a problem.
problem As a testing project, this implementation works very well to nearly exhaustively test the model! Through the video they show, there are a few methods not tested by the spec file, but most of the aspects of the code are, and so I think they did a great job in this regard!
problem There are very less comments in the code. Names can be more specific like make_public is very generic. Like what is made public in the function is unknown. So it can be renamed like make_submission_public. All other names are intuitive.
problem A lot of the code does look well done. I'm not exactly sure how to review the javascript that was written, but for the ruby code it does follow convention. I do notice in app/views/sample_submissions/_general.html.erb that there seems to be a lot of logic contained within the view that could be moved into the controller. In general you want to use the view for very limited logic and just to control how something looks, where the controller decided what is shown. The same is true of the app/views/sample_submissions/_responses.html.erb. I would say the index.html.erb file was done better, but in general try to design the system such that minimal use of logic in the view is achieved. The test code looks pretty good where you set up the situations and assert certain outcomes, or use capybara to run through the view tests.
problem While it was a little hard to go through every line of code (changes made in many files).Â I was able to go through most by looking at all of the commits and looking at the code in the documentation.Â Everything seems to be pretty well done.Â There are not that many comments but the code seems to be readable enough.Â Besides adding more comments I think you did a very good job with code/syntax/style.
problem The code is well written. There are not any redundancies that i can see. The ruby coding conventions are accurately followed. The variable and function names are spot on and the code is reasonable DRY. However, i believe adding comments would increase the readability of the code and increase the ability of the user to understand.
problem Code that has been added follows ruby style coding. The name of the functions are also intuitive. The authors could have added comments to the code to make it easier to understand.
problem Yes the team did add test cases. I believe the coverage may have decreased by 1%. From what i see in the sample_submissions_controller_spec.rb file, it seems to be mainly the scaffold created result, where there is not muchÂ more coverage as to the functionality they included for the views they added. There are some capybara tests which test the view that is good, but I believe that further testing could have been done on the controller.
problem They added tests cases to test their code. While it seems that it covers things well they never talk about if the test cases pass or what the coverage is. However, I think that could be out of the scope of the project.
problem The pull request does not state anything about the coverage. But the team has added test cases. They have made use of rspec capybara. The cases considered seem to cover a good scope of the implemented functionality.Â Suggestion: They could have added screenshots of the results of running the tests which shows whether they pass.
problem Yes , the team has added test cases in this submission. I cannot see the coverall coverage report. This may be due the fact that the build has failed. Thus , i cannot comment if the coverage has increased or no. The test scenarios added are pretty exhaustive and cover most of the scenarios. Maybe more test cases merging the single scenarios can be made. This should cover all the conner cases. I believe screenshot of Rspec results could have been included in the wiki.
problem This seems like a good approach as everything seems to work fine as expected. But the build for the pull request has not passed and there exist a few conflicts regarding a few files which should be first resolved before deploying. As the approach used implements the functionality correctly this can be used as a baseline for the future team to start upon and improve the issues.
problem The build is passing but the branch has conflicts with the base branch.Â app/assets/javascripts/response.js shows asÂ a conflictingÂ file.Â There are no code climate issues.
problem Code seems to be written fairly well, but suffers from potential DRY problems. That is, before every test, the methods under test are run numerous times, but the results from only a few are typically used. This also increases the cognitive load in reading the code, as you are forced to jump back and forth from the test you are looking at to the top repeatedly.
problem Tests pass, coverage increases.
problem The test variables are not very descriptive about the item under test.Â The tests themselves do a good job describing what each test is doing.
problem The tests cover a large majority of possible cases.Â It doesn't seem to do a great job covering edge cases (like invalid numbers or nils) but it could be that those inputs are never possible.
problem The code seems to be very well written.Â I like how you moved more code to the top of the file to avoid having to repeat code over and over for each test case (like you did in the first round).Â Overall, very good job with the code.Â Â My only complaint is that you create these test1, test2, etc objects.Â If they were only used in a single test case it would be fine to name them that since I could discern what they were used for.Â However, since they are used in multiple test cases it is hard for me to determine why you use test1 rather than test4 (just an example).Â Naming them with a more descriptive name could help with this.
problem I personally don't think this question is that fair.Â If it was already perfect I don't think it should matter if you added many or none at all.Â However,Â since your project did have a few problems you did need to fix stuff.Â Only 1 commit was added.Â While it seemed to have fix most things, better programming practices would have probably split that 1 commit into several smaller commits.
problem The test cases added seems like they should help with coverage, however I cannot tell for sure.Â No where in the documentation or the video showing that it work does it tell what the new coverage is.Â This makes me worry that they did not hit 90%.Â However, there are definitely a lot of test cases that seem like they should help with increasing coverage.
problem Pull request link is not uploaded and I am not able to view the coverage or if the build passes in Travis CI or not.
problem The team has certainly added test cases and their test cases work, but nothingÂ can be commented about the coverage of the tests. They have not mentioned in the document as well on how much coverage they have achieved and the pull request is not visible.
problem As the pull request is not visible I cannot comment on the the coverage of these test cases, moreover their are a few places in the code that could be dried up, otherwise the test cases seem to pass and it seems that they cover a lot of scenarios. All in all, by doing a coverage test if the coverage is above 90% then I feel that the code could be deployed on the production server.
problem The code written, at the first glance. Proper ruby standards have been followed in general. But the code seems to have several issues as seen in the code climate check in pull request, 63 issues at the time of this comment.
problem The build passed TravisCIÂ but did not pass the code climate check. The authors need to fix these issues to make up to the coding standards of the repository.
problem Travis CI build has passed and the code coverage has increased.There are some issues to be fixed as denoted by codeclimate. There are no conflicts with the master branch.
problem I was unable to verify the UI but the video and the screen captures show the working efficiently. More tests can be added. For eg- the first test only checks if a name for the menu is present. However, I feel checks should be made for the naming convention. This will help maintain uniformity throughout all projects.The team has checked if a menu name is nil. Similarly, tests could be written to see if an invalid name is entered. Also the test case 7.2 is just a slight extension of test case 7.1. I wonder if an additional test is required for the same.
problem I think the test cases are not exhaustive. With the addition of a few more test cases, this can be deployed onto the production server.
problem The code is very well written overall. However, I noticed that you have named your test menu item variables as "test1, test2...". This is slightly misleading as the name "test1" seems to imply that this object represents a test, rather than a menu item. Consider changing this before merging with the original repo.
problem The travisÂ build passed and there's no conflict with the base branch. However, there are some code climate issues that need to be resolved.
problem The code is almost ready to be deployed onto the production server. My only concern is the naming of menu item objects. Other than that, good work!
problem Based on the YouTube video provided, all tests cases pass for the menu_item_spec file.Â However, no mention of where their coverage is at is mentioned in the writeup or the YouTube video, so I can't tell if their coverage has increased or if they managed to reach the achievement mark for this project.Â For now, I am assuming that everything works properly and that they achieved the maximum amount of coverage they are told to generate.
problem Yes the system works correctly. I followed the control path to make an assignment public to students, and saw that this was correctly done. Then I went to see sample submissions and saw that you can create and view these as well.
problem The code that is written follows ruby conventions. The variables names used are intuitive and are self-explanatory.
problem A few commits added on the last day.
problem The writeup has definitely improved from what it was last time when I reviewed. But, I think they could have elaborated more on what all test cases are considered and how they are implemented. Also, the team could do away with some unnecessary things in the writeup. Overall, I think the wiki page is good but could be improved.
problem The testing module has been well defined with comments and proper variable names, even though there were certain issues but these were related to space which need minor refactor.
problem There are 63 conflicts most of which are due to space missing.
problem The build has passed Travis CI. The only issues were codeclimate issues which can be overlooked. I don't think there are major conflicts as such that need to be resolved.
problem The pull request passed the Travis CI build successfully. However, Codeclimate indicates 63 fixes to be implemented. Most of them seem to be spacing and indentation issues. So the team could fix that easily.
problem The code is very well written. The code lacks comments which makes it hard to understand. the authors have made many changes since last review. There are some code climate changes required as seen from the pull request.
problem The coverage increased. The build passed and no merge conflicts were reflected on the pull request. Some code climate changes are required.
problem The wiki page is very informative. The authors have checked last round reviews and brought necessary changes to the wiki. I still feel they can add more images to make it more informative.
problem The team has followed good coding practices and they have made sure that the code is DRY. The authors have made necessary changes after the last review. The only downside is a lack of comments which makes it difficult to understand what a particular snippet of code does. Otherwise, there aren't much changes required.
problem The build passed in Travis CI. There are no conflicts at all. The coverage has also increased. There are a few minor codeclimate issues but these can be overlooked.
problem I think the team has made sure that they cover all the test cases exhaustively. The code follows good practices and I do think, with some minor refactoring, the code will be ready to be deployed onto the production server.
problem Great work on your code!Â You labeled your variables appropriately, the Ruby syntax is on point and youÂ cleaned up your file by adding duplicate code to before each lines.Â The only thing I would suggest is adding in comments for your tests.Â While I know it's listed in your wiki page, it's a good habit to document your code so that a code reviewer understands your work if they do not have access to your wiki.Â Regardless, I think you all did a great job unit testing on_the_fly!
problem Based on the YouTube video, almost all of the tests cover all the scenarios for the on_the_fly model class.Â There are a few methods in on_the_fly that were not tested and were not mentioned in the wiki as to why these were not tested.Â Regardless, there were enough tests that covered an "on the fly" scenario.
problem This code is well ready to be deployed onto the production server.Â As mentioned above, while it doesn't test everything on_the_fly has, it tests more on the important methods on_the_fly uses often for Expertiza.Â If future teams wants to expand upon this, they wouldn't have much work to do to increase the coverage, but they could implement your cases of considerations mentioned in your writeup.
problem Most of my complaints in the previous review dealt with the wiki. The code is dry and well written! However, if you check code climate you can see that some of the code does not follow the ruby style guide (inconsistent tabbing, inconsistent spacing, etc.) I appreciate the use of context statements to help organize the code! Â Great job!
problem Yes, the build passed. The only errors with code climate, which was addressed in the first rating.
problem Aside from fixing some of the style issues, I do believe that it is ready to be deployed onto the expertiza server. Perhaps there are some changes that need to be made in order to satisfy a TA or the professor, but these wouldn't be something I could determine since I imagine they would be stylistic or code formatting preferences. Overall though I think it was solid.
problem I could not find the pull request.
problem The overall structure of the author's code is good. The variables have been properly named and the ruby convention has been correctly followed. However, in my last review, I had identified a part which is repeated in multiple controller methods and had suggested to make a separate function for it for DRYing out the code. But I don't see this implemented. The author has used the same functions with a little repitition and thus there is scope for making the code DRY. Addition of comments would have increased the readability of the code.
problem Yes , the team has made commits to the repo in the second round. There has been considerable amount of commits in the second round but not in large amounts.
problem No, the Travis build as well as the code climate checks have failed. There exists conflicts that needs to be resolved. The files with the conflicts are.Â Conflicting files app/assets/stylesheets/application.scss
problem Yes, the team has added a number of test cases compared to their last submission. However, I cannot see the coverall coverage report on their pull request. This may occur as their build has failed and therefore no coverage is reported. So I am unable to review this part. I tried to clone the repo and run the tests manually. However, the specs do not run completely as some of the tests fail. I would suggest to add tests to check if the instructor is able to edit the comments.
problem The writeup is well written. The team has clearly mentioned the problem statement and explained their plan of action. The files altered have been mentioned which is neat and an improvement from the last submission which did not mention all the files altered. The test cases have been clearly explained along with the instructions for testing the UI which has been explained in detail. However, I feel the team should have included a brief explanation of the code they altered, rather than a high level overview of the implementation. They could have given a gist of their code. Also , I believe adding a few lines about AJAX would have been beneficial for someone unfamiliar with it. This would have increased the understanding of the reader. Another improvement in the wiki could be made by including the screenshots of the results of the new specs that they have written. It helps the reviewer understand and judge the implementation .
problem The code is somewhat ready to be deployed. The build on this has failed and there are a few conflicts with the javascript files that needs fixing. The code climate checks also suggests 73 issues which needs fixing. I believe these changes could be made before deployment. The team has done a great job so it would be futile to scrap their effort and build from scratch. Rather , this can be used as a base and its functionality can be improved.Â The code can be made a bit more DRY and logic from the views can be moved to the controller. Also issues with the json, and scss files should be fixed before it could be deployed.
problem Don't see a pull request
problem The code should be ready to deploy. A slight refactoring would, however, reduce execution time (due to methods being called but results ignored) and make the code easier to follow.
problem These guys have followed good rails practices. Their code is easy to understand and very well spread out with helper methods added wherever needed. They have followed proper naming conventions with each function name clearly defining the functionality. Having said that, I think the code needs ti be refactored in some places.
problem The team has added test cases. I couldn't find their pull request the last time I reviewed their project so it is hard to compare. But overall, the coverage has increased and the newly added test cases definitely seem to cover the range of this project.
problem Yes the team has added test cases which has increased the coverage. The test cover only 54% of the controller. Around 7% of the project coverage is achieved.
problem I understand exactly what the project is supposed to do from a documentation perspective. Â From an English perspective, it's a bit wonky in a few places, like these really short sentences here: "Presently, the required actions list does not show entries for review tasks. That is, the list only displays tasks that have yet to be started. Therefore, once an assignment has been submitted, additional required actions such as reviews do not appear. In order to solve this problem, a few lines of code were added to student_task_controller.rb."Â Â They clearly want to be combined into one or two sentences: "Presently, the required actions list doesn't show entries for review tasks, instead displaying only tasks that have yet to be started, so, once an assignment has been submitted, additional required actions, such as reviews, do not appear, so a few lines of code were added to student_task_controller.rb" Flows a lot better and doesn't break single t
problem The write up is well done, and easy to read. The sections are not overly written or verbose, but also are not lacking information. Each section covers just that topics information and doesn't spill over into related areas. There are two issues that could be easily solved. There isn't any information on how to manually test, but it is also rather obvious how to. A very short sentence or two on how to do so would still be appreciated. The second area is discussing any design patterns used in the project, where they are used, and why you chose those patterns.
problem The team has improved their wiki page a lot since the last review. The wiki page is very well written, covering every aspect of the project exhaustively. Things such as 'Test Plan', which were not covered in the previous writeup are now very nicely described. The team has done a very good job of explaining with the help of screenshots wherever required. They have done a great job this time around!
problem Again could not manually verify the app because it was not deployed. Although the way the document describes the project it looks promising. The future teams can surely use this as a starting place to work on. I think code will be ready to be deployed onto the production server only when all the issues with the code mentioned by Code Climate has been satisfied but the team has done a good job overall for future teams to continue with the project.
problem It seems the code works as intended, doesn't conflict with other tasks (that I know of) and passes Travis CI. Test coverage is also minorly improved so test cases are well written. However, Code climate does report a few errors (18 currently) that can be very easily fixed. It would only take a few minutes to resolve them and then the merge should be simple.
problem I think project should be deployed to production server only after the existing code climate issues are fixed.
problem Yes, the code is ready to be deployed on the production server as i couldn't find any error or bug in the functionality which they have implemented.
problem I think their approach is spot on. I think with some refactoring, the code can be made deploy ready.
problem Yes the build passed. Code climate mentions few issues towards the code like it has found similar blocks of code inÂ various locations, a method has a high cognitive complexity and also few blocks have high number of lines. Code climate also suggested the solutions for these issues so the future teams should use these suggested ideas to improve the code.
problem The build is passing the Travis CI. There are 20 conflicts which the team must resolve. These are related to refactoring, spacing and method length which can be easily addressed.
problem The build has passed in Travis CI. There are no major conflicts as such, but there is some redundant code and refactoring is needed. There are a few codeclimate issues that need to be taken care of.
problem After checking the pull request, I can see that the Travis CI build has passed. Moreover, there are no merge conflicts. However, they haven't fixed the code climate issues and hence I am reducing a point.
problem They talk about the project purpose and design in quite a bit of detail but have not as of yet outlined the testing plan. I would urge them to consider how they will test the updates and various improvements they are planning on making. I don't think they are missing much besides that, but perhaps they should put a quick numerical or bulleted outline above the design section that quickly lists all of the changes to be made that they go into detail about later. As a reader, it was sort of difficult to read everything when it was so crammed together. Though, as a counter point they did have nice use of headers to distinguish different parts. I still think a slightly better and more readable organization can be realized.
problem The design document is very well written. The problem statement and suggested solutions were described in detail. In addition, screenshots of the issues were put in place, which helped provide context and visualize the problem. However, a test plan will need to be added, and it would have been good to include a few mock-ups of proposed changes. Overall, this is a great wiki.
problem I really like how y'all included a lot of information about this project.Â While the information was great I do wish you had a strongerÂ introduction.Â It is confusing about what is new (what y'all are going to do) for this project.Â Also, nothing is included about tests.
problem I like how you explain the reasoning behind fixes as you describe the proposed implemented solutions. It seems that you all have really divided up the tweaks and improvements well, that they seem to be quite modular and all small chunks that are quite manageable, so good job! Overall, i still think it may seem a bit too cluttered and maybe just that small summary of all of the improvements before the design section could help out.
problem The explanations of the changes are excellent. On top of being documented with a problem statement (in those where its necessary) and picture, the specific improvements for the changes are provided as well. I would say the only issue is that some of the suggested changes are in bulleted points, and those lack some of the explanation that other changes have. I would suggest splitting all of the suggested changes into bullet points to increase readability, but to keep the level of detail (or add in cases where needed like in the Checkbox questions section).
problem On the add metrics chart section, I think it would be helpful if you would at least show a mock-up to illustrate the type of graph you expect you will produce. That way as a reader, we can understand the certain contribution and how helpful this will end up being. Other than that I think the design looks well constructed. I would perhaps be specific in which files you plan on editing to perhaps get a better look at the specifics, so we understand where you will have to be careful and to ensure you have thought the design through well enough.
problem The designs appear to be sound. There are no apparent code smells, and, while there was a lack of designs/mockups, it is clear that the proposed changes aren't too complicated. However, the team did not indicate which files and classes they are going to change, so it is unclear whether or not unecessary or out of place code is going to be added.
problem The mock-ups provided look good, but what I notice is they seem to essentially all be the same as the ones provided in the requirements document. Where this ok right at the beginning, it doesn't seem to show any editing to indicate your specific contribution. I would urge you to consider showing by some fashion how your contribution will improve expertiza. A simple mock-up is alright, at least something that illustrates each change you plan on making. Also perhaps you should show a UML diagram showing some sort of flow of information that represents what your project aims to do and the problem it aims to solve.
problem The visual aids are used to illustrate the problems and serve their purpose well. However, I would suggest a design mockup to be made either on paper, whiteboard, or wireframing software. These types of pictures will help visualize how the changes will affect the application and allow for reviewers to spot potential problems and suggest changes to the design.
problem The authors have not included a testing plan in the document. The major focus of the project is on making a lot of changes to the UI. So, the authors could have mentioned about adding certain tests that will verify whether the changes that have been made to the UI are correctly working or not.
problem The document starts with two lines of explanation on what expertiza is about and then followed by existing review report shown for the users. Mockups are shown that helps to understand more on the problem. Problem statement is shown that explains what exactly the project is about in a crisp way. Review report page is then explained with all possible screenshot with the proposed changes for the screens. Testplan is not mentioned anywhere in the document. Please add test plan that Adding bulleted point wherever necessary could have improved the readability of the content.
problem The design doc is almost complete. It includes most of the relevant subsections. The problem statement has been clearly explained with the help of images. The design which the team proposes to solve this issue has also been explained thoroughly. However, the test plan section is missing . They haven't mentioned anything about testing their proposed design. Also this team has mentioned the changes that they need to make in detail but have not mentioned the files that needs to be changed. This would make it easier for the reader to gauge these changes and see if they are accurate or not. Thus, I would suggest to add a test plan explaining in detail the proposed testing methodology and include the files to be changed with a brief explanation of changes in each file.
problem Very thorough with the description of the purpose and design. The only thing missing is any plans for testing.
problem The design doc is very well written and is easy to follow. The authors have very well elaborated what the project is about and what is expected of it. The only thing missing here is a test plan. Apart from that, the authors have done a flawless job.
problem The authors have done a great job explaining the intent of the project. The screenshots and descriptions are very helpful. The only improvement I can suggest is to segregate the sections properly. At the moment, the "present scenario" and "proposed implementation" are mixed up. The authors need to separate these into different sections. Secondly, the proposed implementation should also contain details of the application files (views/models etc) that needs changing. Third, the authors need to add a "Test Plan" section and describe the same.
problem The design document provides in depth details about the current issues and things to be implemented which is good. They make use of images to good effect. The only issue I see is that they are missing a few key sessions. Consider thinking forward and adding test plans, as well as setting up a git fork that you'll be working on and adding it as necessary external links.
problem The design doc incorporates all the functionalities that are required to be implemented for this project. It explains the role of each functionality and explains the plan of action for implementation. Just one suggestion , the project requirement states that in the review report , the course name and the student name must be shown as correctly it does not display that. This part has not been clearly stated in the doc but rather implied. It would be better if this is also stated as a goal and implementation steps are shown for it in the next submission.
problem Yes. The authors have captured all the functionality mentioned in the project requirements. They have also done a good job explaining the same in their documentation. They could improve this by separating their documentation into mode logical sections than it is now.
problem As far the functionality goes, the design doc covers it and it seems to include all details no matter how small. I couldn't find anything that is missing based on the requirement spec. So, well done!
problem The wiki introduces the functionality very well. With pictures I can understand the work they want to do. But the wiki only show what they will do but not how to do it.Â The introduction of how should be a little more detailed.
problem The explanations for the changes proposed are good and makes the reviewer understand what needs to be done but I feel the explanations that are provided do not answer the question "how it is going to be achieved?". So I feel there can be certain additions to the explanations that describe how the proposed changes will be implemented. Suggestion: Mention the files that will need changes and what kind of changes so that the person reading the document can understand what changes on code level have been proposed.
problem All the explanations are easy to understand and follow. The changes mentioned could be understood by anyone who doesn't have any prior knowledge on the system. Good work team.Â The most important part is that they have explained everything in detail with all the necessary supporting examples.Â The changes made in the Review Summary Page like changes in Header, where the team is trying to figure out fixing whitespace is not clear to me. This could have been explained well.
problem The author has proposed some pretty concrete changes in the this doc. All these changes address the requirements as stated in the project problem statement. The idea of color coding in the review report is great and would make the job of the instructor easier. The idea of propagating the change in background color after sorting is great. This is not explicitly mentioned in the problem but rather have been spun up by the team to add convenience. This is really good. However , I would suggest that , instead of just stating your plan of action , the team should have given a brief explanation of the implementation of these proposed ideas for the reviewer to judge. Including the files required to be edited would also be great and increase the understanding of the implementation that the team has in mind. Adding a brief explanation of the implementation and including a list of files in which the proposed changes have been made would be really helpful for the reviewers.
problem All of the changes were well explained.Â More details about exactly what needs to change will probably be added as they get into the code more.
problem The document covers the changes that the team will be making and seems to know how they'll be tackling them. It's not hard to follow and I can understand it clearly. The only thing I felt inadequate was that there's no mention about the potential files and/or functions they would have to change to implement the requirements. Including these give a feel that the team has been thorough and have a solid foundation to work on.
problem Explanation of each change is very good and detail - I really like the screenshots.Â I do think you need a better introduction explaining things.Â Just go into a little more detail about what expertiza is and what you're trying to do.
problem The wiki doesn't introduce how to achieve all the functionality in detail. But some of them are good.
problem As I mentioned earlier, for all the proposed changes the authors have not mentioned what files will need modification and what files may be added so I cannot make a comment about the problems mentioned in the question.
problem I did not find a section where the classes, models, controllers or views that would be impacted were listed. They could have listed it in a separate section so that they could have been visible properly
problem They didn't explain their changes much at all. They gave score formula tables, but didn't say how they'd be used. The "planned approach" section is mostly just a list of requirements a second time. There is a testing plan, but it's not fleshed out in enough detail to be used. It's just "We'll make sure we meet the requirements" but phrased as test cases.
problem The design doc. has included the required section mentioned in the question. Although I suppose the authors could elaborate more on certain aspects like planned approach, files changed, etc. Overall the team has done a good job but the document could have been more thorough if it included more details about the approach. Suggestion: If possible, provide detailed explanation of what you plan to do and how you intend to achieve that.
problem I think the design doc is complete and has all the important part. It also proposed three ways to calculateÂ composite self-/peer-review grades, which shows that they did a good amount of research for this project. Nice job. One minor thing is that I don't really understand the purpose of this project. I know it is to judge the difference between self review and peer review. But what is it for? Is this in some way helping students understanding more about their work?
problem What the team has mentioned is sufficient.The introduction is well framed. I feel that the approach can be explained in greater detail. The team has elaborated on one part of the design that is score formulas but haven't explained about how they will address the other design issues. For eg you can elaborate on the design steps:- Remove the ability to see peer reviews before self reviews-Does this mean that the student won't be graded till he submits a self review or he just won't be able to view it. Create/find a function to link peer and self review scores - Which controller will be responsible for this? Which files will be modified or created for implementing this function. Also the step in the design approach "Implement function in a method that will be used when a self review is submitted" is rather vague. The terms function and method are used ambiguously. I would suggest elaborati
problem The files to be changed are not provided by the authors. It would have been a good idea to add that part.
problem The document has all the sections as mentioned in the question. The authors have done good job. However, the planned approach section just includes the bullet points of the implementation which is planned.It is almost restating what is included in the problem statement. It would have been a lot better if this team would have explained their approach and included the files which requires to be changed in order to realize this solution. I suggest to include a brief explanation of the implementation. Also consider including a UML or flowcharts to explain the steps and the data flow involved in the implementation. This increases the clarity of the document and the readers will be able to understand it seamlessly.
problem The authors did a pretty good job in showing the heat maps for different scoring strategies, and comparing them .Â But the document as a whole didnt look complete . It would be good to see a screen shot of place where this would be added . more details about the structure of the present code etc .
problem The design doc seems to be complete, they have mentioned the project purpose and have given a range of possible solutions, they have also mentioned a test plan for the project. They could however explain the project more and could explain in more details where they are going to make the changes(files that will be altered after the changes, etc).
problem The design documentation contains overview of the project and the proposed implementation, four different approaches for combining self review and peer review. They have not included that need modification. They have included a Test plan but it only contains which test cases they want to test. They could have included how are they planning to test them.
problem Yes, the document goes over all the functionalities which are required to be implemented. All these problems are addressed and solution has been proposed for it. However, this document is lacking in terms of details regarding the implementation. Also the problem statement states that the authors have freedom in deciding how these scores are displayed and how they are computed. The authors have made use of this has have considered several methods for implementation and included all of them in the doc.
problem Yes the design document covers a lot of the functionality that is required from the project. More details can be given on the functionalities that are going to be added.
problem More explanations could have been provided for the images included as it is hard to follow what exactly is to be implied from these images.
problem Well according to me the planned approach section is a bit small, like I suppose the authors should explain their approach in detail. They have done a good job considering the options for Score calculations.Â Suggestion: In the planned approach section you have mentioned what needs to be done. If possible, you can add some explanation about how you intend to do it i.e. in terms of the files that will need modification and something on the code level. This will make the document will be more complete.
problem They didn't explain their changes much at all. They gave score formula tables, but didn't say how they'd be used. The "planned approach" section is mostly just a list of requirements a second time. All of it needs to be fleshed out with explanations of what parts of the code will be messed with.
problem Some of the sections are repeated. For eg:- The Introduction and Problem statement and Planned Approach sections are pretty similar. For eg:" Ensure that users cannot view peer reviews until they complete their self review" and"Â Remove ability to see peer reviews before submitting a self review" state the same thing.
problem The score calculation has been explained in detail. The authors should have explained the plan for the changes and the result of those in detail.
problem The authors have covered all the problems mentioned in the problem statement and have proposed a solution. However, they have only stated bullet points or goals that they intend to implement but they have not specified the implementation of their plan of action. They haven't explained how they intend to implement this. Â For example - In the document , the authors have said, they need to find or include a function to merge the peer review and self scores in some way. They haven't specified which controller this method would belong to and what exact functionality they need to implement.Â Also , the test plan provided by this team seems to cover all the cases. However , they have just added bullet points. I think they should provide a brief explanation of the test scenarios which would make it easier for the reviewers to understand snd help them analyze whether more scenarios can be thought of. This would improve the test plan of this team. The authors have provided 4 possible
problem The document as a good explanation about calculating scores,Â It would be good to see similar things for other aspects as well , like on "Create the different displays for self reviews"Â Â how it actually looks like
problem They have given an exemplar matrix showing the self review scores and have shown different formulas applied to this matrix. This looks like a very good description of the project and thus makes the description helpful. They have also provided us with a comparison of the different formulas which is also helpful. They could mention the files that are going to be affected.
problem The explanation provided is good, but they could have explained the four score formulas in more detail. They could have explained each approach for better understanding. They could have stated pros and cons of each formulas and given which way they think is the most suitable in this case.
problem TheÂ team has done an excellent job explaining both the scope of their project, as well as the steps they plan on taking to completing their project.Â One area that could use a little improvement is the "Testing" portion.Â While the team has given some excellent scenarios to test, I feel as though there might be some cases that they are missing.Â For instance, the team is testing to make sure that "Peer reviewers cannot be viewed before a self review is completed".Â After testing this though, they do not test to make sure that a peer reviews can be viewed after a self review has been completed.Â I would also suggest adding some more explanation on how they plan on testing the project.Â Other then that though, great job!
problem 1) It has not been mentioned which files they are planning to modify. So it is hard to follow what method they are targeting. 2) New design doesn't seem to be "smelly", as they are trying to use new approach. 3) Gems could be used for rendering the views which they are trying to do in their fourth approach.Â 4) I think one of their planned approach creating the different displays for self reviews might have different response time for different views, and from which one could be the fastest. 5) More explanations could have been beneficial for the user reading design doc.
problem They didn't explain their changes much at all. They gave score formula tables, but didn't say how they'd be used. The "planned approach" section is mostly just a list of requirements a second time. Can't tell. Can't tell. Probably won't. This.
problem The design has not been discussed in much detail. So it is a bit difficult to make a comment on the aspects specified in the question. Suggestion: Try toÂ explain the design using aspects similar to those mentioned in this question so that the reviewer will be able to help you with some suggestions if he feels there might be some error in your approach.
problem As the design steps and the approach that the team is planning to take are not explained in much detail, I can't comment if it will result in any of the above mentioned problems.
problem The design has been properly explained theoretically. The code changes have not been given.
problem This question is difficult to review as the authors have not explained their planned approach but rather have stated their goals. However, based on the goals , I can comment that the function they are to implement seems a little complex. So here a few points to keep in mind while implementing. 1) Follow the DRY principle. If the code is getting repeated at any point, extract it into separate functions. 2) Use descriptive variable names which makes it easier to keep a track of the functionality implemented by the function. 3) Use appropriate design patterns to write reliable code. Â Also while testing, consider the different possible scenarios and include a detailed test plan for future submissions.
problem The design document talks about implementation but it dosent cover the coding aspects of itÂ for now. So it was not possible to comment about these at the present moment
problem The design can be made more detailed with more explanation in each subheading.
problem They have not stated anything about the code strategy so cannot comment on the code. They could have explained they changes that will be made in the original files and why.
problem While the team does a great job explaining the problem statement, and going over different strategies for approaching their problem, they have not included any kind of UML or technical write up that describes what files they plan on changing, and what methods they will need to add/change.Â I do not believe this is a huge issue though at this stage in the project.Â It seems that after just a week into the project, the team has progressed nicely towards their goal.Â They seem to have a good grasp on what they need to do and how they want to approach their project.Â I would suggest moving forwards into the coding portion of the project, that the team take some time to really lay out a technical design document such as a UML.Â I would also suggest the creation of a wireframe.Â From personal experience, while it is tedious in the short term, creating a wireframe and UML make the coding portion of a project 100 times easier.Â Furthermore, working through a wireframe and UML hel
problem 1) Screenshots have been shared in the design doc but it would have been beneficial if more explanation could have been provided with it.Â 2) No UML Diagrams have been included 3) Screenshots have been shared which seem to be the high level results of the project but it would have been helpful if some diagrams could have been provided which depict how their project is trying to create the difference.
problem The visual aids that were included depicted the score calculations. These gave a rough idea of how the calculations work. Suggestion: Apart from the score calculations, you can include screenshots of the view UI where you plan to make changes. Eg. The project wants the user to see the self review scores juxtaposed with peer review scores. So you could provide a screenshot which depicts the current scenario and then explain what changes you intend to make and how it will be different from the current scenario. Screenshots like these will help the reviewer get a visual idea of the changes that the project will provide to the existing application.
problem Y'all used conditional formatting in Excel, y'all rule. Any document with conditional formatting in it is A-OK in my book. The numbers don't really make sense in a lot of them (Why is a 2 red and also a .5 red in the third one?) and the third one's formula is cut off. I'd also click away from the box in the top left when taking the screenshot so that the formula doesn't have a random blue line through it. But, again, you actually used conditional formatting and I love that so much. Clean up the little bits of weirdness and you'll definitely get a good re-review from this person on this section.
problem The design document provides in depth details about the current issues and things to be implemented which is good. They make use of images to good effect. The only issue I see is that they are missing a few key sections. I see that the views affected are mentioned, however consider adding the controllers and methods that would be added/changed. Also, there is redundant information on what Expertiza is whereas it was mentioned not to include these details.
problem UML diagrams are not used. However the team has delved into great detail, to explain what approach will be used for grading self reviews as compared to peer reviews. The graphs add to the document as the reader does not have to go through large chunks of paragraphs to fully understand the team's intent. The graph is quite helpful.
problem The visuals for score calculation are given which are good. But more visuals showing the actual view of the pages after modification and a design flow chart would have been a good point.
problem The team has included heat charts of the different functions proposed for the computation of the self reviews. These charts make it easy to understand the merits and de merits of each function. However , they have not included any other diagram to assist their explanation.Â I think it would be better to include a flowchart or an UML to explain the implementation and data flow amongst the controllers models and views. I also believe that they should include some diagrams to display what the outputs would look like. This is be a simple hand drawn diagram or a screenshot of the views with mock links to display the potential output. This would make the ideas of this team very clear to the reviewers and help them understand better.
problem Score displays were good, Uml diagram about how the system interacts if provided would be really helpful .
problem The authors have provided tables that make their proposed formulas clear. They could have shown how the final view will look like diagrammatically as well.
problem They have included tables showing the 4 ways they plan to combine the self review nd peer review. They can also make a flowchart of the entire implementation that would make it easy for the reader to understand the whole flow.
problem I got almost everything I needÂ to know about this project from their wiki. They got Background and Motivation, Problem Statement, Implementation Plan and Test Plan, etc. Nice write up! But there's a tiny problem: they introduced expertiza in Background and Motivation which I'd recommend to remove because it's unnecessary and I remember the professor said so in class.
problem The diagrams that the team included showing the table of self to peer score relationships was very helpful in understanding how each of the different formulas calculated scores.Â This was a really cool addition to the teams design document and I applaud them for putting in the effort to work though four different formulas.Â That being said, it seems that the team has yet to complete a wireframe or UML diagram.Â As I mentioned earlier, this doesn't seem like a huge deal as of now considering we are just getting started on our projects, but this should be a priority moving forwards.Â When it comes to writing wireframes, a really nice web tool is balsamiqÂ https://balsamiq.cloud/.Â Balsamiq will let you sign up for a month free trial, and is super intuitive to use.Â When it comes to UML diagrams, there are a lot of great options, but my personal favorite is draw.ioÂ https://www.draw.io/.Â Draw.io lets you save your diagrams to GoogleDrive so you can share them easily
problem Extra information : it has been specifically written not to write about expertiza All the components required ie Introduction, plan of implementation and Test plan has been included. One missing component here is classes affected
problem They mention almost all the functions, creation, assignment and approval. however seems they miss one requirement, when instructor try to create new badge, he/she should be able to upload the image. i didn't see the uploading part in their wiki.
problem They have a good explanation about their planned implementations, but they dont explain why they will do this or why they will do that. They do show a lot of pictures of mock-up UI changes, which is very good because in this case it makes it almost self explanatory.
problem Overall, the proposed changes are well explained to me. Well done. However, the part where it mentions "Approval of badges by instructor" is not so clear me. It introduces a concept "student-suggested badges". I don't know where and how a student could suggest a badge for certain submission for a assignment. Is it about the badges assigned to the teammates?
problem I think the explanations are easy to understand, and with the addition of visualizations, I think this only adds to the effectiveness of the design document. I think that your explanation should not rely too heavily on the visualization where possibly. Try to add more depth to the explanation if possible because you cannot always count on someone understanding yourÂ screen mock-ups.
problem The explanations given are good and have good explanation for each of the features that are going to be implemented. The explanations however could be more detailed. The authors could mention the alternatives that the authors decided upon or the different design decisions that the authors are going to take.
problem The authors haven't stated any code changes as of now.
problem Their goal is to extend badging functionality and they will mainly add 4 new functionalities about badging, so I think they may increase the response time but it's inevitable. For example, the functionality that students are entitled to assign badges may slightly increase the time of loading pages.
problem For the most part, the design looks good. The only thing that is missing is the UML diagrams or some model of the code that will be modified. I cannot check if the authors plan to add methods to the wrong class because I do not know anything about the code. However, aside from that issue, everything looks great! You tell us what files you are modifying on the front-end, but not on the back end with the database, which I imagine would be the more challenging portion. Please include that in the next iteration.
problem In some cases it is mentioned which files would be changed but they are only related to view, it would have been beneficial to have included changes in controller as well. In "assignment of good reviewer" its very difficult to just know a column by icon, usually if the space is very small it makes sense to have icon, but in this case it would be better to have written text.
problem Though the files that will be changed are mentioned, a high-level overview of what code changes need to be made to these files is not given. It is suggested that this section be added.
problem Some more effort should be expended on the design. There can be a section explaining the different designs that the team/ authors came across whileÂ deciding on the one they are going with, these could be explained.
problem The changes proposed are mostly to be implemented on the View side and hence I don't think there is anything too complicated or something that could increase the response time of the system. The team has mostly figured out as to where the changes need to be made. However, knowing what controller changes would be made would be helpful to know as to whether it would be efficient. Also, make sure the icons used are open source and do not have any copyright infringement associated.
problem The "approval of badges" should have been presented with an image to get an idea what and how the changes are to be reflected.
problem They have made a cool usecase diagram which I think is very helpful for readers to understand the newly-added expertiza badging structure. But I guess there's a little problem with this diagram: "View badges received" should read data from the database instead of writing data to the database, so I think the arrow is backwards. Also, I'd mention a little advice even though it wasn't mentioned in the requirements:Â itÂ would be better if they could illustrate (maybe not in this diagram) what other roles can do with badging (such as admin) rather than just instructor and student.
problem Use of mock-ups is excellent, and are necessary. I think the explanations could be slightly improved, but I addressed this in previous feedback. The UMLs need to be added as well however I do get a solid understanding of what the authors want to do with the code even though I do not know exactly what parts of the code they will modify.
problem Overall the visual aids provided give a good idea of where the changes would be and what the changes would be. The user case diagram is bit confusing. It would have been much better to compare the current expected functionality view and the use case diagram with the previous implementation, and write about why this change is needed
problem The edited screenshots provide useful visuals of the proposed changes.Â As mentioned before, please consider reviewing and updating the use case diagram arrows.
problem I am not sure if implementation doubts should be part of the design doc? maybe they should just meet with their mentor to solve those doubts.
problem The design doc is complete. All the important parts are present. The minor concern about this new feature is that I am afraid that specific dividing labor among teammates would harm the cooperation.
problem The design document is well presented, but I felt that the introduction part could have been written in points , because it is the most important part of the project and if it is written in points, the reader can have an overall understanding of the scope quickly
problem The team's wiki seems to be written after they have fullyÂ understand the goals of the project and I think they almost got everything needed in their wiki. They got Overview, diagram, Proposed Implementation, Test Plan which is good. But I'd mention that Test Plan is kind of brief. They just wrote what need to be tested, so I'd recommend to include more information about testing such as the to-be-testedÂ files, to-be-created Rspec test files and brief descriptions of to-be-tested methods.
problem the Document appears complete in the proposed implementation: i do have doubt regarding what if oneÂ studentÂ is doing multiple thingsÂ In the files to be modified, it would have been better to include what changes should there be in each file, would give better idea as to why these files need to be modified. Test plan should be more elaborate: testing before submitting project all the students should have some role In the new files section rather then mentioning duties table, It would have been better to write about migration script and specify the columns and their data types
problem Very thorough, covers each area that the team has worked on, the results of those changes, and the reasoning behind them. I think improvement can be made by updating 2 areas here, the conclusion includes a link to the future subsequent steps that the team hopes to implement, I would take this out and put it in its own "future work" section. Then you can expand upon the steps more and describe why this would improve performance. The second thing is the testing of the webpages. I see you have tested with slither.io and report some very slight improvements, but have you tried any other sites? Maybe report on speed up or slow down of a regular site that doesn't contain 2000+ canvases.
problem Project Purpose :It has been clearly explained what exactly the purpose of the project is. Project Design : What all changes are made from the previous wiki link cannot be followed.Â Testing Plan : Its not clearly mentioned how are these tests helping to test the functionalities.
problem The design doc is mostly complete. The project purpose is clearly stated. The fact that the "Initial Steps" and "Subsequent Steps" were listed out was nice. Project Design was mostly stated. However, most of the doc seems to pertain to the "Initial Steps." And since the pull request was accepted on 4/2, it seems like not much about the document was changed to include the seconds part of the project. The report had a testing plan, but it also seems like this was for the first part of the project.
problem I think all sections are there, and complete. The test plan section could be a bit more in-depthÂ than just describing one test that you perform for performance. Certainly varying the size of the image will affect the performance, and would be useful information.
problem The design documentation looks pretty good at the moment.Â I appreciate you explaining what Servo is as I had no idea what it was when I reviewed another team who had a Servo project.Â Also, it was a good idea also to explain what Rust and what an HTML Canvas is as well.Â The design patterns section doesn't need to be included if it's not part of your project.Â While you do mention that you plan on creating test cases in the project description, these are fine mentioned in the introduction, but you should expand upon those further in aÂ Test Plan section of your document along with the Testing subsection you added in your Implementation section.Â Overall, you hit a lot of what this project is and what the problems are that you all need to fix.
problem The design doc looks complete to me. But it is not straightforwardÂ for me to understand the implementation steps proposed in the project description. The details present under implementation help in giving a better understanding
problem 1. Well documented wiki project 2. images could be added 3. Performance measures could be better explained
problem The design document sections are complete and satisfactorily cover the need, approach, and testing required for the project.Â It would be helpful to have some diagrams/mockups in the Test Plan or Proposed Implementation.Â In the test plan section, the word "role" should be replaced with "duty".
problem The requirements have been mentioned clearly but could have been explained more like in section where initial steps and consequent steps are written more details could have been helpful for the user to understand the project better.
problem All the completed steps during the OSS project are highly detailed in the design document, the team does a great job of covering the material there. The only thing that is not incorporated is the work that will be done in the future (during final project time). As stated in the last question you can easily take this information from the subsequent steps.
problem The design doc doesn't seem to talk about the design about the "Subsequent Steps." All it seemed to do so far was was simply restate what the instructions were.
problem The design document was well written. It included all the major details such as project purpose, design(with UML diagram and list of files to be added/modified) and a tentative test plan. The proposed implementation was also explained clearly and the team seems to have a clear idea about how to go about with the project. I liked how they had posed implementation questions in the end of the document and these are probably to be answered as they proceed with the project. I am reducing a point only because a couple of mock-ups would've been perfect additions to this document.
problem Explanations are not adequate to understand the flow of the project and how are they have planned to achieve it.
problem Not many changes were proposed. All I could see was a restatement of the instructions from the project in "Subsequent Steps" section.
problem There are some proposed changes made in the Implementation section of your document as well as code that shows what you have worked on.Â This should be expanded upon each initial and subsequent step so that all of your proposed changes are illustrated and described.
problem The implementation details are really good and show good examples. If more details were given for some of the other steps in the project description, that would be great.
problem The changes which were explained were well explained however (like I said above) I think the steps need more explanation.
problem 1. Very well written, to explain what they want to establish 2. Images could be added in a better understanding
problem 1) They haven't mentioned which methods or files they are planning to alter. 2) By their approach it doesn't seem the code would be smelly but if some hint about code including in design code could have been better. 3) As the project is using rust, gems cannot be used. 4) The testing results are not discussed so can't comment on the response time.Â 5) More efforts could have been given towards explanation of the steps.
problem The only part I don't like is the section dedicated to the design patterns. You can still say the same thing, it is just off putting that the entire section is only the one line. The rest of the designs proposed are great, you followed exactly what Mozilla described in their project description.
problem Not many changes were proposed. All I could see was a restatement of the instructions from the project in "Subsequent Steps" section. Furthermore, since not muchÂ was written about the design proposal,I felt a little confused on what the "Subsequent Steps" wanted the project to do or what the end goal was.
problem No designs have been proposed as to how these steps will change the way a class(es) is structured.
problem It is hard to understand the code without proper experience 2. Wiki is very nicely explained, though during execution of the project, more changes needs to be done to help getting a clearer overview of the project
problem 1) No visual aids have been provided but proper links and commands have been provided which help to understand how the project is run and what results can be expected after executing each command.Â 2) No UML Diagrams have been included 3) No Diagram has been included
problem The design document doesn't have any UML diagrams or any visual aids.Â However, I don't think the team could have provided any mock-ups particularly for this project. They did include the link for theÂ Â http://slither.io/Â to illustrate the current performance of what they are going to improve.
problem The code snippets helped quite a lot, really made it easy to follow along with the changes when they are side by side like in the adding ID section. One potential thing I would do is add some sort of canvas to the page, or a link to a page with canvas objects that the user can interact with. This would make discussing the canvas slightly more intuitive for readers.
problem Code snippets are used, but not visuals are provided like UMLs or mock-ups. This is unfortunate since the project deals with the rendering of pages and a visual of the rendered pages could be appropriate here or even very useful to help understand the project. I say this with the intention that the project is easy to understand, but the explanations could be clearer with more visuals.
problem No visual aids like UMLs, mockups, or tables in this document other than code snippet visuals.
problem There are no diagrams included. Maybe some diagrams could be used to explain the transition from one thread per canvas to one thread for all canvases. And maybe a diagram for the initial testcase.
problem No graphics were provided. WhileÂ you make the argument reallyÂ don't need design patterns I still think a graphic showing where or how these steps (that you will complete) fit in with the code would have been helpful.
problem 1. Visual aids could be added to help in better understanding of the project 2. No screen mockups present, they could be added to have a better visualization
problem Project Purpose: The project purpose has been explained but I am still unclear what exactly is the aim for the project.Â Project Design: The design has not been explained properly why particularly they chose this design. Testing : Nothing has been mentioned about their testing plans due which design doc seems to be incomplete as how the functionalities would be tested isn't mentioned.
problem Test plan is not included in the design doc. However this project is related to modify view files. Another thing is, maybe they could include what the view looks like now before changes and what the view would look like after changes.
problem The team did a great job explaining what their goal is for this project. Great visualization for project design (we should have included hand-drawn mock-ups too)! however, they haven't outlined their testing plan yet.
problem The design document was not well formatted. The entire page is not visible . The reviewer has to scroll to the left to see the entire page
problem The team has given a short description on what the project is about and the files that has to be modified. Clear explanation is given on how the changes can impact the system. The design of the UI screens is provided in a neat and clear manner. Tone analysis is also shown at each of the review. Only the above informations are given. The team has missed to provide the UML diagram, or any mockup screen of the present working scenario. This would have enhanced the readers understanding. Please try to provide a short information on what expertiza is about.
problem The design doc submitted by this team is almost complete. However certain elements are missing. Firstly, the test plan section has not been added. I suggest to include a test plan with detailed,thought out scenarios which are exhaustive.Â The project design and implementation proposed by the authors is good. However it is a little brief and mostly only includes hand drawn pictures of the potential results and thus is difficult to follow at some places. I would suggest to explain how the proposed changes are to be implemented in a little detail. This increases the ability of the reviewers to understand the ideas proposed by this team.\ Also i suggest to explain the problem statement in detail and not just state it. It makes it easier to understand.
problem The doc seems incomplete as they have not explained the design as well as the testing plan for the project. The purpose of the project is clear but they lack information
problem The team has written work to be done in a good way They have even put inÂ hand drawings which was impressive, But i was not able to find and testing plan in the document
problem The document actually looks very thorough and it seems they have considered what they need to do very well. They have included an incredibly thorough description of each method that will be tested thoroughly, the fact that they aim to have > 90% coverage, and an individual testing plan for nearly every method. I think maybe less explanation of each method might be better, but that could just be personal preference. Otherwise it looks great!
problem This design document is basically almost finished. Everything in it looks complete and well documented. The only issue I have is that you should create a section called problem statement instead of putting it in the intro. This is a minor organizational issue, and when fixed will merit full credit for sure.
problem They have covered almost everything, including problem description, methods description, and detailed testing plans. It would better if they can include some background information about Expertiza. In fact, most Expertiza groups did not. But not everyone has the background information. While we are also working on Expertiza, Q suggests us to include the information.
problem The design document looks to have all relevant details about what the team has set out to achieve. They have mentioned all details about the files they are concerned which is good. Most teams seem to miss out on this important detail. Since this is a testing project, they have quite a few tests about how they would test the various methods. You could consider setting up a git fork that you'll be working on and adding it as necessary external links.
problem The team has done a good job planning out their course of action for their project.Â The Test Plan does a good job covering the over all scope of the project.Â I like how the team has described what each method that needs to be tested does, and then goes on to give an example of how they will test that method.Â One area that could be improved is edge cases.Â I did not see any reference to them at all.Â This could be due to there not being any, but it would be helpful if you touched on that just a bit.Â Over all good job!
problem Discusses all possible branches of the test file at length and lists out all used classes. Very well documented, and based on the problem statement I think that if the authors implement the functionality as stated in the wiki they will earn full credit on the assignment portion as well.
problem The team has done a good job covering all of the required points in the the final project description.Â The description required that the team create a new file named "users_controller_spec.rb" which they haveÂ described in their project design document. Â It also states that the team does not need to test private or protected methods, but needed to achieve at a minimum, 90% path coverage.Â The team did a good job covering this in their design document as well.Â All in all the team has done a good job incorporating all of the functionality required into their design doc.
problem I think the Test-Plan was very well done and everything is easy to follow. One small suggestion to make is to resize the photo. It is too large to fit on the wiki and is a bit cumbersome to deal with.
problem Being a Testing project, there wont be any changes but additions to test cases, each of their test cases has a well defined explanation of why this test case might be required. Based on the number of test cases and functionality they will be testing it can be clearly seen that this will help in improving the over all test coverage
problem While the explanation of methods and tables is complete, this section may be better exemplified by using an ERD for the tables and UML diagram for the methods.Â The same is true for the test plan.Â For example, test 10 could be drawn out with decision diagrams to show the flow of execution and error/pass conditions.
problem The team has done a really good job explaining what each method they will test does.Â They have also given the RSPEC test case headers that they will be using to test each method.Â While this does a pretty good job explaining what will be tested, it might help to add a short explanation for each test.Â For instance, under the "Create" method, one of the described tests states, "Is this the name new?Â If yes, good.Â Otherwise, register the user by email address"Â This is a bit confusing to me, as I don't fully understand what is going on.Â It seems to be saying if the name is new, then don't register a new users, but this seems contradictory to the idea of a "create" method? Because of this, it would be nice to have some added explanation attached to each test.Â Other then that though, everything looks good!
problem It looks they are inspecting the correct class as their project works around theÂ users_controller.rb controller. I think at this point I would ensure you be careful when generating your tests and try to use a DRY approach. I found that correct use of a before(:each) block can truly make code look pretty and less cluttered with the same allow statements. Overall the thought put into creating the test definitely seems sound, I would just look through to ensure you are covering most avenues to acquire that 90% coverage. Otherwise great work so far on the design!
problem There is no need to have design proposition as this is a test project, the test plan is good and doesnt appear to be smelly and doesnt over complicate the things.Â I wouldn't change anything here, all the right classes and methods have been taken into consideration and the right classes and associated classes have been targeted for testing. Good job here.
problem Ultimately I like the idea behind the UML diagram. It seems to me that it is meant to enable the reader to understand the importance of theÂ users_controller and why it is important to create these integration tests. This controller seems to enable new users to sign up and then to be approved by an instructor, which is quite pivotal to Expertiza. Perhaps before next submission you could come up with a few graphics as to the testing interface and how these integration tests will go through and ensure correct operation of the controller. Other than though, i think the UML is quite well made and easy to understand!
problem I wonder if they could build UML diagrams for test plan?
problem Strengths: - Flow chart added to explain the methods. Â The above mentioned problems do not exist. This project does not seem to require UML diagrams or mockups.
problem Diagram of the flow of the code is used appropriately. I am not sure that a UML is necessary for this project since it is just a test class. Of course, it would not hurt to include one to help represent the portion of the system under test, but I do not think it merits a significant loss of points.
problem They have included diagrams, and adequate information can be extracted from the diagram, UML and other diagrams wont be needed in this case as it is a testing project. Â There is a good enough depiction of the entire test plan and a lot of aspects have been taken into consideration.
problem They have a diagram depicting the current flow for the creation of the users which is helpful. However I do not think any diagram could be expected of testing projects. You could include some screen mockups of when appropriate error messages should occur.
problem No testing section, no explanation provided for the work they wish to do. A lot of details is missing. Authors needs to work on the wiki page as it is the only thing which will help us understand what they plan to do.
problem They did not really talk about the functionality of related methods and objects. Just some descriptions of current pages.
problem Yes, they have incorporated all the functionality they think should be present. However, with constant work more changes can be added which would require additional functionalities.
problem The design document includes all the functionality as stated in the Expertiza project document. Good explanation givenÂ on how the instructors/TA will be given the opportunity to review the projects submitted. They have also provided screenshots on how the current scenario is working which makes it clear to readers.Â Team has taken time to make sure to include all the functionalities. Good work Keep it up!
problem It might be redundant to separateÂ problem and solution since they both use the same screenshot. I would suggest that they just describe each problem with its solution and then use the same screenshot.
problem Brief explanations have been provided about the proposed changes. Overall everything looks good. The only suggestion that can be given is to add something about how these proposed changes will be achieved
problem The document clearly explains about the changes proposed with supporting screenshots of the mockup screens. It seems to be easier to understand the changes that the team has come up with. The team has explained with various scenarios also that could arise such as "When the deadline is passed, whether the instructor can review the project", "In case of intermission deadline" etc. One suggestion i would like to propose is that the team could have explained the part of code they are going to modify so that it would be much easier to understand the changes.
problem Too early to evaluate that point. They have not talked about the code or any specific method.
problem The team has done enough research to find out the files that has to be changed for each of the functionality in the problem statement and presented clearly. The changes doesn't require any specific gems as few lines of code has to be added in various files mentioned. Modifying the particular module/method doesn't need any gems. So the decision taken by the team is correct.Â There is no specific design pattern/technique proposed by the team so it's not possible to comment whether the particular change could make the code smelly. Since the code changes orÂ the design decision is not mentioned by the team it is not possible to check about the response time. But the changes seems to be more in the UI side, the response time will be same as present.
problem The wiki is upto the mark, with different approaches the authors wish to take. There might be a possibility that the code may get a little smelly. I would love to see how the authors tackle this issue.
problem I cannot comment on how the authors will implement the changes in the code as it is too early for that.
problem 1) I didn't find any improper method additions in the design 2) The document explains how different constraints are to be handled and I don't see any potential code smells.
problem The design seems fitting for the task at hand. Curious to see how the instructors reviews will be handled vs the student reviews.
problem The team has made use of mockup screen of all the current scenario and the proposed changes to explain the design. Making use of screen mockups help the reader to understand more about the project or the problem statement. For the scores table, the team has highlighted and shown the instructors view in specific. Good work team. The team could have checked on providing UML diagrams explanation for the changes they are making on the controller part of their changes, which could have enhanced the reader's understanding.
problem No UML diagram, but it might be fine since most of the change is on view.
problem The diagrams used to show the proposed changes are well done and there are plenty of them to adequately explain all the changes in detail.
problem They have included screenshot of the views before and after. They can include a design flowchart/UML diagram to show the overall changes that need to be made to attain the desired result.
problem The screenshots were extremely detailed and was able to provide a clear difference between the current scenario and the proposed solution. However I am reducing a point because of lack of UML diagrams. UML diagrams help a lot in the design of applications and provide a clear picture of the system skeleton and it would be better to include them.
problem They explain the project purpose well, but when they explain the design, or what they will do satisfy this purpose, I feel they could be more explicit. Perhaps in the resubmission they could explain the exact places they will look and files that will most likely end up being changed, but this document is fairly lacking as it is. Also, the testing plan only states that they will ensure previous tests work. What are the pivotal tests that must work? Graphical inclusion would be a great idea, and im not sure listing the entire documentation is too great of an idea too because its rather confusing and doesnt actually explain whatÂ theirÂ contribution will be.
problem The portions that the team added at the top of the write up are good, they explain what is required of the project, and some of how they plan to get those steps done. But the bottom part, the list to all the tables in the DB, seems a bit overkill. The write up does not need to link to every table that will be touched, maybe if you want to include them they can be added in a simple string of links rather than these large blocks? Since they are added I feel there should be some details attached to them as well, like what each is used for, and how you plan on updating that specific one.
problem Yes they included project purpose which is easy to understand but theyÂ didn't mention their plan (didn't explain how they'd plan to complete their goals in steps)
problem The design doc lists the project purpose and project design in a sense by listing objectives. The project invovles regularizing the database schema so it is understandably difficult to produce a project design like a mock up. However, theÂ suggested changes do not go into much detail and are not well documented. Listing few sections of the wiki that will be updated would have added to the completeness of the doc. In addition, the testing plan was hard to extract, and doesn't go into much detail. I think overall, the team should add headings to the document that clearly outline what the problem and background of the project is, what their suggested solutions are, and a description of each solution. Also they should have a seperate section for a test plan.
problem They have provided the general description, problems and resolving steps. They provide a detailed description of each object. But the picture they uploaded seems redundant.
problem The purpose is defined but there is no description on how they will locate any redundant/unused data to remove it from the schema.
problem I do understand that there is not a whole lot of explanation needed in the doc, but the team could have done much more than just stating what is to be done without actually explaining anything. The wiki page adds nothing to the project description. The wiki page lists some tables without actually explaining anything about those.
problem The teams work is to modify the expertiza db to make it moreÂ functional removing the db. This message was clearly conveyedÂ Â . The test plan was not explicitly mentioned . May be the team would need to check if the functionaloty is still maintained if the table attributes are changed , which as said they would run all the tests again
problem The team has done a good job covering the projects purpose and the scope of the project as a whole.Â That being said, the team has not included a UML or Wireframe describing the technical layout of their porject.Â Furthermore, the team does not appear to have added testing plan.Â Â Even though the team has not done either of these two things, they seem to be on track given it is only one week into the project.Â I would suggest though, that moving forward the team focus on getting these technical documents written up so that they can all be on the same page when it comes time to begin implementing everything.
problem The project purpose and some information on the issues present in the old design was given. However, the implementation plan is extremely vague and very short, and no information on the test plan is given.
problem After reading these requirements document, i actually realize that everything on the wiki was a cut and paste, so they actually don't have any design determined yet. They do satisfy incorporating functionality, but I would think it would be great to see how they will go about accomplishing these tasks in their own words.
problem It's pretty close to complete. I'd like more information on what the objects look like. There's a lot of discussion of the behind-the-scenes table action, but there's not a lot of discussion on what the objects that will abstract those tables away look lie.
problem The design doc is very well written right from the design strategy to the user interface change. I felt that , the installation steps could have been provided, so that any new user can perform these steps and get to the files,codes to see the changes.
problem Pros: Project purpose is stated clearly. Project design is stated in depth with multiple flowcharts and screenshots. Test plan is given and what all should be tested is mentioned. Â Suggestion: Some detail on how each of these will be tested in the test plan would have been good.
problem The design doc is complete and through. They have included all the details. The problem statement has been explained well. The proposed solution is quite clear and the flowcharts provided are really easy to understand and reviewers can get a complete idea of what the team has thought of.Â However, I would suggest the addition of a UML diagram to explain the data flow accurately. This would strengthen the document and make it crystal clear.
problem The documentation lacks references which I believe is important in documentation. Let people know where you found your information from. The design doc consists of the testing plan , the purpose and the project design.
problem The design document looks to have all relevant details about what the team has set out to achieve. They have mentioned all details about the files they are concerned which is good. Most teams seem to miss out on this important detail. They make use of images to good effect. The Test Plan seems to be short on tests and could include much more considering it's quite a big feature to be added. You could consider setting up a git fork that you'll be working on and adding it as necessary external links.
problem Yes, the team has covered all the requirements stated in the problem statement.In the Changes to User Interface section, the team has just restated the problem statement. Explaining it in your own words would be better.
problem Explanation of design strategy can be more smooth, e.g. "If the instructor has enabled a particular assignment to have supplementary review questionnaire a student when clicks on the "Your Work" tab sees a link to the add/edit Supplemntary Review Questionnaire." can flow smoothly by trimming off bad grammar or adding some words.
problem I'd like a bit more info on what the structure of this stuff is as objects instead of tables. There's a lot of discussion of tables, but that's not what's going to be used (I hope?), so more clarity on how the objects look would be nice.
problem This team has provided a good enough explanation to support the proposed changed. However, at some places the explanation is too brief and is almost just stating which is given in the problem statement. I would suggest , that they can explain the solution of each problem in a some detail so that it is easier to understand. Maybe a few examples can be added to aid understanding.Â Also one thing I would like to point out that the first flowchart is not clear. The flow is quite distorted as it connects the instructor views with the student . I don't think thats quite accurate. Instead a separate flowchart for the instructor side and the student side can be created. This would make the flowchart easier to follow and also track the data flow. In the first flowchart, there is a design box with only one path without any indication for yes and no. I would suggest to fix this before the next submission.
problem The document covers the changes that the team will be making and seems to know how they'll be tackling them. It's not hard to follow and I can understand it clearly for most part. However I am not too clear on how the grading will work. Initially it is mentioned that these supplementary questionnaire will not be graded but the UML diagram mentions that the SRQ scores would be appended to the original review scores. Also I'm not sure as to whether these would be optional or not. If they are optional, I believe people wouldn't be keen on answering them. If they are not graded, it is not fair for some people reviewing to do additional work in reviewing the team's work. It could be added as an optional bonus if answered.
problem Yes, in their design description I can see all the required functionalities are covered which is good. However it's better if they can include a design plan/project plan to illustrate how they'd plan to meet the requirementsÂ in steps. They did write "The scope of our project is to rectify these problems by performing the below steps" butÂ I think these â€œstepsâ€ are just the copy of the requirements and it's too abstract to figure out what theyÂ thoughtÂ around these requirements.
problem The explanations for the proposed changes are straightforward and quite easy to understand but they are almost the copy from the requirements, so I'd recommend they discuss them in detail. For example, for "1. Go through the Expertiza_development database to find tables that not used any more or redundant records." they may explain the criteria they decide to use to find the useless or redundant tables.
problem Their goal is to regularize expertiza database schema so they won't add methods/classes. From wiki it seems they just started their project and there's no code written yet, so I'd say more effort should be expended on the design.
problem They included the old detailed description of the tables in Expertiza DB schema which is really descriptive. But for now it's hard to say whether it's helpful and necessary to help reader understand the project, however I guess when they almost finished their tasks they will update a rectified DB tableÂ on wiki, so at that time by comparing the rectified and old table, it will be very helpful for readers to figure out their project purpose and how they achieve them. Anyway, the table is well designed and shows their intentions.
problem The design copy and pasted the required funcionalities listed on the main document, so yes, objectively the design does incorporate them somewhat. However, the actions that team stated they will take are not very detailed, so it is difficult to guage whether or not the requirements are being met.
problem The authors need to be more explicit about the changes they will make. It is good that the team communicated that they will update the wiki to reflect the current DB schema, however instead of stating the potential changes, the structure of the entire wiki was instead presented. I think once the team dives a bit deeper into the project, they will be able to provide the names of the DB tables that were changed or removed.
problem Overall, the scope of the project seems sound. It is difficult to guage whether or not the changes will have potential risky effects to the application without knowing which parts of the DB are being altered. However, as long as the team does go back update the doc with the details of their changes, it will become easier to analyze the effectiveness on the design of the project.
problem No visual aids were used, and it would be a bit tricky for the team to include any on this one. However, screenshot of how various tables in the DB are linked together presently would have been a nice use of visual aids. I would suggest somehow providing a visual aid that helps provide the rationale for each change made to the DB. This would allow for more understanding regarding the project and the impact of the changes.
problem The design does not describe how it will incorporate all of the required functionality,Â but it does claim that it will, and it describes several specific requirements that will be completed.
problem The authors proposed to review the DB schema and update the Wiki. However, no more detail at all was given, and as such it is difficult to gauge the quality of the explanations present.
problem The authors did not describe what design changes they plan to make, only that they will make changes.
problem The item most similar to a visual aid is a list of DB fields given, which is not immediately useful if not accompanied with an explanation of what is being modified.
problem There were actually no explanations given because they don't have any of their own design plans documented, just what was placed in the requirements document. I think they can come up with their approach, or a few, and explain them.
problem I think the plan laid out could work out, but they will have to be very cautious because this is a fairly destructive project. Also I think they will have to make sure to be on the same page and double check each other before they decide to make changes. I definitely think more effort should be expended on the design as there doesnt seem to be much design as of yet. If they perhaps make it a modular design where they effectively peruse each DB table, maybe they can come to a more coherent and logical design they can then document.
problem They do not provide any visual aids, which I think would be a great idea. Perhaps including a mock-up DB table that would then be able to show how thios project would impact expertiza. Or maybe there is some metric whereby cleaning up the extraneous references that are unneeded would affect it, and they can somehow visually represent the impact their design will have.
problem the explanation was crisp for most part . if it was possible to mention how they would plan to check all the attributes in a better way or go through each of them individually . I am just curious
problem They list the project problems, and the scope of the project and introduce the steps to navigate to expertiza_development schema, which is pretty good. However, i still don't know about their design purpose and plan. I think they still need to tell us what kind of achievement they'd like to get at the end of this project and details of how they will do the project step by step. Moreover, i think they only write a little contents in this wiki pages. The former half are just the project description provided by instructors. they just added 21 lines to the old wiki page and 12 lines of them are copied from project description.
problem they explained the project very well. But they just didn't talk about details plan.
problem No diagram is used in this wiki. and i wonder if they can use some diagram for their project. But i'd like to see if they can come up with some flow charts for their detailed realization of design.
problem I think an example would really do wonders here. Its a bit hard to grasp exactly whats being changed? The word normalize makes it sound like the team will make each table have a similar/the same layout when that likely isn't possible. Maybe show a DB that has a few redundant fields and how you will fix that specific one, and then show the wiki page its connected to, and how you have to update that page?
problem There is no mention of the tests they may need to modify.
problem The proposed changes could be more thorough in how they are described and how they describe what needs to be done to make the changes.
problem The updates should make the database more clear and concise but there could be more work done in identifying what needs to be removed/modified and how to test to make sure it doesn't break anything.
problem There were no visual aids but there isn't much to show for this.Â They could add diagrams showing how tables are connected.
problem They have covered the requirement of the problem description. It would be better if they explain the functionalities in detail.
problem They did not use diagrams and it would be much better if they did.
problem The team should definitely put some more effort into expanding the documentation.Â As mentioned above, there isn't really any need for formal documentation such as UMLs or Wireframes, but the team should definitely focus on creating a plan of action moving forward.Â The team did do a good job finding all of the tables that could need editing, but I would suggest reducing these documented tables down to just those that will be worked on in the project.Â Other then that, keep up the good work.
problem The author does not appear to have proposed any changes out side of reiterating the project description.Â Â Â Since this project is mainly focused on cleaning up the DB, I do not feel as though there is really any need for formal documentation such as wireframes or UML documents to be made.Â That being said, it is important that the team lay out a plan of action so that both reviewers and other team members alike have a good idea what is going on.
problem While the team reiterates the project description given in the google doc, they do not appear to have worked through any design decisions as of yet.Â What they have done is go though all of the database tables and given links to them in the expertiza documentation.Â While this is nice to have, it might be more helpful if just one table is linked with maybe a list of the tables that need to be changed.Â The project does not require that all the tables be updated and changed, just the ones that are not set up properly.
problem There are currently no UML diagrams, mockups, or screens and tables.Â That being said, this is not something that this team necessarily needs given their specific project is focused more on reworking the database.Â A suggestion for a diagram the team might add though could describe which portions of the database need to be reworked.Â Visual guides and diagrams really help reviewers and team members alike understand visually what is being worked on.Â Because of this, I would highly suggest sketching out a visual overview of the portion of expertiza that you and your team will be working on.Â Other then that, keep up the good work.
problem The design doc felt a bit incomplete to me. Although the problem statement was explained in detail, the document does not say what was wrong with the previous version of the project and why an improvement was needed. Regarding the design, a single mockup was provided which gave me an idea about what the team is planning, however it would have been better to provide UML diagrams and names of files that are to be modified/added. Also, a tentative test plan could have been included.
problem The problem statement defines three sub-problems for the project, that is, improve the color scheme, compile review data together and visualize class performance for certain rubric criteria. However, the design does not address any of this and the lone mockup which was provided addresses one part of the first requirement. There is no other information related to the design, such as UML diagrams, files to be added or modified. I am giving 2 points because more design related information can be added.
problem Only the problem statement was clearly explained. The design is not explained adequately. The information was too vague and I am not sure how the team is going to implement the project as the design is not presented clearly. I felt it would have been easier to understand had there been more mockups, UML diagrams and list of files to be modified or added.
problem 1) Methods to be added/modified was not mentioned 2) Not much detail was provided in the design, so I could not identify potential code smells. 3) From the single mockup provided, I think the designs are not too complicated and they have also mentioned that they will be using the Highcharts library of Javascript. 4) Since graphs and other charts have to be loaded everytime an instructor wishes to do so, I think the response time may increase. 5) I feel there is definitely more scope for design improvements as everything mentioned so far is vague and not specific enough. For the above reasons, I am giving 2 points.
problem Only a single mockup was provided which showed how anÂ instructor can choose which data members to show and the type of graphic visual they would like to produce. This mockup certainly helped me understand the first requirement of the project. However, there were no visual aids for the other requirements and I suggest including them as it would greatly help an outsider to understand the project.
problem The document starts with an introduction about the team members, followed by problem statement and preliminary design. The problem statement is neat and gives a brief explanation about what the team is working on. Link to the previous work has been given that helps to understand from where the work is going to be started and how the work is going to be done. Preliminary design shows a mock up screen with basic design. Test plan is missing in the document and there is no implementation plan or use case diagram. Try to add the above mentioned items to have the document complete. Project repo link and the link to pull request are given.
problem One of the changes proposed by the team is to change the colorÂ scale from blue to green, to red to green that allows theÂ instructor to identify the necessary data. The team has included that in the design document with a mock up to allow the reader to understand it to the best. The integration of review performance is explained clearly in the document with the parameters such as number of reviews, length of reviews etc. One last requirement is to highlight the class performance with a visualization table based on the rubric criteria set by the instructor. As the design document says the table has to be presorted and allow the user to sort it alphabetically too, but the design document hasn't mentioned that.
problem The author has clearly explained about the problem statement and the high level solution such as using HighChart javascript to integrate the review data and the author data, and the team is still figuring out to find out a way to sort the data.Â Crisp explanations are given for each of the problem statement. I didn't find anything hard in following it. My suggestion would be try to check out Ext-JS(Javascript) library to sort the table. It provides and extensive way of sorting by clicking the column names.
problem The author hasn't made any changes to the code, so i couldn't comment whether he/she is adding to a wrong class or not and same is the case whether the new design could make the code smelly.Â As the author has mentioned about using highchart javascript, it is one of the best libraries available around to do data visualization. Highchart javascript library maintains the response time of the system and it is really efficient.Â For sorting purpose, the author hasn't figured out any solution, so he/she can check out this gem "sortable-table" to do the sorting. This would my sugesstion.
problem The author has provided one basic mockup screen to understand about the visualization. Though the screen looks fine in terms of appearance, it lacks the information that is expected by the user. There should be more details explained in the writeup interm of the mockups. The author could have given a UML diagram that helps to understand the functionality more. Try to refer the good writeup posted by our professor to figure out how UML diagram has to be.
problem The team seems to have a decent idea of the purpose of the project, what they are supposed to do, how they plan to do it, visualization of how it would roughly look like. Currently they have the testing plan section empty. As this is more of an add-on project, I believe they would be doing same tests as previously and additional tests for the new functionalities. I feel that they have a pretty good understand of the details in the picture they have created. I would try to point out each part of the picture and put text alongside it to help others understand. However, they have written it down below, this could be another alternate better visualization for helping reviewers understand.
problem They have done a really great job trying to explain it to users. They have tried to help reviewers understand their work by adding the picture. They have also added description below it which implies they have the exact understanding of what needs to happen. However, I would better like it if they could add more details to the diagram instead of "Data" buttons, adding more texts like "Round x"..etc. That would add some more clarity.
problem The design appears to be sound. I don't think we should be expecting to see what new methods would make the code more smelly. As this is the initial stage of the design document, this would be something to evaluate in the later stages post implementation. However, they have done a great job at describing the purpose of their project and how they plan to accomplish it. They have even looked into what resources they plan to use for changing the color scheme. I would just recommend making the figure more detail oriented than it is as of now.
problem Test plan section is empty, and there is no explanation of how the mockup fulfills the requirements, or how the intended functionality will be implemented.
problem There is very little information describing the intended design except for a single image. Therefore, although it appears they have considered many aspects of the project, the design document does not communicate how the proposed design incorporates required funcaionality,
problem There is almost no explanation for the intended changes, aside from a mockup image.
problem From the one mockup image, it appears the design will be clean, easy to understand, and fulfill at least some of the intended functionality. However, very little detail is given.
problem The diagram is helpful and clean, however it is not explained, and it is difficult to determine where it fits in with their design.
problem The team explained what their plan is, the purpose of the project, added a mockup for visualization. The test plan is not implemented yet.
problem According to the description for their topic, they have includedÂ all details. However, as the main document for the final project states: "Your design document does not have to (and should not!) explain what Ruby on Rails is, or what Expertiza is, or what Mozilla/Servo is." So, maybe you should delete the Expertiza description.
problem The team followed the description for what they are to implement. They have added a good mock-up. I wish they have added the current issues screenshots. I'm sure once they will add more detailed screenshots once they're done with the project.
problem Testing plan is missing. (Only heading is given). Project purpose is clearly stated in the problem statement. Project design is given. A mock-up screenshot is also provided which makes it very easy to understand the expected end result.
problem 3 goals are stated for the project in the problem statement. A general description is given in the design. It would have been good if each of these goals and the changes relating to them are described again in the design.
problem One mock-up of screen is added. Visual aids for tables or UML diagrams is not present. 1)Â some diagrams are unnecessary and do not help reader understand this project - No. The mockup is necessary and helps me understand the project very well. 2)Â some UML diagrams do not follow the conventions - There are no UML diagrams. 3) some diagrams are too high-level design and do not provide enough details - Details are explained below the mock-up diagram so there is no issue here.
problem There could be more elaboration on how the review data will be shown more clearly. The preliminary design for the visualization is pretty easy to understand and is clean. Also there isn't a design proposed for seeing the class metrics The authors haven't given a test plan but I am sure they will have one in the final submission
problem There isn't a proposal for "class performance"
problem Considering this is just a crude version, the wiki page is well written. Although not all things have been added, I am able to get an idea of what the team is planning to implement. There is an empty test plan section. As the functionalities that the team is expected to implement, they have a lot of freedom to try and implement different ideas. I would have loved if the authors had been a little more descriptive of the things that they are trying to implement.
problem As the project is still in a nascent phase, I don't think the authors will have an exact picture of what the final product will look like. That said, the doc is descriptive enough of the functionalities the team would try to incorporate.
problem There aren't any UML diagrams. The screen mock up they have provided seems good enough. They have also explained how they plan to make these changes. As of now, the visual aids they have provided seem to do the job.
problem The team has provided the project purpose and the design plan. The testing plan hasn't been provided at all.
problem The exact changes which are required in the files isn't provided at all. The authors should add more information about the code changes.
problem The diagram provides a good reflection of the idea behind the project. More diagrams such as flow chart of the logic etc should have been provided.
problem EveryÂ section is included except for the testing plan. All other sections are well documented and easy to read. Great work on this. The lack of test plan is fairly understandable at this point so I did not feel that it should lose a significant number of points. On the lower end, however, there is no UML, but a wireframe is present at least. I think if a UML were added and update the test plan this would merit full points for this section.
problem I like the use of the problem statement to list out all the items you need to address. However, while you do address these I think you need to add a section telling how you will fix these issues with your own functionality. I think you do this in part, and I if you keep on this same line of thinking when discussing the implementation you will earn full points.
problem I think the wireframe and explanations that are provided are great and are presented well. However, I think it would be great to have a bulletedÂ list where you address each problem directly with your solution. Use the same numbering as you did in the problem statement section. This will certainly improve the document and make it incredibly clear and easy to follow.
problem The wireframe provided appears simple enough and looks like it solves the issue of the confusing visualizations that are discussed in the problem statement. Since only a wireframe is provided it is difficult to tell whether you would be adding methods to the wrong class. I think, however, that with more effort and with the creation of a UML diagram I could give more useful feedback about your design.
problem Again I think the wireframe provided is great, but you need to add UMLs to show what code you are planning to modify.
problem The wiki is well written. some sections are still missing, but i get the idea what the project wants to establish. More information would be better i believe as it makes it more understandable
problem They have only used 1 image to explain what they want to do. Although the given image can be used to get all the information about the project, more images can be added to make it more informative.
problem The authors have given a good introduction to the project in their description. They have added a "Problem Statement" section and a "Preliminary Design" section for the same. But the team needs to expand these sections as well as add more relevant sections to their documentation. They need to add "Proposed Implementation" and need to fill in details in the "Test Plan" section.
problem The design incorporates the features, but only at a very high level. The team needs to describe the functionality (existing and expected/proposed) in a point-wise manner. Right now, theÂ design description is brief and does not incorporate all the featured requested in the project document.
problem The authors have not proposed detailed changes that they want to make in the application. They have mentioned that they want to use "highcharts javascript library"Â and also a few high level descriptions of the features. But they do not mention specific files (.rb, .html etc) they want to modify, or views they want to build.
problem The authors propose a cleaner, concise UI. But they need to incorporate more details about the rest of their implementation. Specifically, they need to add point-wise details for all their functionality. They need to mention the various modules of their project and their relationships. At the moment, they only describe the View part of the MVC.
problem The authors have have a good visualization of what they want to implement. But their work needs to be more details. At the moment it only gives a high-level description of the requirements and does not give minute details. They need to add diagrams for each of the features they intend to implement. Also, they need to add application flow diagrams if they intend to change the current flow of application or a add new flow.
problem The visual aids are used very well. Not only did the team use visual aids illustrate the problems in the exisiting system, but they also used them to illustrate their prorposed changes in detail. As opposed to a paper or whiteboard mockup, the team put in the time to alter screenshots and create digital visuals to accurately depict their changes. The only issue is as mentioned before; one of the proposed changes (Updating Review Summary view) does not have a visual aid, even though the change affects the view.
problem In general the document is really good and complete . I appreciate the teams effort in analyzing the requirement . Test plan was also written , Few things i think could be in cooperated areÂ 1. i was not clear on how the visualization would be incooperated into the table view , more details will be pretty helpfulÂ 2. A little more information on testing like , it is to the unit test files or would it be a ui test etc could help a lot
problem Report did not talk about any changes from the code point of view so it is not possible to review it
problem diagrams are added for the UI point of view and are seen to be good . No UML diagram were shown in the report on what calls are going to be made to accommodate the required changes
problem Currently there is nothing about the coding aspect of changing these pages and what the plan is to pretty them up.Â Since this is just changing existing code on Expertiza, there are no designs for new classes that needs to be reviewed for this project.
problem Proposed code changes are not given in the proposed design section; please add these.Â Add a screenshot to the proposed design for issue 2; these are a good visual add in seeing what will be changed.
problem They have not included any coding strategies so cannot comment anything about the code but they have explained their problem really well and offered a detailed solution.
problem They have included screenshots of the current views. They could have included a UML diagram or a flowchart to explain the design so as to have an overall view of the design.
problem The document appears complete, its good to see the test plan and references, I would also include the pull request, It be beneficial to see what files would be affected and what changes would be there for each file. The images does give a idea of where the changes would be in each view, but adding controller and view names/location in the changes would have been better. There is a gradual list of what the changes would be which is a good thing. The images are a tab bit big.
problem From what I can see, the design seems to have taken into account all of the required functionalities. The document had an explanation on how each functionality was going to be implemented and also provided the corresponding mockups. I am reducing a point because names of the files to be modified were not mentioned and only the functionality was explained.
problem 1) Methods to be added/modified was not mentioned 2) No details of file changes were mentioned, so I am not sure about potential code smells.
problem Some of the functionality to be added isn't included in the document. The third problem has a lot of little aspects which are to be followed. For example the "more" button to display the whole comment hasn't been included. Same goes for the "graying" of certain reviews.
problem More in-depth information should have been provided. The classes or files to be modified for the respective changes would have been a good idea to justify the proposed changes.
problem No information has been provided regarding the code to be modified or added. Hence cannot comment.
problem The introduction in wiki isn't completed very well. Only a small part is used to introduce this project. When I read it for the first time, very difficult to understand. It only introduces whatÂ to do but not why to do that.
problem It's a Mozilla project, so most of this is just provided by Mozilla, and there's not a whole lot that could really be added. Â A little bit of background on what Servo is would be appreciated, though, since most of the students in the class have never interacted with Servo ever.
problem The design document does a good job of covering the requirements, the work that was completed during the OSS project and the work still left to do. It was concise and made good use of external references to keep it that way. However, one portion that is missing is the testing plan. How does your team ensure that the models they create are functioning as expected?
problem The document is quite well written. The purpose of the project, the proposed actions, and the testing plan are all apparent from reading the doc. There is, however, a general lack of visual aids, so it hard to see what the current state of the project is. Another suggestion would be to outline a more detailed and thorough testing plan, and also putting in a seperate section by adding a eading.
problem The design document is almost appropriate. I see that the project is continued from the previous OSS project. I feel the authors can add sections to explain what they plan to do ahead with the project with more information. There is no testing plan present in the wiki, authors can add this section for review 2.
problem All was well with the design doc. The purpose was laid out well. Although the specifics of the project design were left out, the big picture was communicated to me. There was no test plan in the document. However, the description of their project seemed to have included a way to test the difference between Servo and Firefox.
problem They have the general structure. It would be better if they can include more background information. And they can reserve one extra paragraph for their team members.
problem The design document clearly mentions the purpose of the project. They also mention the proposed next step. But theÂ authors need to add more sections in the design document: 1. "Test Plan" is not mentioned anywhere in the document. 2. Also, the authors need to add a "Proposed Design" section. The "Work To be done" section can list more specific details such as models/controllers to be changed (or related code changes).
problem The team has done a really good job describing their previous work, as well as what they plan on completing in this up and coming iteration of their Mozilla project.Â They have done a good job breaking it down into steps and describing each step in detail.Â One thing I think should be added though, is a UML and Wireframe.Â Both of these can be super helpful when trying to get a team on the same page design wise.Â My favorite website for working with wireframes is balsamiq.Â A free trial can be activated on sign up here https://balsamiq.cloud/.Â When it comes to creating UML diagrams, my favorite free program is draw.io which can be found hereÂ https://www.draw.io/.
problem There is no testing plan present. The design doc can be more informative and have more images for the reviewers to better understand the approach the authors would like to take.
problem The explanantions provided are very clear and understandable. The specific actions that team will take for each of these changes are explicitly outlined and the scope of their changes is very apparent. I would suggest that the team be more specific with regards to which files will be modified and, perhaps also use a few visual aids such as mockups to illustrate some of the visual portions of their proposed changes (e.g. how the differences between rendered web pages will be indicated).
problem The proposed changes, while clear in overall objective, were not very detailed. It is hard to gauge how many methods will be added and where. In addition, I would suggest that the team add a files modified section to their doc, as it appears that they are adding a lot of new functionalities. Based on the scope of the project, it is apparent that the code could end up a bit more "smelly" by the end, so the team should make sure to explain in the doc how they will implement these features while avoiding this.
problem There are no visual aids in this doc, and I think there should be at least one. Based on the scope of the project, it is apparent that a lot of classes are interfacing here, and new classes will have to be made. A UML diagram would be very useful provided that they are accurate. In addition, a visual aid that shows how web page rendering comparision process will be done will also need to be added, as it is an important and visual component of the project's objectives.
problem Overall very well done, especially in the future work section. One area I can see room for improvement in is the previous work section, parts 3 through 5 could have some small explanations added to them.
problem It doesn't introduce how to do it in detail. e.g. What isÂ geckodriver? How to compare the difference between 2 pages? What code do you need to implement?
problem The wiki doesn't have many visual aids maybe because hard to explain in a visual way.Â I think can put some pictures of every steps in what to be done section.
problem The document does not clearly mention about the proposed design. It mentions "what" tasks need to be completed in the "work to be done" section but does not mention "how" to do them". A proposed design section lists screenshots and descriptions of how the application will look or work after the changes are made. The "work to be done" section lists the specific changes that need to be done to achieve the proposed design.
problem The authors have clearly explainedÂ the tasks related to the project. Some of the sections needs more explanation. Such as section 3 in "Work to be done" states "-Generating elements trees of arbitrary depth". The authors could explain these bits in more detail.
problem TheÂ authors do not mention about the proposed design. It mentions "what" tasks need to be completed in the "work to be done" section but does not mention "how" to do them". A proposed design section lists screenshots and descriptions of how the application will look or work after the changes are made.
problem The authors have only provided one screenshot of a generated HTML. They need to provide more diagrams which will describe aspects of their application such as: 1. Modules of the project and their relationships.Â 2. Flow of the application. 3. Testing Life cycle specific to the application (if different from 2).
problem Yes, from the mozilla project page I can see most of the work is present in the wiki. The authors have tried to incorporate all the functionalities from the git readme but since old code is not present it is hard to understand the work done.
problem The code is not present of the existing work done. So it is hard to evaluate whether the code will become smelly. Although from the design doc it is hard to say whether the work can be done using existing packages, but if there are the authors should use those.
problem There are images of only old work done. The authors havent used any visual narrative for the wiki page. The authors should add more images and make the wiki more informative.
problem The authors have tried to incorporate all the functionalities as they have mentioned it in their wiki. However, since there is no code present, it is hard to evaluate whether they have implemented all the given functionalities.
problem The explanation is easy to follow just by reading the code. However, I think more information can be present in wiki and the authors can include images to make it more informative.
problem There are no visual aids present in the wiki. The authors should add some for the reviewers to better understand the project.
problem The design document incorporates all the functionality required. However, this functionality was only described in words. A kind of pictorial representation or a flowchart of the code that will be written would have been useful to the doc.
problem The explanations were a little hard to follow at times. However, most of the time, I understood the changes that would need to be made to the first part of the project. Adding a link to new topics so that a reader can have the chance to learn more if they are confused will be beneficial to this document.
problem Step by step explanation of the instructions were given in this document. However, the discussion about design could have used more explanation. Rather than restating what the instructions stated, this design doc will benefit from adding specific details about how they will implement everything.
problem No diagrams were included in this design doc.
problem It absolutely incorporates all of the functionality required because it's mostly just saying what Mozilla said again. You couldn't possibly add anything to this that would be productive, since then it would fail to meet what Mozilla asked for.
problem They have provided the external link to introduce the required functionality, but it would better if they include some materials on their own page.
problem They have convered the requirement but there is no plan.
problem Too early to check that because there is no plan.
problem They just use a screenshot but the picture is too small.
problem The design does incorporate all of the required functionality given in theÂ google doc.Â The required functionality seems to be fully understood by the team as shown by their step by step approach to tackling each of the functional requirements.
problem The changes the author has proposed seem solid!Â They have laid out a great plan of work and have included the files that they plan on changing and what they plan on doing in each of those files.Â This makes it easy for reviewers to understand the teams thought process and keeps everyone on the same page.Â Keep up the good work.
problem The design proposed by the team is good.Â Their step by step course of action sufficiently describes how they intend to approach the project.Â One thing I would definitely suggest adding to their design document though is a UML diagram and a Wireframe as explained above.
problem The team has not as of yet included many diagrams or visual aids.Â I would highly suggest adding a UML and Wireframe as described earlier.Â The team did add a sample screen shot that complements one of their required functionalities though.Â This definitely helped me as a reviewer to understand the scope of the problem.Â I would love to see more examples like this attached to other functional requirements.Â Other then that great job!
problem It does indeed do that. A bit of a shame, since this project is going to make Expertiza even harder to use and understand from a student perspective, but that's not the fault of the team.
problem The design doc has incorporated all the functionality required, except that they did not write the set up steps.
problem Yes. Form Proposed Implementation, I can tell they really understood the requirements and figured out how to implement in steps. But I think they may miss something: one of E1818 requirements is that the system can present the correct teammate evaluation rubric based on role(duty) of the team member, but in their wiki I can not find related implementation plans or proposed implementations.
problem This team has proposed a good plan of action for solving the problems given to them. The HTML and CSS implementation for altering the tables and cleaning up the whitespaces has been explained in great detail by this team. However , regarding the other implementation planned, the team has not included any explanation of how they will bring about the said changes or what files they did to edit to make the said changes. they ha
problem The authors have not mentioned about the code changes in the proposed implementation. They need to mention the code changesÂ required and the entities that they wish to add or reuse. Again, this needs to be mentioned in a "proposed implementation" section.
problem The changes proposed are mostly to be implemented on the View side and hence I don't think there is anything too complicated or something that could increase the response time of the system. The team has mostly figured out as to where the changes need to be made. However, it would be helpful for the reviewer to know where they intend to make these changes.
problem The diagrams provided by the author gives the reader an idea about how the pages look currently and allows the reader see what the proposed changes will do to these pages when incorporated. So, the authors have done a good job for this part.
problem The team has given number of screenshots to help in understanding the project/problem statement. All of the mockups are necessary and they aid in the changes the team has proposed.Â There is no specific UML diagram given, according to their course of implementation i believe that is not necessary and mandatory in understanding the functions.
problem This team has included a couple of screenshot images to aid the understanding of their ideas. They have done a good job. The diagrams included in the wiki makes it clear what problems persist in the views of response report and summary report and it also assists the reviewers in visualizing the changes that the team has proposed. However, the diagrams included only consists of the images of the existing views. It would have been better if the team would have added visual representation of their implementation in some form, maybe even a hand drawn view with the proposed changes would have also sufficed.Â The doc does not contain any UML, but given the facts that the changes this team intends to make are only in the views, so I believe a UML is not required as such to show the implementation. Thus, for your next submission , make sure you include diagrams of how the views would look after the proposed changes have been implementation . This would make your goals absolutely clear to the r
problem Visual aids were helpful in describing what the issues were. Could be helpful in some of the cases to see a representation of what the finished product could look like.Â The css changes could be quickly mocked up by editing the css directly in the rendered webpage.
problem They have provided adequate visual aids. There is no apparent need for a UML diagram. They have provided a whole lot of screen shots to help make things easier. I would have loved if the authors had added some screen mock ups to help make things more clear.
problem The authors have done a great job adding all the required screenshots in the documentation. An improvement on this would be to add more application flow diagrams to explain the various scenarios.
problem There are no UML diagrams but they have explained it with the use of mockups pretty well and hence I don't feel the need for further details regarding the flow they would take. The images convey what the current system is like. Would be nice to have a few visuals on how it would look after changes being made, but well done.
problem Under proposed implementation, I don't think they need to explain each step they are going to use for the problem, instead, they should focus on describing their ideas, which would be enough.
problem I have very little idea what they're actually going to change or how they're gonna change it. It's nice to know what the files they'll add and change are, but most of what they're saying is that they'll add a bunch of buttons and checkboxes that let stuff happen, but they don't say how any of that is gonna get done, just "we will have to add a Boolean field" or that they'll render a "java script partial."
problem The explanations were well written. I had only a small confusion in the Implementation Doubts section. Are the authors others about their doubts or the doubts they faced while implementing?
problem This falls under the same category as #1, so I didn't double dip and dock a point here. But again, great job overall, just expand a bit on the implementation stages, the goals each one accomplishes, maybe more on how you will perform each one, etc.
problem Design does incorporate the issues that are to be addressed but the explanations could have provided for the user to completely understand the project.
problem The author has suggested the change and how they are planning to do it but it has not been explained properly as I got confused with the second line in Tone Analysis Paragraph. Also the link provided is not working. So it is somewhat hard to follow what and why that particular solution is provided.
problem 1) They have mentioned the files in which the changes are to be made, but they haven't mentioned the methods that they are planning to add .Â 2) How is the code modified is not mentioned, so it would be hard to comment whether the code would become "smelly" or not 3) It doesn't seem that there exists any gem for simp-lying the aim for their project and the files they target to modify seem correct . 4) The new design doesn't change anything in how the data is to be fetched so it won't affect the response time in any way. 5) More effort could have been given in explaining the images are shared as that could have been easy for the user to understand the solution for the project issue.
problem 1) The visuals aids have been provided but have not been explained so it is hard to follow what exactly are those images. The quality of the images could have been improved by designing the diagrams online rather than drawing it with pen and paper.Â 2) The images confuse me more about what their aim is for the project. 3) UML Diagrams have not been included. 4) They tried to give the diagrams for the results they aim to see after the completion of the project but do not give an idea of how are they going to achieve it from code.
problem The functionality is covered in the proposed implementation section, but this section is too verbose. This may be rectified by adding mockups as stated before.
problem They wrote the potential changes in Propose Implementation which is quite easy to understand and followed the requirements. But it's just too short, details of implementations are not discussed and it's almost a copy of the requirements, so I'd recommend apart from Propose ImplementationÂ they may write Implementation Plan which discusses each proposed change in detail and includes newly-added files, classes, methods, variables and their functionalities.
problem One change I would suggest in the proposed implementation is adding the files which would be affected by the change proposed or in the file modification adding what this change is for. The proposed changes no where mention when the instructor will add questions related to each role. Â overall the proposed implementation gives a good idea whatÂ one might need to do to accommodate this change .
problem These changes are difficult to visualize.Â Adding one or two mockups with arrows with the bullet points pointing to the relevant section of the mockup would be helpful.Â For example, the bullet item "When a student goes to â€œYour teamâ€, he should be able to select a duty from a drop down menu." may be better shown with a screenshot of the "Your team" page with the added drop-down and an explanation of its function.
problem It's hard for me to guess what method will be added into which class since they explain the whole things together without subdivided them into subsections.
problem They're mostly making their own classes, so that isn't relevant. I think this code might be adding a lot of confusing relationships and putting in methods places they might not belong. They don't really look complicated, they just look empty. Probably not. Yeah, the design looks like it's in the pre-preplanning phases. For example: Why do Questions have a Questionnaire? Why don't Questionnaires have any Questions? Why does the proposed implementation talk so much about keys to tables, I thought this was supposed to be done with objects? It's just all very confusing and I'm not sure it's nailed down yet.
problem The design document could have explained some sections a bit more like what test cases they plan to write for the test cases
problem Looking mainly at the UML diagram for this question, the design puts the methods in the appropriate classes, and creates a table with the necessary fields. The only potential chance I see for code smells would be a DRY problem, with duty methods potentially being implemented for students and instructors. But the current design avoids that issue.
problem Their goal is to add a new function to expertiza like a role-based reviewing so that students can select their role(duty) of an assignment and will be reviewed through a role-based evaluation rubric. According to their wiki, all their proposed changes are reasonable and necessary to achieve their goal, so it's hard to tell if their design and code are problematic. But I noticed a minor problem: In "Files that have to be modified", you may miss "view/" for the last three directories because I just can't find such directories.
problem There is no mention of methods which will be affected only class has been mentioned. From what I can say there would be a need to add controller, model and view of duties, in the duties table should there be a reference to rubric associated with the duty, also the primary key would be based on the name of duty and instructor id, it would have been better if they mentioned this in the files to be added
problem The "Files that have to be modified" section could be made better by going into more detail with regards to what the proposed modifications are.
problem The design is well explained. They have not stated any coding strategies they are going to follow hence cannot comment if the solution might make the code smelly.
problem The team has done a good job with the UML diagram that have provided. Only suggestion that I could give is to provide a small explanation for the UML diagram so that it is bit easier to understand.
problem The UML class diagram is necessary and could be useful if changed, but it doesn't look like it is correctly constructed, unless I'm really confused. It appears that Question has a single Questionnaire, but Questionnaires don't have any Questions, which doesn't sound like that makes sense. It also appears that User just has a random line attached to Duty, which isn't a thing in UML class diagrams. I can definitely see this diagram being incredibly handy for understanding the design if fixed and improved, but, as it stands, it's just confusing. It does seem like the design isn't figured out yet, though, and the diagram just reflects what the current understanding is.
problem The UML diagram looked very informative. But apart from that I could not find other screenshots . They could have provided some more diagrams that could have explained the design doc better.
problem They have made an awesome UML diagram to illustrate the relationship between the newly-added Duty model with other relevant models. It's intuitive and very helpful for readers to understand what they are going to implement the "Duty" functionality. But as a reader, I got confused over the following things in the diagram and you may consider fixing these: 1.Is the variable dutyId necessary in Duty? because I think rails canÂ auto generate ID for any created model itself. 2.It's not clear what "<<users>>" on those doted lines mean.
problem The UML diagram is appropriate and helps a lot in making understanding things easier. The team could have added a screen mock up but that can be overlooked considering the amount of detailing in the document.
problem The design doc contains a UML diagram to explain the functionality. But I suggest they add a small explanation of the diagram in order to make it more easy to follow.
problem There was a single UML diagram which was a class diagram that was very detailed and also showed the relationships between the classes. But I felt that at this stage, a usecase diagram and an activity diagram would have been better choices to help explain the problem clearly. There was also no mockups, hence I am deducting 2 points.
problem The requirement mentioned creating a new popup view and creating a new method inÂ popup_controller.rb. These were not included in the design.
problem They included the layout of their two proposed views. But without before changes views, it is hard to understand what is the proposed changes.
problem The diagrams are helpful. But if they could do it digitally, it would be better.
problem They seem to have covered most parts (Purpose of the project and background information, what they plan to do, how will they do it, files associated with the changes). However I could not find the testing plan in the document. They have done a really good job at drawing the images of how it would look like later. There are some thing I would recommend, the background info does try to explain but it seems a little hard to visualize what you are trying to say there. Adding more visuals would help reviewers better understand your work. One more thing I found was, in the second image under reviewee, it is not clear to me how "team 1" and "student 1,2,3" are different? A bit more clarification and it would have been just perfect.
problem The question has wrong links I suppose (Spring 2017). I had to go to the course page to see the requirements.Â The team seems to have a pretty good idea of the purpose of the project and how they will do it. Although I found link 2 not to be directing where it should (This was different than in the google doc where all the projects are listed). You might want to fix that.
problem They have done a good job at trying to explain the process of what is needed, what they plan to do where and how they plan on doing it. They have also done a really great work at picturing the final outcome, how it would look once implemented. However, as I suggested earlier, I would try to add more words/visuals to help reviewers understand the "background info" section. I personally felt it was a little hard to follow. Apart from that, you might want to fix the link 2 in wiki page.
problem The diagrams have the details which help users understand how they should expect the output to look like. However, I would still suggest to add more visuals in the background info section. It seems that the team has a clear understanding of what they have written but I personally feel they could do a better job at conveying what they have in mind. Apart from that, great job!
problem Yes in the implementation plan the team has covered few functionalities and missed few. Mainly they have to implement UI changes such as creating tabs for each of the review rounds. They also have to complete the tone analysis as well and they have worked to add those functions. I could see in the expertiza document that title chart visualization has to be done, and no where in the design document they have mentioned that. Change to the controller, popup_controller.rb is not mentioned anywhere in the document. Please try to add these changes.
problem The team has provided information on only few of the functionalities that has been mentioned in the expertiza design document. They haven't given any written explanation on the design they are following. It is really hard to follow what the team is trying to implement. Please explain more on the changes/design.
problem The team is looking to make changes in the "view_review_scores_popup.html.erb" for the tone analysis and "_answer_tagging_report.html.erb" files. The team has to make sure they won't affect the existing files and not add more lines of code which prevents the code from being "smelly". I see the changes are made to the view files, so there are no any existing gems to be used. The response time has to be maintained properly so that it doesn't affect the performance of the system.Â As there are changes in pop_controller.rb the team could have explained any particular design they are following to modify them.
problem The author did provide a basic intuttion about what was to be done, but having more about different steps to be impletementd and how would that be done will be very helpful to have
problem The design from diagrams looks great ! but if the authors could talk more about the requirements likeÂ about files to be edited , more details on the implementation plan , it will be good to understand from a readers posint of view
problem Diagrams for one of the primary views was really nicely drawn and displayed , I liked it . If the team could add uml diagrams which talk about the interations / steps involved in making the changes , it will be really good
problem Yes all the required features in the problem statement are covered by the authors. However, the problem statement includes charts to be added in the views. The team has not given any project design or implementation details about how they are planning on achieving this feature. They have just provided two pictures of the potential results of how the charts would look. While , it is possible to understand the ideas of the teams, it is quite difficult just from the diagram.Â I would suggest to include a detailed plan of action about their implementation. They have included a list of files to be modified which is great. It would have been better to explain in a few lines , the changes that they plan on making.
problem The explanations provided by this team are very short. They do explain the ideas but not many detailed have been divulged. The files to be modified have been provided which is good. However, what changes the authors intend to make have not been provided and explained. Only diagrammatic representation of the result has been given. This alone is not enough for the reviewers to gauge the performance of this team.Â For the next submission , i suggest to explain the proposed design and the problem statement in detail. Include a flowchart or a UML diagram to explain the functionality and the data flow. Also thoroughly test the code. Include a test plan with an exhaustive set of scenarios.Â This would enable the reviewers to better understand the work of this team and thus analyze their performance and make it easier for the readers o understand. Also i would suggest to add a brief explanation of the two result images provided and clearly indicate the part that has been a
problem The authors have not provided a detailed implementation plan and thus it is difficult to answer this question. The method proposed by the author seems sound and should not make the code smelly.Â In order to perform tone analysis , the authors are making use of aÂ web service which is great. Thus not a lot of code has to be added and the code should be reasonablly DRY.
problem Yes, some visual aid has been provided. This team has included a hand drawn diagram of theÂ potential page. This makes it clear to the reviewers what the team is looking to implement. However, i suggest that the authors should include a flowchart to explain their proposed implementation. This would make it easier for the reviewers to understand. Also , i suggest this team to include a UML and a use case diagram to explain the data flow and the different operation scenarios.
problem testing plan is not mentioned in the document. A plan to show how we can check the comment tone, or where do we add the comments and where can we see the tone of our comments that we added.
problem The design tells us most of the things that is required from the projectÂ they have also mentioned using aÂ diagram what the view should ultimately look like. A little more information regarding the project could have been provided in the project.
problem The changes mentioned are pretty straightforward, more information on how their plan to make those changes are should be provided in the document.
problem They should consider alternatives for the design and let us know why they decided to go with one over the other, that would be helpful for the reviewer to get a complete view of the direction the project is headed in.
problem They have provided a high level design on how the view is gonna look like. The diagrams have been repeated in the wiki page and the github link they have provided, just one would have been enough.
problem The purpose and design are mentioned in the document. However it does not cover the Testing plan.Also, there is a blank header for Team and no details have been mentioned under it. "Tone-Heading" is a sub-header of Files Modified. It should be put in a separate heading. Also, I feel that much of the explanation in the Tone-Analysis and Background Info section is taken directly from the Project Specification. Maybe the team can explain it in their own words.
problem The team has adequately explained the approach. The hyperlinks to Peer Logic for tone-analysis is useful. There is another hyperlink to API endpoint in the Tone Analysis section which is broken. In the Background info section, the lineÂ Â "In addition, tabs were added to separate each review round." is confusing. I am not sure if by tabs, the team means a separate column for each round of review or just tabs to improve the visualization.Â In the Files modified section, the popup_controller.rb file is not mentioned.A method has to be added to it. Also, the team plans to depict a tile-chart visualization,It would be easier to visualise it using an actual chart, the link to which is given in the doc containing t
problem So far,the design looks good and I cannot comment if the problems can arise,given the approach that the team has mentioned.I feel that the design can be explained in more detail.
problem The team has used pictures to explain the design. The pictures although useful, are not properly sized and are somewhat of a rough sketch. If tables had been used or if screenshots could be posted from the actual expertiza page,it would be much more visually attractive and easy to understand.
problem No some features are missing as the wiki needs to be more informative. The work they want to do is only showed using images and not any information. The wiki needs more work. I hope by round 2 they will have a better wiki.
problem They have not explained what they will do. They have just added the images and nothing else. The authors needs to update the code for us to understand what they want to do.
problem Hard to understand as no explanation is present. Code also not given to evaluate previous work. The authors needs to step up their game and work.
problem There are only images present in the wiki with the least amount of information. Although using images is a good task, however, they need to explain as the reviewer cannot understand the work just by seeing the images.
problem The wiki lacks a lot of information. The design doc is incomplete and hard to understand. Poor work by authors.
problem No explanations provided, just images of some structure that they will make. No info on how they plan to finish the work.
problem I have no idea how the authors plan to get this thing done. They have just added images. I cannot understand what they want to do. They need more work on the wiki.
problem No information to explain the diagrams which makes it hard for me to understand the structure of the project. Just adding images wont complete a wiki. I hope by round 2 authors do the necessary required changes.
problem Guys did an awesome job adding hand-drawn mock-ups to illustrate of what to expect at the end of their work. I wish the pictures that are added to the wiki page would have been nicely sized as on the GitHub. Also, it would be easier to follow the current problems if they have added the screenshots of the current state.
problem The designed document had very little explanations.Only the background info, tone analysis section and two diagrams were present.
problem The overall explanations were not sufficient. Too little was explainedÂ in the "Tone Analysis " section
problem The design document had the methods missing. The authors could have written down the methods that would be changed in the affected files.
problem The design document lacked sufficient diagrams except the couple of tone analysis diagrams.
problem Nope. They're adding the methods where they should be. I think they might be about to make code that interfaces with the tables directly instead of using objects to abstract it away. If that's true, then it'll make it real smelly. I'm not familiar enough with rails to make this call. I doubt that there are any gems that do this. I mean, it might. I don't see why it would, though. I think they have a good starting place, but I'm just concerned about that object v. table thing.
problem The authors did not provide the specific methods that would be touched upon during this project. The designed was well explained, but I felt they could have explained the flow chart a bit more and they could have explained the exact changes they would make in each of the files.
problem In the Proposed solution section, the team states "However, they will increase the benefit that each person gets because they can get feedback that is specific to their project." I am not sure how each person is benefited. The project document states that the grades don't have to be considered as the questions will be too easy. Is so, how will the project ensure the quality of questions, especially since they are not graded. Students might be tempted to skip these questions all together.
problem Yes , the design proposed by the team looks neat for most of the part and doesn't look smelly. It mostly involves changes in the migrations and the views and thus seems to be pretty DRY. It should be fast and should solve the mentioned problems. However, I have a few suggestions. Firstly I can the whole design and correlation would be neater if a separate table was created for the supplementary review questions and linked to the teams with a foreign key instead of just creating a column and populating it with the ID every time a questionnaire is created. Inside the subclass created they can have a no review method which can be checked every-time to check if supplementary questions are added. Also this team had stated that the supplementary review questions added are not be graded. But in the flowchart, it is said that the scores of these extra questions are appended to the review scores. But my question is if these extra questions are not graded, why score them at all and add their scores.?
problem The team mentioned the files to be modified. If possible addition of a little bit more finner details will be really helpful to answer this question
problem The team has mostly figured out as to where the changes need to be made. And the design for most part seems to be sound. However, like states earlier, I am not too sure of whether the design should be as stated. It takes a lot of effort for a reviewer to review a work and burdening him with additional work should come as optional and with a bonus to provide incentive.
problem The diagrams are super messy. There are both arrows that turn into other arrows at corners and lines that properly continue through the corner. There are places where multiple control flows combine into one and there's no combination diamond there, they just awkwardly kinda kiss These are flow diagrams that have blocks like "Instructor" and "Student (team_id)" and "Your Work" that are clearly not actions that are being taken. There's also no start node or end node in any of them (the little black circle in a white circle and the other little black circle that's on its own) There's also a decision block (is SRQ enabled?) that has one exit and no condition on said exit. They would definitely be useful if they were actually UML flow diagrams, I'm sure, but they're mostly just confusing. The first one is probably unnecessary, though. It just kinda looks like a list of buttons the user is pressing. The screenshots are nice, though. Love those.
problem The UML diagrams are helpful and they have explained it with the use of mockups pretty well and hence I don't feel the need for further details regarding the flow they would take. The images convey what the current system is like. They also have some images depicting how it would look after the changes. My only concern is with the UML diagram as stated earlier about SRQ grades which contradicts with what was stated earlier. Overall, well done.
problem A lot of visual aids are provided - 3 flowcharts & 3 screenshots. 1) some diagrams are unnecessary and do not help reader understand this project Not true. The flowcharts are very essential for understanding the flow of implementation and control. 2) some UML diagrams do not follow the conventions There are no UML diagrams in the document. 3) some diagrams are too high-level design and do not provide enough details Not true. Sufficient explanation is provided for each diagram.
problem Your flow charts helped me understand what exactly you are doing. I do think that there should be a screenshot of the review page and the review results page to stay consistent and to just illustrate where your changes will be implemented.
problem The team has provided a list of tables without actually explaining if there are some things that need to be regularized or are redundant. The doc is very crude as of now and there is nothing much a person can make out of it. I would have loved if the authors had added some explanation, without which reviewing becomes very difficult.
problem To be honest, I didn't get what the team is trying to propose because of inadequate explanation. If the team would have been a little bit more descriptive, it would have been easy to understand. The have listed some tables as deprecated, but without any explanation.
problem Apart from just listing some tables as deprecated, there is nothing more added. It's impossible to figure out from the wiki what the authors plan to change or add.
problem I don't think this applies to the team, as there are no aids that can be possibly added. That said, the authors could have added a more detailed explanation to compensate for lack of this particular aspect.
problem They have explained the changes, but it was not listed in a concise list, instead its spread entirely over the whole wiki.
problem I don't see where in the wiki which explains how you designed it, instead it explains different components of a badge and they work.
problem Clearly explains how this badge system works, but not sure how your going to implement it.
problem the author explains what changes need to be made on the system under the Subsequent steps heading. They explain well what a canvas is. It was good that the list of tasks were in bullet points, than in paragraphs. extract the innards of CanvasPaintThread into a CanvasData structure,
problem They want to extend badging functionality and mainly implement 4 new functionalities on badgingÂ They have fully explained how they will implement them in "Implementation" which is well-written and easy to follow. But they just gave a brief description of their implement plan. Readers like me mayÂ wonder some edge cases such as will awarded badges be removed if the related assignment is deleted and for "good teammate" badge what if 2 or more teammates assign this badge to a student instead of just one teammate,Â in this case will the student gets more than 1 badge if approved?
problem The design appears to be sound from a high-level standpoint; the location of code changes are discussed. The discussion of principles and patternsÂ needed to implement the code changes is not given. This means showing, for example, how the DRY principle is used, how existing code is leveraged, what pattern will be used/re-used to maintain the new "approval_status" column, etc.
problem They got wonderful diagrams to illustrate user case their expected views for each of their implementations. For the latter, the diagrams clearly describe what changes will be made to views after implementation and for the former, it shows the relationship between the database and users when performing kinds of functionalitiesÂ about badging. A minor problem is that the pictures are too large and can't perfectly fit the page and theÂ resolution is kind of low.
problem Yes. in "Test Plan" they made a good testing list, but it looks a little bit simple. I'd recommend to add related files or methods that would be tested to each description such as "Can saveÂ badge with a valid name, description and image."Â and I think this will give your "Test Plan" more detailed information and let readers follow easier. Also it's better to include test results when you finish all the tests.
problem I think almost all sections are there. The only one missing is the background information for expertiza itself. While I already know about expertiza I think it would be appropriate to include a background section saying what expertiza is and get more specific about how this project will benefit the Expertiza project. Â The other suggestion I would make is to either put references in the references section or have them referenced somewhere in the wiki. You currently have no references. You could add references to things like TDD, Expertiza, your own GitHubÂ repository, etc. to help flesh out the document.
problem The changes are explained well overall, but there are places where more explanation can be given.Â For example, after looking through the design document, I am not sure what the term "request" and "guests' request" means exactly in terms of this project.Â Is this an HTTP request?
problem yes, the authors have done an adequate job explaining the changes made to the system.Â The team's project is to write integration tests for the users_controller.rb file, and they have explained this in detail.Â The team has also done a good job explaining what they are going to tests, how they are going to test it, and what these tests will entail.Â Furthermore, the team has drawn up a diagram that helps describe the over all portion of the expertiza program that their integration tests will effect.Â This is really helpful as a reviewer, as it helps me to understand at a higher level what exactly they are testing.Â All in all great job!
problem Since this is a test suite I believe that the design revolves mostly around the test plan, which looks great. Everything is covered in very high detail.
problem The team's design appears to be sound and follows appropriate principles.Â Since the team is writing integration tests, it is not really necessary that they follow specific design patters. That being said, the team does appear to be following strong RSPEC design principles as they have gone through and picked out all the testable case they know need to be tested.Â For each of these test cases, they have written an RSPEC "describes" clause describing what the test will do.Â Because of this, it seems like they are on track.Â Great job!
problem Since this is a testing project, there is no real design. But the tests seem to be simple in what they will accomplish.
problem Yes, the design appears to be as simple as possible.Â Since the team is just writing integration tests, they shouldnt really be cutting corners and should be trying to test as much as possible and it is clear that the team is doing their best to hit every edge case.Â That being said, it is also important to not be redundant.Â The team appears to be keeping things as concise as possible, while hitting every case they can.Â Great job.
problem The test plan section could be improved by the use of visuals.Â For example, the text below could be better portrayed as a decision diagram. 11.1 "does the user belong to any institution? If yes, good. Otherwise, set a new institution." 11.2 "is the user already existed and valid? If both yes, good. If the user already exist, send notification. If the information is not valid, fail."
problem The team's diagram clearly lays out the system that is going to be tested.Â Â The team has clearly labeled the different components of the system under test, and the methods that are associated with these different components.Â The team has then described each method and what its effect is on the system as a whole.Â Great job!
problem Since this is a testing project, I do not expect team to show many pictures here. But they had a diagram to show how some functions interact with with each other.
problem The test plan and the functionality of the controller sections detail what is to be done well.Â It would be better if these sections were combined so that a reader does not have to scroll to get further context.Â For example, if a reader is looking at the create_requested_user_record(number 11) test, they can see how the test is run, but they have to scroll up to the functionality section to see what the method is supposed to do.
problem Yes, since the team's project is to write integration tests, they of course need a test plan.Â The team provides a solid test plan and has done a really good job explaining what each method they test will do.Â While they have done a pretty good job explaining what will be tested, it might help to add a short explanation for each test.Â This is something I mentioned as well in my initial review.Â For instance, under the "Create" method, one of the described tests states, "Is this the name new? If yes, good. Otherwise, register the user by email address".Â This is a bit confusing to me, as I don't fully understand what is going on.Â It seems to be saying if the name is new, then don't register a new user, but this seems contradictory to the idea of a "create" method.Â Because of this, it would be nice to have some added explanation attached to each tests.Â Other then that though, everything looks good.
problem Yes, a test plan is included in this document. The test plan is very descriptive and elaborative. It clearly states the different scenarios to be tested and a detailed description of the various tests performed for each scenario has been provided. The test cases are well thought of and are quite exhaustive covering the entire range of functionalities. However, the test cases included are mostly only for the views. I would suggest to include tests for the controller methods where a response is received from peer logic and the response is checked for correctness. Various scenarios of the json response received for different requests can be checked. I would suggest to add some controller tests which tested the different controller methods written for tone anlaysis.
problem They have included screenshots of the views before and after implementation. That is great as it is easy to understand the implementation but they they have not included any UML diagrams or any other design flowchart to describe the overall implementation.
problem While the changes to be made are well represented visually, the team has not mentioned how they are going to change the code. There is no mention of any design patterns that they intend to use.
problem The team has given only information on the changes that are made to the system and the files that are going to be modified. They haven't provided any information on the design pattern or design principles they have followed. Looks like they are changing the controllers part also, so they could have included the design pattern involved on that.
problem Changes very accurately described. Good use of pictures to explain. In your stepÂ 2 you spelled instructor wrong.
problem The team has mentioned the files to be edited and how the changes will look like after they are made. They have also given explanation behind the changes which is great. But they haven't mentioned what changes exactly are to be made to the files. It would have been better if they would have mentioned in brief about it.
problem Yes, they included the problem description which has clearly explained their goals. But it's kind of too short and just a copy of the requirements, so I'd recommend to write more thoughts about the project such as how to implement these changes in steps.
problem Their goal is to regularize expertiza DB schema, they will rectify expertiza databaseÂ such as reduce redundant record and modify confusing field names, etc. I figure their design is meaningful and will improve expertiza database schema if implemented. From their wiki, it's hard to know if they followed proper patterns or principles.
problem Yes. As they wrote in wiki it's very concise and easy to understand. But the problem is it's just too brief for readers to know details about their project. I'd recommend they could provide more information such as the involved files, the to-be-created files (since I saw their may write migrations) and the expected results.
problem There's no visulizationÂ shownÂ in their wiki and I think for their project maybe it's not necessary to include visulization.
problem There's noÂ test plan shownÂ in their wiki and I think for their project maybe it's not necessary toÂ do tests. But if they are going to change some field names, thenÂ some already existed tests may be influenced and in these cases they may consider either modifying existed tests or writing new tests.
problem The authors provide the general scope of their changes and the actions they plan on taking. However, it is not very clear what the authors are exactly going to do in the project. I would suggest the doc include a "Tables modified" section, so that is clear which tables they have modified/created/removed.
problem The task does not really involve much design, but the team's plan of action seems sound.
problem There is no visualization, and it can be argued that there need not be any for this project. However, I would recommend that on top of the instructions that team provided for navigating the DB schema, that the team also provide a screenshot of the console here as well.
problem It doesn't appear that a test plan is needed for this project. However, since there are database changes being made, the system will definitely be at risk of not working anymore if something goes wrong. I suggest the team add a sections
problem It was said that all tests would be rerun to make sure the they work .I doubt they woldnt and a lot of changes might be needed to be made . That part was not very clearly addressed here
problem They have superficially touched on the topic of what all changes are supposed to be made. The doc is the same as it was the last time I reviewed it. I would have liked if the authors had made the desired changes and had been a bit more in depth with the explanation.
problem This does not seem to apply to this particular project. But, the changes they have proposed seem sound enough, the explanation albeit lacking in many parts.
problem The project is about regularizing the database and making changes to the doc to make it more informative, which the doc fails to achieve as of now.
problem No testing section is included, but the tests for this project are going to basically involve running the test from each other module that has some DB interaction. So that is out of the scope of this project I think.
problem Again the design is to create migrations which should be rather simple to read and understand. As long as the team doesn't attempt to perform updates on several DB in a single migration then the design is sound and simple.
problem The design in general is going to be to create rails migrations, as long as the team follows good migration practices this should be really straightforward for designs.
problem While the team has described the problem statement in their design document, the rest of their document seems to be a bit shallow. In my original review I had suggesting writing a UML or Wireframe to describe the technical layout of the teams project. This does not appear to be implemented as of yet, but is something I would highly suggest focusing on before you all begin the coding portion of your project.Â Having a wireframe and UML written up really helps all members of a team to stay on the same page as everyone can just reference the wireframe or UML when coding different portions of the project.Â This way, when everyone is working on different tasks, each member understands the big picture, and can implement a more moduler and appropriate solution.
problem While the team reiterates the project description, they do not appear to hvae worked though any design decisions as of yet.Â This is something I pointed out in my first review.Â To keep a team unified towards a common goal, it is critical that a wellÂ laid out design document be written up.Â Because of this, I highly suggest that you all focus on writing up a design plan before beginning to code.
problem As I stated in my first review, the author does not appear to have proposed any changes out side of reiterating the project description.Â Since this project mainly focuses on clearing up the DB, I do not feel as though there is really any need for formal documentation such as wireframes or UML documents to be made.Â That being said, it is important that the team lay out a plan of action so that both reviewers and other team members alike have a good idea what is going on.
problem The team has not included any visualizations or diagrams.Â As I mentioned earlier, it might not be necessary to include a UML or a wireframe since the team is mainly focusing on rewriting the DB files.Â But, they should certainly include some diagrams explaining what they will be changing visually.
problem The team has not included a test plan.Â That being said, they may not need one since the project only requires them to rewrite some of the database files.Â Because of this, they may only need to check to make sure previous tests pass.
problem No Diagrams present however there is a huge list of databases which is unnecessary as a design doc
problem Adequate explanation was provided on the features that are to be added. Everything from the problem statement to the UML diagrams to the file changes to the Test plan was provided. Also, the changes were explained in a simple manner and I had no trouble following what they had written. However, the list of files to be modified could have had an explanation as to what is done in each file and hence giving a 4.
problem Although they mentioned which portions are to be manually tested and which rspec files are to be modified, the test scenarios were not mentioned in detail and hence I am deducting two points
problem Problem statement is clearly defined by the team at the starting of the document. The author has clearly explained the changes that are going to made to the system by showing the list of files to be modified. The changes are almost in the view part of the MVC though there is only one change in the controller.Â Though the team has mentioned about the files that are going to be modified, it would have been more understandable if they had included more information or specific information on the changes made in the file.
problem The author has explained the design process of the system by using the flowchart and also they have included few screenshot of the mockup screens and a simple visualization UI.Â The team is using flot javascript library instead of highchart javascript library which the previous team has worked on. Looks like they have chosen the correct design pattern as flot library is more efficient and has rich tools to provide visualization. As the team is modifying one controller file they could have explained the particular design pattern they are using for that. MVC is most cases.
problem They have improved quite a bit from the last submission. They have added more visuals to the design doc which is nice. I mentioned in the previous review about the 2nd image in the design doc. I think that it is lacking more details on the screen and what those charts are. Also, the last diagram seems a little absurd to me personally as I am not able to understand the X, Y axis, what do the colors represent. These details can be very informative to the reviewers.
problem The design does appear to be pretty neat as they are trying to disambiguate things by adding more visuals. But as I said earlier, this particular project seems like it needs lot more visuals than other projects might need. They have definitely improved over time but I think adding more details would be better.
problem Again, they have certainly put in work and improved a lot from previous submission. They have added work flows which show user interaction which has cleared a lot of things about the project than what I understood earlier. As I said, I personally feel that this particular project topic might need a lot more visuals compared to other reports as you have a lot of graphs, metrics, parameters to deal with and that needs more visuals, details on what graphs represent.
problem The test plan is described but not in much detail. I am sure once the design is complete, the authors will come up with a detailed test plan.
problem The team has included a test plan but it's not clear what changes they will be making in it or how a user can test the changes made manually.
problem Yes, the authors have improved their explanations considerably. More graphics have been added, and I can easily understand the purpose of the project. I would still suggest that you add more depth to your test plan because it seems lacking, but you at least address the test plan so I will award most of the points. I would suggest that you make additions numbered tests, and while it may be difficult to determine the nature of these tests they should at least be written at a high level so I know you have done them.
problem Aside from the missing test plan, I believe the design will work. I would suggest adding a UML so that we can see any potential design patterns you are using. At this stage, I appreciate all the visuals to aid my understanding, but a UML would be more appropriate than a graphical process flow.
problem I think the visualizations are excellent and one of the best parts of this wiki. I appreciate the addition of the mock-up of the graphs you will show instructors. The only issue I had is that you do not have the UML diagram, but since I have already removed points for that I will not remove them here. Overall this section was great.
problem The section is included, which is great. I feel that even though you cannot test the graphs you should still name some tests for the RSpecÂ API so that there is clear documentation of the tests.
problem 1. A bit more of explanation could be added for understanding how the code flow would work 2. A better overview could be provided by explaning the functions ofÂ each file and the functions that are required to be modified
problem 1. since it is a refactoring code, I believe that the code would be highly modular from what is understand from the design of the project 2. A bit more details about the previous work would help us explain better the actual work that is to be done in this project
problem 1. good amount of visualization used, however they could be explained in a better way using some description for each digram
problem 1. The design plan is described in a very brief manner 2. They could use some tools to better understand on what factors are they going to measure the performance 3. Corner cases could be explained to understrand the test plan and show if there are any tradeoffs possible
problem This is a feature development project. Most of the development is centered around graphs. But still there is a scope of testing around authorization of the application flow. For example: 1. A graph is only visible to the intended user. Reports for teacher 1 cannot be visible to teacher 2. 2. The link to the graph must be present at the expected location. Such test cases can be done via rspec/capypbara. The team can add them. The rest of it can be done by manual testing.
problem The Problem description section explains the general idea of the changes to be made, but really lacks some more information. I think the best way to improve on this is to update the bottom section (the list of DB) with the changes to be made to each DB as you progress through the project. Then the readers would easily be able to see the DBs that have changed AND the changes made to them.
problem The design does indeed appear to be sound. Since the changes are mainly focused in the view, principles and design patterns weren't really scrutinized. However, some of the UI changes do appear to be quite drastic, but the team's design was both creative and practical.
problem The document talked about the design changed to me made at a higher level, they seemes correct but a serious comment was diffucult to be made looking at the higher level changes being proposed
problem As previously mentioned in the first round, there is still no mention about how the pages will become prettier code wise.Â Do you know specifically what needs to be changed in these html files?Â I also forgot to mention in the first round about how your bar chart will be displayed.Â Will it be displayed on the fly?Â Or will it be displayed in a separate page?Â If it's on a separate page, you may want to mention it's association with the other classes in Expertiza.
problem The design appears sound in that it appears to work well within the existing functionality.Â The proposed use of principles and patterns is not given. This could be accomplished by, for example, stating what design patterns are in place and will be kept for the existing functionality.
problem The test plan covers the requirements, but only covers the "happy path" for testing. The steps that are given are not necessary and would be better to be replaced by high-level phrases that describe the negative and positive tests for this project.
problem The solution offered by the authors seems to be correct and I think should work to solve the problem. But tehy have not mentioned any coding principles or patterns that will be considered while implementing the design.
problem They haven't made use of any UML diagrams or any flowcharts to explain the flow of the design. Even though the explanation given for each issue is quite elaborate a pictorial representation of the implementation makes it easier for the reader to know the flow of the design.
problem The wiki has explained their approach which appears to be very simple. However, I believe for this project, the changes can make the code messy and bring some bugs out. I hope the authors do a thorough check of all the functionalities before deploying the code.
problem The design of the doc appear to be simple and clear, however, there a few parts of the design that lack detail. For example, the team mentions Geckodriver, and it appears it is quite crucial to the project. If that is the case, the team should have linked to the Geckodriver website within the doc or provided more information on it overall.
problem The team added a screenshot of a randomly generated HTML page, which is a major component of their project. This illustration provides a decent visualization of what this means. However, a design mockup of their visual results as described in the doc (e.g. the differences between rendered web pages), would have been beneficial.
problem This project seems like it would require quite extensive testing, yet the team did not include any. Some of the testing proceure is implied, but I think the team should have a section named "Test Plan" that cleerly outlines what exactly they will be doing to test the functionalities.
problem Tests were few and very vague on details, but seem appropriate though not much detail. Not sure how one would go about testing this any better than the way it was described.
problem There are not a lot of design elements in this project. But the test strategy they have mentioned through the application flow diagram is clear enough. They want to take screenshots of the same HTML in two different browsers and compare them.
problem The test plan is brief. The authors need to addÂ specific test cases pertaining to their project. For example: 1. Given input x to browser 1, input x to browser 2, both browsers should render same. 2. Given input x to browser 1, inputÂ y to browser 2, rendering results should be different. .. so on.
problem The wiki is explained very well and the work the authors wants to do is very clear. It would been better to check the existing work done to check the validity of that work and see how the changes would affect the system.
problem The approach the authors are trying to take is pretty simple. There is no mentioning of any principles or patterns in their wiki to understand whether they have used one. From the wiki, it is easy to understand the work they want to do.
problem The approach is as simple as possible and changes are not much to be done. The project is an easy one and the authors have not made any complicated decisions. However, reference to old work would be helpful to evaluate the work.
problem There are no images present in the wiki. Use of images are helpful to better understand the project.
problem No testing section is present. Since the project is based on automating using script, I dont think testing is required for it.
problem Yes the work is explained concisely. However, the authors can use mockups of the ultimate system will look. Since it is a mozilla project previous work is not present to evaluate whether the things they have implemented or not.
problem I didnt find any visualisation in the given wiki. I think the authors can use mockups for better explaining their project.
problem There are no tests section present in their wiki. I believe this project doesnt need any testing section.
problem The visual in the design doc, which is a flowchart that describes task 2 of the project (Compare the resulting screenshots and report the contents of the generated page if the screenshots differ), made it very easy to understand how the authors were going to approach the problem.
problem This project includes a test plan that the authors laid out at the end of the "Work to be Done" section. For each step that is laid out in the project spec, a testing procedure was described. The tests described in the design doc are not shallow and will test functionality that is essential for this project.
problem Yes, yes they have. Â They go into great detail about what work they will do. It would be nice to have a bit more information about what the system is, though. The only real information about the existing system is "Servo is experimental web browser developed by Mozilla to "to create a new layout engine using a modern programming language". By automating servo (the web browser) we were able to quickly see if servo could render the randomly generated pages." Â It doesn't even say which "modern programming language" it is!
problem Yes, the design appears to be sound.Â The team seems to be following appropriate principles, but does not specify a specific design pattern.Â This might be helpful to add in the future, but the team as a whole seems to have a great understanding of the systems design and what they need to do to complete the project.
problem The team has done a geat job creating a simple system that appears to cover the entire scope of the project.Â The team has displayed a strong understanding of their projects scope, and what needs to be done.Â Though the use of text and diagrams, the team has reiterated what each step in their plan of action is for, and how it relates to the project as a whole.Â All in all, great job!
problem The team has done a great job integrating figures into their design document.Â This is something I thought was lacking when I first reviewed their work, but they have addressed this problem nicely in their final write up.Â The team has provided a simple, easy to read flow diagram describing the system as a whole.Â One item I would definitely suggest adding though, isÂ UML diagram.Â For documentation on creating UML diagrams checkout thisÂ wiki article that I think is really good and helpful:Â https://en.wikipedia.org/wiki/Unified_Modeling_Language Other then that, great job!
problem The team does include a test plan.Â It appears from their description, that it is not necessary for them to write tests for their given project as it will be obvious as to whether or not it will work. That being said, if the project only needs to be "visually" verified, it might be nice to have some form of selenium tests written to automate this validation.Â I am not very familiar with the Mozilla project or the Rust language, so selenium tests might not apply, but here is a helpful resource to look at if you think automating some webrouser tests might be helpful. https://www.seleniumhq.org/docs/01_introducing_selenium.jsp Other then that, great job!
problem The authors have explained the project well. The design document included the previous work and the changes that need to be done for the next work. The authors have taken enough effort to make the design document easy to understand. The team could have used more visual aids that would add to the explanation of the project.
problem The design appears to be sound with all the required information about the project. It contained the details about the previous work and work to be done now. It has all appropriate principles and patterns. It is complete and may include some use of visual aids to make it much better. It could also include the testing plan which is highly appreciated.
problem The design appears to be simple and easy to understand by a normal user. The team could have made use of more visual aids to make it more appealing. The team could also include the test plan.
problem There is no class diagram in the design document. The visual aids in the design document is a screenshot. These figures are contextual and relevant to the explanation. The screenshot clearly demonstrates the previous work. Use of more visual aids is greatly encouraged as it would make the design document easy to understand.
problem The design document did not include the test plan. Including a test plan in design document is greatly encouraged. The test cases must also be included in the test plan. This would improve the coverage of your project and hence will improve the range of the project.
problem As far as the functionality goes, the design doc covers it and it seems to include all details no matter how small. So the changes to be made appear to be sound, however there is no mention of following any particular design pattern. This is essential since the team will be creating a new model for assigning a badge. Other than that, everything looks good.
problem I think the visualizations are good. I appreciate the Use Case diagram showing interactions between the frontend and backend. I think the wiki would benefit from a UML diagram, however, to more clearly illustrate the interactions occurringÂ on the backend. Other than that this is great!
problem There isn't any test plan with the help of which as reviewer can navigate to observe the proposed changes in the design. I'll suggest adding a step by step procedure.
problem Tests are included. I believe I recommended you update these in the previous review, and I do not see any attempt to change them. The tests are very high level, and I would suggest you get more specific where possible. One of the best ways I have found to do this is to write the tests as if they were cucumber scenarios to really flesh out the details.
problem Yes the design has a test plan but I feel the test plan could have been explained much more, They have modifications in a model and a controller so they can mention how the function in these app folders can be tested, They can mention some scenarios and can test these models and controllers against those.
problem Yes the authors have done a good job in explaining what type of changes will be made to the system. Suggestion: As it was suggested earlier, if something was added in the area of how these changes will be implemented then the document would have been more complete.
problem The author has explained clearly on what all changes they are going do to the system, to solve the problem. List of files has been mentioned by the team.Â Looks like most of the changes are in the view.Â Â They could have explained more on what all changes they are doing in the view for better understanding.
problem Yes, the author has adequately explained the changes to be made to the system. The author has used a unique approach of describing the problem and the proposed solution simultaneously throughput the document which is very interesting. The problem statement has been clearly explained by this team and they have walked the readers through the proposed design supplemented with screenshots which makes it easy to understand. However, they have given an overview of the implementation and have not provided a lot of details about the implementation. It would have been better if this team would have included details of the changes that they intend to make in the code. A use case diagram or a UML could have been included to show the changes that they plan to implement.
problem The authors have done a great job explaining the intent of the project. But they still have not changed the "present scenario" and "proposed implementation" mix-up. The authors need to separate these into different sections. Secondly, the proposed implementation should also contain details of the application files (views/models etc) that needs changing. The authors have added a new Test Plan but the tests are not mentioned. UI tests are done using capybara in rails. Such tests are already present in the application. They need to add such tests.
problem The document covers the changes that the team will be making and seems to know how they'll be tackling them. The previous version of the wiki seemed to lack the list of file modifications they intend to make. However, they have incorporated them now and this seems to make the list of changes complete.
problem There is no particular mention about a specific design. The document includes the changes that need to be implemented but does not include much about how these changes will be incorporated. The team has mentioned the files to be modified. Suggestion: You could add some details in the files modified section like mentioning why the suggested files are being changed and what kind of changes can be expected.
problem Since most of the changes are made in the view part, they haven't provided any specific design pattern or principle they are following. From what they have explained in each of the pages, they look sound without any unnecessary changes. They could have explained any design process or a design flow on how each of the screens are reached for a good understanding.
problem Yes, the design proposed by this team appears to be sound. Â Most of the changes proposed by this team involves changes to the existing views, mostly enhancing the readability of the page. These changes are in accordance with the DRY principle and no design patterns are required to be used as such.Â However, the methods to be included in the controller for adding different colors to differentiate between teams based on submission has not been discussed in details. It is nice that they have included the files to be changed, but it would have been great if this team would have included an approximation ofÂ changes that are required at a code level. Adding the said information would aid the reviewers to better gauge the design
problem The problem mentions that the current system suffers from "structural and design issues". However, they have not explicitly mentioned what the design issues are and how they are planning on re-structuring those pages, possibly by using one of the design patterns we have learned in class.Â Other than that, the design appears to be sound.
problem The UI design changes suggested by the team sound reasonable. They have provided detailed screenshots of the changes they want to make. One addition they could do is add application flow diagrams. Right now, it is not very clear, where in the application their design changes will happen.
problem Again there is no particular mention about the design strategy in the documentation so difficult to comment on this aspect.
problem From the screen mockups and the short description they have provided for each of the pages, looks like design looks simple and easier to understand.Â They could have explained about the changes in the files modified section for better understanding in the code level.
problem Yes, the design is simple and concise. They have adequately addressed all the problems mentions with the solutions proposed. The design is easy to follow and understand.Â The document is lacking in terms of the exact implementation details of the proposed ideas. The changes in the views have been explained well. However, the changes required at the level of the controller have not been explained in detail. Adding this would have made the document more clear and could have enabled the reviewers to effectively analyze the complexity of the design.
problem Yes, the screenshots added by this team are very helpful in understanding the proposed design. They have pictorially shown the fallacies in the current view layouts and have explained the solution with reference to these screenshots. This has aided me to understand the intentions of the authors. However, I believe additional imagery could have been used to further support the document. A UML diagram or a use case diagram could have been added to understand the connection and the data flow amongst the various files that are changed. This would have made it easier to understand the implementation that this team has in mind. Also this is not absolutely necessary , however I feel , including some pictures of how the bar and line graph would look would have enhanced the overall document as it makes the intention of the authors very clear.
problem The team provided great screenshots that clearly describe the changes in the system. Since the project is mainly focused in the view, these illustrations provide context to what is going to be changed, and the authors provided well written descriptions of their changes. One thing I think the team could have added are mockups of the new design.
problem There are plenty of visualizations to help make life easier. There are screen mock ups provided for some changes. I would have loved if there were a bit more screen mock ups to help things more clear.
problem My response would be the same as the first round. There are no UML diagrams but they have explained it with the use of mockups pretty well and hence I don't feel the need for further details regarding the flow they would take. The images convey what the current system is like. Would be nice to have a few visuals on how it would look after changes being made, but well done.
problem The design includes the test plan but just a mention. They say it will be shown on YouTube but maybe not now. I can't find the related link.
problem The test plan mentions about manually testing the system and nothing regarding what kind of tests will be added. Suggestion: You can add certain tests that will verify if the proposed changes to UI are working correctly.
problem They have mentioned that they will manually run the tests for each functionality they want to add and upload the video. But they did not mention what kind of tests they will write.
problem Since most of the changes are made in the view part, there is no need to create any test plan for the view. Few of the changes are in the helper file, the author hasn't mentioned about creating test plan for that. My suggestion would to be create a test plan for theÂ helper file review_mapping_helper.rb.
problem There is a test plan section included. However, it only states that a video will be added in the document where all the functionality is manually tested as the changes are mostly with the views and are directed towards beautifying the page. While it is true for some of the functionalities, there are various other functionalities for which tests can be written.Â For example - tests for the controller methods which adds different colors to the team names based on their submission status could be tested.Â It could be tested that after sorting , the background colors are as intended. Thus, I suggest adding such tests to the test plan and thoroughly test the code.Â Capybara can be used.
problem The team did state that their changes are visual and will require testing more along the lines of user experience. They also stated that they will provide a demo of the system via YouTube once the project is completed. However, if the team included a few test scenarios and detailed the actions they would take and what their expecting from the view, the test plan would have been more sound and complete.
problem Yes, there is a test plan, but since there are only UI changes, there doesn't seem to be a need for an extensive test plan.
problem The team has mentioned that they would manually test UI and upload a video to show their changes. However, I don't think this would be sufficient. One of their planned functionalities is to have an alternating color scheme appear in the table when the items are sorted.Â This change would not only require modifications to the view but also possibly to the associated controller/helper. The controller and helper can be tested through automatic testing.
problem The authors have not given any clear test plan. The test plan section talks about manual testing. But automated testing is possible and is done with capybara. There are examples present in expertiza code that the authors can review.
problem The wiki says the test plan is to manually test the wiki and then provide a video recording covering the changes which is good. However some of the tests could be covered using Capybara testing, since it mainly deals with UI. The team could look into that since test scripts are an important part of the applcation to ensure correctness.
problem Team says that they plan to manually run the tests and make a video demonstrating it. No information how these tests will be written or what scenarios they will cover.
problem The team has provided the adequate details on what they are going to change to improve the game's performance. I think they should have explicitlyÂ provide a listÂ of filesÂ that are going to be modified.
problem Looks like all portions of the wiki are present, and everything is explained well. I understand what the authors are attempting to do in the project. The only suggestion I would make here is toÂ fix the formatting of the images. Some of the images fall off the right side of the page because they are too large. I cannot take points off for this because it I can easily scroll over and see the rest of the image.
problem You did a really good job explaining everything about this project!Â However, I think you should mention in detail a little more about your other initial steps and subsequent steps, even if it's just a brief paragraph or two.Â I think doing this will allow the reader to understand your thought process about what these steps change in the existing system.Â As mentioned in the first round, you don't need to mention design patterns if it is applicable for your project.
problem 1. The wiki is very well documented.Â 2. Authors have added images since round 1 which helps to understand what the wish to do. 3. Authors can add more information regarding the images to make us understand.
problem Even though a design pattern was set because existing code will be changed it seems sound on the methodology.
problem The authors have written that their changes were rather small and only added a few lines to the overall codebase, so they believe the patterns were not applicable. Perhaps an update could be made when they implement the single thread for canvas drawing change? This likely increases the amount of code added, lending itself to the need for good pattern use.
problem The wiki can have more information on this matter. As the wiki seems to explain the work on a higher level. Also, previous work should be present too, which would help us to understand the work did and how they plan to do the future work.
problem The design document is simple and to the point. The team consequently listed the problems and then provided the solutions to the problem to implement. The flow of the documentÂ could have been moreÂ intuitive (Testing plan could be just before the conclusion part; the files that are to be modified in a separate section)
problem Design complexity doesn't apply for this project since parts of code are being added to an already existing system.Â However, from the way this project is structured and the tasks you are given, I can tell that the design behind it is pretty complex.
problem The visualizations were helpful, for the part on showing how canvasID was used as well as the testing code. Visualization of what a canvas is on a html page would have more helpful.
problem I'm not sure they needed any visual diagrams for their document, the link to the game was probably enough. however, they added the screenshots of drawImage canvas.
problem Visualization was added to this version when compared to the one I reviewed last time. These pictures looked like they were for the initial steps. However, it seemed unnecessary to add visualization for this project.
problem Visualizations are great. Some of the placement is not clear. I would appreciate some better formatting, however, the large size of the images makes it difficult to understand them. I understand why the first set of images are large, but it appears that the testing plan image could be reduced.
problem Visualizations are present, but I think some more explanation as to what these visualizations do would be helpful for someone who doesn't know much about HTML graphics.Â I do appreciate you going into detail in your testing section about how fast each single canvas is timed.Â Is it possible to include a table in the future to showcase averages as to how optimal your rendering is?Â The demo YouTube videoÂ you guys provided also helps me out a little bit to understand what the implementation of Servo will do.Â My question is will this be the same when including HTML canvas rendering in the final production?Â There are also some overlapping text in your series of pictures under the HTML canvas section that should be adjusted as well.
problem The authors have included diagrams to explain the design better, which wasn't in their previous submission. It does help. But I feel some diagrams are overkill.
problem Images are the best source of information. Being a mozilla project, its tough to understand just by reading the wiki. Images makes it more clearer as to what the authors wants to do.
problem The only testing mention is the performance testing done to check the speed of the canvas renders, the team should include a testing section to discuss the tests that they will perform on their code. This section will likely be mostly related to the large change upcoming with the single thread to draw, so perhaps the team just has not updated this area yet?
problem The design included the test plan. There was only single test which is regarding successfully running a game. The project was successful when a game mentioned in the documentation run successfully in the browser without any crash or time lag or slow runningÂ of that game. The team at the end of the first steps tried to solve this issue but were unsuccessful.
problem No test plan mentioned in documentation about test cases for the first initial step and second to last subsequent step.Â Instead, testing is mentioned briefly as part of the Implementation section of the document by mentioning one test that tests the initial performance of Servo with regards to canvas rendering.
problem I am glad you added more visualizations for the test plan, but I am a little disappointedÂ that the only test shown is the same one that was there originally. I think it would be a good idea to test out with different sizes or moving from different positions. At least to add more depth to the test plan because it seems like you only have one test. However, this is improved from the last time so I will award a higher score.
problem The tests included are only to check the performance of the drawImage method. More tests could have been included to test functionality.
problem Yes. The UML and Wireframes are very helpful in describing the changes. However, some words in the picture are a little blurry. Yellow sticker part in the wireframes.
problem Yes, the explanations are good, but could have been a more structured
problem Yes. From their wikiÂ especially in "Proposed Implementation" it seems they have fully explained the changes they will make to expertiza which includes Migration changes, Instructor view changes and Student view changes, and each of these was quite descriptive and easy to understand. They also listed the files to be modified and files to be created which is very thoughtful. But I want to mention a little problem: in both "Migration changes" and "Instructor view changes", they gave very detailed descriptions of how to make the changes such as which parameter and method need to be created or modified to realize some functionalities. However in "Student view changes" it seems they just described the changes made to the view and nothing is mentioned how to do that.
problem The authors have gone into just the right amount of detail in explaining the changes that will be made.Â The use of "role" instead of "duty" throughout the document can be confusing.
problem Yes. They look good to me. But I don't know what specific principles or patterns they are using.
problem The document has only 2 diagrams. The designers could have provided some more designs
problem Yes their goal is to add a role-based reviewing to expertiza so that students can select their role(duty) of an assignment and students will be reviewed based on such a role-based evaluation rubric. Their implementation plan is detailed and reasonable. But as I went through their plan I didn't get how they would attempt to realize reviewing students based on their roles which is required. In general, their design is good.
problem TheÂ authors have thought about database design and coding needed for these changes although the changes have not been described in terms of principles or patterns.
problem The design appears to be sound and very intuitive. The authors have added screen mock ups to help aid visualization. I would have loved if there were a bit more visualizations.
problem The design seems to be correct. The team has included the changes that will be made such as creating migrations to create tables for duties. but no design principles or patterns are being discussed.
problem The design looks good. It has been supported with UML diagrams such as a class diagram, however usecase or activity diagrams would help in explaining the overall design of the system whereas a class diagram explains only the relationship between certain classes. Hence I am deducting a point.
problem The arrangement of the context under proposed implementation can be improved, e.g. don't use bullet points to separate two sentences that's should flowÂ sequentially.
problem The design seems to be simple as easy to understand. The UML diagram is explained but the diagram itself is a little hard to follow.
problem It's a lot better than the first version, but it's still pretty confusing. The relationship between Question and Questionnaire makes sense now. Each line has two numbers on it, though, which is rather confusing. A question has one Questionnaire... or... wait, does a Question have many Questionnaires? It says that Questionnaires have many Questions in the description, but the diagram doesn't quite say that. The diagram only says that Questions have Questionnaires.
problem The design except for the UML diagram lacked diagrams.
problem Yes. They got an excellent diagrams to illustrate the relationships between several models that are related to their project and how they relate to each other. But I got a little confused on some signs such as "1", "1.."", "0.."" on those orange lines, so you may explain that a little bit in wiki.Â Another minor problem is that the pictures are too large and can't perfectly fit the pageÂ so you may consider fixing this.
problem The explanation is good, but it could be enhanced by condensing the explanations and adding visuals that portray what the removed text said.
problem It does indeed include this and it is sufficiently detailed to be used. Â Maybe there are a few cases left untested, but I'd need to know more about the system to tell that.
problem Yes. They need to write tests since they will both create and modify files. They got aÂ hierarchical Test plan which is clear and easy to follow. But it's too short and doesn't have some expected information such asÂ whichÂ files need to be tested and how many Rspec test files will be created
problem The test plans cover the flow of the UI well, but it would make the test plan more complete to add negative tests to the positive, "happy path".
problem The authors have considered the suggestions from the first round have elaborated their planned approach section. They have also added the files that will be changed. Only suggestion I could give is to add some detail to the files changed section like mentioning why those particular files will be changed and how. This will make the document more thorough.
problem Not really. They said what's going to be true about the system afterwards, but I'm not sure how they're going to make any of that happen. There was a great amount of explanation about the score formulas, which should be... maybe one or two lines of code, call it four to be generous?
problem I just think that the team could explain which changes are going to be made in which file. For eg:- The checkbox for "allow self reviews?" may be in theÂ app/views/assignments/edit/_review_strategy.html.erbÂ Â Similarly, for the sections of planned approach i.e."Â Find or create a function that will derive a score from self-reviews and peer-reviews" and "Create the different displays for self-reviews" sections of the planned approach. What the team has explained in words is very easy to understand from the function point of view but not so much from the code point of view. I am unable to determine which changes will be made in which files.
problem Yes, the authors have adequately explained the changes they need to make in the system. They have clearly explained the problem in the current system and their proposed implementation. They have discussed the various strategies for combining the self review and the peer review and also performed a comparative study to show its pros and cons. This is great and helps the readers to understand. Overall flow of the documentation is also great and is easy to follow. One thing I would have liked to see in this doc is that the in the filed changed section , a brief explanation of the changes required in each file should have been included. This helps to readers to understand how the changes are made at the code level and get a better idea of the author's intended implementation.
problem Yes the authors have explained well what changes are required of the system. The authors have compared different formulas that can be used in the system and also have written have written a solution approach. They seem to have considered the different approaches and have written out the pros and cons for the same as well.
problem The design doc is well crafted. It explains the issue clearly. They have also included a good explanation of the problem. I suggest to include the changes that are to be made in each they have mentioned to be edited, as they have only mentioned which files need changes but have not explained what changes will be made in the file.
problem Maybe? They don't explain it. They just say what the end result will be (and talk about the score formulas a lot), so I'm not sure how to judge this one.
problem I think the design is good. But I could not tell any specific principles or patterns they are following.
problem The team has not explained much in terms of the format of the code and which patterns they will use. They have explained more from a conceptual point of view. . All the design steps are warranted according to me. In the section"Create the different displays for self-reviews" the team has gone over different ways to highlight the self review column in the Review Report.The different choice of rubrics for calculating scores for self review are properly explained.
problem Yes, the design appears to be sound. The proposed changes address all the problems and are reasonable. The idea of including a checkbox to allow the instructor to decide whether the self review will be displayed prior to peer review or not is good.Â However, the only problem I could find in this is the fact that this team has not given an indication so as to which of the proposed functions have the selected to be implemented. Stating that would have made their design concrete and would have enabled the readers to have a better idea of their implementation.
problem The design appears good from a higher level point of view . The team had explained the different ui components being modified .
problem They have explained the issue and proposed solution elaborately. But they have not included what changes will be made in the code. They have also not mentioned what principles or patterns will they be using for implementation.
problem The authors have clearly articulated the various score formulas. They have also given a tabulation with pros and cons of each. The screenshots are not very clear though. They are not rendered properly. Also, the authors have not given any application flow diagram to explain where in the project their part will fit in.
problem The team's design appears to be sound and to follow appropriate principles.Â That being said, it is really hard to tell if they are using an appropriate design patter as they did not explicitly state a "pattern" they will be using.Â Considering they written any code yet, this is understandable, but one thing that might help would be if the team were to include a diagram describing the system as a whole before and after their changes are made.Â I would definitely suggest doing this before moving forward into the coding portion of the project.Â But all in all great job!
problem Yes, the team has gone through alternatives, and the pros and cons of the different approaches. However they have not mentioned which approach they plan to take.
problem The score calculation appears to be a bit complicated but it is explained in detail.
problem The design appears simple . It was good to see the nice score diagrams , in understanding the correlation diagrams in the plots .
problem yes the design seems to be simple. The different files that will be ultimately changed are also mentioned. However it is unclear which approach the team is gonna choose. They have designed it well considering all the possible alternatives for their final approach
problem The design seems easy to understand They have included different approaches toÂ incorporate the self review and explained their pros and cons. But they have not mentioned which approach will be used for their implementation.
problem The application design seems simple to understand. They have clearly mentioned the changes for each of the requirements. It would be better if the authors added an application flow diagram to explain it more.
problem Yes, the design appears to be simple.Â The team appears to have a solid grasp on what they need to do to complete the project. The team has done a great job laying out different calculation formula options and has described each in detail along with diagrams. Furthermore, the team has displayed the pro's and con's of each approach which is really helpful!Â That being said, it would really help to see a diagram of the system they plan on building.Â Since this is not present, it is hard to really decide on how "simple" the design solution is.Â All in all though, great job!
problem The diagrams help in making me understand the changes to be made. However, the diagrams are a little blurry.
problem There are some diagrams which provide an insight into the proposed changes. More images regarding the check boxes and their placement in the view would have been a good choice.
problem Yes, the visualizations have been included in the doc. They are helpful in understanding the proposed design of this team. They have added images of how the checkboxes would look which are indicative of their design. They have used images of heat maps to show the results of the different mapping functions which has made it easier for the readers to understand the different strategies and compare their pros and cons. I would have liked to see a UML diagram in this doc to explain how the implementation works at a code level and how the data flow occurs between the controllers and the views.
problem The heat map diagram included makes it easier to understand all the approaches mentioned. They could have included a UML diagram to explain the overall changes to be made in the design.
problem The authors have added a lot of visualizations of the heat maps of their proposed implementations. They have also added screenshots of current application. But they need to add an application flow diagram to make it complete.
problem The team has done a great job including diagrams in their proposal.Â The team has given visual diagrams describing what each of the different "calculation algorithms" they plan on trying does.Â This is really helpful to the reader in understanding what exactly these algorithms do and how they work. As I mentioned above though, it would be really helpful to have a diagram of the system as a whole that they are going to be working on.Â Other then that, the diagrams that are present in the document are well thought out.Â Great job!
problem The testing plan isn't so much of a "plan" as a "list of situations" Â There's no good way to tell how they plan to actually guarantee that those situations are met.
problem The team has mentioned test plan but the tests are pretty basic, and only scratch the surface. For eg, if a more complex approach is taken, eg- the SPARK approach, it requires all scores to be normalized, the maximum score being 1. How will they test for correct normalization? Also, the self review scores will be based on the difference between self review and peer review scores. How will this difference be represented?
problem The design include test cases. There is no such thing as a test plan by which the user can check the given functionality.
problem Yes, they have included a hierarchical test plan in the doc. Though the test plan covers a lot of key cases, it is a little short.Â It would have been better is the author would have include descriptive test cases where each scenario and the corresponding tests for that are explained in detail.
problem The design included a test plain but it was at a very high level . If we could see more details it would have been really nice
problem The testplan is a bit superficial. They could have mentioned how they are going to test their grades_controller. They have the score formula, so they can mention how they are going to test those.
problem They have included a test plan. I think they can consider more test cases. They have mentioned different approaches but they haven't included all the test cases that will be required to check the functionality of these approaches
problem The authors have added a basic test plan. They have added specific test cases as well. But the tests are not very specific. For example: "Peer-reviews cannot be viewed before a self-review is completed." does not mention how exactly the application flow will happen for this test.
problem The team has included a system test plan.Â The test given are a written in a some what "cucumber" style, but are fairly vague and give more of a general overview of what needs to be tested.Â I would encourage the team to lay out more detailed, RSPEC "describe" statements for each of their tests, and to really think though what each test will entail.Â Here is a helpful resource for learning about RSPEC testing -->Â http://rspec.info/ Â Other then that, good job!
problem The authors explain most of the changes that will be made to the system.Â It would be good to see how the new changes will determine if the author has or has not resubmitted their work for the reviewer to review. Also, adding a mockup for "Updating review summary view" section would be helpful.
problem Yes, the authors have adequately explained the changes to be made to the system. They have clearly and eloquently explained the problem and the solution proposed by them to solve these problems. The use of the UML and wireframes have made the design and the author's intentions very clear and the data Flow is easy to understand. However, I have one suggestion. I like the fact that the files to be modified have been listed. However, they should mention in brief what changes are to be brought about in the file. The authors have provided the UML which shows the changes that they plan to make. However, adding a brief explanation of each of these changes proposed in the corresponding file would have enabled the reviewers and the readers to get a better understanding of the implementation.
problem Yes, the design appears to be sound. The proposed design has been explained with the help of a UML diagram and wireframes. These are quite descriptive and help in understanding the proposed implementation by the author. However , only a brief explanation has been given of these diagrams. It would have been great if the authors would have elaboratedÂ moreÂ over the diagrams. Also, I believe most of the doc gives an overview of the proposed idea. Only some information have been given about the actual implemenattaion. It would have been better, if more information would have been provided on this front. But I understand that can be difficult at this early stage. Also , I believe that it would have been better if the authors would have included some more information about the peer logic, AJAX and JQuery and how exactly will it be integrated with the design. For someone , with no prior information about peer logic, it can be slightly difficult to understand.
problem Yes, the design proposed by the authors is concise and simple. It addresses all the problems mentioned in the problem statement accurately while keeping the UI simple. I like the use of Peer logic for tone analysis. It keeps the overall design simple while using third party services for the necessary purposes.Â I am not very familiar with the JQuery and AJAX and would have liked more information on these to be supplied in the document to better gauge the complexity of this design.
problem Yes, the visuals included in the doc are very descriptive of the proposed design. The UML diagram is very illustrative and gives a clear indication of the data flow. The wireframes included gives a very good idea of the intended results to be achieved by this team along with the steps to achieve it.Â I have one suggestion though, it would have been good to include a flowchart or a use case diagram to illustrate the steps of implementation. While they have represented their idea pictorially , the actual implementation lacks some representation. Including a use case diagram or a flowchart of the implementation would have aided in understanding the program flow.
problem The design appears very concise and sound. There is no mention of any principles and patterns that they have used but rest of the information is very good.
problem I believe it is a little complex as the authors have to integrate it with the previous work that is done.
problem The design is very concise and simple. They haven't mentioned any use of principles or pattern that they have used for their wiki. However, while implementing the authors might use one and then should mention it in their wiki.
problem Just by looking at the project description, I believe the project will be a little complicated to implement. But in their wiki the approach they have taken is a simple one. I would love to see the end product.
problem The design looks solid but at some places feels a bit too complicated. A new user may find it a bit difficult to understand
problem The use of visualization is extremely good. Only a small caveat. we need to scroll to the right
problem The selection of data representation could be handled in a better way. Instead of going to the pie chart and then depending upon the decision clicking on the stat plot is a bit redundant. You could improve this by giving the choices at the start itself.
problem I would make the size of your flowchart smaller so users don't have to scroll to the right to see it all
problem Yes, the authors have adequately explained the changes to be made to the system. The authors have clearly stated the problem statement and the solution they have proposed to tackle it. The flowcharts and the mock links added are quite descriptive and makes the ideas of the author easy to understand. They have also corrected the minor errors in the flowchart from the last submission which is great. Overall the document is designed well and the readers can understand it really well. However, one small problem that I encountered is that , in the files to be modified section, they have only given a very high level explanation of what they intend to do. Thus , while their ideas and design are clear , their implementation plan is not apparent to the reviewers. For example - in the response controller file, they have mentioned that these are the files that need modification. I believe they should have specified what types of medications are required and whether they need to modify an existing method or cr
problem Yes, the authors have explained the changes that are supposed to be made to the system with enough details. The changes that are supposed to be made in the visual interfaces are mentioned along with a list of files that are going to be altered during the course of the project.
problem The explanations seem to be much better than the previous wiki explanation. They have also updated their UML diagram to correctly reflect what they are proposing. They have also added appropriate notes for further clarifications that I had. It mentions how the reviewee is benefited by asking the questions. However, I feel that the wiki misses out on explaining how the reviewer is benefited for doing extra work. Maybe the team can talk to the instructor on as to how to address this.
problem Yes, the design appears to be quite sound. They have included a detailed design proposal which explains the concept they have in mind very well. The design is neat and accurate and addresses all the problems in the problem statement. The overall design flow is also accurate and without any fallacies. They mostly require changes to be made to the views such as adding checkboxes and additional questions so that part of the implementation would be DRY. They have mentioned that they will be creating a subclass of questionnaires controller called SRQ. However , they haven't provided any implementation details such as what methods this class would have. Since it is a subclass of the questionnaires controller, I would suggest to use inheritance to its fullest. Also, I did not really understand how exactly the appending of the questionnaires would work. I would suggest to include some details about how this appending would function which would make it easier to understand for the reviewers.
problem Yes, the design proposed by this team appears to be simple and concise. They have covered most of the necessary information about the proposed design and is easy to follow. However, there are some parts in the design that needs some more explanation and can increase the complexity. One thing , that I can think of is that they have mentioned that the scores for the questions added by students would not be graded. They have not specified , how they are going to differentiate the two types of questions and how exactly would this logic function. I suggest to consider such borderline cases and write test cases for it to ensure accurate functionality.
problem Yes the design is simple , well explained and consists of all the important details about the project. They have first defined the problem, drawn the design strategy in a graph like manner and then have explained the user interface changes that are supposed to be done.
problem The approach the team will be taking seems to be simple and efficient in terms of how I can visualize the system to be. They plan to handle the additional questions well and are avoiding complicated changes to the existing system.
problem Yes, the visuals added in this doc greatly assist in understanding the overall design of the authors. They flowcharts added and very descriptive and make the intentions of the team quite clear. The screenshots with the mock links added also prove helpful in understanding the endoderm goal of this team and how the results would look like.Â However , I would have loved to see a UML or a use case diagram which would have made the data flow across models controllers and views quite clear. The exact processing order and data movement would have been made clear with a UML and the different scenarios can be covered with a use case diagram. This would have strengthened the doc submitted by this team.
problem It's better if they can describe their test plan with the anticipated test files, e.g.Â student_review_controller_spec.rb.
problem Yes, a hierarchical test plan has been included which explains the testing scenarios they have in mind. However I believe that the current test plan included is too short and just provides an overview of testing. Since this team plans on adding a new class and altering views for it, they should thoroughly test the functionality. I suggest to include a detailed test plan, where each scenario is described and the different tests for that scenario are mentioned. This would enable the reviewer to gauge the test plan and maybe provide an insight into any of the cases that may have been missed by this team. I scenario that I can think of is that they should test if the correct questions are graded. Like the extra student generated questions are not graded.
problem The test plan seems to be superficial and shallow. The team could have mentioned the different scenarios in the controllers and models that are going to be changed , They could just mention the changes these files will have and can briefly mention all the possible test cases that can be implemented on these files.
problem Though not much "hand writed" but still great code with good project structure.
problem Not uploaded on git.
problem There is no Github link provided. Instead the code was zipped in an archive and posted on Expertizza. The code has no implementation of any functionality whatsoever, however, 'scaffold' code files exist in the zip with nil developer implementation. Code for 'house' is added though.
problem I Don't see the GIT Link here. Requesting to upload the GIT Link and Deployment URL in Expertiza instead of the Project Folders
problem The git repository link is not provided. A zip file is provided instead.
problem No readme, or git link, code is difficult to sort through from the zip file.
problem Can not load the online page.
problem Cannot run the app
problem No readme file found
problem The project is not deployed on either of mentioned cloud platforms such as Heroku, AWS or VCL. Instead an locally run server's IP link is provided, which doesn't seem to work. As a result, I cannot test the interface at all. No README is provided as well.
problem I Don't see the Deployment URL to comment on this and rest other UI questions. Requesting to upload the GIT Link and Deployment URL in Expertiza instead of the Project Folders
problem Test cases for 'house controller' have been implemented in the code. No test cases for model exist.
problem I Don't see the GIT Link to comment on this. Requesting the Team to upload the GIT Link and Deployment URL in Expertiza instead of the Project Folders
problem the link to git is not provided .
problem No git link available to track progress.
problem Can not tell without a git link.
problem Only 4 commits, No Github link. Hard to review. Please update the Submission with a github link so other reviewers can maybe give some proepr feedback after testing the app.
problem No test cases have been implemented for any entity.
problem There are some tests for the controllers, but it looks like just the scaffold generated tests.
problem The team has implemented modules like: Login, signup, logout, List all companies and List all houses. However, they lack in many functionalities and under each module. So they are not properly implemented. They lack validations, session management and things like multiple same email addresses can be registered with different users. Â Hence, no the team has not thoroughly tested at least one model or controller.
problem only the default testcases created by the command are present in the repository.
problem No, The changes were made and pushed only in one particular day. There is no consistent flow on GitHub for pushing.
problem Nothing mentioned in readme file. user interface not easy .just provided links for realtor creation. No link for house hunter.
problem Basic navigation is missing. For example, Once a user click on the edit profile and tries to navigate, its difficult to return to home page.Â There are no details available in the readme file to help with the application flow.
problem Readme file is not updated and there are no instructions on how an admin or a house hunter can log in. The UI, though it didn't have any styling, is intuitive and self explanatory.
problem No, not really. The website just has one role to operate, and the readme file is an auto-generated file, which doesn't include any useful information.
problem Nearly all of the links seem to go to the wrong pages. For example, "Back" in Viewing Houses took me to a list of Users that had signed up, while logged in as a Realtor.
problem the README file is not maintained by the developer. The design is not complete. Whatever is done is intuitive but incomplete.
problem Some indentation issues in the project.For example in index.html.erb indentation is not proper. Splelling mistakes.For example in hunters view in index .html.erbÂ prefered spelling is wrong.
problem The team followed good practices. No repetition of the code. DRY principles uses. How, there is an empty controller though, which is, the commons_controller.rb. What is its purpose?
problem The application is modled according to the ruby practices but lacks the use of ruby features such as validations , associations and active record.
problem The code is very well written, properly organised and good architecture. No repetition. Cons Application logic written in controllers, for example, house_controller, which can be ported to the respective models.
problem Requesting to GIT Link to verify the same
problem The README is empty and does not contain the admin account information. It's hard to navigate around the interface and determine where all the functionality is.
problem UI looks nice but I found the it to be a bit confusing. The relation between User, House Hunter and Realtor is not apparent. It would helpful if it could be explained in detail in the README file.
problem The interface was simple. Some of the fields input were not mentioned like for creating house
problem Requesting to GIT Link to verify the same. But i downloaded the Zipped file to see if there is admin credentials in README file and it was not there.
problem Controller test cases have been covered, but no model test cases can be seen.
problem Tests exist for the controller but not models.
problem Spec folder is not there. There are some tests in the test folder.
problem I was able to check for the realtor and house hunter. Some of the functionality of a realtor and househunter weren't working.
problem There are only four commits visible and no proper commit messages. Initial commit has 228 file changes.
problem All commits were made on one day
problem Looks like the team has committed the project as a whole. Bug fixes are done incrementally.
problem The project has successfully named it's varables and function names according to the principle. They are understandable form what the mean. But the project lacks any documentation internally, as well as a proper external readme file. Lack of code documentation makes it tough for the reviewer to make sense of the code. Apart from that, the design of the database schema isn't normalized to much extent, which makes data entries redundant.
problem From what I see it looks like code we have seen in class. Although in the model classes, they don't have any associations between models.
problem The code itself appears to be very clean.Â The lack of scaffolding (or the stripped down scaffolding that it presents) means there's a lot less dead code in the files. All the indentation and variable names appear to follow convention as well. This cleanliness, on further inspection, appear to stem from the fact that the application frequently does notÂ support needed functionality. The code that's there is clean though.
problem Overall, the code looks fine. Good code is self-documenting - So, your code could be improved byÂ adding comments in all required places. Make use ofÂ different loggingÂ options provided by ROR and avoid using "puts" in code.
problem The Code is structured as per basic rails norms. The CRUD operations operations actions could have followed the usual norms than custom actions defined. The routes config could have been more efficiently defined using match than defining each routes separately.
problem All users have their own model controllers. The code is following Ruby on Rails standards but there are some debug "puts" that shouldÂ be removed.
problem The user interface is very simple, clear and straightforward. But it lacks depth where it should have been extensive. For example, after signing up for the first time, the user is directed by to the login page to login again. This is not very user friendly, and is rather redundant. One must automatically sign in after creating an account. Also, the application should deduce whether I'm a realtor or a househunter or an admin from the email ID i entered. I should atleast now have to specify for househunter or realtor about my role.
problem The UI is basic as of now. The 'show profile' link is broken.
problem All the buttonsÂ which do what they say they do are quite good. Quite reasonably, I can click on these buttons and the expected behavior occurs. It's a little weird to have to select whether I want to log in as a house hunter, a realtor, or the admin at the login screen, and that it doesn't work without selecting the right user type. Â Unfortunately, many buttons do not do what they say, or redirect the application to a dead page. Here are the functionalities which do not work: 1. Attempting to delete Real Estate Company makes you view Real Estate Company detailed info. InquiriesÂ do the same. 2. Attempting to 'show' anythingÂ that's not a real estate company throws a 406. 3. As a realtor, I tried to Update/add company information and my change was rejected. 4. The List a House form has 'create company' as its submit button.Â Â There are also many things I expected to be able to do that there were not buttons or link
problem The login / signup module seems to be well tested of all the other models and controllers in the program. But this module has a drawback. It deals with three tables, the realtors, the househunters and the admin. Due to this kind of segmentation, there is a repetition of data i the database, if any user would like to signup as both. Also, it would make it difficult to handle complexity as the application grows. According to me, its better to atleast cascade the tables of realtors and house hunters into one.Â The other functionalities are not wholly implemented, only the CRUD operations related to those are implemented, hence not much could be reviewed about testing.
problem The project needs validations on all fields (I was able to enter random values in email address, mobile number fields). Some of the additional functionalities were missing (filter inquiry, see who has added my house to their inquiry list etc). The project is well connected and navigation is easy. Overall it looks very clean and intuitive!
problem I don't think the test has been finished. the controller test file is basic empty and the same empty in the model test file.
problem No, not really. No user type has all the functionality in this review's check boxes, much less all the functionality specified in the project description. Manual inspection of the test folder reveals that all the model and controller tests are empty, as are the fixtures.
problem No, testing is not covered yet.
problem Admin and Realtor's functionalities are partially working. Many other features need to implement.
problem The project only has 3 commits, all onÂ a single day. So yes, it can't be said that the project was implemented or developed over a period of time.
problem I can not see the completed devolepment procedure, the only commit in the github is happend on Monday, the week of 9/30.
problem No. They only have 3 commits and 1 branch so that means they waited until the last minute to do thi
problem I cannot appraise this becauseÂ I do not believe they did their development in the linked repo. There is only one commit, where all the functionality was added. I am inclined to say the team was not actively developing over the project period.
problem No, according to the Git history, there has not been no changes pushed after Oct 1st
problem I could see only one person's commits. Each team memberÂ needs to contribute to Git.
problem The overall UI is good, but there can be some improvements made on the admin part of the app. We need to change the link manually to end up at the admin dashboard.
problem The UI is mostly easy to use, but the README is nearly undocumented.
problem The deployed link is not accessible. The readme file describes the process for just admin login but not for the consequent steps.
problem The UI is straight forward and easy to use. The implementation of the menu bar makes it look better. Though there is a scope for improvement. The admin link in the Readme file is not working.
problem nice user interface, good use layouts. but unable to log in as admin,
problem UI is nicely done.Â There are a few things that can be improved:Â 1. Clear all / list all houses field once a search parameter has been given 2. Do not show receiver object id in inquiries. Maybe something more useful.
problem They tested at least one controller, but none of the models.
problem The team has added functionality for login through google sign-in, but I couldn't verify it's working.
problem the realtor and house hunter controllers work as desired in most cases though there are some cases which need to be addressed. There is a need to validate the real estate creation form.
problem I think it does pretty well to follow theÂ "good Ruby and Rails coding practices". It is elegant and follows the DRY code approach.
problem The code base is very minimum. Many functionalities are not implemented.
problem Yes partially, the code has the parameters not well defined for all only oneÂ conceivableÂ user seemingly admin and that too is doubtful to have the correct MVC Layout.Â For instance, they seem to have created separate MVC architectures for Admins, Companies and Users only. This goes to show that they are lacking in a layered approach on access and privileges.Â Also, the code is written in a reasonably clea
problem The code is properly written with good Ruby practices, however, no comments are mentioned.
problem It seems as though you have an awful lot of controllers that are supposed to have something to do with authentication that either don't get used or don't have any code in them. Other than that, the project looks organized like a Ruby on Rails project should be. There is a lot of code that is hard to follow, and I can't discern its purpose in several controllers.
problem Readme not well defined
problem The login opens the user page which has which has 5 "back" links for some reason and they do not do anything. No common home page for all the list views. Have to all the list views go from user pages. List of companies is not in tabulated form, thus very difficult to read
problem I cannot create any hunter or realtor accounts.
problem This UI is pretty good. It's fairly intuitive to follow. The only thing I'd recommend is to have a link to the signup page on your welcome screen.
problem There is a scope of improvement by eliminating multiple 'back' links on each page.
problem Readme file is absent.
problem Admin -Â Not able to create a Real estate company - loads error page After creating a new user, not able to see the user in the list Couldn't find signÂ up for a realtor/House hunter - throwing an error -Â Company must exist This is becauseÂ of the foreign key reference and while creating the user there is no field to select one so it gets an empty or nil value. No houses and inquiries functionality created yet. Not able to check the functionalities ofÂ house hunter and realtor as was not able to sign up for that user becauseÂ of the above error
problem It is not a very intuitive user interface because the ease of navigation not achieved in it due to the ill defined 'db' folders and the routes.rb file in git hub makes the session linkage a bit hard to follow.Â Also, I fail to understand the structural flow of the program even after logging in after signing up. So, I get easily confused on what to do. Sign up is not validated for any functionality be it user or admin or realtor and we don't know what to do and that are we admins or any other user. Privilege separation has not been done.
problem Doesn't seem like it. only user and company part have been implemented and I was able to delete the admin user easily,and in the company edit view for e.g year input doesn't check for a valid year(398343 is a valid year). Therefore it has not been thoroughly tested
problem There seems to be many functionalities missing. I cannot register as hunter or realtor. Hunter, Realtor, Interest of Buying, Inquiries ...These model do not appear to be in the folder app/models/... Seems to be an incomplete project, unless the previous reviewer cracked the system.
problem Functionalities are incomplete,Â while able to log in through admin, cannotÂ edit or create any other user because of the error.
problem No, that doesn't seem to be the case since, it has been a very jumpy approach and also the functionality of only a basic login has been added. So, if adding the bare login and sign up is considered as an MVC architecture then they have surely built a bare backbone of it.
problem The team hasn't yet implemented any proper testing
problem the User model has been tested, although I can't say it is thorough at this point, as it only tests the validity that is already required by the model.
problem There are only ten commits and that too only from one account, which means it has only been done by one individual and not a team.
problem Yes, seems to be so the case in effect the last commit being just 5 hrs ago. But what changes against each file have been made is not clear hence its a bit unclear as to the extent and the number of changes made. Moreover, the amount of subject matter and the number of sessions or models are far too less to be implementing any changes as such.
problem I could see commits by only one person. Need team contribution.
problem the basic structure has already been set up. however, there are some improvement that the team could be done. for example, in the controllers, the basic CRUD feature could be added into the file.
problem It doesn't appear that scaffolds were used in the generation of much of the site, and CRUD functionality is missing for most controllers.
problem The author has done good work but I would suggest following pointsÂ In the model classes such as House you could consider merging multiple validations to one , as most of them have :presence => true. Same hold true forÂ RealEstate The relationship between Models is missing, pls add thatÂ (company and realtor, realtor and houses etc ) for eg 1 realtor belong to 1 realestate company,Â 1 realestate company can have many houses and realtors Automated tests for model and controller ( 1 each ) are missing. As of now features such as house search,Â admin view, views of corresponding roles house hunter, admin and realtor are missing. Messaging between house hunter and realtor is also missing.Â Â Â Default page should be login and not signup Consider using gem 'devise' for user management Â Not much functionality apart from log has been implemented
problem even the application has already be deployed on the cloud platform, it is only could be sign up, and I cannot see any other functions, like companies and houses.
problem It's hard to tell what functionality the website provides, and the README is devoid of useful information.
problem Readme does not have info, it contains some other default infoÂ Admin account details are missing
problem implemented only login, sign up functionality, so it is hard to conclude that whether the user interface intuitive or easy to use.
problem The app was designed according to the ruby conventions and coding practices. The necessary authorizations are used along with gems to handle user session. Some models do not have the complete validations but the validations in place are using the ruby practices. The active record and association between models is also used in the project.
problem UI is easy to use, a suggestion would be to display tables of data better, with betterÂ spacing (the list houses page for example has the columns cramped up together)
problem The User Interface is very intuitive. The idea to add a field for preferred contact is very smart and relevant. Displaying the number of registered users, however, seems irrelevant to the house hunter and realtor. Perhaps this can be a function of the admin account where it would be more relevant.
problem No, the README file tells me what I should do to test in local computer, and does not offer admin's information or any instruction of how to operate when login to the website.
problem Yes the UI is pretty smooth and a person can navigate freely. However, in some cases there is no "back" link in the web-page, so the user has to use browser navigation to go to the previous page.
problem The design lacks dynamic paging for different users. all the links are visible to all the users and upon clicking the links an error comes that you are not authorized to perform the action. Ideally only relevant links should be visible to the user. It confuses the user regaring the actions he/she can perform. The user needs to perform all the actions visible in the UI to know what are the actions relevant for him/her. The readme file also is not well described about the actions that can be performed by the user. The readme file currently lacks any relevant information.
problem I could only check househunterÂ UI. Since I could not find admin and realtor code on githubÂ either, I believe you are yet to implement the functionality.Â The UI I viewed was easy to use. Further site is responsive and incorporates several new features like requiring password for editing the profile. I guess that was work of a gem, but either way, good work!
problem Extra credit features have not been implemented. No google sign-in and no email replies
problem Could not find custom tests.
problem With a total of 77 commits, the team has actively pushed changes to the project. Although not all commits are labeled very accurately, it is still easy to comprehend the pushed changes.
problem Just one table is used for all users. Therefore there is no distinction among the admin, realtor and the house_hunter
problem The code there seems to be well organized. But the problem is that many functionalities are missing and there aren't too much code in models and controllers.
problem Code is using Basic Ruby on Rails Structure which by default provides the CRUD Functionalty. But no details of Admin login provided. Also some of the models seem to be missing.
problem The code is well written. I noticed the controller for inquiries is well written but it is unclear how to access all those functionalities from the front-end.
problem User interface should not show the location Users#dashboard Â Find me in app/views/users/dashboard.html.erb
problem The application has bare minimum functionalities of what was required. A user signup and login has been implemented, but no information about what type of user has signed up/ logged in is available. ReadMe file is the default and no changes have been made to it.
problem The application portal is same for all the 3 users. Therefore all users have been given same permissions. Â ReadMe does not contain admin credentials . Hence, can't test admin functionalities
problem No admin account provided. No user role selections. Seems to be an incomplete project. Looks like they use scaffolding to generate the templates but didn't fill in the necessary code.
problem UI displays session info, file paths and # tags. Could be improved with little efforts
problem No information for admin login credentials provided anywhere. Under signing-up, no option to sign up as a realtor or a hunter is given. They should be able to do that because otherwise the functionalities aren't being differentiated for a hunter and a realtor.
problem The implementation can only log one type of user on and even though not specified, the user has all controls so it can be assumed its an admin. Admins can signup as well.
problem There is just one user role in the current submission. Unable to test the admin functionality
problem No, none of the controllers or models have been tested.
problem Actually i did find some auto generated test code for the controllers, but i don't think it is a thoroughly test. And there is no test code for the model.
problem total of 10 commits are visible on got but do not show a linear increment in the work done.
problem Total of only 10 commits has been made on 3 days.
problem I looked through their github commits log, and found that their first commit is onÂ Sep 28,2018. Maybe their just began to do the project onÂ Sep 28?
problem The code looks great. It's all scaffolding and really lean view modifications.
problem They use correct files to do specific behaviors and make advantage of the features ruby and rails provides. However, I think the structure of the files is not clear enough.
problem UI doesn't have proper navigation in many pages. A suggestion would be to display the data in a more spaced out way, using html tables or such methods, as it looks very cramped and confusing.
problem While some links were easy to find and navigate, after editing houses and companies, I could not return back to a good home screen. I also was unable to log out.
problem I'm docking some points here because Heroku doesn't appear to work. I think some malicious reviewer deleted the admin and the real estate company, and surprise! If a company doesn't exist, it doesn't let any user sign up.Â Â Please re-seed your database so I can test your app.
problem I cannot get access to the interface and the readme is not provided. They should provide a readme file later to state how can I test the project.
problem Have listed out the functionality which is very intuitive. But some links like 'As realtor' and 'As house hunter' are broken, making a bit of a confusion.
problem deployed on Heroku. Friendly interface, good README file.
problem Navigation is hard, while some models seem to work for most cases, inquiries for example is not tested, as im unable to create an inquiry
problem The code in controller.rb files are still incomplete for CRUD operations so I am not aware if this was tested properly.
problem First of all, this website doesn't work at all. I can't sign up as any role. And I also can't get admin's info from README file, which is an auto-generated file.
problem Looking at your code on github , you guys are following good coding practices. Just at some places you have repeated you code, for example in /myaccounts/show.html.erb you are repeating alot of code. You can create one html file for the repeated code and call it based on the object or move the repeated code to aÂ section and use it.
problem Readme file is not updated. Couldn't find admin credentials. The UI looked promising on the login page but the signup fails, i am not able to sign up either as a house hunter or as a realtor. Tried so many times in all possible ways. Without these I couldn't test any of the functionalities. The error message was "Sign Up failed, Please retry"
problem No, the README file is an auto-generated file, and there is no details in it.
problem A little confusing as there are two sign up forms one under the other and it is not clear what they are for.
problem Only the registration page is working and the interface is quite confusing as it has sign-up for both realtor and hunter on the same page which is bit confusing.
problem Admin credentials not provided, realtor and house hunter signup throws error so unable to use app.
problem YouÂ haven't specified anything inÂ your Readme file. PlusÂ you have given a link to heroku app but its not working. Please make sure its working. I saw you guys had been committing code to your master branch, have you guys pushed it to heroku. That might be the reason it got broken.
problem The UI seems to be flexible. It could include trace back to the home page. The README file could include the details to login as email. This would be helpful to use the site to it's full potential.
problem No model test cases. Controllers not tested exhaustively.
problem Team has tested hounse hunter functionalities but not admin and realtor functionalities. Register page asks us to put credentials twice. We are able to register for house hunter only irrespective of choosing any field (house hunter or realtor). Hence I am not able to login into realtor account. AlsoÂ could not find any credentials for admin, realtor or house hunter in readme file.Â Hence not able to login into admin account also. Â New link provided in document is not working. If would be great it team could check the link and come back.
problem I don't think the test part of this website is working.
problem You guys haven't implemented unit test for your project yet.
problem The house hunter model seemed to work according to most of the tasks mentioned. Not for the admin and realtor ones. Was unable to login as admin. Was unable t signup as realtor.
problem I find few changing records from github, but I can't show the process of development.
problem Only basic operationÂ is available. Need to add lots of functionality.
problem The code has good style and recognizable convention over configuration. There are some line spacing issues however.
problem The models , views and controllers are well created.
problem Everything seems good. You can move constants to a separate file and use them . For example where you are comparing =="admin" or =="realtor". You can either move them to a separate file or in database and use it.
problem Stress is given to MVC architecture. But proper comments in the code section can simplify the code understanding for other users.
problem The bulk of the code I deciphered was auto-generatedÂ via scaffold but the code that is changed follows good practices.
problem This application has the layout expected of a Rails application. However, not enough information was included in the README file about installation.
problem Not much of coding is done. Only the files automatically created by rails are present.
problem Most of the code is well organized and followsÂ "good Ruby and Rails coding practices". But I found some code has indentation problems. For example, in session_controller.rb, line 12-29 have obvious indentation problem.
problem The UI for the login page is the only thing that loads, as I'm unable to sign up. A suggestion for the future would be to provide a username and password for an account that is already created to be provided somewhere to ensure a reviewer can log in even if signing up does not work.
problem The readme file is still the default provided by rails. I don't have access to an admin login and when I try to sign up for a new account(realtor or hunter) I get redirected to a webpage telling me that something went wrong. The small ammount of the UI that does exist(login and create account) seems easy enough to understand but it appears that without logging in I cannot see any other links.
problem Readme.md file has no details on how to login and the signup pages for house hunter and realtors are not working. So no way of navigating the application fully.
problem Readme file doesn't details on setting up account for admin.Â I tried signing up new user for realtor and house hunter , whenever I try to sign up it is throwing error. it could be an issue with herokuÂ . Â however login prompt is designed very well.
problem Readme file doesn't have any information. Not able to login with admin credentials.
problem Could not test UI because links for signing up are broken.
problem Although the application is deployed on Heroku and the user interface is concise and easy to use, the README file provides no information about admin account(email and password) and application features.
problem Im unable to signup as a house hunter or a realtor, so the controllers for the same have not been tested. A suggestion would be to provide details of already created users so that reviewers can atleast log in and test other functionalities.
problem Due to the lack of provided admin login and the fact that I cannot sign up for a realtor or hunter account it is impossible to evaluate the functionalities
problem While the typical Rails files for testing were included, I did not see a complete set of tests for model and controller.
problem I am not able to sign up into the system. Neither i could see any credentials in the readme file. Hence not able to proceed further to check the above mentioned functionalities.
problem Default tests are present. Not the actual tests.
problem no work has been done. Application throws error as soon i click on sign up button and choose any type of account.
problem I looked through their github commits log, and found that their first commit is on Oct 1,2018. Maybe their just began to do the project on Oct 1?
problem Yes. I am able to login into the system via the link provided.
problem The user interface has a bare bones look and feel but is intuitive overall. The inquiries list is hard to find for the admin, and the links below the tables could be placed at the top of the screen to improve the UX. The inquiry component of the app had awkward navigation, particularly for the realtor. This is also awkward for the house hunter. Only one link is needed up top.
problem Sign-up for realtors and admin gives application error.
problem The user interface is pretty intuitive. Few things like the create house functionality is breaking on heroku and giving an application error.
problem UI is simple to follow. Enhancements mentioned below can simplify various tasks 1. Preferred contact method can be drop down with "text, mail, phone" options. 2. User role can be drop down with "buyer and realtor".
problem The user interface is average.Â The good parts I found about UI are: 1. Error messages (while registering a new admin/house hunter/realtor/house/company) were helpful. 2. Front-end checks like mail and phone number size and type etc have been used properly. 3. Dropdown for companies while registering houses, for houses while submitting inquiruiesÂ etc are properly implemented and easy to use. However, several very small changes would make the UI much better: 1. Allow a drop-downÂ when signing up as roles 2. Add inquireÂ a house or add a new house to interest list etc functionalituiesÂ at the top. If house list gets a few hundred rows long, user must scroll all the way down toÂ access the functionalities. 3. Add message asÂ to why login failed. Something as simple as "Invalid credentials" would suffice and let user know that the login is working but the password is incorrect.
problem No model tests were found, but a controller test was well tested.
problem I feel the user model is well tested. The link to houses broke through realtor role on heroku. This might just be a production issue and might work well locally in the development environment. I recommend checking the heroku logs and fixing this error. Due to this error, I could not create any house for listing. Overall, I feel it is a good job and you have managed to implement most of the functionalities. One suggestion would be :
problem You haven't completed this task.
problem Parts of the code is tested partially, none of the models are tested thoroughly
problem All theÂ tests are auto-generated.
problem Git shows too many changes which are not required. One can test thoroughly before submitting the changes.
problem The code is well formatted and follows good Ruby and Rails practice. Except for a few missing functionalities, I found the logic very neat.
problem Not defined in readme file.
problem Basic functionality and navigation is missing in the project.
problem Intuitive UI. Could add a bit of bootstrap and CSS
problem The admin login ID and password provided in the Readme won't let me log in to the admin's account. Hence, couldn't test the admin profile information.
problem UI is easy to understand, but problematic to use.Â Admin must use user ids to create hunters or realtors or inquiries and the display is via userÂ IDs too. Signup page redirect to show all signed up users. From there, any one who is not logged in can delete users. Same user can be added as house hunter any number of times with separate entries. No validations are added (I can choose role no. 5 for signup), and no error messages have been provided. Passwords are in plain text. In some cases, wrong notices are displayed - create user with wrong info gives "User account was successfully created. AAA!" which is incorrect as user was not actually created.Â Back to your page links do not work
problem Not thoroughly tested
problem The application is breaking on clicking on the basic functionalities such as show or edit. NoMethodError in Users#show ShowingÂ /home/henry/OODesign/ooddprogram2/app/views/users/show.html.erbÂ where lineÂ #29Â raised: undefined method `realtor' for nil:NilClass Extracted source (around line
problem Model and controller testing are remaining.
problem Only the controller part is covered.
problem A model has been thoroughly tested.
problem Nothing's tested
problem The phone number if exceeded 10 digits, the code breaks without giving any user-friendly alert.
problem The code seems to have followed standard practices. But there is not a lot of code to begin with
problem Code is great, usage of SearchController and PotentialBuyerController shows deep understanding of rails as a framework. Great job. But I find following missingÂ 1. In controllers, you will need to put before_action :authenticate_user! 2. Usage of devise for user management is good.Â 3. Code for Models seems to be missing, House has no entries , validations , relations etc 4. You can use rails_admin for admin account management 5. Gemfile has ref to sqlite impliescode is not deployed on heroku atleast 6. Integrations tests have been written which is good.
problem No deployed!
problem The link for deployed project has not been provided so cannot test any features.Looking at the github codes, very little has been implemented. README file that has been provided is of no help
problem The application hasn't been deployed (or they forgot to submit the deployed link).
problem Couldn't check as no deployed app link was given
problem There is no externalÂ link provided to the application.
problem No link to the deployed app has been provided, neither in expertiza nor in github/README hence unable to test
problem README FILE IS EMPTY!!!
problem No not even one model or controller has been thoroughly tested
problem Unable to test
problem There are 16 commits in all. Not a lot changes have been pushed throughout the project period
problem There is no externalÂ link provided to the application
problem very inconvenient for me to review without a deployed version!
problem When the project was assigned, the team didn't made much commits. But after a week and a half, they started committing on a regular basis. The frequency of commits was then linear, which is a good thing. The project didn't seem to have been completed hurriedly or at the last moment.
problem The user interface is very well designed, and the cleanest and the most user friendly among all that I've reviewed till now. The UI is very intuitive and the alternate shading of the lists improves legibility a lot. The only place where the UI was deficient was that it didn't seem consistent. The login / signup page had a different UI compared to other pages. I suppose improving consistency would increase user friendliness of the application to a lot of extent.
problem Once any user signs in, he/she cannot log out. This is a major flaw in the workflow
problem They team has successfully followed most of the conventions of good programming principles of ruby. The schema was very detailed and cohesive, and the variables were named appropriately and effectively. The readme provided was helpful, but the project lacked in program documentation / comments, which made me to go through each line of code to make sense out of the code. Apart from that, the practices seemed good.
problem models/search.rb line 6: Don't need to use return. controllers/home_controller.rb line 2: You should use one line to define a empty method.Â controllers/house_controller.rb line 34: No meaning line break. controllers/user_controller.rb line 19: No meaning line break.
problem The team seems to have tested the login / signup module pretty well. I could hardly find any bugs there. But the team seemed to have ignored testing other modules extensively. This is because the delete functionality in many modules is not working. For example, the realtor cannot delete houses or company, neither can a house hunter delete houses from his interest list.
problem The logout functionality does not work for any user
problem I noticed they did generate tests for some controllers, but not enough. No tests for models.
problem The user interface is very intuitive. I like the modern look and feel of the UI as well as the icons and images. It's quite professional. Excellent work! The various buttons are in good locations. The button text could be darker, however. The "new user" link could be made into a bigger button, which would make it more prominent. Right now it is hard to see.
problem The User interface is very appealing. The show view is especially remarkable that makes good use of the attractive classes of CSS and Bootstrap. The navigation links provided in every page are very helpful to explore the website. The switch user capability makes it easy for users to switch between roles without the hassle of logging out and logging in again. One issue that I encountered was that the inquiries controller has not been fully implemented, which lands the website into an error page.
problem The testing was thorough, although one model and one controller individually did not appear to be tested thoroughly.
problem Some test cases are missing for complicated flows like Real Estate Company should only be deleted when there are no realtors assigned.
problem The inquiry controller was thoroughly tested, but none of the models appear to have the same amount of testing.
problem The team has not yet started to test their models (unit test) and controller (functional and integration test). Test driven development (TDD) is a good strategy to test the application features before and during the application development phase. By using TDD, it is possible to anticipate the potential pit falls and corner cases, before starting to address the code to tackle those.
problem Lot of work is done, good job.Â Few suggestions from my end,Â (1) Tests not implemented for both model and controller (2)Â I do seeÂ Â <%= form.check_box(:role_ids, {:multiple => :true, :checked => @user.roles.map { |role| role.id }.include?(role.id) }, role.id, false) %>Â but roles are not visible in UI (3)Â Though images are uploaded , in house profile it is not displayed, also as I understand multiple images for house are allowed hence its incorrect to useÂ Â has_one_attached :image_path. (4) Validations for models such a House are missingÂ (5) Its a good coding tech to addÂ : params.require in controllersÂ (6) In UI it is good to add in tables so that all fields are alignedÂ (7) you haveÂ before_action :authenticate_user!Â but in the controller tests I do not see login as part the tests. Â Â Â Â <
problem The team has followed good coding practices withÂ sufficient priority on MVC model. Each model/controller/view has a specific role which has not been repeated in other parts of the code. Â I am giving 3/5 because 1. The code would have better readability if sufficient amount of comments are included in the code. Also, if the role of each model/controller/view is documented in the code file at the beginning then other contributors may feel easy to follow the code. 2. DRY concept can be used to a better extent.
problem The pre-configured admin details are not mentioned on Git . Therefore, I am unable to test admin
problem User Interface is nice. Team has tried keeping the UI as per standards and easy to access to user. They have also added validation. Team could give more clear and understandable errors.
problem No credentials for admin available in the README. Can't access the admin section and hence cannot grade it. Â Also, no roles have been defined in the signup form. Hence, cannot identify a general user as an admin/realtor/hunter. Â Hence unable to review the access control methods of the project.
problem (1) https://nameless-everglades-55236.herokuapp.com/users/sign_up does not let you enter RolesÂ which then fails the user signup (2) No details of admin givenÂ Â (3) Tried logging for companies and got an error, https://nameless-everglades-55236.herokuapp.com/companies With some combinations, was able to login but then again when tried updating account gotÂ "error 1 error prohibited this user from being saved:", I suspect that is because role field does not have a valueÂ (4) List of users being showed for creating a new houseÂ (5) Issues in sending messages tried sending a message got error "https://nameless-everglades-55236.herokuapp.com/messages"
problem The UI looks appealing and very easy to follow. The choice of layout properly differentiates various class of functionalities possible with the application. Yet the UI lacks the below aspects 1. There is no concept of user role in the signup form. Though there is role field, it always shows empty. 2. Few links in the layout are broken. 3. Few fields like the phone number can be made optional for creating users which eases the process.
problem i could not find admin credentials in read-me fileÂ rest of the interface is good
problem Sign up for roles not available Admin credentials not provided Can not sign up as realtor/hunter from UI. Hence can not verify any of the functionalities Can not find search feature. README file is not informative. Too short.
problem The interface is well designed and has a goodÂ UI but the basic functionalities are breaking. Unable to login as Hunter/Admin and can perform their respective operations. I assume the default user is the realtor.(as after login I can only post/add new house).
problem I am unable to sign up. I am getting the following error : Â We're sorry, but something went wrong. If you are the application owner check the logs for more information.
problem They have tested initial testing but functional testing of functionalities is not done. Once we log in , we do not understand which user is it. Realtor house Hunter.
problem The team has tested parts of different models, but none of the models is thoroughly tested for functional verification.
problem I could not see the list of test cases
problem Please submit the with pre-configured users. As I am unable to test anything.
problem The team has effectively worked on multiple commits, yet these suggestions need to be followed Â Suggestions: Â 1. Commit message carries great importance for the first level of code change analysis. So this has to explain the changes to a decent extent. Commit messages in this repository is vague; if they are meaningful, it reduces some effort in analysing the code timeline.
problem Git has been used properly but needed team contribution. There is only one committer.
problem Unfortunately, I am unable to view this Git Repository. This is, most likely, due to the fact that the repo is set to private and only available to those currently collaborating. I would suggest making the setting adjustment for the repo to be public so reviewers and TA's can grade the work that has beenÂ completed. When coding, take note of the stylistic norms of Ruby regarding method calls, parenthesis, and syntax best practices. Additionally, maintain a consistent indention scheme for ease of review.
problem GitHub link above gives 404 error. Please fix it.
problem GitHub link is not redirecting. Shows 404 not found. Please deploy the application on any of the platforms.
problem No GitHub link available as their page itself in not working by showing it is not available.
problem Github link is broken and the project has not been deployed. Don't know how to review this project.
problem The Git link provided redirected me to a page saying "404 Not found." Since there isn't any links of the deployed project, i could not test it.
problem The project is not working at all.
problem There was no link included to allow a reviewer access to the deployed application. When you are finally able to submit the appropriate working link, I would suggest having a README that contains the suggested Ruby content, along with, the information encouraged by the project write up.Â Additionally, I would suggest having a person not participating in the course to take a look at your application. He/She may be able to offer a way to gauge the ease and effectiveness of your site. They may also offer valuable insight into feature placement and page flow.
problem Their GitHub Link is unavailable and non functional. They don't seem to have uploaded on Heroku App.
problem The git may very well contain the appropriate testing files; however, I am unable to view the due to the privacy settings of the repository. I would suggest that your try and test those models/controllers that have the most complexity toÂ increase theÂ level of confidence in your product. Make sure to test the validations and boundary cases thoroughly, especially model attributes that have restrictions on things such as length and type.Â There are also several instances in the project where various users can accomplish the same tasks but with slight differences. It will be to your benefit to pay close attention in creating tests that can replicate these tasks.
problem The git link is not correct. Also, the project is not deployed.
problem Unable to view the git repository. Git is truly your friend during development. Make a habit of really committing with useful commit messages and at appropriate feature development times. My team and I found that having different commits for each feature implementation gave many options for points in time that we could revert back to in the invent that something went awry.
problem Well structured code using MVC pattern. Â Couldn't find admin credentials mentioned on readme.
problem the github code repository is concise and well maintained. The code base follows goo Ruby and Rails coding practices. The MVC architecture skeleton is implemented in an elegant manner. The desired features need to be implemented and the security issues need to be fixed.
problem You are following good ruby coding practices. For some places where you are comparing for example in login_controller.rb if params[:login][:email] == 'admin@admin' && params[:login][:password] == 'admin' You can use a constant file where you can write these 'admin@admin.com' and use that constant. Its not a good practice to write it like this. Otherwise everything seems good.
problem Ruby way of writing "if !some_condition" is "unless condition" Couple of large if else structures that could be broken down.
problem The back button is a loop. I can never traverse back to Dashboard
problem User view is easy to understand and navigate. There are certain links which don't workÂ and doesn't load any page.
problem I am unable to go back to dashboard. Hence I am unable to test the functionalities of House Hunter. Â The back button is a major problem.
problem not all functionalities are working, but the once which are working are end to end tested and works fine. there are few changes which are required - Cannot create an inquiryÂ Cannot check the potential buyers cannot list a house cannot search a house
problem YouÂ are notÂ testing anywhere yet.
problem The functionalities have been implemented , but the back button is a major problem
problem Yes, the code was written well but a lot of functionalitiesÂ relatedÂ to the session was not added.
problem Login page is not available. Also back navigation from any page is not present. Very difficult for user to come back to the last page visited.
problem The user interface is very pimitive. The team could have done much more. They have not designed it very well. Although I was not looking for graphics, but the element placement could have been much more improved.
problem The user interface is done as it would be in a basic ruby application, which is good. There is no login functionality, this is mentioned in the README which was helpful. Some functionalities which could be improved are :
problem The login page is not made. All the admins information is listed on the first page which should not be allowed. It was difficult to understand if I was under the admin's page, realtor's or hunter's page.
problem The code base is very well written and commented. The code has been done with good coding practices. The only point to note would be to update the Readme to be more informative.
problem The user interface is nice. I suggest you move the search button in the houses screen to the left. Also, "yes" and "no" would probably be more user-friendly than "true" and "false" for the basement condition. The new user window was very intuitive and powerful. Note: I found a bug in this window: changing the admin account with "REALTOR" checked causes an error. The error screen was graceful, however. Also, please use radio buttons for "HUNTER" or "REALTOR", not checkboxes. Please also include the type of the user in the users window.
problem The UI is quite good but the design can be improved. The application allows a realtor to add company details while signing up which does not make for great design. Without authentication no user should be allowed to perform any functionality.
problem No CSS has been applied. Links are redirecting to pages instead of just performing the action
problem the links tell you what page you will go to or what action you will do. It's not pretty, but it works enough
problem UI is easy to use, but not well described in the README. Please add brief Test Cases to demonstrate expected functionality.
problem The interface is basic and no extra styling is done. But overall the web application is easy and intuitive to use. The Read meÂ file of the github repo should be updated to make it more Â detailed to use.
problem No they have not. They said they will for the final submission
problem Testing has not been done for any modle or controller yet
problem No tests have been written for the application
problem No testing module found!
problem While the team did push changes to the project, there are 95 commits which are unnecessary. Instead of pushing every change to the final project, the team could have combined a few of the changes and pushed them all at once to make for better record of the changes made.
problem Teams looks fairly active but the project progress does not correspond to the number of commits made in the git repository
problem All commits happened at deployment.
problem Some of the controllers have tests
problem The User Interface was working as described in the README file.Â The UI functionality don't have any issues apart from the one noted in additional comments If team would have given some assets/stylesheets config,Â The UI would have been great on the looks as well
problem Did not see a SPEC folder in the GIT
problem The code follows the good codingÂ practices. However, there are some instances where I found commented lines of code in the controller. Ex. house_hunters_controller.rbÂ lines 23-25 and users_controller.rbÂ function switch_role
problem companies_controller along with a few other controllers are populated with the tests generated by scaffolding. No tests in models found.
problem All commits were found to be done on a single day. i.e. October 1.
problem The team has a proper concern on MVC model. Each model/controller/view has a specific role which has not been repeated in other parts of the code. Â Still, I am giving 3/5 because 1. The project has neglected DRY principle in many of the instances.Â This has resulted in a bulkier code. 2. As many authorsÂ say, a code looks good if it appears like reading a novel. This appearance of a novel like look is missing in many places which can grab other user's attention. 3. The code would have better readability if sufficient amount of comments are included in the code. Also, if the role of each model/controller/view is documented in the code file at the beginning then other contributors may feel easy to follow the code.
problem The README file is developed to include all the necessary details about the project as a whole. Great work on documenting. The UI is simple with properly designed tabs. Few enhancements could include 1. The back button is missing in a few places which might be useful for easier navigation. 2. While creating a company, if size is modelled as a drop down to take a range of values then UI would be simpler.
problem The team has tested parts of different models, but none of the models is thoroughly tested for functionality verification.
problem I can see that there are multiple commits on a single day. This might imply that team members have worked remotely without using git. Suggestions: 1. Make complete use of git when working remotely. 2. Keep pushing changes periodically to avoid any code loss and to have a timeline of changes. 3.Â Commit message carries great importance for the first level of code change analysis. So this has to explain the changes to a decent extent. Commit messages in this repository is vague; if they are meaningful, it reduces some effort in analysing the code timeline.
problem the test for controller and model has been done. and all the details have been included into the Readme file.
problem Most of it default UI provided by rails but is easy to use.
problem Basic functionality seems to be working. But no explicit test cases found.
problem GitÂ was not utilized fully. There are only a handful of commits that do not capture the development process ofÂ project.
problem You guys started pretty late seeing from your commit history.
problem Most of the commits were early this week.
problem well done work except the lack of searchÂ the README file and the UI is not so goodÂ anyway It's a good work!
problem Only basic validations have been implemented. Tests generated through scaffold are available.
problem Testing for controllers has been completed. Unfortunately test cases for models were not worked on. A suggestion could be to test validation of inquiry if corresponding realtor or house hunter gets deleted.
problem You haven't implemented testing yet. I didn't find anything in test files. Probably you'll do it in the next phase.
problem house hunter functionalties are chacked but there is scope for improvement
problem Multiple controllers are thoroughly tested, but no models appear to be properly tested.
problem Could not find commits for Test files.
problem Several of the required functionalities are available, though many links are not working.
problem Links to create new functionalities are all in place and working perfectly. However, I would like to suggest the overall redirection of the user to various places in the app would greatly improve user experience as using the back button again and again in the browser tends to become irritating after a while.
problem The UI is intuitive and the README provides basic information to get started. A universal navigation bar at the top would be very helpful
problem Its deployed on heroku, but haven't written about what all features you have completed and what all features are left to complete. Also there are few pages where you can add a link to go to main menu. Sometimes I have to go back 3-4 times to reach main menu.
problem The user interface is very confusing. It is difficult to get to the sign up page to begin with, and then the messages Isrealtor and Ishousehunter are cryptic to actual users (anyone other than computer scientists). It is very difficult to follow where the links take you on the website and what exactly you are looking at at any given moment.
problem You are following good coding practice. I have a suggestion that you can move realtors, admin and house hunters as childs of user. That is admin belongs to user, realtor belongs to user etc. Currently you have all the information in user model.
problem While the code is organized well and seems to follow the Model View Controller design pattern, the project doesn't seem to make good use of the relational database. There are multiple models/controllers (specifically the list of potential buyers) that are not necessary at all because of the relational database.
problem UI is fine but cannot access readme file
problem Comments and indentation at a couple of places can be update.
problem house_hunter_accounts_controller.rb line 28: meaningless line break. house_list_controller.rb line 8,98: meaningless line break. realtor_accounts_controller.rb line 28: meaningless line break. session_controller.rb line 6,19,20: Wrong indentations, line 9: No parentheses. user_controller.rb line 13:meaningless line break, line 52: No parentheses.
problem Git link is not working. the account might be private
problem Readme needs to be updated. UI looks good but UX can be worked upon.
problem Application is deployed on Heroku, but the user interface does not compliant with the requirement(your home page contains house information and search function before user signing in). Also it is not described in the README file.
problem It has not been thoroughly tested. user,house and company models don't have enough validations, like valid year, phone no should be only numbers.Creating a company while creating a user doesn't link that company to the user. it has to be done manually later
problem Test skeleton present. However, tests can be made in depth.
problem Basic tests are written. Could improve by adding specific application logic.
problem The link provided is not working. So, no way of finding out
problem The code in the project (not auto generated by Ruby) appears to follow the guidelines presented in class and by the style guidelines.Â The user model contains appropriate validations/syntax, while additional files contain appropriateÂ usage of parenthesis, symbols, and pluralization of file names.Â Be careful about long lines. In the repo I can't necessarily see the column number; however, but don't be afraid to break parameters up for readability. I believe the guidelines suggest not going out past col 80.Â I appreciate your indentation. A simple thing can make all the difference in the readability of a file.
problem There is no code apart from a basic scaffold generated.Â Commit ID Reviewed :Â 7fe864078b219bebacc0046b8f45c6e25cc1544c
problem The database schema only consisted of the users table, and the CRUD functionalities on the MVC related to it. Due to the less amount of content to review, a proper justification for this question is a bit tough. Even though the amount of code was less, but it followed many of the good coding practices of ruby on rails, except a few. For example, he code lacked any sort of documentation or comments. It makes it tough for the reviewer or any other programmer to make sense of the code. But apart from that, the practices seemed fine. The variables were named appropriately, functions were named effectively, and the classes were defined definitely.
problem In test.html.erb you shoud not write code like this:Â <%= User.find_by(id: session[:user_id]).name %>
problem Only user model in app/models, rest of the models such as house, realtor, real estate company are missing Same with controllers. Â In user model, could add validation for email formatÂ Â I would suggest user gem 'devise' for user management and 'rails_admin' for admin functionality.Â This helps as the gems taking control of implementation and the developers can concentrate on business logic Â If back is clicks on user edit , the user is logged out instead of going to profile page
problem As this project is in the early stages of development, the UI is minimal. The title is prominently displayed as a header on the home page and subsequent pages to clearly indicate what this application is "Real Estate manager". The login and signup links are clear as to purpose; however, the intent in the presence of the words "Hello World" besideÂ them is unclear. Additionally, the login and signup page functionalities are easily interpreted. I would suggest that the user profile actually display what kind of user they are rather than a number that only has meaning to the system, as well as, a log out link/button in the header for a user as he/she traversed your application. The README file only contains the fact that there is no pre-configured administrator. I would recommend including the suggested context from the Ruby generator and the project write up.
problem The interface was very easy and simple to use, and was very user friendly, but it lacked intuitiveness on some levels. Also, the readme file didn't state anything about the UI.
problem Apart from the login functionality nothing is done. Commit ID :Â 7fe864078b219bebacc0046b8f45c6e25cc1544c
problem For sign up, I don't understand what is the difference between "I am shopping for a house" and "I am a realtor and I am shopping for a house".
problem The README file isn't as descriptive as it should be. And UI is not very well designed. Printing "Hello World" on the home page seems to be a debugging strategy but it needs to be removed. And proper links needs to be inserted. Example: Link of 'Logout' is not present
problem Only user/realtor login has been implemented yet. Other functionality is missing. README stated that admin has not been configured.
problem The UI is simple however, because of the lack of functionality cannot be assessed properly. One suggestionÂ would be toÂ rename the label of 'back' button to 'logout'Â to make itÂ more intuitive.
problem No tests have been written
problem NO I don't think they have submitted any test model.
problem No, all tests are missing
problem I couldn't find any test methodÂ other than the one in the sessions_controller_test class.
problem The code follows ruby and rails convention, but there areÂ multiple commented files in the project such as logins.coffee and many more which have not been used in the application.
problem The database schema, especially for the login / signup functionality is very well implemented, and includes lots of features that weren't asked for at the first place. So the extra hard-work is very well appreciated. The db design is very cohesive and seems fool-proof. The rest of the programs and the functionalities follow most of the principles for good ruby on rails coding practices. But, the one thing I find missing was the lack of proper documentation within the code. Given the short time frame, not having extensive documentation and comments within the code is excusable, but there were certain points where I had to go through the whole code to realize what;s happening, which could have been avoided if there was proper commenting inside the code.
problem The team has followed good ruby coding practices. All the code is neatly written and well indented. However, the code has no comments.
problem The user interface lack multiple navigation functionalities such as it does have any cancel or back button.Â So, if a user tries to move back or cancel while creating a company, he would be stuck and would not be able to move to any other tab.
problem Admin credentials in README file not working therefore not able to test admin part. UI is confusing, there are multiple success messages displayed. Only ids are displayed in house list and no other info
problem The user interface looks pretty, is clean and intuitive. But the placement of menu buttons was rather "not-obvious". It took time for me to figure out login / signup buttons, and I also had to actively look for buttons to perform actions after signing-in, which isn't actually much user friendly. Though it may seemed cliche, but I think it is very user-friendly to have action buttons on the content of the web-page, rather than having them at the top inside the header. But apart from that, the simplicity and the look and feel was pretty good.
problem It is surely a very intuitive user interface because the ease of navigation is generally very well defined and the routes.rb file in git hub makes the session linkage explicit.Â Even, so one does fail to understand the empty blanks on their login page since there aren't any blanks at all. So, we get easily confused on what to do. Sign up is not validated for any functionality be it user or admin or realtor and we don't know what to do.Â Luckily, the README File does resolve the dilemma and help us to follow the steps.
problem No, testing portion of the code seems empty. No testing has been done
problem The login / signup module has lots of bugs. Like when a user tries to create an account with an already existing username, the application crashes. Also, a user cannot signup as both, a realtor and a househunter. Moreover, there isnt any validtion for the length of phone number, nor the validation for the email address is correct. (for example, it accepts aa@a as a valid email address). So yes, these functionalities in the login signup module could be improved, and these does not seem thoroughly tested. But the search functionality for the houses seemed to work pretty well, and as expected.
problem Well, we can say that they have indeed tested the models they have defined in their README file on GitHub. The definitions of the functionalities in the 'db' folders and the controllers folder makes it very easy to follow how they have structured the code. Also, the way the houses are added, the redirection the houses to the links such as CMU and NCSU websites is very intuitive and well thought out, and thus barring out a few minor mistakes in linking and page definitions the code has a good ability to run for the defined cases specially for the Admin to be failsafe. Only, one complaint though, the whole structure does crumble when one sees that they have allowed the admin to be DELETED. This is their biggest loophole.
problem Although scafolded code exists, there are no testcases written
problem While the application has a similarÂ layout as a typical Rails application, I noticed there were noÂ migrations in the DB. Also, the README was not formatted very well and didn't tell me much about how to install the project locally.
problem The code follows on the lines of good ruby on rails practices. However, I can see no migrations in the db folder. The readme file contains sql statements for table completion which look to be correct.
problem The source code and project structure seems fine, but most of it still looks scaffold generated. RoR conventions have been maintained.
problem IÂ was not provided a link, so I cannot see if the UI is intuitive.
problem The website is not up yet. I looked through the code. Looks like there are still some functionalities not implemented.
problem Unfortunately the app has not been deployed on a cloud platform and neither is there any description in the readme file. I suggest to use heroku as your deployment platform. You may want to look into this video here =Â https://www.youtube.com/watch?v=5kVtmnZNC8w&feature=youtu.be Â Also if you deploy in heroku, it does not support sqlite or mysql in production. Hence you will need to migrate your DB to postgres. Check out this link for help =Â https://devcenter.heroku.com/articles/sqlite3
problem If it is deployed, it is not made known.
problem Please provide the link to the deployed website.
problem The link to the deployed application was not posted and README file does not have the required information such as admin login details or how to access various features in the application.
problem I do not see the link in the readme file for the deployment in the cloud
problem I dd not find the link. I viewed the code on Github, it seems work.
problem While there are some tests for controllers, theyÂ wereÂ only the auto-created tests byÂ Rails. There were testÂ files for the models, but not test cases present.
problem Controllers have a few test cases, models have none. Some of the suggested test cases could be as follows-: company_test.rb -> company should not be deleted if not owner of company (realtor should only be able to delete company if he created it)
problem Only scaffold generated tests for models and controllers.
problem no test cases found in the test folder
problem Of the functionality the team have tried to to implement, the code quality is not poor. However, the arrangement of code is difficult to understand given that not all functionalities seem to have been implemented. The "def after_sign_in_path_for" function in the applications controller used by the devise gem, only takes realtor as a resource, I would advise using an if or case condition within the function to allow other users to login. Also, I was unable to find any implementation for making sure that only the inquiries specific to a real estate company be visible to a realtor, and similarly only the inquiries posted by a house hunter themselves be visible to the house hunter on that specific house. I would again suggest using some If or case statements in the show function of the inquiries controller to establish identity of current_user.
problem Lot of unnecessary directories are created in 'controller'
problem The code is clean and readable. Every method handles only one task. However there are two controllers for house hunters and realtors which I felt was redundant. These could have been merged and written in a single controller. There is no bad naming in the project, they have followed the naming conventions. There are no long methods. Methods have been written concisely and in a readable way.
problem Fewer commits on the project, More towards the deadline date.
problem Most of the commits are within the last 2 days before submission of project. Yes, commits for round 2 are provided properly.
problem Though the commits started late in the project's life, there were commits frequently and also after round 1. The commit messages could have been a little more descriptive to fully comprehend the commit changes.
problem The belongs_to and has_many conditions have been set by the team on the model.rb files. But there are no foreign indexes on schema.db file. I would advise using; Model foreignModel_id:dataType:index with scaffold generate to add a foreign key and in case of devise generated tables I suggest creating a foreign key with a new migration. Here's a stackoverflow link that shows how to do that, https://stackoverflow.com/questions/16257116/adding-foreign-key-to-a-rails-model
problem From the Code DB Design looks fine. They have handled most of the relationships properly. Although I believe having different tables for admins/realtors/hunters/users/roles and role maps is un-necessary and just increases the complexity of the system.
problem The AWS deployment attempted by the team does not work. I attempted to clone the repository and run it locally but was unable to. Looking at the code itself, I was able to determine that the wishlist, replying to an inquiry functionalities are missing.Â I am unsure why the team opted use the devise model generator for the companies model. The companies aren't a type of user on this project from my understanding and rather a resource. Would it be possible for the team to use a scaffold generate instead?
problem They got pretty much every basic functions in the app. But I am not sure where should I login as an admin. and there are some small bugs. There will display two "logout" button after you login as a hunter. Back does not work well.
problem I cannot access the link provided by the team. Since this is hosted on AWS, I believe they have not opened the Ip to public by mistake (I have worked with AWS before and this happens). Maybe they worked from Library or their house, and when you spawn an instance in AWS it adds the IP from where the instance is spawned to the access list, which is why I am not able to access this from my IP. This can also be a problem with the proxy server setup in the instance and since you guys are maybe doing ssh into the server to deploy your code, the default HTTP request will go to port 80 and wont be forwarded to 8080 unless explicitly specified in apache/nginx and will block the requests. Easier way would be to host the app on heroku which handles all this automatically and provides you with a DNS entry
problem The given link does not work and gives the following error: This site canâ€™t be reachedÂ 18.224.197.227Â refused to connect. Hence, cannot comment on the functionalities.
problem The APP URL provided didn't work
problem The Overall System works as it is supposed to.However,there are few functions which are not implemented. Realtors' Page: Validations for phone number have not been written because a phone number of length less than 10 is getting accepted by the system during sign up of a realtor. Houses does not start from 1 under the "Your Houses" section in the realtors page. Your Houses 2Â 3
problem Since I was unable to run the code on my local device, I am unable to test for edge cases. However I would suggest adding a destroy dependency in model files, for example for house hunters,Â has_many :inquiries
problem Cannot Access App
problem The given link does not work and gives the following error: This site canâ€™t be reachedÂ 18.224.197.227Â refused to connect. Hence, cannot comment on the edge cases.
problem There is no link to login as an admin. The site went down, so could not test further - This site canâ€™t be reached 18.224.197.227Â refused to connect. Â Search Google forÂ 224 197 227 8080 house hunters sign
problem No model tests have been implemented. Basic controller tests generated by scaffold and devise are available.
problem Some controllers are tested. Models are not tested thoroughly.
problem Dont see a SEPC folder
problem The test scripts have been written, however the scripts could have been written in a more elaborate way to include all the test cases and not just the high level tests. For example, the system accepts an Invalid phone number which is less than 10 digits of length. All these test cases could have been written and tested
problem The code is much clean and readable. All the functions are short and crisp with proper indentation . However, mostly they have tried to embed the functionalities which could have been separate to be in the basic crud functions provided by rails. for eg. here , they haven't maintained a different function for the potential buyer , instead they have used a hash for it which is embedded in the show functionality of the house controller
problem All methods and classes are well designed and serve well defined functionality. Good job! Could have named the methods and variables a little better. Each function performs a single task. Every method is short and to the point i.e does not contain many nested blocks or if else conditions.
problem couldn't relate code with the application - for eg - admin index page has Hello admin at the top, however, there is no such thing on the UI Similarly for inquiries- LIST the Inquiries- not found in UI
problem Some methods are a bit long and nest quite deep.
problem Don't see the role switch functionality and it's not mentioned in the readme file too. While adding a new house by an admin, it is seen that I can add it to a company, say, A and and also add a realtor, R1, which does not belong in company A, but another company, say, B. So what is the flow here? The end result is the house has a company A, but has a realtor whose company is B.
problem https://pure-peak-85957.herokuapp.com/houses When this link is opened after registering as a realtor and adding a house, the application crashes. All other basic functionality works well. Great job with the design and methods! The flow of the application could be a bit more clear instead of just listing all the links inÂ one page.
problem Most basic functionalities are working. Admin functions of add/delete users is now working well. One issue that I faced: realtor view house listings button not working, so most of the realtor functionalities (as they are dependent on houses) are not working.
problem Yes most of the issues identified in the Round 1 was fixed apart from below Â 1) Admin Login : While creating account The UI says password as option, but i am leave them blank 2) Realtor : VIEW Listing is not working as a result realtor is not able to see the inquireis 3) was able to delete the admin account
problem The 'View Listings' page for a realtor errors out and does not render when the admin deletes a house hunter who is also a potential buyer for various houses. The inquiries get deleted though, but the application breaks when it comes to handling potential buyers.
problem 1] when the admin deletes a real estate company it deletes the house entry but doesnot deletes the realtors entry however, for realtor the company field becomes blank. 2] when the realtor changes his company he is still able to delete and view the companies that he had listed with the previous company. 3] yes the Inquires case is handled properly .
problem Edge cases handled well. After hunter adds an inquiry, the "back" button goes again to the "create new inquiry" form, letting the user recreate the same inquiry multiple times README.md does not cover how the system handles edge cases.
problem 1) Realtor not able to view the house listing, so unable to check if inquiry deletions.
problem No testing has been done. I checked the RSpec folder (not present) and no changes have been made to the pre built testing files as well. You could have easily written the tests for the user model and controller just by looking at the cookbook application. Good job overall with the DB validations and checks in the application (for login/logout)
problem Tests are good, but RSpec wasn't used for any of them.
problem Spec folder is not there. There are just some automatically generated tests in the test folder. Model/controller testing has not been done.
problem Overall, it's good. Also in houses_controller.rb, the logic in the find_houses method should have been moved to the corresponding model. Application logic should be moved to the model. The admins_controller found in app/controllers is empty. What's it for? Also, when it comes to naming, house_controller and home_controller seems confusing.
problem The application code is properly divided into modules. the controller have defined functions for various tasks. The functionalities of interest list , potential buyers , replies to inquires are missing from the application. Class Reg1 is not a proper name for the class . Also the class is included in the houses controller which is not a good programming practice. The developers should have created a new controller for the Reg1 class. The validations are missing for Company details. Also separate sessions are created for different user types.
problem No, according to the commits record in github, I think that they seems created a new repository to replace the old one, and most of changes happened in one day, Oct 10. Besides, I cannot see the sign of team work. In Oct 6,Â one guy submited the first comit, and the other guy submitted some changes in Oct 10, which doesn't look like a team work. Since they replaced the old repository with a new repo and didn't show much sign of team working, I give they one point.
problem The use of active record is missing from the application. There are no foreign key relationships in the schema. Although the relationship are maintained in the model file. A separate database is created for admin/realtor/hunter which will store a lot of redundant data. There is no database for storing the response of inquiries. According to the db design , a house belongs to both a company and a realtor directly which is not correct.
problem The team has tried implementing a lot of functionalities as per the code. However, the below ones does not work: >The admin cannot view or delete the inquiries made by house hunter. > While trying to logout as an admin the application breaks. > The realtor cannot edit the information. > While realtor tries to add/view houses the application breaks.Â Â >While trying to view the houses as an admin the application breaks. We're sorry, but something went wrong.
problem Realtor can't sign up without specifying a real estate company. This shouldn't be the case. Realtor can't edit his profile after logging in. Admin not able to create realtors and house hunters. Nothing happens when the submit button is clicked. Later this was found out to be because of the phone number not having 10 digits. But no error or validation message was shown.Â Admin can't create new houses. Realtor after logging in can only create and view houses. No way found to view and reply to inquiries. Also, no way found to see potential buyers. House hunters can edit houses due to session issues. Â House Search feature breaks. It works only with location. Realtors are not able to add new houses. Admin can't delete a real estate company. Clicking destroy takes it back to the show page. Log out running into errors.
problem Limited functionality for admin
problem The System just works in few functions. Even though authors fix the problem that admin cannot log in in the first round,Â itÂ still lack many functions that the system supposed to have. From the admin perspetive, admin can edit, show and delete any users; create, show, edit and delete any companies, but it cannot create a new user. Besides, when I click the link of house, the 404 page jump out, which means that there is no way that I can see any houses listed. From realtor's perspertive, a realtor can sign up and log in. Apart from these, there is no other fuction that realized in the system. A realtor cannot switch his/her role or edit his/her profile, cannot list houses, choose company she/he belongs to, and reply any inquiries from hunters. From the perspertive of hunter, authors just realized the function of signup and sign in. Besides those, it doesn't have any other functions that the system is supposed to have. Besides, there are some problems in log in part. When IÂ log out as
problem 1. Problem in Admin Logout 2. No option for updating profile for realtor 3. Realtor cannot create a new company. 4. Realtor cannot view Potential Buyers of his company. 5. Realtor cannot view inquiries for a house. 6. Realtor cannot submit replies for inquiries. 7. Realtor cannot sign out. 8. Hunter cannot edit his profile. 9. Hunter cannot view Real Estate Company information. 10. Hunter cannot add a house in his interested list. 11. Hunter cannot sign out. 12. Admin cannot view inquiries.
problem 1.realtor has to choose a company while signing up. Realtor can not create a company. Admin has to create the company for realtor. 2. Realtor cannot create a house. After clicking on the create house button , some exception is thrown in the console. Realtor can not list a house. 3. Logout is not working 4. Since the house can not be listed and there are no houses in the system , other functionalities can not be tested. Â The basic functionalities are not working.
problem >Unable to test the edge cases as the many functionalities are not working as stated above. > The logout functionality does not work. User isÂ enabled to login as an admin and realtor at the same time, but cannot log out. > The validation have still not been implemented in the application for example entities can be created without adding any details in the field. Please find the Real estate company creation screen as below: Real estate company was successfully created. Real estate company was successfully created.
problem Admin can't delete a real estate company. Clicking destroy takes it back to the show page. So couldn't test the first use case.Â Realtor is unable to create new houses and admin doesn't have the option to create houses. So couldn't test the second use case. Realtors can't see inquiries and potential buyers. 'Show' page running into errors. Â Due to the combination of these issues, couldn't test any of these edge cases.
problem Poor validation checks
problem Unable to list houses in the application. Since the basic functionalities are not working , the edge cases could not be tested.
problem The team has written multiple test cases for the controllers of all the entities, however has not written any for the models.
problem No test cases for models. Controllers are partially tested.
problem Code quality was not upto the mark.Â Firstly, there were 3 separate table for admins, realtors and househunter, which caused a lot of redundancy inside the application, as well as for the user using the product. Secondly, the lack of proper documentation made it very difficult to traverse through the code.
problem the users controller has a lot of nested if block in the forgotPassword method and resetPassword method
problem In general the code seemed to look fine. There were some really long methods like in the users_controller class, so I docked a star. There was a separate method for adding to interest list.
problem The commits were not regular. The development cycle seems to be a rushed one, since the commits are too concentrated near the deadline, and too sparse in between them.
problem The system does not portray good database design. First of all, there are two separate tables for enquiries and reply to enquiries, which is highly not normalised. Also, the fact that there are 3 separate tables for the three types of users is also very in-efficient and non-scalable. It does make an attempt to map the various relationships, but it seems it is not properly tested, and is prone to many bugs.
problem Db design doesn'tÂ have key reference and 1-1 or 1-many relationships in active records are missing but the same is implemented via code logic.
problem There are a lot of functionalities missing. Like ability to add photos for the house being one of them. For the funtionalities which are present, there are quite a few bugs. For example, signing in again after signing up, realtor being able to delete any houses, whether or not listed by him, etc. There are a few functionalities added after the first round, but the implementation is not upto the mark.
problem Admin - Can't create houses, which then means i can't add to interest list or make inquiries Â Realtor - Can't view list of potential buyers for a house Â Hunter - does everything it needs to do
problem After logging in as realtor or house hunter, if we press the button create a house or an inquiry, and before creating if we press back button , the user is taken to home page where he has to log in again.
problem 85-90% of the functionalities are covered. Â Issues: 1. A realtor could edit the information of houses that were not part of his/her company. 2.Â Option to signup as both realtor and hunter at the same time is missing. 3. Role switching featureÂ is missing(if a user has both hunter and realtor roles). 4. Feature to delete the uploaded image for a house is missing. 5.Â There was no option to view the replies sent to hunters queries.
problem 1. if a real estate company is deleted has houses and realtor, then the house and inquiries are deleted too 2. when you change your company as a realtor, then you can't edit houses listed from another company, but it still shows up 3. the inquiries are deleted if the respective hunter is deleted
problem When I delete a real estate company, all the realtors in that company get deleted too. Realtors can still edit houses they made for one company after they switch companies.
problem 1. DELETES 2. NOPE 3. DELETES 4. NO EDGE CASES MENTIONED
problem 1) When the admin deletes a real estate company all the realtors associated with them are deleted along with all the houses posted by those realtors. 2) Currently the Realtor is able to edit/delete houses of other companies which is the fault in the behavior and the team needs to correct this to test this edge case. 3) If Admin deletes a house_hunter all their queries are automatically deleted.Also they are deleted from potential buyers list.
problem 1.If admin deletes a company which has realtors and houses, the realtor associated with it get deleted. 2. Realtor can change her company and she can delete the ad posts previously posted by her. 3.Admin can delete the house hunter who has several queries and inquiries get deleted automatically.
problem Except the login controller, none of the models/controller seems to be well tested.There are no test-cases written for any of the controllers, or in general any component of the application.
problem Testing has not been done. Models and controllers are well designed hence the 2 points. You could have used basic RSpec tests to validate the flow of control.
problem i looked through all the files in the test folder and don't see any tests filled in. They seem to only be the pre filled skeleton.
problem The controller and model tests were not updated.
problem Only test skeleton present, no actual tests implemented.
problem Testing is not covered.
problem Ruby guidelines are followed to good extent. Clean and legibleÂ code. A few thingsÂ can be writtenÂ in a more "ruby like" manner, like the index method of house controller. E.g. min_price = something if ... would be a better and more concise alternative. Models can have more validations. Other than that, code is well written.
problem A lot of commits were done in phase 2. A total of 106 commits were performed which is quite impressive. It shows that the team was working in a timely manner, so well done there.Â However, I deducted 1 star as I could see 2 commits done after the deadline on Oct 13.
problem 1 ) Admin cannot reply to Inquiries Posted by the users. If he can I am not able to find that option from the dashboard. 2 ) Admin cannot delete the real estate companies in some random cases. works in some. 3 ) I could not find the option to switch between hunter and realtor roles. 4 ) Search is Case sensitive 5 )
problem All the major functionalities work and most of them work. However, There are a couple of bugs that could be solved: After submitting a inquiry and clicking "back", the user is redirected to the page where all the messages in the database are shown The realtor is not able to view the potential buyers for any house The look and all the major functionalities are running smoothly. Great work on that!
problem Admin can not delete or edit companies, The search functionality for houses is not working (Filter by min price) Admin can add house to only one company. AdminÂ can not view list of users Admin can not delete inquiries from the system. Realtor can not viewÂ inquiriesÂ sent to houses in the company notÂ posted by him
problem The quality of the code is reasonably good. Would it be possible for the team to avoid using the little interpretable ruby they use in the html files and instead use the controllers and its helpers for writing all logic?
problem While Trying to delete a real estate company with existing realtors, the system is failing.
problem Handles most of the edge cases properly. There are some bugs related to Messages as i could not test it properly. In some cases deleting a user or a company fails.
problem Overall the code is written in an extremely clean and readable way. Having said that I would like to propose one suggestion which may help in future. There's 2 instances where code has been added in the index function of controllers (namely houses_controller.rb & list_of_pot_buyers_controller.rb). After the if else condition if search exists or not, the main search logic in houses_controller.rb could be added to a new function by passing the search params to that function. Similarly in list_of_pot_buyers_controller.rb, the SQL queries should be put in other functions say "def generate_list_of_potential_buyers"
problem Unfortunately, all the edge cases in the given question are failing The system encounters an error while deleting a real estate company After changing the real estate company, the realtor can still delete the house that he had created with a previous company Even after deleting the user from the dashboard, the queries submitted by the users are not deleted There was no potential buyers list available for viewing even after adding houses to the interest list myself These cases could be seen upon and improved
problem The code itself is fairly clean and readable. The class ListOfPotentialBuyers is poorly named, and I'm not sure you need a separate class for it.
problem 1. the realtors also got deleted its a pass 2.switches successfully 3.previous company house cannot be removed inquires, will not get deleted with the removed house hunter
problem most the things are done in phase 2 only. but few things are missing. house hunter can't edit/delete his inquiry. no page for house hunter to see what all he has marked as interested. Not able to figure out as a house hunter if i have marked a house interested or not. realtor not . able to reply to inquiry, its throwing error.
problem It seems evident that there are deletion issues for any resource/user that is already indexed on some other resource/user. The solution to that issue would beÂ Â adding a destroy dependency in model files, for example for house hunters,Â has_manyÂ :inquiries,Â dependent::destroy
problem 1. houses stillshow up after deleting company 2. when a realtor switches companies, their old listed house still shows up and is editable 3. no potential buyer list
problem Tests have been implemented for a model and a controller. However, I believe that they are not exhaustive. Only one test case which will succeed has been implemented. You should try to implement more test cases, like what happens when one of the things which is mandatory is absent. Further, I am afraid that the tests are not testing the correct thing. For eg,Â should create real_estate_company testsÂ assert_redirected_to "/
problem User Role-: Once a user is created, and goes to edit their profile, if they uncheck both roles there is no way for that user to get any role back. Their should be a check in the user table that both roles cannot be blank. Also, unfortunately there is no mention of how the system handles edge cases in the Readme file
problem 1) If the admin tries to delete a real estate company which has some realtors and houses, it would not delete the record, because a dependent realtor exists. Â 2) The realtor can change his real estate company and he won't be prohibited from removing houses. Â 3) If admin tries to delete a house hunter who has submitted several inquiries, the inquiries will be deleted and house hunter will be removed from the buyers' list.
problem if a company is deleted the realtor and houses doesn't get deleted. and if a house gets deleted the inquires are not getting deleted.
problem Unfortunately most of the edge cases fail. The houses of the realtors are listed even after deleting the real estate company. Also the realtors list display the realtors associated with the deleted real estate company. The realtor is able to access the houses owned by old real estate companies after changing their own real estate company After deleting a user, the inquiries continue to be listed
problem This system is not properly linked together. Real Estate companies are not required to list houses, realtors can see and respond to all inquiries from everyone, creation of inquiries is not linked to a specific house.
problem One thing is that once the company that a realtor belongs to was destroyed, he or she can also list houses, and that should be reconsidered.
problem Confusing method naming: eg can_create, can_edit, can_destroy etc all should return true/false, but itredirects requests as well, which should be done in the parent method which calls them
problem The code on Github has 1-to-n relationship between real estate company and realtor. It also facilitates realtors to create real estate companies of their own. My doubt is whether the realtor can view, update and delete the real estate company created by him, because I could not find such a functionality implemented in the application as well as the code.
problem Kind off. I felt that admin should have been able to delete the company irrespective of the realtors belonging to the company. I felt that that scenario should have been handled in one of the following ways:- 1. Realtor associated to the company should be deleted, obviously not preferable. 2. Realtor continues to exist but without the company and thereby no houses or inquiries assigned to him.
problem No test cases have been written
problem There seems to be no testing done.
problem The team has done a good job in submitting changes throughout the project. The team has not committed changes in Round 2.
problem Same issues as of first review. Cannot delete company. Reason cited is 'dependent realtor exist'. I suggest that when a company is removed, realtor shouldn't have a company too. Because a realtor can exist without a company in his profile too! Admin cannot edit his/her details
problem I could not find the filters tab in the show houses section for the house hunter. Rest, everything looks great.
problem Most of the functionalities are working correctly. One necessary feature that is not working as expected is inquiries. There are broken links when admin/realtor tries to view inquiries.
problem Cannot delete company. Reason cited is 'dependent realtor exist'. Realtor is able to deleteÂ houses that he created when he was in company A, after changing to company B. When hunter is deleted by admin and inquiries are checked, the page doesnt show up. (deployment error) Â Edge cases Company cannot be created without filling all details. This is implemented. Session control : When user signs out from a page and then goes back, the profile page should not be shown (as he is signed out). This should be considered.
problem The only thing I had trouble with was changing from a house hunter to a realtor and back. It's possible I just missed the option. In my opinion, that is a rather insignificant omission.
problem 1. When admin tries to delete real estate company that has realtors and house hunters in it, there is an error that says 'Cannot delete record because of dependent realtors'. Since real estate company is a foreign key in the realtor table, the system does not allow the deletion of real estate companies that have realtors under it. 2. When a realtor changes his real estate company, the houses that are listed by him are unaffected. The system also allows the realtor to delete houses listed in the previous company. 3. I was unable to view inquiries after logging in as admin, hence I am not able to inspect the condition of submitted inquiries after the hunter who created the inquiries has been deleted.
problem Test case 1 could have been handled better.
problem The code in this project generally appears to be readable. Home controller should probably have a different name, just because controllers are generally supposed to be plural, but there is only one home in their website. Their house search controller appears to be in the model section of the project though.
problem It would be more modular if realtors, house hunters and admin were a different table. Since they are clubbed under users table, there are many checks performed in most of the views. Cannot identify user names, company names as IDs are displayed. It would be helpful if this can be modified.
problem Yes. The team kept pushing commits through out the duration of the project. The team even kept pushing commits during round 2.Â Though it seems like only 2 of the team members did the majority of work.
problem Yes they did commit changes in round 2. But it seems only one person has contributed in a group of 3
problem The team kept on committing on the regular bases butÂ needed team collaboration. Mostly commits are from one person.
problem Foreign key integration is been done in DB, but as there are no separate active records for user types(hunter, realtor,admin) hence the 1-1,1-many relations are absent.
problem inquiry doesn't seem to belong to a house and there is no table for potential buyes
problem Some of the missing relationships I identified: 1. Company has_many houses 2. House has_many inquiries 3. Realtor has_one company
problem Active record relationships are missing. All the relations are implementedÂ through code logic.
problem Could not add a company as a realtor. Also could not attach and display a picture when listing a house. When signing up as house hunter was asked to select a real estate company. The house Interest /interest list feature Â has not been implemented. Also the inquiry is not associated with a listed house. Cannot delete real estate companies.
problem No way for a house hunter to to interested in a house. A user not able to have multiple roles
problem Potential buyers section is missing
problem This system does not seem to work correctly. When I log in as a realtor and go to view companies, I get a Something Went Wrong error from heroku, telling me to check the logs. Validation in adding houses also doesn't seem to work correctly.
problem Most of the functionalities seem to work fine. Below are some of them which break or are absent: 1.Link to view current user's company breaks and there is nothing to show. 2. There is no option to change a user's company. 3. There is no interest list for a house hunter. 4. There is no potential buyer's list for a listing.
problem Could not test most of the edge cases as functionalities have not been implemented.
problem Many of the edge cases are covered. One issue I found is that the back buttons for admin in the edit admin page and real estate companies page moves in loop.
problem Deleting a company doesn't delete houses.Deleting househunter doesn't his/her inquiries.
problem A realtor changing real estate company makes them unable to edit houses they've listed with the previous company.
problem 1. This test fails, as corresponding houses and realtors are not deleted. 2. The realtor's current company is not visible (feature break), thus it fails. 3. This test case fails as inquiry of the user is not deleted.
problem 1. If the admin deletes realtor/company accounts, house ads posted by them still shows. 2. If realtor changes his company then he can no delete the ad post posted by him previously. 3. If an admin deletes houseÂ hunters, inquiriesÂ remain saved.
problem 1. If the company that a realtor belongs to is deleted, his or her company will be the admin company, which I think may nit be the best choice. The company can be empty and in that case, the realtor should nit be able to list a house. 2. The inquiry should be able to show the hunter's name, not the code string.
problem Test cases for the user have not been implemented.
problem There could be more test cases included and did not find enough information on test cases in the read me.
problem Tested but not thoroughly.
problem Apart from the ones that are generated during scaffold, there are no new test cases added to test the application.
problem Not mentioned in readme file and couldntÂ find any in code.
problem Missing many functionalities for realtor and house hunter such as login.
problem The admin account is created in the user model instead of the database seeds file. Other than that, the project looks pretty good code wise.
problem The code is very modular and clean. There is no bad naming in the project, naming conventions are followed. All the methods are concise. There are not many nested blocks and the code is clear and easy to understand. However the functionality of creating a house is written under inquiry which makes it difficult for the user to comprehend the flow of the website.
problem I'm afraid the code is not well organized because the functions are not working properly.
problem It seems like almost all changes were made on one day for part 2 of the project.
problem Found commits only near the deadlines.
problem The team has committed changes after round one. However, there are less number of commits and are not spread throughout the life of the project. A single commit is used for various functionalities which makes it difficult to understand the exact functionality changes. The commit messages are not appropriate which makes it harder to find out what the fix is about. There are commits even after the round 2 deadline.
problem No idea if it works as there was no admin login or create company functionality.
problem There is a relationship established between users and the company. However, a relationship between a house and a realtor or a company has not been established. This has negative impacts on the functionality.Â There is no relationship between an inquiry and a house hunter or a realtor, which has impacts on the functionality. For example, if a certain house hunter is deleted from the data base, the inquiry associated with the house hunter will not be destroyed.
problem The View Inquiries link takes you to the wrong page. Users can't view nor edit their profile. There isn't (as far as I can tell) any way to post a house as a realtor.
problem Can't switch between house hunter and user. Anyone can create a house. viewing inquiries directs to creating a house. Admin not configured(that I can tell). Creating/changing real estate companies isn't implemented.
problem 1) Preferred contact doesnt have call as one of the options. 2) As a house hunter, I am unable to view and edit my profile. 3) As a realtor, I am unable to view and edit my profile. 4) Wrong error message while creating a house:Â Oops, couldn't create account. Please make sure you are using a valid email and password and try again. 5) While creating a house, the realtor is needed to list the potential buyers which is a wrong analysis. As a house hunter shows interest in the house, this information will be populated. 6) As a house hunter, I am unable to create a company. 7) As a realtor, I am unable to view or edit a company
problem View Inquiries links to the CreateHouseInformation page, and when you are creating any type of object, there seems to be no validation, and you are required to manually input things like ID. It seems like inquiries don't exist in the system, and when you create a house, it's done through the inquiry page.
problem No, lot of specified features still missing
problem The login and sign up page work as expected. But the following have changes to be implemented - The view is poorly developed. Admin login credentials are not mentioned, so could not test the admin functionality. Validation for phone number and email id has not been done. The system accepts a number which has less than 10 digits and an invalid email id. Creation of a new house is inside inquiries tab under realtors page which is misleading. Not able to associate a realtor with a company, hence not able to validate the update and delete functionality of a company from inside the realtors page.Â Not able to switch between realtor and house hunter if an user is both. Delete and update functionalities have not been implemented. Inquiry creation from house hunter page is not implemented.
problem Many functionalities don't work as mentioned in the requirement. README doesn't provide enough description on how to finish the tasks.
problem It seems not working properly. When logged in as a realtor, click on the view inquiry will jump to the house page.
problem There's no way to actually test this, but from the code I don't believe that any of the edge cases would do anything.
problem (1) Admin not implemented (2) Real estate company functionality missing. (3) Admin not implemented The Readme.md wasn't updated to reflect the state of the application. As best I can tell the app doesn't handle any known edge case.
problem The edge cases aren't testable because of the incompleteness of the project
problem Admin details in readme missingÂ Â No way to create real estate company,Â When admin tries creating new user, signup button shows, it should not be In user lists, can see multiple admin accounts with same user name , email
problem There is no admin credentials provided, so could not test the edge cases which involves admin. Could not establish a relationship between a realtor and company. There is no delete and update functionality provided so could not validate the edge cases related to them.
problem No controller nor model is tested.
problem It's hard to tell, but there does seem to be an attempt at test even though some functionality is still missing.
problem No models or controllers are tested
problem The team has to tested any model or controller.
problem Code looks okay, but I found few features missing. As far as code is concerned found admin details hard coded in the code, this is a wrong way to do.Â Â Could have used tables for better alignment
problem The edge cases have not been handled as these edge cases depend on one or more basic functionalities that have not yet been implemented.
problem The code generally is simple and understandable. Blocks are simple but maybe its because few features are missing.
problem -No validations implemented on the model's attributes. - The models do not have associations implemented.
problem Code looks good. The first cut for good too.Â I still do not see code for models in model files if an additional gem has been used it would be good to mention that in readme
problem No mapping table was found.
problem No mapping table present anywhere. No belongs to/ has_many relationship present in the models
problem No For e.g house should belong_to a real estate company but its not handled in house.rb
problem Could not really find the required relationship mapping.
problem I am unable to find many relationships in the model, though functionality seems to be in place either additional gems haveÂ been used or code has been pushed in schema.db which is wrong.
problem #NAME?
problem The system performs all the desired functionalities. A shoutout to the idea for the auto filled inquiries. I really liked that feature where the inquiry is already filled after which the user gets an option to edit the inquiry. Some parts need improvement. For ex: The link "new houses" in the house list redirects to theÂ users/edit link. Its a minor issue which could be looked upon. The layout of the homepage for house-hunter can be fixed as links overlap each other. Also, the houses list shows edit/destroy options for the entire house list, that's a bug which needs fixing.
problem All code written is clearly in separate and well defined methods. Although the program still misses out on comments, but you can still find out what a particular part does as the methods have been named appropriately.
problem In general, The code of this system is in a clean and readable, and written in the MVC way. But there are some problems in the code. For example, in the realtor controller, there is no method to handle the "join" action when a realtor wants to join in a new company. And a realtor can not receive a inquires from hunter. Besides, in the models folder, I seems redundant to me: role, users, and users_roles, making reader easily confused.
problem Most of the relationships have been implemented. I couldn't log in to the admin
problem Basic functionalities seem to be working now. I could see that there have been many functionalities been added in round2 which weren't present in round 1. Though, certain functionalitiesÂ are still not present. eg. realtor joining a real estate company.
problem Unable to view a newly created house.
problem The system has all the required functionality. However, it would also be useful if the README file explained where some of the features are incorporated. For instance, the submit inquiry field is located on the show page for the houses. This is not immediately intuitive. It could help if that is mentioned in the README
problem No, not really. First of all,Â I still cannot login in as admin according to the account and password offered in README file. So I cannot see what could happen when I log in as an admin. Even though a hunter can put an inquiry for a house, but the realtor are not able to reply it. However, compared to the commitment in round 1, they have made a lot of improvements, but the admin part is still falling.
problem Admin login is failing with the credentialsÂ provided in the readme file. Not able to test any functionality of admin. Clicking on show button for the house results in error page when I have logged in as a realtor. Deleting my own account results in error.
problem App crashes when I try to create a RealEstateCompany App crashes when I try to create aÂ House, etc App crashes when I try to add multiple Realtors into a Company
problem Cannot sign in as a Realtor. After signing in as a Househunter, you can view realtors list.
problem The basic functionalities work nicely. Creating houses, signup and signin, house search, inquiry and reply etc work correctly. All the validations are present. However a few functionalities are not working:Â 1.Â A house without a photo can not be seen (Error in showing the house) 2. Houses information (index) is shown incorrectly - Forgot to add table headings?Â 3. Potential buyer functionality not implemented correctly - Can not see any details, just show, edit,delete options 4. Admin can not delete companies, houses or realtors if they are referenced elsewhere - see next answer below for details. 5. Realtor cannot reply to inquiryÂ and cannot destroy his house. 7. Admin can not see inquiries even when some are there.
problem 1. I wasn't able to log in from the admin role to test. 2. When I tested, the realtor wasn't able to join a real estate company. 3. Couldn't login from admin account.
problem Unable to switch real estate companies, leads to an error page.
problem The feature to add a company to a realtor does not work correctly in the application. The app crashes when he chooses the company. The team could try to fix this issue and correspondingly handle the edge cases.
problem First of all, I cannot login as an admin, so I cannot validate most of edge cases. But through the way they handle the relationships between models. I think some of the edge cases may not happen after fixing the problem.
problem Application errors out in edge cases.Â Deleting house shows error. User deletion throws an error.
problem App crashes if I test any of these mentioned cases
problem Admin cannot delete real estate companies, users or houses. I found that admin can delete these if they are not related to anything else, i.e. if there is a house which is not present in interest list, has no inquiries than it can be deleted. Ditto others. I suspect that the error is thrown as the entry is being referenced in some other table as foreign key. This would imply that edge cases have not been implemented, or are for some reason not working on heroku.
problem Most models seem to be tested, with a few errors in some places.
problem The team has implemented test for the user model and controller. However, it would make for better design if they used the RSpec Framework to do the test. More comprehensive test cases could be tested such as if the passwords of the user don't match.
problem Some test cases are written but not complete for one model and controller.
problem I could not find any file in which tests have been implemented, and neither is the file mentioned in README.
problem The code quality is fairly standard,Â the code practices DRY principles fairly well. I would suggest creating new controllers for managing house hunters and realtors from admin profile since, on creating a new realtor/house hunter the admin logs out and this seems like stop gap fix.
problem The code contains comments which makes it little hard to read through.Other than that the organisational way, refactoring methods are handled good
problem The code on Github is clean and readable. The controller actions are specific and do only the tasks that are required. The naming convention used is also intuitive. The interest list functionality has not been implemented.
problem Yes, team kept on submitting their changes throughout the project. Only Readme.md file was updated in round 2.
problem The commits are many and have been done in round 2 as well. The commits weren't evenly spaced through the development cycle.
problem All commits on same day before submission
problem Can see the commits in a single shot on few particular days. Yes the team has committed changes in round 2
problem The dependencies are not handled properly. It errors out when we try to delete parent record like company or house . Use of Dependent destroy and proper mentioning on belongs to and has many relationship in all models should solve this issue
problem admin login fails: realtors and other users successful.Â all functionalities works.
problem Some of the functionalities are not fully implemented. Admin login functionality is failing. The credentials given in the Readme file are probably wrong. Houses listed by realtors are not being displayed in the index page.Â The edit, delete houses by realtor is not functional Realtors are unable to view inquiries and submit replies House hunters are unable to create interest lists and hence both interest list and potential buyers functionality is missing from the application.
problem The system works as expected and common functionality is working but still needs to focus on some areas: 1. Not able to sign in as admin with preconfigured account. 2. how to add inquiries or to an interest list.
problem Signup functionality was not working. I could not log in from the admin role and house hunter role provided. After logging in from realtor's account, the link to inquiries failed(was broken).
problem The type of user in the view user panel through admin login is unavailable, would it be possible for the team to have two separate views/controllers and CRUD functions on realtors and hunters?
problem Unable to delete users from admin Why can the admin edit password of the users ?
problem There are still session variables and route names being displayed on some of the screens which were suggested to be removed. The functionality is quite good considering there was no implementation during first review. Potential Buyers functionality is not implemented. Enquiry functionality doesn't work . It throws application error check logs error when clicked. Possibly a deployment issue. WhenÂ a new house is created , it is not displayed in the listings immediately. Admin login doesn't work. It may be possible that someone might have edited admin login during review or else please paste the latest login details in Readme.
problem Clicking on "List of inquiries" broke the application.
problem Deletion fails in most cases as dependent records don't get deleted. Model changes to add and delete these dependencies will resolve the issue.
problem After creating the user from the admin , Why I am logged into the created user ? Â Also, where can the user update the company info
problem As of now, I'm not able to sign in as admin with preconfigured account, I can't comment om test cases.
problem 1. Could not login from the admin credentials provided 2. Realtor cannot change the real estate company. He/she is able to update the real estate company information, which in my opinion is the function of the admin 3. Could not login from the admin credentials provided. 4. Realtor can list a house without giving details of
problem The admin is unable to destroy a real estate company due to the above mentioned dependency bug on the model files. Since all users are listed in a common view without information about who is a realtor and who is a house hunter, the admin would be unable to specifically test removing a type of user unless he/she creates one themselves. On changing real estate company through update for a realtor, the real estate company change was reflected else where, updation has been implemented well. The realtor is also unable to see the inquires or reply to them.
problem could not log in as admin. Rest worked as expected.
problem 1. Unable to login as admin. Hence, I was not able to test the scenario when a real estate company is deleted by the admin. 2. The list listing link shows only the 2 pre-existing houses by default. Even after applying the appropriate search filters, the newly created houses are not being displayed. Hence, I was unable to test scenario of change of real estate company.Â 3. Since the admin login is not working, the test on inquiries could not be performed.
problem Rpec file seems to be missing
problem The team has not tested model. The code in Github has the default controller tests. The team has not used the rspec gem to perform model/controller tests.
problem sessions.rb create method has 3 large code blocks for the three role types. It would have been better to createÂ separate methods for each type
problem #NAME?
problem Yes, team kept on submitting their changes throughout the project and no commits are made in round 2.
problem They made commits but some commits combined a lot of features together at once
problem All commits were on just 2 days before and on the day of submission. It will be helpful to keep committing code at the end of each day or every couple of days so that there is no major issue of merging at the end. Also it ensures that all team members are working on the same copy of code.
problem The code quality is generally good. There are several places with large blocks of commented out code that should be removed. Functions are small however, and models are used properly where they should be.
problem There are lines that were tested but commented out, which makes it little tough to read. Other than that the flow of the code, refactoring methodologies are good.
problem Unable to view an enquiry for a house.
problem The Realtor cannot delete the company he/she created. Also, if the house hunter shows interest for one house the interest and inquiry by the potential house hunter is submitted for all the house present. Admin cannot create a house and assign it to a company. Admin cannot delete a company.
problem It does seem this team tried to address my earlier feedback, but I still experienced several problems. I found the following issues: I was unable to login as an Admin. Navigation in this app was difficult.Â There were not very intuitive links. There were too many clicks to add/remove Interest. The Inquiries listing gave me an error.Â This app did not keep track of my session very well. The search Houses only had one "filter"
problem 1) If a house hunter is interested in a house, there should be only one entry specifying this interest in the database. In this app, the same house hunter can show multiple interests on the same house. This results to duplicates in db and must be handled. 2) After creating an inquiry, clicking on the Back link on the page should re-direct to /houses or which ever page was visited before creating an inquiry. This is not happening. 3) Founded year field of the company table takes any numeric value ---Â Founded:Â 465789 4) The house hunter is able to create a company which is not supposed to be an allowed operation. This happens when as a house hunter, I edit profile a
problem Realtor is not able to reply. There is no text field for the reply. Only subject and content is visible while editing and inquiry when logged in as a realtor. Not able to delete user after logging in as admin. Error page got displayed.
problem Comments from Round 1 are taken care of.Â Â Delete real estate company crashed. View Inquiry lists inquiries from all houses, including ones that are not under the same company. These should not be accessible to the realtor. He should see only ones from houses in his company.
problem Basic Function still have some minor problem. Like a househunter can view the potential buyers and when click view the inquiry, the web page return an error.
problem Unable to change company as a realtor, readme file isn't discussing any of the possible edge cases.
problem Only admin is in the system, rest all tables are empty. No dummy data is provided as of to test on multiple edge cases. There is no time to add on users, companies, houses, inquiries to perform testing.
problem I can create a company, but I cannot join it as a Realtor if I already joined a company without re-clikcing the Realtor checkbox on the Edit Profile page
problem Edge cases are handled, but arent described briefly on the readme
problem 1) Admin trying to delete a user that has an inquiry and interested in some house fails as expected but the failure is not graceful.Â 2) Admin can edit a profile by making a user neither a realtor nor a house hunter and delete that user that has inquiries and interests in/on a house. 3) Admin cannot destroy a company...this operation is throwing error but after updating a company, the company can be destroyed.
problem Admin not able to delete houses or users or companies. Unable to test a few cases due to these issues. Realtor not able to delete houses. Error page is getting displayed.
problem Edge cases not handled properly. Company delete crashing until all realtors and houses under it are deleted. House delete crashes until all inquiries on it are deleted.
problem Code is written properly. Simple and clean Every function is simple and has distinguishing work. Did not understand the need of creating MVC for search, photos separately.Â Many functionalities could have been merged together and made a defined solution. Eg house search function could have been added in House MVC.
problem In general, the code of this system is clean and readable, but there are some problems in it. For example, author didn't handle the interest list properly. When a realtor wants to see the potential buyers of a house, it does not mean he wants to see all the hunters registered in the system. Besides, the realtor can not edit his own profile can change real estate company, because the edit method in the controller is not realized. And in models, some relationships shouldn't appear because one of the model is not created, such as the model house_hunters, which has many queries, but the model query is not created.
problem Code is clean and easy to understand. Some unused/unimplemented empty function definitions are there in the files.
problem Yes, the changes were committed throughout, but the commit messagesÂ couldÂ be a bit more descriptive.
problem functions are not named properly. exampleÂ getphoto in photos_controller.
problem Yes. Team is continuously pushing changed on the github but not distributed equally among team mates. I could see 81 commits till now.
problem The team committed the changes in round 2 but overall the commits were not consistent.
problem Yes they committed a lot of code after first review which can be due to the fact it wasn't deployed by review 1. But overall the number of commits is higher than average i believe
problem Relationships have not been properly defined in the models. For example, in the company.rb file, the relationships have been commented out. Also, in the case of house model, it had only been related to a realtor and not to a real estate company.
problem Team has tried implementing relation between model, but they does not seem to work well. deleting one branch of relation does not affect other branch though they are associated.
problem Not really. First of all, as I was mentioned above, the relationship between house_hunter and query didn't handle properly. Second, a realtor should belong to a real estate company, not "has one", and the real estate company should has many realtors, and the mapping of two models does not work. The company id of realtors in realtors' list look like a set of random number, which has nothing to do with the table real estate company.
problem there is only one relationship in the whole project. Not a good database design. Plus destroying one entity won't delete another as i can see from the code. Rest i am not able to test as i am not able to login other than admin. Not able to register as well.
problem No form validation in the create new company page. For example, when 'Founded' field is given as text and updated, it succeeds but the value is saved as a 0. Admin isÂ unable to add new realtors. Throws up an error. Admin isÂ unable to add new house hunters. Throws up an error. Not able to sign up as either a realtor or house hunter. Gives the "something went wrong error". Something is wrong with the deployment. Please look into it.
problem Search functionality for houses not found. Asking for company id and realtor id which is difficult for the user to remember. A better would be to associate house based on a company name or add the house to the company associated with the realtor. Admin not able to add realtors. Admin not able add inquiries or reply to inquiries or add himself as a potential buyer. Unable to sign up as a hunter or realtor. Only admin is able to create the users.
problem 1)In the first release there was a issue in user registration. The issue still persists. Team has kept both realtor and house hunter registration on the same page that only allows house hunter to register. 2)Can not register new realtor using registration link. For simpler design, team could have simply give 2 links for 2 types of user registration. 3)Team tried covering many functionalities as compared to last release and succeeded partially. 4)Team has provided admin credentials and admin functionalities are working fine.
problem They fix part of the problems showed in round 1. All kinds of user still cannot edit his own profile, even though admin can perform CRUD of hunters and realtors. And the realtor can not replace and create a new company. The hunter can not make inquires and realtor are not able to reply them. Besides, the search filter for the houses are not working. And when a realtor views the house's potential buyers, he/she will see all the hunters registered in the system.
problem I am unable to signup so could not login and check for functionalities. But, UI is improved a lot and the confusing sign up page in round 1 is fixed.
problem Able to login with admin and use all functionalities . But unable to signup for realtor or househunter it shows the heroku page "we're sorry something went wrong"
problem not able to login other than admin. not able to register myself. edit option is not working when admin is trying to edit. inquires/respond to inquiry etc i am not able to test as i am not able to register myself.Â search not working on heroku but they have mentioned its working in local.
problem In the first round, the application was slightly performing better as compared to the final one. The team may have had troubles while merging and unresolved conflicts lead to error pages for signups.
problem Not able to test as the sign up failed and admin couldn't add users too.
problem HH is able to view all the other house hunters and their contact details which only admin is designated to view. Major privacy breach. README.md file well written.
problem 1)Admin is able to delete the company which has houses and realtor associated with it. When you try to edit houses associated with such company, the add button does not perform any action. where in if you try to edit houses, houses get edited successfully. It seems like relation between model and tables is not maintained properly. 2) While creating new houses realtor is asked to enter id of company and realtor. Â These id's are back end data with system incremented numbers and not given to user afterÂ Â Â Â registration. Hence we should restrain displaying such back end information to users.Â 3) Not able to submit inquiry. Posting an inquiry and reply to the inquiry is on same page, visible to house hunter. 4)Â With this release team has written README file very well and neatly. Also provided admin credentials. Â Â Â Below are few major functionalities teamÂ canÂ work upon: Â Â Â a)
problem Actually, all these edge cased list above are not realized at all.Â And the mapping relationships between the models don't work at all. For example, when I delete a real estate company, and I look back to realtors' list, nothing happened, because the company id in the realtors' list looks like some random number, such as a company id 6, which is not appear in the company list. And so does the house list.
problem Functionalities work fine but could not find inquiries form after logging as an admin.
problem Couldn't check the base cases, edge cases.Â Also found high similarity of program2 doc that detailed the requirements with readme
problem The edge cases lead to following results : 1. It asks for confirmation before destroying the company. After that the company is deleted even for those with some realtors and houses. 2. Unable to test due to failure for realtor signup. 3. It asks for confirmation before destroying the house hunter account. Unable to test for inquiries due to failure for house hunter signup. 4. The system does not allow new realtor or house hunter to sign up for application.
problem Models have not been tested. Controllers are partially tested.
problem No test cases apart from default test cases.
problem Team has written test cases , but they need to few more rounds of testing, including positive test cases as well as negative test cases.
problem No, they did not write the test code.
problem Some very basic testing is done for controllers, nothing in models
problem they have just tested signup.Â controller looks good, but model testing isn't complete.
problem No, this team has not tested any model. The controller tests does not handle all the cases.
problem Max commits were made on the last day of submission. No, no changes are committed in round 2.
problem Yes, the team has committed changes in round 2 also. Overall it looks like the codes were pushed to master and one go. Regularly committing the files could have been better.
problem Some of the relationships are handled in the project.Â I can't find the other important association like: 1. company has many houses(why it is commented?) 2. house belongs to a user or a company
problem DB design is not taken care of properly. Various mappings between entitiesÂ have not been established.
problem DB seems well designed. I didn't see potential buyers. That will have a relation with house such that house has many potential buyers.
problem There are some functionalities which needs to be implemented. Areas you should focus on are destroy is not working correctly in some cases,application is getting crashed again and again. admin should not be deleted by user. how is house associated with a company is something which I was not able to understand.
problem House images look broken. Destroying a company does not work, instead leads to edit company page.
problem Realtor can not have no company, realtor is forced to join one of the real estate companies. As a realtor I can not destroy the company I create, and only first real estate company on the index page has navigation buttons. And any realtor can edit the first real estate company which is not own by them. floor number can be negative. house image can only read local images, those houses created by other can not be seen. you can not create an account that has both realtor and househunter role. Househunter can not send inquiry in a house, it shows up an error said house must be exist.
problem Issues - Able to create admin accounts. View Inquiry is failing for HouseHunter. No way to see interested house list.
problem You should restrict the format of the website of company. After add a company, I can't edit and destroy my own company.
problem The developers have put in dropdowns for role selection and company selection making the interface more intuitive. The application broke in Heroku when I tried to login though it might be a Heroku specific error. The login/signup buttons on the landing page don't seem to work. In fact, none of the buttons seem to work, and I am not even getting the hand pointer as you have mentioned in the readme.
problem As a hunter, IÂ get a "View house inquiries" button but the system crashes when I click on it.
problem When admin try to delete a user, the website return some error. When the admin tryÂ to delete a real estate company, it just redirect to the edit route instead of delete the company
problem Here is something which needs to be focused: 1. I can't see the association between company and houses.Â 2. Deletion of company by admin is redirecting to show.html.erb and not deleting the company. 3. I'm not able to view the inquiries too. In most of the views, deletion is not working.
problem Deleting a house hunter does not work,Â possible error in deployment. Â Edge cases Company cannot be created without filling all details. This is implemented. Session control : When user signs out from a page and then goes back, the profile page should not be shown (as he is signed out). This should be considered.
problem destroy does not work at all, it will redirect user back to edit page of the object for houses and real estate companies. For users, if they have a foreign key association with any inquire, then you can not delete them.
problem MappingÂ of a house to a company is missing. Realtor Company mapping is also missing. Destroy feature for a house is not working
problem Readme doesnt cover the edge cases.
problem The readme seems incomplete. A lot of information couldÂ have been communicated through readme.Â As an admin, I couldn't delete any of the listed houses or companies which I think should be allowed for the admin.
problem Does not tell about how to run test
problem Rspec files are missing from the github
problem Commenting was pretty weak in the files I looked through. Overall code style looked pretty good though, I scanned through the files and nothing caught my eye as poor.
problem Looks good. There are some files which are misleading like Realtors folder has edit_company file which is blank. Also the readme.md file is missing the Admin Login Details.
problem Overall, code is clean and readable.Â Naming and project structure is consistent with good practices. One issue that stood throughout the code is that authorization is done directly in controller methods. It would be better if this common functionality was moved to a separate function call (e.g. validating user's role in houses_controller#create method)
problem There are new commits, however the quality of commit messsages is terrible. Commit message should have a short description of what was changed not just be random words like foo1, foo2 or hasdfsdsd.
problem Yes team had been pushing changes on github continuously with neat commit messages in Round 2 also.Â With 49 commits till now. Yes i can see last commit on 11 th Oct 2018. But commits are not distributed equally.
problem Although branching strategy was followed. The commits mostly seem to be made on the second-last and last day of submission. It will be helpful to keep committing code at the end of each day or every couple of days so that there is no major issue of merging at the end. Also it ensures that all team members are working on the same copy of code.
problem Yes, changes we committed in round 2. Code commit could have better by committingÂ as soonÂ as possible. Committing few files and writing proper comments and description for the commit was missing. As a reader, I was not able to understand what a particular commit meant and what module was changed because there was no proper explanation.
problem The team continued to make changes in round 2 on a regular basis. However, naming should have been more descriptive.Â InÂ many cases it is not possible to understand the scope of the commit. One team member's work is not reflected in GitHub's contributors panel. I would suggest fixing this by matching user's credentialsÂ of local machine andÂ remote server.
problem Unable to create a new house
problem The system now has the basic functionality that was missing last time like logging in. Good job on the fixes. It crashed when as a realtor I attempted to create a house, telling me to check the logs for more information if I was the owner. Still no information on an admin user listed in the github readme though.
problem There were many missing pieces of functionality. I note them below: I was unable to create a House as an Admin.Â I get an error when attempting to search for Houses.Â As an Admin,I was unable to update or create a Realtor, though I could delete them. As an Admin, I shouldn't be able to set the password of a Realtor or House Hunter, that is a security vulnerability.Â I was unable to create a House Hunter as an Admin. When signing up as a Realtor, I shouldn't be given the list of companies to join before signing up. This is a security vulnerability. As a realtor, I was unable to create a new company.Â As a Realtor, I was unable to list a new house.
problem 1. Team has worked well compared to last release on UI and triedÂ to cover upÂ all the functionalities. 2.Â I still can not see Admin credentials in ReadMe file, ReadMe file only states there will be only one admin in the system. Hence can notÂ reviewÂ admin functionalities. 3.Â I am not able to create house using realtors login as well. It seems code only supportÂ specificÂ inputs for house creation and i am not able to find those specific inputs. 4. Hence can not perform many other functionalities reviews from house hunter also.
problem Admin Login Details are not present in Readme.md file. Atleast Untill now. It may be a case of wrong Readme file commited at the last moment. I have looked into the seeds.rb file and got the admin details from there. Do make changes in the Readme file. Things which needs to be corrected: 1) Admin Should not be able to edit any of his details apart from his name. 2.) Editing a company should only update it (which is working fine). The message shown to user says a new company is created which is slightly misleading. Will be a very small message change. 3) Creating and Viewing Houses Functionality not working currently. gives Application error with message check logs for more details. 4) Admin is able to create Realtor and House Hunter. But once I delete some users and then click on Realtor's Account or House Hounter's Account options given on the UI, it throws Application error same as above. Can you explain about about why this buttons are given and what should it exa
problem nether admin nor realtor able add new houses .Â unable to send inquiry. no option to delete realtor and HH account
problem Admin credentials still not provided in the readme file. So not able to test any functionality related to admin. Creation of a new house is failing. So anything related to house module (inquiries, reply, email) cannot be tested.Â As the house cannot be added House interest list module cannot be verified. Phone Number validation is missing. Inquiry module gives error page/
problem One major problem is thatÂ I am getting an error after adding a house as a realtor which prevents access to realtor-house related features, like edit/destroy etc. Admin credentials are not specified in the README! I managed toÂ find them in the seeds.rb file.Â Most of the admin functionality is implemented, however, IÂ am getting an error when accessing new house page (Â https://rocky-sands-72044.herokuapp.com/houses/new ) and so house cannot be added through admin(same case withÂ Realtor). Houses data is missingÂ in the system. Search functionality is present in the code however I was not able to locate the proper view for that.
problem Can not create new house.
problem Unable to create houses so couldn't really check any functionality.
problem (1) I don't have access to an admin account to test this (2) There were no currently existing houses and I cannot create a new one (3) I don't have access to an admin account to test this (4) The README is still just the default one provided by rails.
problem I was unable to sign-up as a Realtor and a House Hunter with the same email.
problem 1. Team did not provide credentials in readme file. Hence can not check these functionalities. 2. Realtor is allowed to change company, but only able to create a house hence can not review further functionality. 3. Again admin credentials not given and realtor not able to create house.
problem Already covered in detail in above question. There are some issues with View and Create Houses functionality. Also Deletion of users is working fine but gives error when clicked on Realtors or House Hunter's Account Button in Admin View.
problem radmeÂ doesn't have admin details.
problem Cannot log in as admin so can't test deletion of a company.Â realtor is not able to add a company. What will happen if a realtor changes his/her real estate company? Not able to add house so can't be tested.
problem Most of the edge cases pertain to houses/inquiries/users. This cannot be tested if houses are not present in the system.Â HousesÂ can be added through admin, realtor or seed. I would suggest fixing at least admin or realtor functionality or using seed for populating data.
problem The admin model is tested however this seems silly as creation of admin accounts doesn't really matter as it is not possible. They are supposed to be predefined. The admin controller has a very extensive list of tests. Very good work here.
problem Test cases seem to be written neatly. It seems team has spent most of the time on coding, I would request team to perform rounds of negative test cases that might help them avoid functionalities fail and system credentials. System allows to provide same email id toÂ realtor as well has house-hunter, but they have also provided ROLE while signing in, that distinguishes a user who is house hunter and realtor both.
problem Favouriates controller is tested. But not in detail. It just checks if we can navigate to it.
problem Most of the test cases are auto generated.
problem The code employed good naming and seemed to be DRY and follow standard Ruby on Rails practices. The methods were kept short. HouseInterestList would make more sense as HouseInterest. Each row in the table is one wish list entry, not a list of wish list entries.
problem good coding practice followed.
problem TheÂ functionalitiesÂ of interest list and inquiries are implemented in a crude way, i.e. by creating a drop down for a listings. It becomes very tedious for the user to go and choose a house from hundreds of listings every time to just add it to a interest list. A better way would have been by creating an option of adding to the interest list where user can see all the listings. Adding a user to interest list does not add the buyer a to a house's potential buyer's list. There is no option for viewing potential buyers.
problem Nicely implemented code. Used ruby delegations appropriately, and the code is very readable.Â However, a few things can be improved.Â for eg, in inquiriy_replies_controller, flash[] is used to transfer data from the new method to the params method, which is not the correct way. Also, I believe that the implementation can be made more efficient by reducing the number of database hits. For example, in almost all the controllers, there are redundant database hits:Â User.find(session[
problem history shows lots of commits, butÂ majorly from one teammate only.
problem The team has been submitting regularly, however they have committed some of the changes quite after the deadline, i.e. 14th Oct, 2018
problem Inquiries and house interest lists should not belong to companies. They belong to houses which belong to companies. Also, a user should not have many companies. This is possible with the database and model configuration. Otherwise, the relationships were properly implemented.
problem The realtor can exist without belonging to a company, this should be corrected as the realtor must belong to a company.
problem Peak work on few days, nothing on the other.
problem The database handles all the relationships very well. On the downside, there is a flaw in database design - keeping a single user table and single role type means the same email address can not be used for both realtor and house hunter profiles. You can either create separate tables or more than one columns to determine ifÂ the same email has more than one role.
problem Since the app threw an exception on the homepage and was unusable, this score reflects what was achieved in round 1. 27/35 basic functionalities passing corresponds to 77% or four stars. The screenshots in the README.md only demonstrated definitively features that were working in the last version.
problem The Realtor cannot select an existing company and cannot see the list of the companies. House hunterÂ cannot see companies
problem Basic functionalities are working fine Except few. Team could work on below functionalities. 1. System crashes when realtor tries to create house. 2. House hunter can create company. 3. When clicked on show company, system crashes. 4. Passwords are visible.
problem 1. User cannot sign up as both Realtor and Hunter, no role switching.
problem The system is in great shape. It is easily one of the best I have seen, and they still didn't implement all of the expected functionality.
problem Issues are fixed but creating house from a realtor account breaks in heroku. I am unable to create an account which has same email address for realtor and buyer. Realtor does not have a choose company input field to choose his realtor company.
problem The role switch option between realtor and househunterÂ is not present. Further the operation cannot be performed manually also as same mail id cannot be used for creating two accounts.
problem Since the first round, authors seem to have progressed a lot, and added most of the missing functionalities. However, following are some of them I found missing: 1.There is no potential buyer's list for a house that can be viewed by a realtor., however there is a link to the house inquiries. 2. I am not able to associate a company to my profile as a realtor. The realtor should be able to work for only one company, however, here I am able to add multiple companies, which should be restricted to admin only. 3. preconfigured admin - unable to login to the system as admin
problem Several functionalities are working, however a few of them are still not.Â The list is provided below: Â A realtor can not see houses which do not have images attached. A realtor can not reply toÂ a specific inquiry, and should not be able to edit inquiries. Realtor and househunterÂ cannot register by same email Id. Admin cannot view all houses or inquiries. A realtor is able to post houses of any companies, not just the company he belongs to.Â A realtor can not choose the company he belongs to. Realtor can not see buyers even when the buyer has put the house in interest list.
problem For the same reason, 3/6 edge cases passing corresponds to 50% or three stars. the README.md was very detailed.
problem If admin tries to delete company, corresponding houses gets deleted. Similarly association between inquiryÂ and other models handled well. System goes into error when we try to create house without images, though houses gets created multiple times. (Realtors login) Team could probability add null check for empty references.
problem 1) As far as I can tell, an admin cannot delete a real estate company. 2) Realtors don't appear to have real estate companies. 3) House Hunters do not seem to be able to make inquiries. 4) The README does not document any edge cases.
problem There is no functionality to edit a realtor's company.
problem The README file is properly illustrated but it does not include how the system handles edge cases. The relationship between realtor and company is not properly implemented.
problem 1) It seems that something is wrong with admin login functionality, as I am not able to sign-in as an admin with the provided credentials, thus I am unable to test this edge caseÂ 2) Due to missing functionality of realtor being associated to a company, I am unable to test this edge case. 3)Â It seems that something is wrong with admin login functionality, as I am not able to sign-in as a user 4) There is no potential buyer's list, hence cannot test this edge case.
problem Very well implemented. All edge cases I tried are working. README.mdÂ does not detail how the system handles edge cases.
problem Could not find dileÂ in which tests are done, neither is it specified in README
problem The test cases seem to have no additional test cases other than those automatically generated during scaffold, some of the potential missing tests include testing the role based access given to a realtor, as he is able to create multiple companies.
problem The testing was incomplete, the model and controllerÂ were not thoroughlyÂ tested.
problem rpsec file found but is empty.
problem 1) No model is tested. 2) Home controller test appears to be thorough.
problem Test cases written and system is checked and positive testing is done properly. Team could perform one round of testing and solve minute errors still present.
problem Only basic scaffold tests could be found in the test folder and the spec folder did not have any tests. The README.md did not indicate where the tests were or if there were any.
problem Many 1:n and n:n relationsÂ mapped incorrectly and they cause application crash. Code does not use dependent destroy/delete when two related (RealestateCompanyÂ is deleted, HousesÂ )
problem The DB design is incomplete. Although it has the correct 1-to-n or n-to -n relationship, it doesn't have any kings of validation.
problem The necessary functionalities are implemented. The README file explains how to access some of these functionalities also. However, the company listings appear even before the realtor chooses a company. This shouldn't happen
problem There was no functionality implemented during 1st review. So there is a drastic improvement. However there are some functionalities which need further improvements. 1)Admin has no option to post or view houses.2)Admin is not able submit inquiry or reply to inquiries.3) Admin has no option currently to edit his profile. He should be able to edit his name. 4)Multiple Realtors and House Hunters can be created with the same email ID. There is no email or role validation. This will allow a lot of duplicate entries and the app will also be suseptible to attacks by robots. Can be improved by a 2 line validation code in model.5) Password should be encrypted. While entering the details too it should not be displayed as plain text. Can be improved by simply using type as password instead of textÂ in views. and applying encryption in model so that password is encrypted throughout the application6) Search House Functionality does not work when a
problem realtor can view all houses posted. realtor can create house post without join any company. add picture button is under company instead of house, and it is not working. a house can have negative floor numbers. house search function only shows the first match result instead of all. as a househunter you can edit any company, which is not allow.
problem Admin cannot see houses/inquiries List of realtors does display company information List of house hunter does not display all information
problem FIXED -UsersÂ can log in and log out -Admin can create/view realtors/house hunters/companies - Users can edit his/her profile - potential buyers funtionality implemented - inquiry funtionality implemented ISSUES - Admin cannot create houses - house hunters can edit real estate companies
problem The househunter can edit the company, which is odd.
problem The system doesn't check all edge cases. A realtor can see company listings even without choosing a company. The README does not outline exactly how all edge cases are handled
problem Along with the above improvements some of the things you might want to take care of are: Even if a company is deleted the houses and inquires remain as it is. (Partial reason is the above bug which allows to create a house and post reply without being associated to any company).When I try to delete a house it shows application error. So not able to test if dependent child records for potential buyers and house hunters are deleted or not.Â For Realtor and HouseHunter Signup, it should be allowed to signup without specifying company or other details except name, email, password as per the usecase given. This is not allowed currently.
problem you can not destroy any real estate company, realtor, or househunter as admin with any realtor, house, or inquire, it will just throw an error. you can have negative floors for house. readme file does not tell anything about edge cases.
problem What will happen if the admin tries to delete a real estate company which has some realtors and houses?: App crashes What will happen if admin tries to delete a house hunter who has submitted several inquiries?: App crashes
problem - After the admin deletes a company, itsÂ associated houses, realtors are not deleted. - Realtors who don't have a company can still post a listing, view/edit other companies' listing and also send/receive inquires.
problem The result of edge cases are : 1. The admin cannot delete real companies with realtors and house hunters. 2. The realtor can change real estate company. They ill be prohibited though from viewing previous company listings. 3. The house hunter account along with their inquiries are removed from the system. 4. The realtor account links to a real estate company with 1-to-n mapping.
problem When try to delete a user with inquiry, it return some error.
problem Test is implemented only for model. No test is implemented for controllers.
problem The admin is tested. The user model is not completely tested. Only the admin functionality is implemented
problem Only the default tests are present. No Custom tests to test model admin as mentioned in Readme file. It might me that the code is not yet committed.
problem The team has not written many test cases toÂ thoroughly tested one model and one controller.
problem inquiries controller and interests controller are tested no models are tested
problem All methods and classes are well designed and serve well defined functionality. Good job! Could have named the methods and variables a little better. Each function performs a single task. Every method is short and to the point i.e does not contain many nested blocks or if.
problem Project name could have been better. Methods were kept small. Comments were left out in some controllers/views. If-else blocks weren't properly indented in some cases. Hard-coded numbers were used for comparisons. A better way is to create enums representing different values(such as roles) and using those enums in code. This way, something like if role == 2 becomes if role == REALTOR and thus is more clear.
problem Realtor- house- inquiry relationship deleting realtors shouldn't delete houses and inquires. Interests shouldn't have been defined on the User model. Company has_many users-> Hunter doesn't belong to company. With such a relationship was, hunters could be associated to a company by editing request params before post request to create users.
problem They missed some relation such as house and inquires 1-n relation.
problem Relationship between user and company is vague. There is a separate realtor_accounts table. So users seems to be house_hunters. And house hunter does not need to have a relationship with company.
problem I was able to post house without any data filled in form. House got created successfully. Likewise for company. Phone number validation missing in Sign Up. Sort by Sqft, Price and floors are failing (going to error page) Applying price range filter and clicking once is giving expected result. Clicking on it again is resetting the filter. Could try to retain the applied filter on the html select option. When I tried to view a non-existent house manually by changing URL (example https://calm-forest-11598.herokuapp.com/house_lists/1000), I got the default Ruby error screen ("The page you were looking for doesn't exist").Â Could do a redirect to browse page :) (https://calm-forest-11598.herokuapp.com/house_lists/) Â Tried to update an old inquiry. got a new page that says "Invalid Access" as well as "Inquiry was successfully updated"!
problem min can still be greater than max in house filter
problem Most of the functionalities are implemented but I am not able to login as an admin using username password combination mentioned in readme.
problem Yes most of the required features are working fine. Some errors are there like Admin is able to add interest to houses which is an unintended feature as admin should change role before doing that.
problem The issues reported are fixed. Â Admin account can be deleted from the user listing.
problem When searching for house, type some location, hit Filter, then sort by year. Found a URL like this: https://calm-forest-11598.herokuapp.com/house_lists/filter?Location=RDU&authenticity_token=j0TTfX%2BI50fb9dL3Jg2pDB2ZM6A8bDROES%2F%2F4vuoJ%2BzTeDQdySx6e%2FmmhXeo7ra63kMBDh8RI5jG44QON6PdfA%3D%3D&commit=Filter&id=search-form&method=get&sort=build_year_low&utf8=%E2%9C%93 Passing sensitive info like Authenticity token in URL param is dangerous. Also, is it required? Â When viewing interested users of a particular house, what's the point of the url param 'user_id' ? https://calm-forest-11598.herokuapp.com/interests?house_list_id=1&user_id=14 https://calm-forest-11598.herokuapp.com/interests?house_list_id=1&user_id=1000
problem README.md file doesn't expalin anything
problem house search not working- able to keep fields like price blank during new house creation I was gettingÂ inquiry- invalid access on replying to an inquiry but it did save to the database. Â high-low links inÂ houses table erroring for realtor admin was able to add to interest list admin able to reply to queries hunter shouldn't have contact method authentication not applied throughout the app-Â https://calm-forest-11598.herokuapp.com/companies/42 accessible without login
problem Able to create two users with same email. And if I try to login with that particular email, error screen appears.
problem Yes, they have tested a controller but not the model.
problem The code has been implemented as per the Ruby standards of coding. However, the author has used numeric ids for role comparison which is difficult to map with the code. It would have been more meaningful if the author could use the
problem Instead of writingÂ role = 1. It would have cleaner if some constants were defined. Then, role
problem The code is clean and easy to follow and each method handles one task. I could not understand the reason for some of the code, like the home action in the hunters_controller - the current user's role is set to 3 without any checks. So if the urlÂ is visited directly and user's role is something else, it will be set to 3 and saved, which can result in wrong behaviours. Overall code is well written/
problem The application has almost all of the basic functionalities including pictures uploading functionality, however the below fails:Â > A House hunter is able to see the companies and edit them as well. > A realtor canÂ create houses without adding any details at all.
problem The house hunter page is not working. I logged in as a realtor and then switched to house hunter view. I was not able to see any house list, any interest list, send inquiry form etc. Deducted points for that. no filter function.
problem Following errors: Realtors home page cannot be accessed after logging in as admin.Â Signup for realtor is not working Signup for hunter is not working Realtors home page is not showing up after signing in as realtor Cannot signin as realtor with the credentials given in the ereadme
problem Admin cannot delete users Deleting a House Hunter crashes the app No validation present in any models, eg Houses/Real Estate Company Â Admin cannot delete houses
problem System works well except for the sign up feature.
problem Almost 80-85% of the features are covered. Dual roleÂ implementation is missing/not working. Signup doesn't give an option to register as both realtor and hunter at the same time. Input validations are not handled. Remove from interest list option is missing(ideally, once the user clicks on add to interest list button, the button should be changed to remove from interest list). Admin didn't have the delete option for all the users listed (this needs to be fixed). A realtor was not given an option to edit the details of the house he/she has listed(only photo adding feature was there).
problem There are several improvements over the last review. Dropdowns have been implemented, which make a huge improvement to the ease of use of the system.Â Â While the UI has become a lot better, there are severalÂ flaws:Â Admin is shown to be registered as a realtor, but cannot be redirected to theÂ pages(househunter link works). Househunter can set another hunter's interest liistÂ by manipulating id.Â Househunter can edit companies. Admin cannot destroy users,Â Admin can not create/edit/destroy a realtor - error page is shown. Realtor can list houses even if not enrolled in a company Admin can not destroy househunter. Passwords are visible to admin,. Â There are a few minor problems which, if dealt with, would make code even better:Â Proper error messgaes - while signing up with wrong password length, a herokuÂ error shows up which makes it feel like the fu
problem The readme file is very helpful and facilitates usage of the application. There are few issues which can still be resolved such as > The navigation issue still persists, for example if a house hunter wants to cancel the inquiry there is no way to do that. The user would be toggling between the inquiry index page and the inquiry submit page. > The validations have still not been addressed for example an inquiry can be created without adding any details at all with all empty fields. > If the house hunter tries to switch to the realtor view the application breaks as below:
problem 1) Admin deletes real estate company - not tested 2) Realtor sign in/signup not working 3) Inquiries not visible for househunter
problem The README.mdÂ does notÂ cover how the system handles edge cases. What will happen if the admin tries to delete a real estate company which has some realtors and houses?: System deletes the Realestate company but the app crashes when accessing the realtor account. What will happen if a realtor changes his/her real estate company? Will (s)he be prohibited to remove the houses (s)he listed in the previous company? There is no validation at all, and there is no way to have a realtor without a company. If this house hunter is a potential buyer of a house, will (s)he be removed from the corresponding potential buyers list: app crashes
problem (1) What will happen if the admin tries to delete a real estate company which has some realtors and houses? Houses got deleted and realtor got assigned with some other random company. Â (2) What will happen if a realtor changes his/her real estate company? Will (s)he be prohibited to remove the houses (s)he listed in the previous company? House also got changed to realtor's new company. Â (3) What will happen if the admin tries to delete a house hunter who has submitted several inquiries? Will the inquiri
problem When a company is deleted by the admin, the realtor's profile, belonging to that company, crashes.
problem I could not check if most of the edge cases work. All the ways I tried doing this failed: Admin cannot destroy mostÂ of the users, admin cannot view/edit/destroy realtors, admin was unable to destroy househunter account I created ( it was also registered as a realtor acc ),Â When i destroyed the company, associated houses were also destroyed, and their associated inquiries and replies were deleted so that edge case has been taken care of. Â I believe that maybe all the cases are taken care of, but I could noptÂ test them as their dependent functionalities are not working.
problem The team has not implemented any test cases for any of the entities.
problem Test for user model is done. Â One test for static pages controller is done.
problem Only basic controller tests have been provided
problem Model testing needs to be improved with more scenarios.
problem Couldn't find any testing done forÂ any controller. Model "User" was thoroughly tested.
problem Could not find the test file, and neither is it mentioned in the README.
problem codes looks clean, but there are no deployed version of the project.
problem TwoÂ names for the Realestate company references creates confusion:Â company_id,Â re_company_id
problem The methods seem like the ones created by the scaffold command. Even for the views, there isn't any code for eg. to display house delete only to the realtor who has created it.
problem Validations are not implemented in all the models.
problem There are two git links given, not sure which one to review? So reviewing the one which has more commits. Major functionalities are not implemented so cannotÂ comment on this. Namings are properlyÂ given as per the rails standard.
problem Clean and nice code. But lack of ReadMe.
problem There are no any submission for round 1.
problem The team did not seem to submit their changes throughout the project. The team have made changes only after round 1 and nothing on round 1. There are a total of 19 commits. It would have been better if the commits have been made with messages so that others can know what changes have been made in the project.
problem Not every member of team contributed. Could see some commits after the deadline of round2.
problem 29 commits total. Only one user contribute to it.
problem Can't run the application.
problem there are no deployed version of the project, readme file does not give any help, and I tried to download it, and run it locally, it is not working.
problem Link to deployed application is not given.
problem Interest list has not been implemented. Please write a readme file in your repo to let us know the admin credentials Please provide the deployment link
problem Houses can still be deleted by anyone and not just the realtor who posted the listing. The application link to Heroku or any other deployment link isn't given. Readme is not properly updated.
problem #NAME?
problem The heroku link to this project has not been submitted. So I am not able to check if the system works as it is supposed to work. But through the github link, the code seems legible. Without the heroku link I am not able to check if there is any functionality is missing or not.
problem Only the skeletonÂ of the project is implemented all major features are absent.
problem (1)No login or sing uo (2)No authorization for the user, basically, any one can do anything in this system. (3)No picture function (4)No search function (5)No reply for the inquiry.
problem can not test functionalities.
problem Please provide the deployment link
problem Readme.md does not mention anything with respect to edge cases. The linking is not intuitive. You have provided back buttons in quite a few places which redirect to that entities index.html.erb page instead of redirecting to the actual page I came from. Suggestion is put in a button for menu and link the menu to the starting page of the currently logged in entity. This will make things simpler.
problem The README.md file has not been updated hence it does not provide the instructions regarding this system. It does not mention how the system handles the edge cases. Since there is no heroku link given, I cannot test the system for edge cases and also the README.md file does not specify any details.
problem No users or other features.
problem When delete a user with inquiry data, the system crush and return an error.
problem no testing mentioned in readme file.
problem No. Edge cases not tested.
problem The team has tested controllerÂ but not model.
problem No test cases are implemented.
problem No model has been tested.
problem Fewer commits compared to other teams that I have reviewed.
problem There is no association between models.
problem Admin has a separate login url and cannot login from the same page as other users. Admin panel could be made a little more user friendly by separating links on different lines.
problem admin requires a separate url toÂ login.
problem While signing up as realtor or HouseHunter, all fields are not present. Only username and password is being asked.
problem Basic functionalities are working in the sense that able to add users but many features are missing. Unable to use same email id for realtor and househunterÂ Admin is not able to edit house records Realtor cant view other realtors Real Estate Company info not there for any house therefore it invalidates many requirements
problem Certain test cases are not possible to test due to the way edit realtor is implemented. The website takes real estate company id and not name for update. Being a user I wouldn't know the company id and hence won't be able to perform the right test
problem The basic test cases mentioned in the read me work fine. It does not cover the edge cases as mentioned above, but some of the validations I tried seem to have worked.
problem Deleting company doesn't delete it's houses. No form of cascade delete present anywhere.
problem Many normal cases are failing as told in previous case hence the edge cases specified are not even applicable
problem Unfortunately, most of the test cases failed while testing The realtor does not get deleted from the system after the deletion of his/her respective real estate company. The link to create new houses redirects to a different link, hence I was not able to create new houses and test certain cases The inquiries submitted by the house hunter remain in the database even after the deletion of the house hunter All the inquires of the particular house are shown to every realtor, which is not an ideal case These are some of the cases that need attention. Owing to the work done on remainder of the project, these changes would be implemented easily with some effort
problem Few issues that I found were : 1. different logins for different type of users 2. how does realtor switch roles between user and realtor
problem Admin model has only two tests.
problem 1. tests are too few for models 2. integration tests missing
problem Project name could have been better
problem The commits were spread throughout the project duration, however the commit messages could have been more descriptive. The team still made commit changes in round 2 which shows they have proceeded with development.
problem User model doesn't have all has_many relations defined
problem Most functionalities are working great. In the first round admin was missing some basic functionalities, now they are present and working. One issue that I came across is that while admin is creating a new company, the system keeps raising an error saying that the website url is invalid and so the users cannot create new company. Maybe, there is something wrong with the validations of Company model. However, when realtor creates the company, this error does not occur.
problem the inquiry form is not working
problem The Facebook signup which wasn't working in the previous sign up works properly. The admin, realtor, customer functionalities are working fine and I can see a lot of improvement from the previous version. The realtor can send a receive queries by the customer. However, a small suggestion would be to ask a realtor for the company name while filling the sign up form. Apart from that, the system fulfills all the requirements of the project
problem Realtor not able to remove their own company from profile Back button missing from some realtor workflows Realtor was able to updated query content
problem Most of the functionalities are implemented. However, "Not a valid URL" Error message is prohibiting from editing companies under realtors even when given a valid URL. Not able to House Hunter from the users list through admin login. The following error message is displayed. We're sorry, but something went wrong.
problem Yes, but I find a small bug, the admin can edit his profile and select change his role to realtor, although his role did not change, there is no error report.
problem Checked on a few tests tuned out to be handled. If an admin deletes either a house/company/user all the dependencies are deleted.
problem (1): Works perfectly fine (2): The realtor is able to remove previous houses! works like charm (3): Enquiries are not auto-deleted
problem could not test inquiryÂ form
problem 1) If the admin deletes a company, all the related properties will be deleted and will remove the company name assigned to any realtor. 2) If the realtor changed his or her company, the realtor cannot make changes to old posts which they have posted for the previous company they worked for. So they will not be able to edit,add or remove the houses listed in previous company. 3) If the house hunter is deleted by the admin, all the inquiries by the house hunter will be deleted and their names in the potential buyers list is removed. However, The README.md does not cover how the system handles all these edge cases.
problem When an admin deletes a real estate company which has realtors and houses, the company gets is getting deleted along with the realtors which is not the expected functionality because realtors can exist even without being a part of a company. The realtor should not get deleted from the database. Could not test whether the inquiries are deleted if the house hunter is deleted because the admin is unable to delete a house hunter from the Users list.
problem The team has tested parts of different models and controllers partially, but none of the models/controllers is thoroughly tested for complete functional verification
problem did not use Rspec, but team has done testing.
problem 3) The search method is a little long. Some of it could have been extracted to function calls. Â Otherwise, the code looks good. Methods were short and names were sensible.
problem code looks clean and neat. UI design looks very good and is elegant. Search functionality for the houses should have been in controllers and not in the model.
problem The team committed changes in round 2. However, the changes were not consistently committed throughout the project period.
problem Although the relationships have been properly handled, I see in places with a belongs_to relationship optional:true option is present which allows violation of the relationship and is a bad idea.
problem The schema.rb file should be in the repo. From the models and the migrations, the relationships appeared to be correct.
problem DB relationships looked fine. New model was created for house style which could have been a parameter in houseÂ model itself.
problem can't login as admin in the REDAME flie.
problem The admin credentials provided don't work and hence no admin functionality can be tested.
problem An exception occurred when replying to an inquiry. An inquiry could not be deleted by a house hunter.
problem can not login as an admin
problem (1) What will happen if the admin tries to delete a real estate company which has some realtors and houses? Can't be tested. (2) What will happen if a realtor changes his/her real estate company? Will (s)he be prohibited to remove the houses (s)he listed in the previous company? No realtor is still allowed to delete houses. (3) What will happen if admin tries to delete a house hunter who has submitted several inquiries? Will the inquiries be automatically deleted? If this house hunter is a potential buyer of a house, will (s)he be remove
problem 2) The realtor could only remove the houses he or she created, regardless of his or her company. The README.md was not very specific on how to handle edge cases.
problem The tests for the controllers and models were basic scaffold tests with not much meaning.
problem Sparse on comments describing functionality. Otherewise overall code quality is good, I did not see any glaring issues.
problem There is a one-to-many relationship between User and Company. A realtor model is not applied.
problem Image not showing with listed houses. Admin cannot view list of potential buyers. House Hunter also asked for company. House Hunter has the ability to add houses and list companies. This should not happen.
problem search is not workingÂ in realtor. I did not see any Rspec in spec folder. while signing up it takes password less than length 6. when realtor adds the property it does not appear in property list.
problem Fixed problems: Users can edit their name now. Admin/Realtors can create, select(only one) and change companies. They can edit their own company's information. Admin/Realtors can view/list houses and edit/destroy houses that belongs to his/her company. Realtors can switch roles to house hunter. House hunters can view/add companies info. Inquiries functionality is implemented. Issues: Houses do not show if they have basement or not. After an inquiryÂ is sent, the app redirects to an error page. Looks like house hunters can add company/houses too. These tasks should have been restricted.
problem The search properties and addition of potential buyers needed to be improved and fixed after the first round. The authors fixed all of it for round 2. The system works exactly how it is supposed to work. I could not find any functionalities that are still failing. They have added additional features like signing up with google and sending replies to enquiries via email.
problem search feature is not working. Also, I didn't find any way to add pictures of the new houses.
problem This system has almost all needed functionality, but it's by far the best I've seen. Replying to an inquiry does not seem to work properly.
problem When user is deleted the inquiry remains.
problem HH could not add inquiry
problem 1. When the admin deletes a real estate company which has some realtors and houses, (s)he can no longer view the list of other realtors, house hunters and users. The view button redirects to an error page. 2. Admin was able to view realtors/hunters/ users before any deletion happened. After the above step 1, it seems taht admin is unable to view users, realtors and hunters. So, admin cannot delete any users, realtors and hunters.
problem 1) If the admin deletes a company, all the related properties will be deleted and will remove the company name assigned to any realtor. 2) If the realtor changed his or her company, the realtor cannot make changes to old posts which they have posted for the previous company they worked for. So they will not be able to edit,add or remove the houses listed in previous company. 3) If the house hunter is deleted by the admin, all the inquiries by the house hunter will be deleted and their names in the potential buyers list is removed. The README.md covers how the system handles all these edge cases.
problem Still have lots of tests across all of the models and controllers but nothing super extensive that attempts to cover all possible cases.
problem The User model and controller has been tested. It does not test whether the system handles the case that a user uses the same email to register twice.
problem The team has tested both a model and controller. The system can handle the following cases 1)when user uses same email to register twice.Â 2)should not save user with password less than 6 chars. 3)should not save user with invalid email 4)should not save user without email
problem There are no big functions or nested blocks. The code is very modular. However, there are no comments in the code which makes it hard to read. Few methods and controllers are unnecessarily createdÂ for example: home_controller.rb which has no functionality except the view. There is a method set_company in companies controller which does find rather than update when you go with the name. There is separate controller for inquiry and reply which is not needed. All these make the code base heavy.
problem The team has been committing the changes continuously from the start however there are only few commits after the first review deadline. The modified code is pushed in one huge commit with 36 changed files and the following commits have very minor changes, so this shows the changes are not continuously updated to the repo. For every modified functionality, they could have committed the changes.
problem Inquiries have proper relationship with house and user. But, there is a generic User and Company with n:1 relationship, however this means there are multiple hunters for one company which is not the mentioned functionality. Rather ISA hierarchy could be used for the users to differentiate the realtor and hunter and the schema could be modified with 1:n relationship between company and realtor only.
problem There are no houses in the database. So search functionality could not be tested. While signing up, phone number takes alphabets as input. Email id does not check for format abcd@domain.com. A realtor who is not assigned to a company is able to destroy a house created by another realtor which violates the functionality. A new company was successfully created by an admin but could not be destroyed. When attempting to delete the company, got error:Â We're sorry, but something went wrong.
problem In the User model, this specific association "belongs_to :company"Â may be true only if he is realtor.
problem Please refer additional comments section for detailed review.
problem Handled all the task separately and have maintained a good modularity between the functions. So have kept up well with the good code pratices
problem number of commits done are frequent enough .However, still not very consistent.
problem All the associations are specified and all the associations specified are in correct order.
problem The system works as expected. However, some details are left out. for eg: back link in admin
problem 1. All profile functionality/link not working for admin and hence not able to view any profile updates about the realtor.so not able to test the mentioned edge condition. Not able to edit or destroy or create any entity like realtor, househunter through admin login
problem Yes test succesfully implemented
problem Once logged in, it shows Signed in successfully twice.
problem The house doesnt get destroyed. Destroy functionality is not fixed.
problem Cannot see all profiles/users. The app crashes. Thus cannot check destruction of Houses, Users.
problem Yes mapping is handled well in model classes
problem Search filter on home page not functioning well. User profiles not visible to admin No 'add new house' for admin can not create/delete/add a new user
problem Cant test this feature as I cant add admin/buyer accounts through admin.
problem Yes, the team has actively committed changes on githubÂ during round 2
problem When as a admin, you click on the all profile, it will be redirect to nowhere. Not every hunter can reply every inquiry.
problem The system did handle the 1-to-n and n-to-n relationships properly. The real estate company and realtor relationship was mapped as 1-to-n to handle their operations.
problem The team improved the program's functionality by including admin functionality to view and destroy a list of house hunters. The team also added the realtor actions of replying to inquiries by house hunters.
problem The system performed better from the improvements from first round. The team worked on the problems like removing cancel account feature for admin.
problem The team has thoroughly tested the realtor and admin model and controller. The tests performed checked the functionality for theses models to work according to the project description.
problem The system was tested for the above test cases and yielded the following results: 1. The admin can delete real estate company even if it has some realtors and houses. The realtors and houses accounts are not deleted. Only their profiles for the company are removed. 2. The realtor can change their company. They will not be able to remove houses listed in the previous company. 3. The admin will delete the house hunter along with their inquiries. The house hunter would also be removed from the potential buyer list of company. 4. The realtor account could view the list of their houses and inquiries by house hunters for the house posted.
problem I can see fewer bug fixes in round 2. Specially when some functionalities dont seems to work.
problem Some code cleaning to remove comments could have been done. Also, a comment on the important functions would look better.
problem The relationships are defined and the mapping is done.
problem There are bug fixes present but there are functionalities still failing The Admin logs in to find the list of houses in the new page Also, the admin is not able to go to the 'All Profiles' page.
problem Readme could include more steps for testing and clear instructions or a little more explanation of the workflow. There could be more edge cases tested for the admin.
problem The code was committed throughout the project. The code was committed in the second round too.
problem Team continuously pushing changes into github. I could not see distribution of work done equally. I could see 46 commits with a neat and easy to understand README file.
problem DB relationsÂ are handled properly but dependent destroy is not mentioned because which there are issues when destroying entries which have a foreign key dependency.
problem Team has tried very well to associate relationship between models. It can be seen implemented, But thats also causing system crash when conditions not met.
problem Foreign key integration is been done in DB, but as there are no separate active records for user types(hunter, realtor,admin) hence the 1-1,1-Many etc relations are absent.
problem Destroy not working Unable to create user from admin
problem Inquiry part seems to be a bit confusing. The reply messages showed on the page is confusing. Displaying the message that "error is occurringÂ on Heroku but email has been sent doesn't look good."
problem Team has tried very well to fix the problems from first release and succeeded partially. Errors and form validations are still not specific. Below are few basic functionalities team could work upon. 1. House hunter is able to create and edit company as well as houses. 2. Admin can create users but no passwords.
problem 1) logged in as a house hunter, I can edit a house, which should not be allowed. 2) logged in as a house hunter, I can edit the company, which should not be allowed. 3)Â Founded:Â 19677689Â ----- the company year can be any numeric value 4) logged in as a house hunter, I can destroy house, which should not be allowed 5) logged in as a house hunter, I can destroy company, which should not be the case 6)
problem Search for houses is missingÂ While submitting inquiry, the system errors out but that has been documented. This was also pointed out in earlier review
problem UI for new house needs improvement. Forms need to be more precise rather than adding many radio buttons as in the case for 'New House'. UI for Inquiry/Reply needs to be more clear.
problem Admin 1. Admin can not see all the inquiriesÂ by house hunters. Hunter 1.House search feature -Not implemented. 2.House Interest /interest list feature -Not implemented.Â 3. Even a hunter can post an ad of a house and create a company, missedÂ implementationÂ ofÂ basic checks on user roles. 4. The inquiry is not associated with the house, a separate tab is given with aÂ generic form where the hunter has toÂ select a realtor and that is failing when clicked on submit(maybe a HerokuÂ glitch ). 5.No record of submitted inquiries. Relator: 1. Seeing potential buyers -Not implemented. 2.Inquiry view/reply- -Not implemented. 3.Can post houses for any user(i.e under any company and under any realtor or hunter) Â Many functionalities have not been implemented, if https://nameless-everglades-55236.herokuapp.com the link they have submitted for round 2.
problem Unable to create company from admin
problem Inquiries weren't mapped to houses. DEpendent destroy missing in companies for houses, hence getting an error when trying to delete companies which have houses. Admin is able to add users but they were not able to sign in as they are not created with a default password, but just added to the users table.
problem Team has tried well to cover up edge functionalities but still can work on below measures: 1. if we try to delete an entity associated with other entity, system crashes. 2. I can not see company field associated with realtor while creating a realtor. 3. Inquiry functionality is difficult to understand. As mentioned in Readme it does go into error, but i did not receive any mail for it. Also I can not see inquiry associated with house. 4. We can upload image but image is visible as activerecord id and not as image when viewing the house. Â Â Potential buyer functionality not working. Â Â Search house functionality not working.
problem 1) The admin can delete theÂ house hunter that has an inquiry but the inquiry is still available. 2) Realtor is able to edit and update a company which is not listed by him/her. 3) Realtor is able to edit and update the house that is not listed by him/her. 4) Realtor is able to destroy a house that is not listed by him/her.
problem Readme does not talk about edge cases but it covers how to to access the website. Good thing is that most of the errors pointed out in the prior review have been taken care of.Â Search is missing
problem 1.Admin can only delete a company which has no users(realtors/hunters), else he is unable to delete it. 2.Realtor cannot change his company and can post an adÂ under any user. 3. House hunterÂ inquiry feature is absent hence could not test this test case.
problem Test Cases are written very well and system is tested well till some extend but many small cases needs to still handled.
problem Integration tests don't cover authentication
problem Code mostly follows good styling guidelines but thereÂ areÂ a couple of issues. I would suggest splitting nounsÂ when naming classes (e.g. PotentialBuyer instead of Potentialbuyer). Spacing is inconsistent in some classes (househunter_controller.rb#search and houses_controller.rb#show). There are some cases when decompositionÂ and moving functionality into a separate method would make sense. For example in search method of househunter_controller.rb class, ifÂ statements could beÂ movedÂ to a separate method with a descriptive name.Â This would make code more readable. There are instancesÂ where code is commented out (e.g. inquirydetails_controller.rb). Removing that commented chunkÂ entirely would make code cleaner.Â Deleted chunk could always be referenced in git history.
problem The team has total 50 commits. However, they have made commits for the code during the end days of round 1 and round 2.
problem With a total of about 55 commits, the team has made more or less periodic commits. Labels for the commits could be better so it becomes more readable
problem The team has a well documented history of commits. The team has been regular in updating the github repository. The team has kept on updating the repository through both the periods of the submission. The team also has used proper commit messages to document the commit history. The readme file has also been updated regularly and contains detailed report on the functionalities associated with each user role. Also the testing information has been updated on the repository. The team could have added information on how the tests can be run . The team could have added information on how to setup the environment after cloning the repository and what all dependency information is associated with the application. The readme file could have been more structured with proper titles and paragraphs.
problem I really appreciate the organization of your code. Everything is grouped in appropriate folders and easy to navigate. I also like how most of your code is indexed and spaced. Great readability. Functions are clearly written to handle exactly what the name indicates. There are a few places where the continuation of parameters should be realigned (examples: company_params in Companies Controller and format of website in Company model). Overall great use of Ruby styling standards.
problem Short methods - Good. project structure - good. I feel you haven't committed everything to GIT. Please check that.
problem The code is written very cleanly. The only slight problem I found was the "search"Â method in Houses_controller is too long as it has a lot of nested if statements.
problem Changes were committed only at the last moment at once. Please commit the changes as soon as development is complete and the code is tested.
problem Changes to application continued throughout the second round of project submissions. Many of the commits deal with the adding additional functionality to the company controller, as well as, additions to the ReadMe. I can see that good work was made toward implementing missing functionality from the first round of submission.
problem I see only 1 contributor. Also only once the commit was made.
problem Many appropriate relationships are implemented. (a) companies(1) to houses(n) (b) house(1) to photo(1) and (c) house(1) to possible buyers(n)Â . I believe there should also be an association with how there a realtor can only belong to one company. This will ensure many necessary functional dependencies are in place for the required application flow. Keep the ones you have and continue to add missing associations as you go through the requirements check.
problem User model doesn't include any relationship with other models.
problem Not able to see the mappingÂ between inquiries and houses.Â Also, not able to see mappings between potential buyers and houses.Â Did you forget to commit? Because the deployed version is working but GitHubÂ doesn'tÂ have the latest code.
problem I didn't see any mapping done between tables, for example,Â the company-realtor relationship isn't shown 1-to-n.
problem The application has really come a long way from the previous submission. I believe most of the page routes follow an appropriate application flow. There are several of the dependencies that are evidently not implemented do to the following observations: (1)Â Users are able to assign him/herself a Real Estate Company that doesn't exist in the system. This assignment should only be made with existing companies to fulfill the requirement of mapping a realtor to a single company. This missing dependency also reflects in the creation of houses. Realtors are able to create houses that are not listed with the company that the realtor is associated with. This association should be automatically made according to the company assigned to the realtor. (2) Users can be both a hunter and a realtor at the same time and can switch back and forth. How do you differentiate between a users abilities? Probably the best option would be to only allow users to be either a house hunter or a realtor. That would eliminate some
problem Nice work implementing image upload for houses. I found some functionalities missing: - After deleting a company, an error page shows up instead of a valid page, also sometimes the company does not get deleted - Company edit link goes to home page instead of edit form - Realtor can create a house even though (s)he has no company - Interest list page for hunter loads 'page does not exist'
problem Deletion of House by admin is failing. Privacy breachÂ - As a user, I am able to see details of all other users. Only admin shouldÂ be able to see details of other users. Overall very good effort. IfÂ the above issues weren'tÂ there, I would have given full points.
problem New houses are not adding.
problem I couldn't log in using the admin credentials. Rest worked fine for me. Couldn't add houses in my interest list as a House Hunter.
problem Success in edge case testing is determined by the association of the module, to self or with other modules. Many edge cases in this application are dependent on relationships between modules. For example, because houses are not properly associated with realtors or companies, reassigning a realtor's company appears to have no affect. Administrators are not able toÂ delete users or companies, butÂ I would image it would not throw an error. There are cases that I tested that dealt specifically around the models. Example: user accounts can be created with the same email accounts as long as they are of different user types.Â This and other edge cases of it type proved successful. It would be great to have edge case information listed in the ReadMe to clarify how these cases were dealt with. Again, implementing the necessary dependencies between models will help to eliminate many of these edge case issues.
problem Not handled (1) - No actual link created between companies and users as user just stores the company name as a string. Instead, saving the company_id for the user will create a relation between them as the company_id will act as a foreign key. That way edge case example (1) can be handled. Not handled (2) -Â Realtor can edit/delete any house that (s)he created even if company changes. Handled. When a user is deleted, (s)he is automatically deleted from potential buyer list of house. The README.md does not cover how the system handles edge cases.
problem Delete of company is not working. Deletion ofÂ a house is not working Admin should not be able to change/add to his role. I was able to make admin as a realtor. SystemÂ should not allow that
problem If as a realtor, I am trying to update my profile where I only change my company to a random companyÂ "ABC", it is updating just fine which I believe should not be done because the company doesn't exist and is not even being added to the company list as a new company. Couldn't check any of the admin's functionality. Couldn'tÂ sign-up as a Realtor.
problem There are some really great controller tests included in this application. Most of the functions in each controller are tested to ensure that they are returning and routing to the appropriate pages. Unfortunately, there are no model tests implemented. Model tests should be written to test that the appropriate attributes and relationships of each model are implemented successfully. It will prove extremely helpful in the improved functionality of your application. Make your model tests look like the controller test and you will be doing great!
problem Some tests present only for houses controller.
problem Only auto-generated test cases present.
problem I didn'tÂ find any testing done for model or controller. Nor anything was mentioned in the readme.
problem The code looks comprehensive to a good extent with the usage of comments and clear naming. 1. Adding the not interested feature is aÂ plusÂ point. 2. The naming is done well with attention to the singular andÂ plural nouns for models and controllers. 3. NoÂ problem with respect to the coding clarity.
problem The team has a very well documented history of commits.Â The commit history seems to be well spaced over the entire period of the project development cycle. The team has commits in each of the submission periods and have kept on adding functionalities and updating documentation. The team could have updated their readme a little bit more and added information regarding all the functionalities being assigned to individual roles and how the user experience is set up. Also the team could have adde information on how to run tests in Readme.md file
problem No form validations
problem real estate company-realtor relationship should be 1-to-n -Â missing
problem company realtor relation should be 1-n but isn't. also realtor , house_hunter should belong to user.
problem Models/Schemas do not have the relationships defined. Looks like manual table updation on actions which makes it difficult to maintain long term.
problem Admin - As an admin, when creating a user, there is an option to create an admin - Can't add a house, gives me an error ( im not adding a picture when i save) - can't make inquiries - can't add houses to interest lists - new hunter/realtors i made did get added to the table of all user Realtor - when i switch companies, the previous houses listed from that company, don't appear again. Hunter - search doesn't work - can't make inquiries or add houses for interest list -
problem When admin deletes a company associated with a realtor, it gets reflected in the realtors profile. His company name shows nothing and the houses listed were also deleted. Admin is not able to view house hunters profile (error in deployment), but can view the same using Users section. When a user is deleted by admin, his inquiries are removed and he is no more a potential buyer too. When realtor changes/ creates new company, his previous company houses are deleted. This is reflected in the admin table too. Realtor is not able to view houses listed by others.Â Edge cases A company can be created without filling in the fields required. (Yes an empty row is displayed to the hunter when a company is created without any detail). But it displays the Company number (row number) while seeing the houses. So a house is shown for a company that doesnt exist in the View companies page. Session control : When us
problem 1. when a real estate company is deleted, then the house associated are also deleted 2. when i switch companies, the previous houses listed from that company, don't appear again. 3. cant make inquiries
problem error w/o company for realtor on viewing buyers empty companies- validation missing for empty info on companies admin view - realtor show not working admin view - hunter show not working Search by area missing- no fields to search by area
problem 1) The houses controller handles multiple users. It would make more sense to call methods to handle the case of each type of user. 3) The houses controller also has several long methods. These should be broken up into method calls.
problem The code quality is well written. Many of the functions are doing only one thing at a time. The only limitation I could observe is lack of comments in controller as well model.
problem There are quite a lot of commits meaning that the team could have grouped some of the changes together into one commit instead of commiting every small modification to make them more meaningful
problem DB design is kind of ok, but there are redundant tables for roles/realtors/hunters/admins and users. I believe all this can be combined into one using proper fields and access control. This would have helped you guys keep the code easier as well. Everything else has been handled properly.
problem I can't create a house with no basement as a realtor. It also deleted my image after I uploaded it in this case, before it redirected me to the new page with error information. Also, potential buyers are listed twice (I'm assuming because they liked the house and submitted an inquiry to the realtor associated with it.).
problem The app has the functionalities but the user display is available to all users even though that functionality has to be exclusive to the admin of the app. The realtor also has no means to add a new company and there is no way to edit the user's profile
problem 1Â > No Option to switch roles between hunter/Realtor 2 > No default admin/realtor/hunter account. Maybe you forgot to run db:seed on the server 3 > No validation for Email while creating a company. Any string can be typed in. 4 > Inquiries can only have 1 reply which is a field in DB which gets updated
problem As a realtor, i tried to list a house with no basement, but it won't let me save it saying that an error is prohibiting me. It says basement is blank, when i clearly am selecting the no option. when i changed it to yes, it saved fine Â As an admin I can't see potential buyer list for houses
problem The realtor cannot choose company so the edge case that handle change in company is not handled
problem 1 > Admin login is not working for me 2 > Since I cannot use Admin Account, i cannot test edge cases related to creating/deleting users or creating/deleting Companies 3 > Search is working but is case sensitive.
problem 1) i deleted a company that a realtor was assigned to and it was deleted successfully but the house listed by that company is still in the house list 2) When i switched company for a realtor, i could still deleted the house i listed when i was a previous company 3) when a househunter who made inquiries was deleted, it got rid of their inquires from the system
problem Yes Most of the issues identified are fixed 1) Admin not able to delete user accounts
problem Code looks very clean. I did find some commented lines of code though.
problem The Functionality is working just fine. I noticed one small problem though. As a house hunter, when I added a house to my interest list and then click on more, it says that the page that I was looking for does not exist.
problem I wasn't able to login as admin using the credentials given in the README file. Still, Edge cases are handled well.
problem 1. Switch role functionality could have been simplified. While logging there are two fields regarding roles. If a user forgets to mark yes for realtor, then switch role will be redundant. There is dependency betweenÂ switch role and these fields. Both do the same functionality which results in code duplication. 2. A realtor should not be able to add inquiry, he should be able to reply to inquiry.
problem 1. All realtors belonging to a company should not be allowed to delete the company. Instead only the realtor who created the company must be allowed to delete. Else it can be catastrophic.
problem Cannot upload the image to the house. And a realtor can create an inquiry which they should not. Also, the realtor should able to see the potential buyer for the house under their company, not only the house they create. The more button in the interest list does not work.
problem If delete a company, the realtor needs to find another company, and the house under this company disappeared. But the README.mdÂ does not cover the edge cases.
problem It tests the login function in the user controller, but not test any models.
problem I am not sure how to create a house hunter and realtor using the same email. I see a link to switch roles, but can only see realtor option there as it didn't allow me to create an account for house hunter with same details.
problem Realtor is unable to create his own company. I tried creating one, it dodn't give me an error but didn't even show the company in this list.
problem 1. Switch role option is working for Admin too which is not supposed to be the case.
problem The team continued making commits on a consistent basis throughout the project development after round 1. Commits are named properly,Â they describeÂ changes that were done in theÂ scope of that commit. One issue is thatÂ all contributors are not reflected in statistics.Â I would suggest matching git credentialsÂ stored onÂ local machineÂ toÂ those stored on the server.
problem Foreign key integration does not seem to have been done completely in DB.
problem The relationships are maintained in the schema but the relationship among company realtor seems to be missing as it shows relationship between users and company so the role isnt clear
problem Need to specify role when logging in. It should identify with email. The house search feature does not seem to have been implemented. House hunter and realtor can view all inquiries of all users. Signup page not complete. Image not associated with house. Can view potential buyers of other companies too.
problem Most of the functionalities works in the application, however, >While trying to add a company as a realtor after signing up the user gets the error "Already Created a Company". > While clicking on show on the potentials buyer list, the application breaks. > A house hunter is able to see all the companies which is not as per application requirement.
problem All issues related to admin functionality have been fixed.Â Selecting a company as a realtor and editing it seem to be broken; as such, a house can't be posted.
problem Most basic functionalities are working well. Some functionalities that I found missing: Image upload for house has not been implemented. Admin should not be able to submit inquiries to the houses or add to interest list. I could not find the link to view the inquiry replies for house hunters No link provided for house hunter to see his/her interested house list Potential buyers list page 'show' button doesn't work Realtor cannot create house. Even though company has been updated in the profile, keep receiving message to "select an existing company by editing profile".
problem Throws error when deleting house hunter who has an inquiry.
problem The Readme is very helpful in guiding through the application. Most of the cases haveÂ not been handled by the application. > There is no functionality to upload picture to the houses. Â > A new house hunter is able to see all the inquires made by all the house hunters which is not as per the application design.
problem When house is deleted, the inquires and replies are deleted as well, this has been handled. Error page occurs when I try to sign up for the same role with the same email. Error in deleting a user if the user has submitted an inquiry/reply House hunter can add a house to interest list multiple times, should not be allowed, by maybe hiding the button if the house is already in the current user's interest list. README.md does not cover how the system handles edge cases.
problem (2) Realtor cannot add a house so could not be tested. (3) Admin is unable to delete a house hunter who has submitted inquiries butÂ no proper explanation or error message is displayed. System handles house deletion properly. All relevant inquiries are deleted.
problem 1. AfterÂ signing up as a realtor, I edited the profile and selected a company. However, I can't post a house, the system kept asking me to update my profile and select one of the companies. (alert: "Create a new company or select an existing company by editing profile to post a house.")Â 2. when the admin deleted the company, the house that belongs to the company were not destroy.Â 3.Â https://guarded-chamber-77369.herokuapp.com/potentialbuyers/34 this url crashes
problem The team has not written any test cases for the entities. There are only the default test cases.
problem could not find model or controller testing.
problem The model test just tested the email attribute of the real estate company and the controller test mainly tested for successful responses and redirects, and not page content and method calls.
problem This team claimed to have fully tested the RealEstateCompanyÂ Model and Controller, but there were noÂ tests in the RealEstateModelÂ tests. I didn't check every file after since I don't like being lied to :)
problem last moment commits.
problem Some methods were long and there was a lot of commented-out code. There was at least one instance of bad indentation. Otherwise, the methods were overall fairly short and the naming was sensible.
problem The code quality in this application looks good. I didn't see any extremely large methods, views were clean and simple, and controllers had one-to-one mappings with application-level functions.Â I do think I would encourage this team to consider using scopes in their models next time as I did not see many here.
problem They started adding more commits after the first round of reviews.
problem The team kept committingÂ their changes even in round 2.
problem The models had the correct relationships. The database seemed to have missed some of these. There was not table for potential buyers (n-to-n house-hunter relationship).
problem Overall this was a usable system. However, This app did not do a good job of keeping track of my session. Once I edited that admin account, I could not navigate via links to the home page and was also asked to sign-in again if I clicked "admin sign-in". Even if I signed up as a different user, my admin account was still signed into. I also was not logged-in upon signing-up as a Realtor or House-Hunter. Â Some other comments are: An Admin should be able to set the password for realtor or house-hunter. That is a security vulnerability.Â When I tried to use the "Reset password link", I get an error. When creating a house as an Admin, I shouldn't have to know the ID of the company, I should be provided a drop-down of existing companies - the same way for how a realtor chooses a company to join. Asking a realtor to choose or create a company before signing up is another security vulnerabilityÂ - you leak the existing companies and allow
problem As a house hunter I could edit houses. Also, anyone can create a company, and a realtor cannot create a company before signing up. A realtor could not submit a reply to an inquiry. A realtor could not drop his or her company and could list a house without choosing a company. Last, table IDs are all over the site which is confusing and not helpful to the user. These IDs should not appear to the user or have to be used to create new entities.
problem The search button in not there. No way to add new house. Realtor is given some destroy privileges which are not meant for him.
problem 3) The admin encountered an exception when trying to view potential buyers of a house after its only potential buyer was deleted. Â The README.md did not describe how the system handles edge cases.
problem Here a few things I found: I could list a house that was built in the future. I was also required to give a full date instead of just a year. I was able to edit a house as a House Hunter
problem The Readme file does not specify any information about how edge cases are handled but the edge cases were properly handled. when the real estate company was deleted all the houses and realtors under it were also deleted. However the role switch option between realtor and househunterÂ is not available, further this operation cannot be performed manually also as the code restictsÂ a mail id from being used for two accounts.
problem Upon testing the system for edge cases, the following results were obtained : 1. The real estate company is destroyed and the realtors houses and houses inquiries for the same are removed. 2. The realtor can switch to another company. They will be prohibited to remove the houses listed in the previous company though. 3. The house hunter accounts are deleted without their inquiries . 4. The System does not check for regex fr phone number input during signup.
problem Code in the model methods looks very clean. Attribute symbols are appropriately validated and proper constraints are applied to measure uniqueness. The controller code has great parenthesis and bracket use for function calls and assignments. More consistent spacing of functions and function content would aid in the readability of the code. Also, there are a few instances where conditional blocks are empty. If there is no purpose for the block, it should be removed (example found in the static page controller). Overall, the code seems to implement good Ruby style standards.
problem The code is readable and easy to understand, but at the same time it is not effectively modularized.There are sevealÂ methods which perform the functions of other methods too, which could have better been modularised Apart from that,
problem Most of the code is auto-generated from rails generator so they do the generic thing. Although they have connected most of the app, the basic functionalities are still lacking and no new code has been written. The only part I see is the sessions controller that has been written manually, and follows correct coding convention.
problem The repository name isn't what it is supposed to be. Naming seems inappropriate. plus, there is no read me file explaining the flow of webapp.
problem some direction code is ambiguous
problem There are no issues with code quality or naming.Â Code is clean and readable and follows Ruby on Rails practices.Â Most methods are short and doÂ oneÂ specific task. One possible improvement would be moving outÂ authorization functionality from controller methods to separate functions.
problem The commits were not scattered throughout the development cycle, rather they were concentrated on a particular couple of days, which indicate that the project was a last minute rush, rather than a pre-planned and well executed one.
problem Very Few commits in the project, with most commits coming just from one user towards the deadline period. A lot of Commits done after the deadline period
problem The team did not commit their changes throughout the project period. The changes were committed in round 2.
problem No, majority checkins are near deadlines and not well spread out. Usage of multiple branch is good.
problem The team has pushed almost all the commits on 2-3 days of the entire cycle, not regular. Also, the commits are made by one person, which seems strange to me.
problem Most commits were done by one person whichÂ cannot be considered a good practice. NamingÂ of commits is done well, names are descriptive ofÂ the introduced changes. I would suggestÂ doing commits more often by dividing work into smaller chunks.
problem It seems that some of the associations were attempted. (1) Real Estate Company contains many users and houses and (2) House belongs to a Real Estate Company and a user. These relationships are currently commented out so the dependencies are not enforced. There are additional connections missing such as the Users model, where a Realtor should belong to only a single company and many houses. The implementation seems incomplete, but the idea found within the company and house models is moving in the right direction.
problem The relationship mapping was appropriate and worked as intended. The database unfortunately didn't implement all the necessary features required for the submission. (For example: list of potential buyers)
problem All the 1-n, n-n Relationships have been commented out. There are no mapping table in Schema as well.
problem To the most extent of it. Since, the profile of admin is problematic and not allowing us to login at all. That area is unavailable for testing.
problem As of now, all relationships have been commented out, I am not sure why this has been done.
problem Following are some of the relationships missing: Â house hunter has_many inquiries realtor has_one company
problem can not log in as admin
problem Your home page is very clear as toÂ the application purpose. Unfortunately, I am unable to sign up as a new user or loginÂ with any of the pre-configured user accounts included in the Readme. I can, however, attempt to sign up and/or login but this information is never saved to the database for future access or the appropriate transitioning is not implemented. I like that there are two options listed on the homepage to either sign up as a new user or to login in as a current user. This is convenient for navigation. Consider spacing these links for easier identification. I would also point out that the options in the drop down box included for selecting user type during sign up is a great idea. The third option, is a ambiguous as to its purpose. What does it mean to sign up as a realtor who is also shopping for a house? Perhaps you can just limit the options to Realtor or House Hunter. The functionality of searching homes should be included in the Realtor services. Keep up the work. Once the
problem There are a lot of functional bugs. Also, lots of required functionalities like listing a house as interested, list of potential buyers etc are missing. Also, there are a lot of navigational bugs. For example, when a user is both, a realtor and a househunter, he gets an option to create a new company when viewing list of enquiries, which should not have been the cae.
problem 1 > Admin Login is not working for me 2 > Cannot Login through default Realtor/Hunter Accounts 3 > No Search Functionality for houses 4 > No Image upload for houses 5 > Views are a bit messed up, It shows Inquire About a House in create company page. 6 > Navigation is not proper, Creating a new house redirects you to the home page 7 > inquiries Feature although implemented does not work 8 > No reply Feature
problem The author improved the application but still did not fix all the problems. For an instance, the inquiry option is created but it does not work properly. After creating an inquiry the user gets logged out immediately. Also, the created inquiry is not visible under "my inquiries" options. The interest in a particular house option is still not given.
problem Admin functionality is failing. Not able to log in as it should.
problem Multiple roles seems to be missing. Eg. for the details for house hunter given in readme,i get logged into realtor profile same is whenÂ I create a new user and log-inÂ create a company, get message that user has been created "Welcome to the Real Estate Manager,hunterÂ User was successfully created."
problem when sumbit an iquiry, the page automatically redirect to the homepage and can not find the user page.
problem I am unable to log in as adminÂ with credentials that areÂ provided in README.Â Search houses functionality for house hunter is missing. Inquiries are not added to the system and page that is supposed to display all the inquiriesÂ is not working.
problem (1): Unable to login as admin! (2): Realtor can delete houses, but houses don't seem to map to a real estate company, rather they are mapped to the realtor only (3): Unable to login as admin
problem I am unable to test any edge cases as logging into the system as any type of a user is not implemented.
problem 1 ) Since Admin Login is not working, this cannot be tested 2 ) Realtor Can still edit the house after changing his Company 3 ) Inquiries Feature although implemented is not workingÂ Â Since the basic Functionalities are still lacking I believe the edge cases have not been handled anywhere.
problem I could not login as an admin using the user password combination mentioned in readme.
problem 1. Fails this edge case due to unavailable admin functions 2. This function fails to.Â 3. Not available. 4. Realtor inquiries are also non functional.
problem Since, there is no readme file, admin access is not clear or how to navigate to those features. So most of the cases could not be checked due to ambiguity in the flow.
problem Most functionality is either broken or not present 1. delete real estate company not present 2. create house not present 3. On user create get,"Welcome to the Real Estate Manager,user1 User was successfully created." 4. Send inquiry, logs out the user
problem 1. Cannot test as delete functionality is missing. 2. Cannot test as functionality is missing. 3. Cannot test as delete functionality is missing.
problem Most of the edge cases cannot be testedÂ due to problems with accessing admin's account. Functionality pertaining to inquiries add/edit/delete is not implemented.
problem There is only a single test file included with this application, sessions_controller_test. The functionality tested within this file attempts to cover starting a new user session. The test ensures that a new session is returned through an assertion statement equating to true. There are many additional functions of the sessions controller that should be tested including create, destroy, successful log in, etc. Making sure that each of these methods are functional will aid in the development of further successful application flows. I would recommend testing the basic models and their accompanying controllers before you begin implementing things such as house inquires and user responses.
problem The application seems to have been developed, but not tested enough, as apart from just naviagtional bugs, there are also functional bugs. Many of the required things are also not implemented, hence there was not much stuff to rate for.
problem No tests have been written. At least under the Tests folder.
problem No tests performed seem visible as executional flow is uneven.
problem No, they have not. No models were tested.
problem No tests added for model or controller
problem Testing has not been performed appropriately. Handling only one case isnt called testing
problem No tests for either model or controller areÂ present.
problem There are no test cases other than those auto generated by the scaffold generator, thus cannot comment more on testing.
problem The code has been implemented in a modular way. However, there are few functions where Ruby naming conventions has not been followed for example : "authenticateAdmin" in UsersController class.
problem Code is well written. Functions are well defined. Some areas where it can be improved is moving the house search logic from controllers to the respective models.
problem The code is clean and readable, but there's only one suggestion. The page which lists houses (index) and search houses are handled by different controllers, whereas, they could have been easily integrated into one, without compromising code readability. It would have lead to a more integrated and a cohesive web app. In one or two instances, there were several functions performed within a function, which could have been better modularised too.
problem They continued to update their project. However, some changes were made after the due date.
problem Yes, the system handles all the entity relationships well. There is no mapping table as such, but all relationships has been addressed in correct association degree in the application.
problem Relationships have not been defined in the models.
problem Inquiry mapping is not done.
problem Inquiry doesn't belong to either a house or user
problem The system has all the basic functionalities as per the program description. As per the last feedback, validation checks for invalid data has been added to the application. However, the system still does not have the null checks for field.Â For example: If a user creates a house without adding most of the details, the application breaks. Â https://housefocus.herokuapp.com/houses
problem Realtors can sign up without specifying a company. This means if there are no companies in the system, realtors can't sign up. While creating a new company, address field is given as a drop down, with only two options - Raleigh and Cary. Can't specify any other address. Also, in the create company page, size of the company is again given as a drop down, with limited options. Can't give any other value. Admin can't create new houses.
problem Except inquiry reply all other functionalities work in my opinion.
problem multiple success message still not fixed
problem The system works well in most of the cases, except when the realtor creates his company, and then after successfully creating the company, he get's an option to edit his company details, but then when he clicks the edit button, it redirects to the homepage, and is unable to edit his company info unless he choses to belong to the particular company. A minor bug, but still breaks the consistency.
problem The system works exactly how it is supposed to work. I could not find any functionalities that are still failing. No bugs or error messages. It would have been better if the realtor could send replies to inquiries directly from the application than opening a separate mail application.
problem Search is not working. Anyone can login as admin. no house picture is displayed if it is saved.
problem Admin should not able to submit an inquiry and put a house in interest list. Also, the user should not able to sign up as an admin. And reply to the inquiry function must use the email system to reply, cannot do it onsite. When creating a company, the user can only choose Raleigh and Cary as their address. Cannot see the house list by other company.
problem The edge case when a admin deleted the real estate company hasÂ been handled as after the adminÂ deletes the real estate company the houses listed under that company are all deleted. Â The realtor when changes the company cannot see the house listed under previous company so he would not be able to delete the houses under previous company. Â No, the readme.md does not contain any detailsÂ on the edges cases handling.
problem Deleting a company doesn't delete its houses.
problem When a real estate company is deleted, the respective houses are deleted, the realtors are not. Further, even after deletion, the company of those realtors remains the same. They can even edit the deleted company from their profile and list a house on behalf of the deleted company. When a realtor edits and updates his company after it is deleted, it actually gets created again. When a realtor changes his company, he can view only the houses of his current company and is prohibited to delete houses of his previous company. This works as expected. When a house hunter is deleted, (s)he gets removed from the potential buyers list, but inquiries are only partially deleted as in the row is still there but only two columns show data.
problem (1): when an admin deletes a company which has existing realtors, it shows on the admin page that the company is deleted, but when the realtor signs in, it still shows that he belongs to the deleted company, and is able to update all the profile information of the company. So, it means the company is not being deleted, even when it says so on the admin page. (2): the realtor isn't able to view any houses except his own company. (3): No, the inquiries are not auto deleted, nor is the househunter removed from potential buyers list.
problem 1. This test case is a flaw as an admin can hitherto delete whenever and whatever he wants.Â 2. This too is not strongly tested and runs into glitches on doing so.Â 3. This too falls through when tested.Â 4. The admin can be deleted and edited with. System fails overall when this case happens. Biggest flaw yet unresolved.
problem Edge cases are not explicitly handled, but the validations and logic will limit edge case scenarios from affecting the application.
problem 1) If the admin deletes a company, all the related properties will be deleted and will remove the company name assigned to any realtor. 2) If the realtor changed his or her company, the realtor cannot make changes to old posts which they have posted for the previous company they worked for. So they will not be able to edit,add or remove the houses listed in previous company. 3) If the house hunter is deleted by the admin, all the inquiries by the house hunter will be deleted and their names in the potential buyers list is removed. The README.me did not cover how the system handles all these edge cases. README.md could be updated.
problem If company is delete, the house will also disappear, and the realtor need to find a new company. But the README does not cover edge cases.
problem The team has not created any test cases to test the model and controllers of multiple entities.
problem No test cases could be found.
problem Yes, the login / signup module seems to be very well tested, considering the fact that all the three types of users (admins, househunters and realtors) are managed by using the same table. But, there's also a small functional bug. Even if I hadn't regisitered as a househunter or a realtor, I am able to switch back and forth between the roles, which is kind of counter-intuitive in many ways.
problem None of the controller or model are tested.
problem They test the controller but not the model.
problem Since I couldn't view the test plan,Â i am unable to comment on it.
problem The test plan seems to be missing
problem I could not find any test plan or documentation and hence could not verify whether the tests have passed or no. Tests for checking for duplicate directories due to assignments having same names is missing.
problem As mentioned earlier, they have not considered testing at all at this point and hence, we are assuming that they are to implement testing at a further point in the project. Of course, mentioning an approach to the testing framework and how they would be going about it would have helped. Moreover, the absence of a wiki doc only adds to the grievances of beingÂ unableÂ to decipher the problemÂ statements.
problem No tests added or at least link isn't provided
problem Unfortunately, the team has not provided any link to the write-up. Hence, I would not be able to provide reviews for this question.
problem They don't have a Test Plan.
problem Could not see the Test PlanÂ as write-up link has not been provided. Looking at the code also, it seems as if no tests are written. It is always a good practice to follow TDD. Please write test cases to test the changes made.
problem The names are all proper. However, there are lines of code which are commented out. Cleaning up that would reduce the clutter.
problem The links provided are only of commits and not the code added.
problem Names could have been better designed especially the 'quesparams' variable. I get no idea about what that variable is used for or what that implements. You can rename it to question_params, or duplicate_directory_params etc.
problem On checking, the code, we find that, in agreement with @TravisBuddy, the code had a build error which seems to be unresolved, which is strange, and should have been looked into. Moreover, the overall coverage shows a good amount of increase which is good. But one must say that the details in the code changes as few as they seem have been to a good extent for the majority of the part and thus worth the merit.
problem Good work. Need to work on tests.
problem The team has only made one significant change to the following file: app/controllers/assignments_controller.rb . It is an if statement which is difficult to follow since the team has not written any comments for the same. Â Suggestion: The team could add comments and screenshots for better understand of the workflow in the second submission
problem I can guess the array 'quesparams' means questionÂ parameters, but this variable name is confusing, I think they should use question_param instead.
problem Issue #1201 Below is the change made in _general.html.erb Directory name will be autogenerated if not provided. In the form of assignment name_id_course_id. The last part could be modified to something with a bit more clarity. From the assignments_controller code it could be seen that the auto-generated directory name follows the format <assignment name>_<assignment id>_<course_id> which is not what is specified in the text. There is a typo in the word 'autogenerated', it needs to be hyphenated as 'auto-genera
problem Comments needed.
problem More comments are needed because I had trouble following what the code was doing in some places. The code follows Ruby Style Guide and is DRY in its design. Functions are small in size and naming conventions have been followed. Kudos!
problem I feel you guys should add a few comments for a third person to follow.
problem The team has only made one significant change to the following file: app/controllers/assignments_controller.rb . It is an if statement which is difficult to follow since the team has not written any comments for the same.
problem Issue #1201 In the assignments_controller code, the team has checked in a puts statement (line 48) which looks like debug code. Even though these are helpful during the development phase, we need to remove them before finally pushing them. Issue #391 The comment (assignments_controller.rb:85) is not descriptive enough. The author has commented out a method call. It would be beneficial to the person reading the code to understand the intention behind this. Please provide a detailed comment on why this was done. Again the author has use a puts statement (_submitted_files.html.erb:29) which should not be committed and should only be used during development/debugging. Please remove the debug code.
problem Since the test plan is not included, i am unable to do the manual testing.
problem Manual testing seems an impossible task since it is not having a wiki doc itself which makes it impossible to have a specific design flow for the project in question to go ahead and check the program.
problem The features work as intended however I am having trouble navigating and checking what are the differences between the original system and the improved system. Could have made a demo video showing the improvements or a step guide to follow. They could have also provided some steps or a visual navigation guide to see the changes. For edge cases you could check what happens when assignments have same names, blank or whitespace containing names etc.
problem The team has not provided any link for me to manually test the project
problem They didn't provide a link for me to test their work.
problem No video or deploymentÂ link provided to test manually.
problem The link for the writeup is missing.
problem The writeup seems to be missing.
problem No clear explanation is given as to which files are edited for which reason. Only file names are stated along with changes made. Why the changes were made and what do those changes correct is not given. No write up link has been provided. It was tough to navigate the code myself. No demo or link provided as well.
problem No, the team has not been diligent in specially making a section of "what it does" as the introductory section of the doc so as to make us understand the goals of the project. They have seemed to not even make a Wiki page for the same or have seemed to forget to upload it. Because, how am I supposed to follow the approach and solution of the problem if there doesn't exist any documentation to check for the same.
problem There is no write-up provided as of now. The wiki page is also not done yet.
problem Didn't find anyÂ documentation link. But it was understandable from the code links on github. Â Goal is to create unique directories for each assignment.
problem No writeup link provided.
problem They don't have a wiki page link, so I cann't see their OSS writeup.
problem The link to the writeup is missing.
problem Testing is absent in the project. This could have been because (by the looks of it) the issues were too small (only 20-30 lines code). Refer RSpec documentation to write tests. It is easy to follow.
problem Unfortunately, no mention of the word "test plan" has even taken place in their whole doc. So, it seems that they are yet to implement the testing functionalities in their project. Although, it would have been better if they had checked if the checks or the tests already existed in the first place in the git repository. Â Â Moreover, as a part of their project, one of their problem statements is in fact to write the tests for a specific problem scenario. IÂ haveÂ reason to b
problem Issues #391, #1201 were fixed but i dont see any tests as mentioned in issue #1190.
problem There are no tests. Probably you guys will do it in the next phase.
problem TheÂ writeupÂ seems to be missing.
problem No mention is made as to why the changes were made in which specific files.Â The code is well written but hard to follow (what is the functionality of the code is tough to decipher). It would have been better had there been some comments or documentation as to what those respective methods do.
problem No, since no write up or no wiki page exists. it is clearly not possible to ascertain any of the above clauses.
problem Write up isn't provided. I went through their git commit and the requirement forÂ issue #1201. There is a 'puts' statement in the controller. I feel that should be removed, you guys might have added it for debugging purposes, but it should be removed before committing. Also, not sure how the changes made are applicable to the problem at hand which is to check if assignments have the same name if I'm not wrong.
problem No writeup/documentation found.
problem I cannot find test plan.
problem No, they did write the test plan.
problem Authors have followed Ruby style guide. Test cases have not been discussed in the write-up.
problem No Test Plan was included. The bare minimum of description was given for each test, and the project preamble. As far as I can tell, though, there is no document that says we should have created a Test Plan, and I bet it is safe to say that their mentor did not suggest creating a Test Plan either.
problem the writeup is lacking in terms of explanation of how to test the funcionality thoroughly.
problem Variable names and test cases are named appropriately. Explanation of reasons for the style of code and problem solving approach is lacking.
problem It looks like if they fix some style issues then it could increase the code coverage. I don't understand why their last unit test does not pass though.
problem Some of the functions are too long such as #delete function.
problem All their test pass, but they don't have a test plan section
problem Some "let" methods, likeÂ participant2, student2, response_map2,Â are repetitive.
problem All of the code appears to be above board, and no functions are overly long. The test did take like 28 seconds to run, which seems like a lot.
problem The video shows all the test cases pass, but I'm skeptical that they got all theÂ corner cases. Looking at the review_response_map.rb model, there are a lot of methods which aren't explicitly tested.
problem Code is running and no errors are encountered. However, very few tests have been written and coverage is low. A way to make the testing more robust is to test every function with a known success case andÂ an edge case or potential failure.
problem Source code is good in all spots, except the last unit test. I was unable to figure out why it did not work.
problem some branches are skipped by the "allow" statement. If a method would raise an exception, then test whether it would raise it.
problem They don not have any test plan, and some functionality of code is not adequate for the test.
problem There's basically no documentation outside the source code itself.
problem Naming conventions that are used in this project are clear, reasonable and follow standard Ruby practices. There are some instances of variable names that are concatenated with numbers like topic1, topic2. While this approach can be justified in some cases, I would suggest using more descriptive names instead or arrays if multiple instances are required.
problem This is semi-passable. The wiki is hosted on Wikipedia, so they clearly didn't read the directions. I mean, I get it, though. I wrote tests, and was also unclear about what exactly the Wiki should contain.
problem I can not find the test plan.
problem They don not have a test plan.
problem It's unclear how complete the test plan is because their wiki does not contain their total branch or mutation coverage.
problem No, this writeup doesn't have a test plan section.
problem As this rubric calls for a section called Test Plan, I suggest adding it and rearranging the wiki content, so that a description of the tests is given in this section
problem The approach taken by the team to increase the code coverage has not been clearly stated. Also there is no mention about what was the existing code coverage and how much did the team increase it to?
problem Test Plan is missing
problem The test plan is not added as the part of writeup
problem There are some functions long for example like scores , However, as this function is handling all the required cases hence , that length is quite valid and considerable
problem the team does not show up any design patterms. in the wiki page, the authors did not explain how and why they did, and what I can see is just the final code for some perticular exmples.
problem Yes they have explained the way and why they did, and in their writeup, they does not mention any principles or patterns.
problem There's not really a rationale for why these particular tests are sufficient.
problem The authors have included the different tests that they wrote, however a description of what the test is testing would be helpful.
problem 2 Code climate issues pending. No explanation provided for why gemlock file is being added.
problem They wrote the literal least possible, but again, I get it. Learning how to test with doubles, mocks, stubs, and spies, to peek in on the innards of a high complexity OO system was actually really difficult.
problem The code is well-formatted and structured very clearly. It is easy to follow the expressed intent. Every 'it' block is succinct and contains one assertion. Indentation and styling are consistent.Â One suggestion is to improve the expectation for method #scores by testing the attributes that are relevant in that context as opposed to checking the string value of #inspect method.
problem No details about what was changed only details related to already existing implementation has been stated.
problem There many comments by auto bot on indentations and coding standard. Could have resolved it.
problem several methods are missing in the document and the rspec file likeÂ review_response_report, import.
problem nly one test case implemented and executed which verifies whether the correct email has been sent to the reviewer.
problem Test plan is not described fully. However whatever is mentioned in the wiki doc has been implemented via Rspec. But there are some previously running tests which are failing because of the changes.
problem An old test case fails.Â Looks like it was broken before and therefore not a result ofÂ your changes
problem Most of the cases are covered in "should send an email to the participant"Â test case. Reviewer part and its mail content checks are not covered.
problem I did not find the test plan in the documentation. However, there were details mentioned about the tests that the team wrote. One Test related to the issue has been written in the assignment_participant_spec file. The test works works properly. I feel that the Test plan should have been explicitly mentioned in the documentation.
problem There are some repetitions in the code which can be avoided by creating a helper function and calling that function from each place. But apart from that code is well thought out and implemented nicely.
problem The naming conventions have been followed. The professor had frequently asked the team to improve the naming conventions and it seems that the conventions have been properly folowed.
problem Looks good. Comments could be improved. For example, In submitted_content controller there is a comment which says sending email to users. However it is just a method call which redirects it to delayed_mailer.rb. So this should be properly mentioned as it will be helpful for someone refactoring or understanding the code later.
problem The code changes in "app/controllers/submitted_content_controller.rb" line 60-78, could have been in a separate method, such as send "email to reviewers". That would make the controller code clean and clear. Â Â Code changes does not followÂ the DRY principle in atleast two places. 1.Â In
problem I feel that the code from line 64 to 76 could have been written in a separate function to avoid making the functionÂ submit_hyperlink from becoming so large.Â Additionally, the functionality inside the functionÂ review_reminder_email could have been separated into 2 different functions.
problem The features work. However the notice messages could be improved to state exactly the action that is conducted. Eg. One of the notice message says either user is already added or it doesn't exist. Narrowing it down will be of great value.
problem The primary objective of the project is defined clearly. A comprehensive description is provided for technical steps needed to set up the environment and the functionality which is related to the test suite. Furthermore, the team provides a detailed explanation of each test case along with the corresponding code. My suggestion would be to remove or reduce parts like Expertiza, BDD and Rspec description (http://wiki.expertiza.ncsu.edu/index.php/CSC/ECE_517_Fall_2018_-_Project_E1852_Write_unit_tests_for_participant.rb#Expertiza) because they are redundant in this context.
problem Authors explain the functionality of the test in wiki page pretty clearly, including participant_spec.rb, participant.rb and assignment_participant.rb. But there are not explain in video, it might be more convenient for reader to understand if authors add some short explanation in video.
problem The writeup is thorough but screenshots could be added. The instructions are missing too. Rest all looks good.
problem Only one test is implemented and validated for .
problem The authors have mentioned the test they have performed but no specific plan is presented. However they have adequate details about what is done and what is tested and how will the corresponding changes look like. edge case descriptions could have been included
problem there was no test plan section
problem More edge cases can be included. For example, for Participant#team, can include a case when user does not exist.
problem The test case, does not handle the case when the imported csv is corrupted.
problem The "Test Plan" sectionÂ is missing in the writeup. But, they have included aÂ separate section for explaining Rspec based automated test cases.
problem Test plan is comprehensive and covers most of the edge cases. The test suite is achieving test coverage of 99%. One minor issue is that wiki is missing two cases that are implemented in the code (#name, #fullname).
problem The details regarding testing are mentioned in the writeup. But I did not find anything about the Test plan as such, in the writeup. The assignment_participant_spec containsÂ a test. One edge case has been considered. I feel that the Test Plan should have been mentioned in the writeup explicitly.
problem A short description fo everyÂ method change was required.
problem Code changes does not followÂ the DRY principle in atleast two places. Also, the comments in the code are not helpful. All code comments are like "# E1834 Fall 18"Â which does not explain what is the code does, it only says when the code was added. Such comments may be removed.
problem The author has well listed the steps adopted to implement the test cases by giving a code snippet for each and every test .However, the author hasn't mentioned that why does particular test cases have been written in the spec file.
problem They did not explain why they did what they did, just what they did
problem Authors mostly discuss the technical parts of each test case, i.e. how it works and whatÂ functionality it is testing. There is almost no emphasis on any design decision or pattern. There is a mention of mock objects being defined at the beginning of the test file, however the wiki does not elaborate on the reasoning behind those decisions. Some improvements can be done by explicitly stating and justifying the structure of the code. For example, discussion on why there are no instances of before(:each) statements and how defining every let statement once at the beginning of the file is superior to having that data defined for each test suite separately.
problem Some changes needed explanation.
problem Test Plan hasn't been defined because the testing is carried out by Mozilla
problem Could not find any
problem The pull request does not show any Tests done on the project
problem I don't see any test plans.
problem The newly added code has not yet been accepted in the pull request but it does build. The corresponding rust implementation, however, has not been added and so the test coverage hasn't improved by much.
problem The newly added code includes the attribute height, the getContext() and transferToImageBitmap() method in the OffscreenCanvas.webidl file. The name height given for the attribute height for the Canvas makes complete sense. Similarly the name getContext() given for the method that returns the OffscreenRenderingContext is also intuitive. The name transferToImageBitmap is a little long which might be the code less readable if the method is called often. Instead the accessor convention of using getImageBitmap() feels more intuitive and also logical at the same time.
problem The build did not pass due to some minor inconsistencies.
problem There are almost no comments.
problem All codes construct perfectly, though not much code I could see in the git.
problem The team has not implemented any function in the pull request. They have basically defined the ImageBitmap interface that will be implemented in the future by Servo.Â There can be a few comments to describe their code and about the previous implementation.
problem The code is really well written and follows Ruby Style Guide, except some areas.
problem The implementation does not seem to be working, so it would be difficult to test this. Also, I am no Rust programmer, so there's that.
problem The features cannot be tested until the final changes are completed
problem I have no idea how to test the code manually.
problem The code is running. However, few functionalities are not there.
problem TheÂ background sections were fairly clear, but the details could have been fleshed out more. Some description of the code would be better than a dump of the code.
problem Yes, the Wiki is clear and explains most aspects of the project but there could be a better explanation for the IDL files that were added and the corresponding changes that were made because of adding these files
problem The Wiki lists a lot of terminology but few with how they do this project.
problem A little too brief.
problem The write-up gave a good introduction to the project by providing the background information about the Servo parallel web-engine project by Mozilla for web page rendering and Rust programming language to execute HTML5 and CSS3 parsers. It then highlighted the OffscreenCanvas API that can be used to generate frames and also return the rendered image using the transferToImageBitmap() method. The writeup covered how web workers can be used to implement OffscreenCanvas API to render images as an independent process isolated from the webpage. The problem statement of of creatingÂ OffscreenCanvas and OffscreenCanvasRenderingContext2d interfaces withÂ OffscreenCanvas Constructor, propertiesÂ (width and height) and getContext() method was defined. The use of Web IDL to describe interfaces for web browsers was briefed and that was followed by the code flow and the code
problem There is no test plan section or any information on how or if the feature was tested.
problem Test plan missing.
problem No Test plan was provided
problem The write-up does not include a test plan section. If a test section had been included then the different scenarios, pre-conditions, edge cases and invalid input values would have been dealt.
problem The project didn't involve any kind of testing.
problem The writeup does not include any test plan.
problem The writeup clearly explained the need for the off screen canvas API; however, the explanation of how the feature was implemented was too shallow. What is in those .rs files?
problem The writeup includes the code used but it would help if the Wiki also explained how the authors came up with that solution
problem It is not explained why the work was done, the way it is done. But the implementation looks promising
problem The write-up did cover about the efficiency of Servo to render webpages quickly and smoothly when compared to Mozilla's other rendering engines. Servo does this usingÂ parallel layout, styling, web-renders and constellation and in turn sandboxes the processes,Â threads and tasks that allows the browser to fail better, hence making it more robust and secure.Â It justified the use of Rust to rewrite C++ and effectively the browser as well.
problem The writeup explains what is intended to be done. However, still the information is somewhat incomplete.
problem A test plan is not included. Although the explanation of the work is very well done.
problem Did a good job.
problem The units test cases look complete, but a bit more edge cases could have been implementedÂ in the tests.
problem Although they did not have a Test Plan but they had a section called project description which is the same as Test Plan.
problem There is no TestPlan section as such but why the test cases areÂ added are mentioned correctly. Could have given a brief summary on TestPlan.
problem Some are missing, such as delete, destroy and submitted_files
problem Code Climate has detected few blank lines and missing space
problem The functions are not too long and the code doesn't need to be extracted into separateÂ methods. Comments could have been added for a better understanding of the test cases. The code follows ruby style. The lines are compressed to reduce the number of lines in the code.
problem Code follows the Ruby Rails Standards, there are some comments by auto bots(spaces, blank lines etc), which if resolved would have been more better.
problem The class names, variables and methods are named appropriately. The variables suggest the functionality and their purpose.
problem There are few small spelling/grammatical mistakes, but the write-up is very descriptive and thorough overall.
problem The write up explains the units tests elaborately. However, the problem statement could have been explained a little more elaborately.
problem The authors did not use any design patterns. The write up explains the unit test cases and they are implemented in the code.
problem The features work as mentioned in the write-up. Edge cases could have been tested.
problem They haven't added any test plan but the test method in documentation shows that all test casesÂ has been checked properly and coverage is also 100%.
problem The pull-bots CodeClimate and TravisCI suggest there are a few issues with style and integration that need to be addressed, respectively.
problem Didn't find any pull request. Code coverageÂ has increased as more tests are written and it is one of the required outcomes. Wiki states that 100% coverage is achieved and the same is demonstrated in the video link provided.
problem Can't find the Pull Request
problem Most of the source code is following standard Ruby practices. However, some cases could be improved. There is a number of variable names that are concatenated with numbers for example user1, user2 etc. While this approach can be justified in some cases, I would suggest using more descriptive names instead or arrays if multiple instances are required. Moreover, indentation needs to be fixed to improve code readability.
problem The code is mostly clear and easy to follow. Test blocks are succinct and containÂ oneÂ assertion per block. One exception is the #score method. It could be improved by decomposition. The code for set up could be extracted into a separate before(:each) block and multiple 'it' statements could be usedÂ for testing expectations.
problem 1) No all functions are reasonably long if not too short. 2) No all methods seem about right 3) no but the team could have provided some comments in the score test function, as multiple expects are included 4) The code follows ruby guidelines and they used factories efficiently 5) Yes the code is DRY, they have used after each method to achieve it
problem Tried to run the RSPEC test by copying the _spec.rb file and enusred that the Factory method is inserted, I got an error in 2 examples Â Participant#email sends an email to the participantÂ Â Â Â Failure/Error: assignment = Assignment.find_by(id: self.assignment_id) Participant#score Get participant score within a roundÂ Â Â Â Failure/Error: scores[questionnaire_symbol][:scores] = Answer.compute_scores(scores[questionnaire_symbol][:assessments], questions[questionnaire_symbol])
problem yes all the test written passes. They could have written a test to check if self[:handle] is returned if no nil parameter is sent
problem Under 'tested methods' they have explained everything really nicely. The video is just to long, 22 minutes. You have have made it short.
problem Team could have given more description on what is the Participant.rb is doing
problem The wiki clearly defines the primary objective of the project and justifies the reasoning behind introduction of additional helper constructs like participant factory. The authors complement the descriptions of each test case with associated block of code and elaborate on the details ofÂ their inner workings. I would suggest removing parts like high level descriptions of Expertiza and Unit Tests (http://wiki.expertiza.ncsu.edu/index.php/OSS_E1852.rb#Unit_Test_Description) because they are redundant in this context.
problem The test plan section is really well written. However, pre-conditions, edge cases are not very well discussed and talked about. I would suggest the team to add these into the wiki as well.
problem Magic. How did they know they needed a Test Plan?!? They did a great job laying out how they created an environment to unit test Participant with their design choice, and chosen variables and factories.
problem The authors mostly focus on how they did what they did, i.e. inner workings of each test suite. Little to no discussionÂ isÂ provided on the overall decisionsÂ pertaining to design principlesÂ and patterns that have been utilized in this project. For example, there are no instances of before(:each)Â blocks in the source code. This decision could be discussed and clarified in the wiki page.
problem The team has not added any test cases.
problem No new tests have been written
problem No test cases / Test plans
problem Unfortunately, the test cases are lacking This could be improved before the second submission
problem There is no Test plan.
problem Test cases are not being taken cared.
problem There a large set of variables that do not follow typical ruby naming convention. An example is that "existAssignment" should beÂ "exit_assignment". Additionally, some names are not very helpful. For instance, the variable "frm" is used for a form, but why not just use "form"?Â There is also a lot of javascript written directly on the page and are difficult to read and understand as there is missing method names or other non-intuitive variableÂ names
problem The code is clear and concise. The variable, method and class name choice is correct.Â One variable i feel can be changed isÂ top_max_choosers can be renamed to topic_max_slots, as slots has been used in the function name as well and it will be more consisted
problem For the Ruby changes they have made, they have used intuitive names and used naming conventions as much as possible. def update_feedback Â Some places, the variable names are used in CamelCase whereas few places they werent used. Few variable names were directly used from legacy code, although refactoring could have been done
problem Most of the variable names and function names are named based on proper convention. Suggestion: function addCreateTopicSection()This function name could be changed to maybe CreateTopic() or AddTopic()Apart form this, all other names look good
problem All the variables are defined with respect to the functionality like - max_team_size, get_participants_without_team.
problem Ruby coding standard has been followed. Only one function has been added in controller as per requirement. Code follows DRY principle. TheÂ team can add comments for the code added which would be useful to understand the code.
problem def create function in assignments controller seems to be long and could have been refactored. Considering that they used most of the legacy code and most of their work was on UI, their part on ruby changes werent much
problem The team has written a concise and efficient code with proper implementation. However, some additional comments in some parts would improve the readability and make it easier to comprehend
problem The code is well structured. Could have added more comments for easy understanding of the code. The functions are not long.
problem Functions are of appropriate length and code is in proper methods. However, no comments are provided what so ever.
problem The group has not shared the link for the test environment. Hence unable to test the edge cases. However, in the screen cast they have covered the functionalities mentioned in the requirement document.
problem I have not been supplied with a link to manually use an instance with their changes and I have not been able to find a link in their PR or write-up.
problem I could not run it locally and hence I am not sure about the edge cases. Code looks clean and should not break in most of the cases
problem The youtube screenshare clearly shows the changes made and works perfectly. Since the edge cases arent defined, not sure about the functionalities of edge cases in this case as it involves UI most of the time
problem There is no link provided to test the code manually. However from the video provided, I can infer that all the features have been implemented and are working properly. Issue #718 and #926 are working as expected. In issue #971, I could see that the previous version of the 'add new topic' page had a topic description and topic category field which is not seen in the updated version. Suggestion: The team could implement that or if already implemented, add that to the wiki page to reflect the way in which that is handled
problem No deployment is provided, soÂ couldn'tÂ test manually.
problem I was able to understand the changes they were making and why, however I thought the write-up was a little too verbose and had too much code - I can find the code in their PR.
problem The writeup s format on how they distinguished the features and explained solutions for each and everything is good. First they give a bird's eye view of the problems and then deep diving into each problem with solution and screenshot is good. The background explanation given could have been more specific towards their problem statement, rather than just about expertiza. The images tend to occupy the entire page and its little difficult while going through it, a little foramatting could have made their page really good.
problem The write-up is well explained but could have described more on the methods whey implemented and why did it implementÂ in a certain way.
problem The team has not included any test cases. It would be easyÂ to include the test cases on theÂ Â app/controllers/suggestion_controllerÂ for theÂ update_feedbackÂ method that has been added. AlsoÂ the team may add some features test cases as most of the changes made are in html files. TheÂ team can referÂ the existing features present in theÂ .spec/features folder.
problem There is no explicit test plan section, but all the scenarios are covered with appropriate images.
problem Text Plan is Missing
problem There was no Test Plan
problem The writeup does not include the test plan as of now, but that is the only thing which is left for the team to complete. The team could work on this and try to improve the test coverage.
problem There is no test plan.
problem No test cases or test plan mentioned in the write-up.
problem They explained it well, but there were noÂ larger design patterns they seemed to be following. I did think that they used AJAX in the appropriate way, but it could be improved in the future.
problem Their solutions are well explained. The way they have explained, attaching a screenshot of a code snippet and telling, this is where we made this change, and this is how it works, gives a better understanding of their project. It could have been better if they could have compare and contrasted the previous codes, where the features where not there. That way, the background of the why this feature could have been clear.
problem Yes, the team has explained their code and the reason for the additions made. However, for the issue #926, some more information about the Tablesorter and some additional comments would improve the writeup. Solutions to issue #718 and #971 are explained clearly and are easy to follow.
problem Design patterns were not used. Rest of the code is explained and easy to follow.
problem Code snippets are given butÂ need explanation.
problem Writeup explains what was to be done and how they did it, but does not give rationale behind the way they coded, and any alternative approaches.
problem The test plan is not about what they test in the Rspec test.
problem Most of the naming is reasonable and follows standard Ruby practices.Â One problem is that code makes extensive use of variable names concatenated with numbers. Example: allow(participant3).to receive(:topic).and_return(topic) Here it is not clear what distinguishes participant3 from other participants and why it is special. It would be better to avoid using contractions such as stu1 or p1 (.sort_by_name method, Line 130). Furthermore, I would suggest using consistentÂ indentationÂ (for example .get_authorization method, Line 113).
problem The code looks clean. Though I don't understand why you have used this line in the test for responses " puts participant.response_maps". I feel some of the code that isntÂ needed is commented out. Please remove this code as it was mentioned in the details. Naming and cnventionsÂ seem to be fine.
problem the code looks clean . However, some of the comments are not provided for the test cases. apart from this the naming and the conventions seem to be fine
problem The test for sort_by_name redundantly checks implementation parts. It needs only to test the result.
problem CodeClimate bot reports 73 style issues, which is an awful lot.
problem There is no need to use the student3 and participant3.
problem The code is concise and readable. It consists of mostly small methodsÂ that test one thing. OneÂ exception is #.sort_by_name method where several assertions are made in one method. It would be better to use several 'it' statements and DRY out the code by utilizing before(:each) statement. One further suggestion would be to shorten the code by using one array statements instead of individual expressions. For example replace: stu1 = build(:student, name: "Student1") stu2 = build(:student, name: "Student2") Â stu3 = build(:student, name: "Student3") with: students = (0..2).map { |i| build(:student, name: "Student#{i}") }
problem Yep, the spec.rb file works fine. I think only handle method hasn't been tested. This is why the coverage seems to be 94%
problem Yes all the features work as intended. The participant that is created using the build method describes participant as an instance of the assignment participant class. I observed the handle method has not been tested yet.
problem Tests in the file pass, according to the video, but less than 100% coverage implies that corner cases aren't being handled.
problem No, the test failed.
problem Features implemented in this project work as intended. After running the code manually I am getting the same coverage as stated on the wiki page. One problem is that the main object under test - participant is createdÂ using build method. factories.rb describes participant as an instance of AssignmentParticipant class. There is a possibility that this is complicating test cases or will complicate them in the future. The solution is to either define a new Participant class instance in the factory or to define it in the code itself.
problem The Wiki is descriptive and covers the essentials of the project. In my opinion, I think the code for every test is not required. It is enough to explain the structure and code for one test, maybe and what each test is supposed to do for the rest of the tests. That should suffice.
problem Project purpose is write test cases for participant model and increase the test coverage. This seems to be easily understandable but plan of work should nainly concentrate on how we test this functionality rather than just mentioning that test cases need to be written.
problem The doc says participant.rb model isÂ changed. However that file is not currently committed. However assignment_participant model file is committed. Seems to be some mismatch at one of the places. Correcting it will help in understanding what work is done and how does it impact the functionality.
problem The problem being addressed by this project is defined cogently without any ambiguities. Test cases are considered separately starting with description of the given method followed by how theÂ functionality is being tested. I would suggest removing parts like Expertiza description (http://wiki.expertiza.ncsu.edu/index.php/User_talk:Rshakya#Expertiza) and rationale behind using Rspec (http://wiki.expertiza.ncsu.edu/index.php/User_talk:Rshakya#Unit_Testing_with_RSpec)Â because those parts fall out of the scope of this topic.
problem The test plan does not include details on preconditions or edge cases. I suggest the team to elaborate on Test Plan. Otherwise a good start.
problem Test plan is not included however they have included the diffeedif test cases implemented and the exolaexplan is good.
problem A more through explanation of what each testcase does will be useful. Its documented well about what the testcase will return but not what it does. Mentioning that will be useful
problem The test plan could be more specific. For example "Writing testing conditions for different functions" doesn't indicate what strategies are being employed or what edge cases are being tested.
problem The document states they have a 77% LoC coverage, but the assignment description states they need at least 90%. This is not complete.
problem Scenarios that are discussed in the wiki have comprehensive descriptions and justifications. However, clearly a number of edge cases are not considered as the test coverage is ~77%. Â I would suggest using mock objects which will both decouple tests from database and increase the overall coverage.Â For example mocking find_by method of TeamsUser would allow covering participant#team case: allow(TeamsUser).to receive(:find_by).with(user: student).and_return(team) Â Another minor issue is that wiki is missing some cases that are implemented in the code (#team, #fullname, #scores).
problem They have mentioned that they use "factory", but it hasn't been mentioned clearly how they use factories. It would be great if they can incorporate this in the Wiki.
problem The writeup explains why the tests they write relate to their respective methods, but doesn't justify a 77% LoC coverage, which is below the requirements for the project.
problem Authors describe the strategy they utilized for tackling theÂ project and the detailed mechanics of each test case. However, there is no mention of specific design decisions or patterns that were used in the implementation. My suggestion is for the team to elaborate on technical decisions made for simplifyingÂ test cases for example the majority of mock objects is created at the beginning before every 'it' statement.
problem The test plan was not present. But the team have done a good job in implementing tests.
problem The test cases have been developed into automated tests however edge cases or failing cases have not been considered. Only simple and straightforward scenarios have been tested. The video shows the test cases and the document shows the coverage. The document is well made.
problem They did not have a Test Plan.
problem Class and variables are name correctly. get_bookmark_rating_response_map is an not an apt name for a function. The word bookmark can be omitted in function and variable names inside the bookmark controller. .when a student requests a bookmark it should show a bookmark test is failing
problem All methods and variables are suggestive of the functionality. Only some of the code changes are explained and reason of taking a particular problem solving approach is lacking.
problem Build fails, pls look into it.Â BookmarkRatingResponseMap has been replaced by BookmarkRatingQuestionnaire but the earlier naming convention just by looking at the name let the reader understand the data structure being used. I would have liked similar approach here.
problem Use ofÂ a few variables is hard to understand. For e.g. :Â x.assignment.id Otherwise, most variables and classes are aptly named.
problem The code follows most of the standard practices except the 3rd one. It does falls short of comments. It took a very long time to make sense of what the changes made by the author in a particular file does. This scenario could be improved in the future iterations.
problem More comments are needed because I had trouble following what the code was doing in some places. The code follows Ruby Style Guide and is DRY in its design. Functions are small in size and naming conventions have been followed. Good work in this area.
problem Function names look good. And most of them have len < 20 which is good.Â The tests make use of contexts effectively. This is great to see. Â Â Yes more comments are required especially in the controller code telling why an approach was taken and what the function does.
problem Code is clean and variable names are readable. Need a bit of formatting as some lines are not 'aligned' well.
problem The code is well written, follows ruby guidelines and functions are of appropriate length. Â No comments are provided what so ever, making the huge code change very difficult to follow.
problem Cases mentioned seem to be working fine. Can be a bit descriptive about the steps though.
problem The features work as intended however I am having trouble navigating and checking what are the differences between the original system and the improved system. Could have made a demo video showing the improvements or a step guide to follow.
problem Yes.Â I suggestion, since they deployed the code and video, it would have been good if they put a view of the UI usage similar to what they have put as screen shots in the code.
problem The write-ups been written well. A small suggestion to the team would be to explain their solutions in more detail as it would better the understanding of what the project does. Also the team could use code snippets instead of screenshots of the code.
problem The writeup seems apt. I had a little problem understanding the solution to problem 1 but otherwise it seems fine
problem The method names and variable names are very well defined ! The best I have seen so far ! No clear explanation is given as to which files are edited for which reason. Only file names are stated along with changes made. Why the changes were made and what do those changes correct is not given.
problem Write up is good. Great job. However I could find few points that if rectified would make it even better.Â It would be good if the problem statement could list the issue (hyperlinks) that are being fixed. That would make it easier to navigate Instead of pasting screen shot for solution it would have been good if few words detailing approach would be put. Post that screen shot could be put.
problem Write-upÂ clearly explains with screenshots what is done. However, does not say how the changes have been implemented.
problem The test plan is not there.
problem The Test Plan was comprehensive. However, in the video they could have explained which screens and which methods they were testing instead of just showing some test cases pass on the screen.
problem Yes they have a test section. The amount of coverage added for the new tests is great. Keep it up, however I would have liked that the authors added more negative cases as part of t heir unit tests.Â I see mostly the +ve test cases being handled in the tests.
problem The writeup is well written. But I feel there are some missing details about the project. The team could elaborate on the issues in the project and the solution that they have implemented. This way it would better in understanding how and why the authors did the work that they did.
problem It mentions what they did but doesn't highlight why they chose to implement that way. Don't seem to have implemented any design pattern as well.
problem The writeup expalins clearly enough what the authors did. Though, the part of "Why" the authors did what they did isn't elaborated with much depth. From the authors perspective, the articles seems exhaustive and comprehensive, but for a person reviewing the article, who doesn't have much background of the problem at hand, the article make it tough to decipher why certain program is written the way it is.
problem The authors do not explain why they did the word the way they did. Entirely new pages have been created with no indication as to why those pages were needed . Old redundant code has been commented but not deleted. Naming and code pattern wise, very good job.
problem Writeup does not mention anything about how the code works, alternative strategies possible or strategies they used.
problem The write-up only tells what is to be done and how it is done. The rational behind choosing the approach is not mentioned, neither are any of the principles mentioned.Â It has comparisons between the previous and new versions and why they made they made the necessary modifications.
problem No. I think the authors should have mentioned why a particular solution was taken. What was the main driving force for taking the approach that they have taken. This was entirely missing. Pls work on that. They could also remove much of the commented code.
problem I didn't find any information about how and why they did the work, they only show me what are the issues and the results after they fixed these issues, for example, in problem 2, they told me their is an average rating metricÂ bug and they fixed the bug, but they said nothing about how they fixed the bug.
problem As given in wiki for their test plan,Â The admin tests include building and deleting both Administrator and Instructor accounts using Capybara for testing the front-end web functionality. it 'delete instructor successfully
problem Build is failing. Correct it by understanding the reason. Good job on Ruby standards for the naming convention.
problem Functions are not long but are sufficient enough to understand what changes are made and how they are implemented
problem methodÂ remove_instructor is written twice in the same file, delete it.
problem The code works well for edge cases as well. As they mentioned in the wiki sometimes the app throws an error (in English or SQL). It would be nice to know if they could debug a little and find out in which case the SQLException is thrown and in which case the English (handled) error is thrown.
problem The test for each functionality is written. However,I could find only 2 tests running , that too not with satisfactory results.
problem The document clearly explains what was the problem and what was the solution they proposed.They have also compared and contrasted with the previous solution which is good. They have talked about how different roles come into play with respect to security perspective and what the pros and cons of having/not having those roles. Comparing the code changes gave a clearer view of the code changes. One improvement could be in the 'background' part.Â Taking it as it was: The majority of the project was related to solving issues regarding the deletion of Administrator and Instructor accounts. Administrator and Instructor are both account types that inherit behavior from User but are (1)handled and deleted in different codepaths. Furthermore, properties are used on a User that aren't on an Administrator, (2)such as team ids or course associationsÂ <
problem The test plan is missing in the wiki page. The content in this section could be the one suggested in the above comment, to just include all the test cases added and write a brief description about each.
problem The writeup explains how the changes are made but does not state about design patterns used and the code dose not show any use of patterns
problem All the cases in Test plan are included in the automated tests.
problem The writeup clearly explains the issues and the approach used to achieve the desired results. Suggestion: The authors should try to include the rspec test documentation, for the newly fixed issues.
problem The writeup does emphasize on how the issues are resolved, however lacks a reasoning as to why did they choose it.Â Suggestion: It is hard to follow the code, as there is lack of comments. You can try to include meaningful comments for every function you have introduced. That will increase code readability
problem The code is readable and no function is too long. Suggestion: The impersonating_as_admin? and impersonating_as_ta? function uses the same session variable, so you can try to declare it above these functions and reuse it to follow DRY principle
problem The names are very intuitive and one can easily understand the reason for each of the variables from their names. In addition the test coverage has increased however it is not very good.
problem The test code follows standards. Context messages can be shorter and precise.
problem The test cases are quite illustrative, however they have not been automated.
problem The link to the deployed application was not available.
problem Except the comments, everything seemed to be fine. The code seemed to lack proper comments, and as a result of which, it took several seconds to determine why the author did what he did. Apart from that, the code seemed perfect. Functions were sufficiently long, and code was DRY enough too.
problem They have added new test cases and hence code is not DRY.
problem The team should add more comments for the codes include in the two issues, it is a little bit hard to follow what the author want to do without comments.
problem The wiki is well written and contains all required information regarding the project. The only scenario missing from the documentation is the scenario where the TA is assigned to a instructor , what will happen to the instructors impersonated students when the TA of the constructor login to the application. Apart from this , the team did a great work.
problem The write-up contains the information about how the solution was achieved. The details about why the solution was implemented in this way is currently missing from the documentation. The team should include the same in the documentation as well.
problem all the scenarios are explained in detailed. The only edge cases which is missing from the documentations is: the scenario where the TA is assigned to a instructor , what will happen to the instructors impersonated students when the TA of the constructor login to the application The team should this scenarios and include the same as the part of the documentation and automated script in the test plan.
problem The code contributed by the author contains long functions which are adequate and consistent considering the amount of task that is carried by each function. The team could improve upon the comments to enable high understanding of the flow of code written. The code does follow the Ruby style guide and supports the DRY principle.
problem none of the functions are too long could find changes where DRY principle was violated the code follows ruby convention and guidelines Although the code is easy to follow, the comments should be included for the created methods/changes. apart from that Good Job!
problem The authors work seems to work fine in theory. But unfortunately, the link provided by the author does not work, and hence there was no way to manually test it. But the demonstration video provided was a big thumbs up.
problem all the basic scenarios are working fine. No issues or problems were found with the functionality. There is an issue related to the CI built which is failing at the moment. The team needs to analyse the root cause related to the build failure and fix it. Also the scenario where the TA is assigned to a instructor , what will happen to the instructors impersonated students when the TA of the constructor login to the application. The scenario could not be tested as the same is missing from video and the application is not deployed. Other than that it was a great team effort
problem Deployed link is not worKing
problem The link is not up. Could not test
problem The URL is not working
problem The writeup was clear enough to be understood by anyone familiar with developing or contributing on expertiza. It provided a high level view, and then dug deep into implmentation, which is great since it saves time, and also look concise. But for someone outside the domain of expertiza, it feels too sudden of a transition that it takes time and in many cases other resources to figure out why the author did what he did. But the overall flow and structure was very great.
problem Excellent writeup. The instructions were clear. The screenshots were apt. One suggestion: Could be shorter and precise.
problem The description for the first issue is confusing, I am not very sure about what the function of the old version looks like. I am not sure what mean by the instructor under the instructor.
problem Yes, the tests are thorough. Needs some formatting in the code.
problem The writeup provides a gist of the project implementation stages. Though it does specifically include a test plan section, it has the list of tasks performed while testing for various scenarios as a part of the issues to be resolved section.
problem Yes, the writeup explains explains how the authors did their work and they have mentioned the steps behind each functionality. Design principles are not used but overall quite nicely explained.
problem The team has explained how to fix the issues but not clear enough, it is confusing what is each pre-existing methods they have used done and why these methods were used.
problem They did not write test code.
problem The test plan could have been explained more elaborately. Edge cases could have been covered.
problem The functions are not too long and the code does not need to be extracted to separateÂ methods. COmments could have been added for a better understanding of the code. The code follows Ruby lines and the lines are compressed. for eg : Unless and if statements are compressed
problem Test plan could have covered more edge test cases. the test plan mentioned in the write up are executed.
problem Edge cases could have been implemented.
problem The authors have documented the steps they did to solve the issues in a clean manner. Although they haven't mentioned any particular design principles or design thinking that went on in solving the issues. They have explained all the functionalities of each file they have modified and stated why they have modified the particular file. One thing they could have added were class diagrams and dependency maps. Or some pictorial representation of the flow of each task which will help the reviewers and instructors to quickly catch up on their idea.
problem The code seems to follow good Ruby on Rails Coding practices. The implemented code is DRY. they could have increased commentingÂ by making comments more descriptive.Â The comments for say a particular function could have includedÂ the input arguments, their data types and the return value and its data type if any. But overall it looks to be good commenting coverage.
problem The write up is good as I was able to understand the issue to be fixed and the implemented approach.Â I would like to suggest the team to standardize the size of their screenshots though.
problem The write-up explains what they did but doesn't mention why they choose to implement the feature this way
problem Although the test plan looks good, I am not able to see any test cases added in the pull request.
problem They don not have any test plan, So I can not judge it
problem The team has added test case for just one scenario. There is no test plan. It is advisable to add more test cases for all the methods in the sub classes to check if the existing functionality is not breaking.
problem The test is explained with the file used in the tabular form. It would have been good to attach a screenshot of the test if possible.
problem No automated tests.
problem Test case has been added, however no way to test it.
problem They discussed just 1 test case and did implement it. Some more corner cases can be thought of.
problem The query is well mentioned but I would suggest the sql be mentioned in the below manner for code clarity. Select ... From table name where condition;
problem Almost all variableÂ and method names are well-defined. Suggestion: Try to refactor method 'render_report' in module ReportFormatterHelper by using hash instead of really long case when statements.
problem review_response_map - can be modularize. Extract the various finction and write new methods for each.
problem Really nice-code with implementation of strategy pattern. Code follows DRY principle However, render_report method is long.
problem the code is well written but few more comments before every functionÂ could have made it easier to understand the code.
problem The features do work as per the mentioned functionalities. There are some suggestions mentioned and would be good to include test cases for the same in future.
problem No link provided of the deployed application or screencast video where I can see the changes done.
problem No link to the application or a screencast of manual testing. Â Suggestion: You can try to add screenshots of the testing performed and attach it to the writeup
problem Yes, the wiki does explain the functionalities well. Could have been better to have more attributes in the subclasses in the diagram. This could help the user know about the details of the strategy pattern used.
problem Doesn't contain the snapshots of the code that was changed.
problem The team has not included the test plan toÂ explainÂ the end user about the steps for testing the functionality.
problem The test is added under the Test Added section and is well explained under the tabular form. Could have produced a screenshot of the test, if it was a possibility to generate. This helps the future teams to know what kind of test result to expect.
problem Just contains the test name and file name. Doesn't show how the test was done and the output obtained.
problem Edge cases missing from the test case. Write more test cases with invalid input types. Example - give a string to an int type and raise an error accordingly.
problem Since the project involved deletion of obsolete methods and SQL, it would be good to explicitly state in the test plan if there were any tests previously that used these methods/SQL. Also, if they are present they need to be modified.
problem Authors have converted test plan into an appropriate test case. Suggestion: Â The authors can improve the writeup if they elaborate more on the testing approach used for the newly added code.
problem just one scenario has been tested and couldn't see any further test plan documented.
problem The team has done great job by describing the approach and explaining same in detail by adding a pictorial representation of the pattern used.Â However, it would be more helpful if the team could add details about the names of the classes and the exact code changes done in the wiki page. As it would help anyone in future to understand what are the exact changes implemented. In this way the comparing code with the original code in github can be avoided.
problem Yes very well written. I would have given full marks if you would have added code snippet and screenshot of the before and after feature. Visually it would have been great to understand the changes quickly.
problem It would beÂ good ifÂ the functionality of the obsolete methods(that were removed during the refactoring) is mentioned; and also explain why they were obsolete.
problem There aren't any test cases listed in the writeup. Can explain the test cases a bit in the github commit message.
problem Test plan not included
problem Testing has been done well. Testing could have been more extensive. Currently the system only tests if the responses are correct for proper input. Blank or no input or failing cases should also have been tested.
problem No cases were mentioned in the Test Plan hence could not tell it is converted into automated tests. Please elaborate it.
problem As stated above, the writeup has a missing test plan which could be added by the team for the second iteration of the submission.
problem Couldn't see any testing being done.
problem The team has modified the existing test cases to cover the new changes made. But this is not detailed in the Test Plan.
problem Naming looks fine. Could probably have usedÂ is_submitted? instead of is_submitted.
problem All methods and variables are suggestive of the functionality. The vm_question_reponse table could have been named/edited to be named in a more descriptive way. I do not understand what is the meaning of VM.
problem Everything looks fine, except for a few places where there are issues with indentation.
problem A small suggestion , new_feedback --> author_new_feedback The variables, methods and class names are aptly named. I could not find names which are not suggestive of functionality.
problem All the names are reasonableÂ except for a few like the function name "get_feedback_assessments_for". It is ambiguous as to what the function will be doing.
problem grades_helper.rb:62 The parameter id is not descriptive enough. Please consider changing it to be more descriptive.
problem The code has comments at the beginning of the functionality. Could have added some more comments where the functions are larger for followup. Can add why a certain change in the fetching process was made, so that next time it can be referred while coding further.
problem More comments are needed because I am having trouble following the code. The code follows Ruby Style Guide and is DRY in its design. Functions are small in size and naming conventions have been followed. Good work in this area.
problem The team has done well to follow the Ruby Style Guide and has ensured to keep the code DRY. However, my suggesstion is to add comments in the code for the reader to follow the code easily.
problem The comments were sparse. Maybe, coming up with a few words before every method would make the project more understandable.
problem The code seems to work for basic required functionality. Need to add more number of edge cases with test results where there is a possibility of a failure and a look into the work around is required.
problem The author's work runs smoothly. It could have been better had they provided a short demo video. I could not figure out where were the changes made in the system. They could have written the navigation steps. Directly giving the flow without any context is tough to understand.
problem I would only suggest you to add more comments to your code. I know that no comments were previously added for you to feed off of, but I guess a major aspect of these OSS projects is to add as many comments as possible to the existing code.
problem Functions are really small and absurd. Does not go along Ruby Style guide.
problem Could not do the manual testing since the link mentioned did not work. But, the code seems good enough to work.
problem The deployed app on VCL doesnt work. Their testing plan on wiki is clear, although their app is not deployed / screencase is available, so not sure how to test the functionality.
problem Difficult to test and review the work one since there were no screenshots provided. I was not able to find an instance of a review which could be submitted as a team but not by individual members of the team. Some of the webpages crash after clicking on a particular assignment to view the review report. Suggestions: The team could explain steps to access the "review view", so that manual testing could be done. The team could create dummy assignments for testing. Maybe, adding screenshots would help in the process.
problem The Test Plan is not complete.
problem I think their introduction and issue sections clearly shows whatÂ functionality the work is related to, they also add some screenshots which help me understand what they have done. But I can not understand what is bookmark and what it is used for, I think it is difficult for someone like me who have not used bookmark to understand these with only a short description. If they can write something more about bookmarks it will be better.
problem Test plan is included in the Writeup section. They have explained about the basic test cases and how it is implemented. Edge cases, invalid inout values arent explained in the writeup.
problem I can not see any test plan section in the writeup.
problem Not completely clear
problem The writeup includes some of the work done.Although it looks a bit incomplete and does not convey much about the project.
problem The explanation is quite good to tell what is the current and the required functionality. The screenshots placed are not complete, as in they cut the code at the right end. Instead I would suggest to placed the github link to the code changes, so that the wiki becomes shorter and you can explain each code change better in the wiki. Also, the reviewer can compare the code with your explanation properly if he has the link to the code.
problem The write up is okay but could be a bit more descriptive. Could have provided screen shots of the changes to help reader understand better. No initial instructions on where to get started.
problem No clear explanation is given as to which files are edited for which reason. Only file names are stated along with technical changes made. The method names and variable names are very well defined ! Kudos!
problem Code snippets are provided but the functionality that was to be implemented and how has that been achieved is not explained.
problem This project is on implementing a single rejoinder per team for reviews instead of per participant reviews and also makes the feedback link for reviews more accessible. The writeup explained the background about Expertiza and the motivation for the project. It then moved on to list the tasks that were implemented and files that were modified in the project. It showed the current and new implementation clearly. The writeup, however, could have quoted the tests done using RSpec and the UI, instead of plainly mentioning the that the tests were modified to suit the current implementation.
problem I was able to understand what the project does to a certain extent. The writeup could have been more eloborate with views/snapshots of the page before and after the changes.Â It adequately indicated what functionality the work is related to.
problem The team has mentioned the problem statement and the methods which they have implemented to solve the problem.Â However, there is a difficulty to follow the workflow since there are no screenshots attached or any video link provided. The team could improve this by adding a screenshot of the updated workflow below the changes shown in the writeup
problem The team has written a well structured write-up, but it lacks depth in certain areas. There is need for more background on what an author feedback is. The project description gives a better idea. Please try to include details from there. The last sentence under the 'Motivation' head, "You should change this to list the teamâ€™s collective feedback to its reviewers to a particular assignment" is a bit confusing. Please rephrase the sentence so as to add clarity to it.Â Â Instructions on how to manually test the functionality is missing. It was difficult to figure out how to navigate to and test the functionality. It would be really helpful to add this in the wiki.
problem There is a separate testing section in the writeup, but it does not have much explanation. Could have added a couple of test case explanations. Also, a screenshot of a passed test case could work wonders.
problem Test plan not included.
problem The authors have considered various preconditions but edge cases are not tested. No test plan has been provided. Some tests have been edited to meet the new requirements. Many conditions have been checked using 'if else' cases which could have been more elegant.
problem The test plan section just states that the existing test cases for feedback per member is fixed to satisfy the new feedback per team implementation. It would have been effective if specific pre-conditions, edge cases, invalid input values etc are handled. For example, in this case the input with missing team id or one member teams can be used as good candidates to test the implementation.
problem The test plan does not look complete. It just saysÂ Fixed the existing test cases for the review feedback by a team instead of a team member. Could have mentioned the edge cases and how they tested it.
problem Just aÂ one-line summary has been provided about the testing but it is not clear what the test plan is.
problem The authors have just mentioned that the test cases were updated. It would be good if the code diff for the test case modification were also provided so that we get an idea about the kind of changes made.
problem The writeup mentions about the changes done in the code but not how and why it was done. Instead, the team could explain each code change more and give a link to the code change(from github)
problem They have provided code snippets explaining what they did. No design pattern used or specified.
problem No mention is made as to why the changes were made in which specific files. A few lines are given before each image but they are too succinct to understand anything. The code is well written but hard to follow (what is the functionality of the code is tough to decipher). Code is well written.
problem No, the write-up doesn't describe why certain methods were chosen and written the way its implemented.
problem The functionality provided as a result of each issue is not explained. The way of work or design principle is not mentioned.
problem The writeup clearly explains the project- a single rejoinder per team for reviews, but does not explicitly say the advantages of having such a system. On the other hand the authors do justify the need to fix navigation issues for giving feedback to reviewers as it results in a user-friendly UI. The modification to summary report to accommodate collective feedback is logical and directly implied if the main problem statement of single rejoinder per team is properly justified.
problem Could have been more eloborate. No mention of design principles or patters used.
problem The team has explicitly mentioned the classes and the name of the files where they have made changes. However, i would suggest the team to add the filenames above code snippets that they have attached in the write-up. This would make it easier for the reader to follow the workflow.
problem The classes where the changes have been done are mentioned. However, it is unclear as to why those classes have been changed and the real pattern behind picking those classes or methods.
problem The write-up has detailed how the author has done the changes. But it fails to address why the particular direction was taken, in some cases. It would be good to elucidate on that as well. In ' Solutions Implemented...' section, it would be good to include the names of the files before each code snippet and not just the description so that it is easier for the reader to relate.
problem The test cases are cleanly written following good practices. Some of the indentation needs to be adjusted to contain better readability. Also, within the menu_rpec file, you are essentially testing two classes Node and Menu. I am not sure why that is. Is the node class and inner class of menu?Â Maybe these two classes should be separated into different rspec files to ensure a better naming setup. Maybe this could be clarified in the wiki so that readers would understand the design choice. Overall great work.
problem Most of the codes are well strutted, but something like "returns an equivalent item" is long and it is better to separate them.
problem all the tests are working properly except one. A pretty good work has been done.
problem The team has introduced the functions clearly, but it may be better to also include the introduction of expertise itself. Besides, the motivation is general, add some specific details for this project would be better. As far as I am concerned, for the functionality of the menu, the introduction is also a little bit general. Adding more details about what the function of the menu, so we can know clearly what should be tested and if the test is enough.
problem The test plan describes the flow of the tests and what the expected values of the objects should be in certain scenarios however I didn't find any mention of edge cases or invalid input values.
problem The overall purpose of the project, the need for mocks/stubs, and the scenarios of each test case are very well presented; however, there is little explanation about why certain tests were implemented in any particular fashion. It would be aÂ nice addition to include a few of your test cases and explain your reasoning behind why/how you implemented that test case. Adding this would further clarify your design/testing plan choices and make for a fantastic read.
problem The wiki give the motivation for this project, but it is general and should be more detailed for this project.
problem They are done with one of the Test Plan scenarios. Second one is yet to be done.
problem Test cases are not part of requirement spec.
problem Test plan is manual. No RSPEC files included.
problem No test cases is included in test plan.
problem Testing plan didn't outline what the automated tests were or how it is done.Â The video showed the features being fixed. Also the hosted expertiza site was not working.
problem No tests added
problem Not many functions defined. Only database changes made and inbuilt function used.
problem Please make sure code like puts X is avoided. Remove them and commit the code again. Builds are failing. See the TravisÂ CI build details andÂ code climate errors and fix them
problem One failÂ Two successful.Â Over all coverage increase is 9.9%.
problem Function, variable names are ok but there were ruby coding style issues like not using elsif blocks, not keeping code concise andÂ not following ruby syntax.Â Scripts for converting non UTF-8 files is a good approach.
problem Not many functions defined. Only database changes made and inbuilt function used
problem ConvertÂ ifÂ nested insideÂ elseÂ toÂ elsif. Unused variableÂ key inside remove_non_utf8 method.
problem Code had a few guideline misses which was noted and suggested by the automated tool on pull request.
problem 1) No, function length is good 2) No. they are apt. 3) comments are not included, which makes it hard to follow, as the changes are not regarding functionality rather than system implementation, comments should have been elaborate and detailing why the change is done 4) Yes they did 5) No. the code was DRY and reused efficiently
problem Cannot test the code as the application is not opening and the videos uploaded are binary files.
problem http://152.46.18.195:8080 Â is not working. Also, the video is not running, Please upload in youtube.
problem No work shown.
problem The written explanation is good. Add few screenshotsÂ of the change to be able to understand the changes done visually.
problem Yes it explains with clarity the issue at hand, UTF-8 only support & how that causes trouble. Also improper formatting of HTML tags.
problem The document directly dives into issue, they could have provided more information on different scenarios that are currently facing the said issue and its magnitude. This could have been helpful to counteract the problem in the future in other scenarios
problem As explained in the test plan, rspec test is not implemented.
problem No, one of the functionalities of the Test Plan is not yet done.
problem Testing was not part of the requirements. Team did manual testing.
problem No there is no test plan included
problem The write up does not mention any patterns if used, and could not identify the pattern from the code as they have made changes using the database and not any function
problem The folders/binary files in the drive cannot be played. Can you upload the video on YouTube so that it is easy for everyone?
problem Yes, it does explain but could have added more details to make it clear.
problem Though they have detailed their approach on DRY, they haven't documented the core issue beyond non UTF-8 not accepted. Its hard to follow their scope as only review or entire expertiza use, as the table alteration is done as a whole
problem Yes, the writeup explains the problem statement the solution implemented. But snippets of code not added and screenshots missing too. Too many github links. Could just add some snippets to make it more readable.
problem The test coverage has increased significantly from like one test to 100%. Kudos to the team!! The team's pull request hasn't passed due to inconsistencies in following Ruby styling guidelines.
problem Proper naming conventions are followed for variables and methods and classes. The only thing I think can be improved is dummy names for files and hyperlinks.
problem There are some duplicate codes could substitute with "before" statement. For example, line 100 are exactly the same with line 108, it is better to use "before" even if there is only one line duplicate.
problem Overall the team has done good job in maintaining Ruby Style guide. The team could add more comments and reduce code redundancy in scores() method.
problem I feel that they have achieved a 100% test coverage, although the design principles or patterns used haven't been listed. Listing that would help understand the testing strategy used.
problem Since it's a test project, there are not much design patterns to follow, but they should list what tech they used to test the rb file.
problem The authors mention that they have followed DRY Testing practices but there are few test cases where they have notÂ implemented it. For example scores(questions) method. I would recommend to make the use of factories. Overall well written test cases.
problem The writeup is really nicely written. It clearly mentions the work done. However, the problem statement could have been explained a little more.
problem The test plan is too elaborate and doesn't exactly cover different pre-conditions, edge cases, invalid input values, and other possibilities under the corresponding headers. Please include this as it improves the readablity and understanding.
problem They have a very detailed Test Plan section where they explain every method and whatÂ they did. They don't talk about pre condition or edge cases or invalid input or things like that
problem The test plan seems to include examples of tests and the explanation of the same. However, I didn't find any description of edge cases or invalid input values.
problem The test plan section is really well written. However, pre conditions , edge cases are not very well discussed and talked about.
problem The Wiki has all the relevant information though I feel it needs to be a bit more organized. The titles and order need to change. The content needs to be placed at proper places. For example, test plan lists all the test cases and code, whichÂ according to me should be covered in the implementation.
problem The wiki talk about what they have done throughly, it could be better if they have mention about how they do that.
problem The test cases are working. The coverage also as i can see is 100%.Â I could find only one test for which the edge case failed.
problem There is no Test Plan yet implemented in the wiki documentation. Be sure that when you include this section that you make the inclusions specific and intentional.
problem The team has not included a Test plan that models their tasks for running the test cases. It should list the overall procedure adopted by the team from scratch to getting the tests running.
problem I am unable to find the file review_response_map_spec in the github repo that was supplied. However, there was a ruby file that was attached in the submission. The variable names are also clear and unambiguous. This file is incomplete but the tests that are complete seem to follow appropriate syntax and guidelines. I would suggest to add some describe and context blocks that would clarify the purpose of each test case rather than just have the it statement saying the name of the method being tested. Keep working to finish up the remaining tests in this fashion and it would be great.
problem inÂ test file, you can give one more line of it, for each test to describe the purpose in a little more detail than just the method names.
problem The functionality added to the pull request is reaonable and makes use of appropriate keywords. It could be improved by giving names according to convention like feed_ back_ review_response_map could just be feed_back as jt is part of the review response map model file.
problem There are 7 issues pointed by the auto bot which require code to follow coding standard.
problem The code seems to set up a large list of factories only to then in many cases make these redundant by creating mocks for each test case. It is unclear what the code is trying to do and many of the test cases are large with many mocks with stubbed methods. It would be helpful if explanation for the code was given. When using factories it is generally unnecessary to stub the all the methods of these factories as they are in fact actual instances of the class. The code not very DRY. In many the cases the mocks and stubbed methods could be moved to a before_all or before_each block.
problem Except the lack of comments in the code, the code seems to be perfectly fine. Could be improved in that scenario.
problem As mentioned in the above comment, Add these describe and context statements to further comment on the purpose of your test cases. This makes it easier to understand the why the test is there, I also find that it helps to clarify to the developer that the test is necessary.
problem ForÂ nil input test, they should separate them from the normal input with a new test, instead of put them in one. some missing invalid input testing, such as import, export methods.
problem The code written by the team includes the basic functionality needed to run the test cases. Some improvements might include keeping a function short like diving the import function into multiple contexts or reducing reduntant code by using the mock built.
problem Many tests are not yet implemented. More testing of the author's work in handling edge cases will be done in round two of reviews.
problem Not possible to test work manually.
problem I cannot find the code
problem Some edge cases are missing, so I assume most of them work.
problem Manually ran the Test and Coverage report says only 34% of Code is Covered
problem I believe the wiki is not complete. However, the content that is included so far does aid in the explanation of the project purpose. More elaboration and completion of additional sections such as the testing design and implementation of tests will help to fully clarify the project purpose to the reader.
problem They may misunderstand the meaning of test plan, they just put the code on test plan, so i cannot judge weather they are success or fail.
problem Not all i can see only some of the methods being covered 61% approx
problem The Test Plan is not defined formally in the wiki. Instead the reader has to reason about the provided code itself. All of the tests are passing, but methods like 'review_response_report' and large part of 'import' are not covered.
problem The writeup is sufficient in itself, but not as exhaustive or easy to understand from the perspective if an outsider. The author could have elaborated more on the problem statement, and how it related with expertiza. Also, instead of directly jumping to the implementation, the author could have explained a little bit more about why and what was the approach taken by the author.
problem The functionalities are working fine. The describes in the tests could be a little more verbose.
problem Can not find pull request link.
problem I can understand what the project does. I cannot, however, understand how the project does what it does. The code is not explained at all.
problem The Write Up can be improved by explaining all the Methods which are tested
problem The wiki document for the project does not provide enough details about the project and the task performed by the team. It contains of only a rough overview of the project at this stage. It does not reveal much about the functionality of the program.
problem There is not a specific Test Plan section in the wiki. There is a Work to be Done section that discusses the work that should be completed for project success. I would suggest rearranging or rename this section and continue to describe your plan of attack for testing.
problem I cannot find the test plan.
problem There is a section titled Test Plan. However, it does not seem to be a plan or give an outline for the development of the code. Instead it describes what the methods do, but shows the testing code for the method. This is confusing as no explanations are given for the coding design.
problem The writeup does not include the Test Plan section. It is suggested that the team add the section and include a number of different aspects such as specifying the edge cases and preconditions considered while working on the test cases.
problem there is no explanation in the writeup.
problem Little explanation for the code is given. The only case in which code is explained comes in the section titled Test Plan under the subsection Mock Instance. Here, it is mentioned that the project uses mocks to aid in testing functionality. However, the code example is actually of factories, a different but related concept. It is unclear if this is a typo or a misunderstanding because in later code snippets mocks do appear.
problem The writeup lists the task to be performed under the Work to be Done section. It enlists the criteria required to be achieved as part of the project submission. The team can adopt a workflow that can give details about how the team managed to reach the current implementation such as understanding the files involved, steps taken for setting the expertiza environment etc.
problem covered all the edge cases but have not provided any explanation.
problem ThereÂ are some instances of variable names that are concatenated with numbers, for example answer2, questionnaire2 etc. While this approach can be justified in some cases, I would suggest using more descriptive names instead or arrays if multiple instances are required. For example team could be used instead of team1 because that is the only Team instance variable in the source code.
problem I did not see pull request
problem The code does follow all the standards and steps to cover all the test cases. Could include some more comments to make the code self explanatory.
problem the code does follow the ruby style guide.
problem Their code is good, but some of them are too long.
problem The source code is mostly following standard Ruby practices, but there is a room for improvement. Firstly, the source contains large chunks of code blocks that are commented out. I would suggest removing those chunks as they reduce the overall readability. Given chunks can always beÂ retrieved via commit history. Secondly, some application level objects like Answer or Criterion are used to create corresponding instances as opposed to mocks. It would be better if the authors either used mocks or provided the reasoning for this decision.
problem Yes, their code works pretty good, but their coverage is a big problem.
problem Code is nicely written and runs well. However, more edge cases should be included. For example, each function should be tested for a known success case and an edge case or potential failure.
problem Running the code manually resulted in 69.61% coverage. However, there are four methods that are in a pending state.
problem The coverage could be higher.
problem The wiki looks too long with a lot of code. It does have all the code and test cases, but its better to have git links to each code and more explanation of the code used above it in the wiki. This will help the readers to compare the changes in the code with the explanation parallelly.
problem No clear explanation for the work.
problem No, I don not think their writeup is clear. In their writeup, they just paste the code without any explanation.
problem The wiki page is divided into some nice sections, however the authors have just included the code as it is without any description of the work that they have done.
problem The write up is written adequately. Only thing is to reduce the code shown on the wiki page as I feel that it might be irrelevant to have the whole code increasing the reading page size.
problem Its a good write up, additionally you could try to explain method and test rather than including all the test cases
problem This team used migrations effectively, and generally had DRY code, but it still felt very ad-hoc. I couldn't find any patterns that drove the changes they made.
problem The wiki defines the primary goal of the project but it does not contain a discussion about the plan or strategy that is utilized to solve the problem. Raw code is copied from review_response_map.rb and review_response_map_spec.rb files, however this does not give the reader any useful information.Â I would suggest replacing the review_response_map.rb code with a short description of what the team needed to understand about the given code in order to write the test suite. Furthermore, the team can provide a listing of higher level method descriptions from review_response_map_spec.rb, what are the expectations and which mock objects are being used to achieve the result. One minor improvement would be removing parts like Expertiza description (http://wiki.expertiza.ncsu.edu/index.php/CSC/ECE_517_Fall_2018/E1850._Write_unit_tests_for_review_response_map.rb#Background) because it is redundant in this context.
problem There should be more explanations.
problem Not perticular test plan section, but there are some different possible results have included.
problem In their test plan, most of it is code, without any explanation or cases.
problem As this rubric calls for the need of a section - Test Plan, I suggest adding it and including the work done in that section along with why a particular test has been written.
problem Most of the scenario is covered, the total coverage needs to increase a bit.
problem The Test Plan is not defined formally in the wiki. Instead the reader has to reason about the provided code itself. Given test suite covers every method of the object under test. ~70% Coverage is achieved. It would be better for the team to define the test plan and decouple it from the actual code. This could be done by firstly stating all the 'describe' constructs, methods that they are testing and secondly,Â elaboratingÂ by listing their descriptions.
problem All the functionalities are listed and code also attached for the same. But, if the code changes were highlighted in color as in git, then its better comparable.
problem No, they explain nothing, just put the code on it.
problem The wiki page is divided into some great sections that provide details about the project.Â I appreciate that the team provided actual code snipits along with explanation of the test to afford the reader a deeper understanding. The first paragraph in the design section is a bit hard to follow. It would be helpful to have this explanation accompanied by the tests these stubs were associated with and/or the actual implementation of these stubs for a better grasp of their purpose. IÂ would recommend combining the test and design sections for a easier flow of reading and following test implementations. Thank you for the Results section of the wiki that wraps up the project and is an easy point of reference for the reader to see the outcome of the project.
problem Please explain your test work rather than just paste your code.
problem The authors have not provided any explanation of the tests that they wrote.
problem There could have been certain negative scenarios tested as well.
problem Writeup can be improved at the task section and more information could be added
problem Some cases yes but most cases it needs more documentation
problem The wiki does not include any discussions about design principles or patterns that were used in the project.Â One thing that stands out in the code is that every mock object is defined at the start of the file. The team could provide a rationale for this decision and why it is superior to for example using different mocks for each separate test suite.
problem There is no explanation.
problem I felt the section "conditions tested in menu" could have been more verbose.
problem Again the test plan is not about what they test in the Rspec test.
problem They add a lot of tests but they did not mention which test they plan to do in the Test Plan section.
problem The code follows the DRY principle and the Ruby style guide for writing the test cases. The code could be improved by providing comments. The code contains optimum length methods and the variables and functions have been properly named.
problem Not sure what ca_test1 really is. I also didn't find an explanation in the write up for "node"
problem The code looks very clean. I am a big fan of the set up of the describe/context/it nesting that clearly defines the test cases' purpose. I am confused why there are two classes being tested in this spec. Is the purpose of this class to test Node or to test Menu? If two classes are being tested they should perhaps have separate rspec files to make clear the point. However, the actual syntax and implementation of your tests is beautiful.
problem There are some small problems like finalÂ newline missing, but overall looks good.
problem The tests describe the code they are testing not the behavior/functionality. Like for "In this scenario, the controller_action attribute of the menu item is unavailable. In this case, the expectation is that a customized pathÂ is assigned to the URL variable." This just specifies whatÂ variableÂ is being updated and I have no idea what workflow it represents. This is at least a brittle description for a test. Suppose tomorrow the variable is removed or some function ends up calculating the value, while the test it self might pass if the change was passive, the description is now stale and will confuse any user trying to update the tests.
problem The Menu test case violates the DRY principle. The team can make use of factories to get rid of code redundancy. Overall good work!
problem Except for the lack of comments, the code was relatively easy to understand, and was sufficiently DRY.
problem The team has leveraged the existing test cases to align with the changes implemented; they have not created any test plan.
problem All the test cases are passing however code coverage is low. Various different scenarios must be tested thoroughly. Travis CI build is passing and efforts were taken to work on this. Appreciated!
problem A few tests were added, though I'd like to see more tests regarding edge cases or invalid functionality.
problem Too long if statements areÂ written.
problem The team has followed Ruby coding standard. However, function names could be refactored for example the function "get_time_diff_btw_due_date_and_now" name is just too long and can be modified into "get_time_diff" or any other meaningful name. Also, it is advisable to keep the function name singular or append the name with list; so instead of using "find_participant_emails" the team can use "find_participant_email_list".
problem The code has been implemented in a modular fashion. However, the team can improve the readability of the code in mail_workerÂ and assignment_form. Currently it lacks readability because of too long comments between every line of code and poor alignment, which makes it difficult for user to understand.
problem At several places, the code used a lot of nested if else statements and some methods were very long. These lines could have been refactored. Also more comments are needed that explain what a method/variable does (just good naming is not enough). The code is DRY compliant and follows style pattern well.
problem Function length is good. General convention of having function length < 20 has been followed. What I found lacking was additional 2-3 lines of comments before each new function to understand what has been implemented.
problem The issues in the code has been resolved. But the wiki only addresses the technical changes done. It does not address the functionality details; which makes it difficult for the end user to test all edge cases. The project deals with the emails which can only be tested in production and not in test environment by any end user.
problem The authors work functions well but the code uses redundant/bad logic in some places. Code could have been put into methods and reused. The code functions as expected in almost all cases
problem Yes features work as intended but I would like to see tests as well as testing case were job addition to queue fails. I understand this would be edge case and not likely to happen but still needs to be handled. Other edge cases such asÂ participant_mails is nil have been taken care of.
problem The wiki as well as a design document has beenÂ created for the write up whichÂ explains theÂ refactoring requirements. The team has explained the technical aspects in a very detailed manner. However, it would be helpful for users if the team could add more details about the functional aspects so that a end user can test the impact on the existing functionality due to the changes done.
problem Write is clear and well written, a trivial formatting mistake ( new implementation bullets ) but that is fine.Â Problem statement is well define and the existing solution too. Problem statement does not need to state that RSpec tests have been added.
problem The test plan is not present.
problem nothing mentioned about test plan only snapshot provided.
problem The team has leveraged the existing test cases to align with the changes implemented. It would have been more helpful to include the test cases in the write up as well.
problem Test cases are failed
problem The tests look detailed and clear. However no edge cases or failing cases are tried. Simple and straightforwardÂ tests are implemented. They could have tried more corner scenarios more..eg. fields are missing etc
problem No test plan is included. Testing is mentioned briefly but does not mentionÂ what tests were added.
problem Existing tests have been modified to changed to pass for the new implementation.Â News tests could have been added
problem The team have explained why and how they did the work they did. Feel they should elaborate more on the tests that they have implemented.
problem Yes the authors explain the existing solution and explain the drawbacks for in them.Â I would have liked to see a point wise comparison on how their solution overcomes the existing drawbacks.Â I would suggest not to hard code the mail text/subject in the code and use a config file instead. This will be easy to modify in future. I would have liked if the authors added why they took sidekiq and not rabbitmq or celery
problem The writeup is good and it clearly meantionsÂ the issues to be fixed in the problem statement and the code modified is also displayed.
problem No the writeup does not have a test plan
problem Testing has not been done yet.
problem I have been unable to test the users work manually as expertizaÂ does not allow me to send a mail to my existing mail id. I have also tried adding a new student to the assignment which was not possible( i got an error stating the student does not exist) and all existing students have the mail id(Â expertiza@mailinator.com) which cannot be accessed to verify.
problem they explained how they made the changes. Patterns if used are not noticed by looking at the code and not mentioned in the writeup
problem no test plans mentioned
problem Authors could use empty? instead of checking unityId != ''. Another thing that the authors have taken care of ttml mails but what if the somone needs to non-html mails.Â attribute copy_of_all_emails does not look like a good name, it would be nice if they could rename it to email_copy_all or so this help in reader understand as well as in ide intellisense.Â Code coverage has decreased
problem Comments in code are missing. There are few lines that need to be removed but still exist, it would be nice to delete those eg #emails << assignment.instructor.emailÂ Â Function length looks okay, most functions have len < 20 lines which is an acceptable number. Since the code is implementing very specific issues over it has specific local changes.Â Other change are okay and ruby like
problem There is no test plan included.
problem The writeup was fairly specific on how the solution was implemented, although more qualitative description should have replaced the source code dumps. The writeup barely explained why the improvements were needed, focusing on what was implemented.
problem Commented-out code should be removed (at least one example found in participant_spec.rb). Also, there are some indentation issues as well as other issues flagged by CodeClimate. Otherwise, the code seems to comply with the Ruby Style Guide and be fairly DRY.
problem Minimal changes were made to the test suite and new tests were not written for the new code.
problem No test plan added in writeup or explained otherwise.
problem set_proposer is a setter but appears to be used as a getter.
problem Code climate show 99 issues in the code. Many lines aren't properly aligned. Commented code hasn't been removed.
problem The tests scripts are not written for the changes.
problem The coverage has decreased as per the tools that run by default on raising pull request by 13.6 %
problem Build isn't passing. Write up isn't passable.Â No screenshots or explaination in write up of what you h=are doing and why.
problem The pull request did not pass the tests and the names assigned seem appropriate to their functionality.
problem All the names are intuitive and reasonable apart from "drop_topic_deadline1". The team need to change this variable name to something more precise other than that Good job following naming conventions!
problem Code looks good. Namings are also ok. Print statements are also pushed(not expected!).
problem Some functions have the same code deleted and added again which could've been avoided, likeÂ schema.rb line 105 & 110, lines 741-743 & 745-747 and more lines similarly in that file
problem In the codeÂ topic_id1 and @drop_topic_deadline1 name doesn't seems to follow the ruby guide line and you should probably name them differently like first_topic_id and first_drop_topic_deadline.
problem none of the functions are too long could find changes where DRY principle was violated the code follows ruby convention and guidelines Although the code is easy to follow , the team needs to add comments for the changes which is currently missing. Good Job!
problem This section of the wiki is currently missing. When you write this section be sure to state why you tested certain cases in a particular fashion accompanied with code examples so that the reader can clearly see what was done.
problem The information provided is good but the page is not organised and the code is confusing. Team should work on improving the format of content(the way they are representing info).
problem The code you have added in the write up isn't indented, its hard to understand this way. You need to make the write up more readable.
problem Write up doesnt include test plan. Good thing would be include the testing steps they have performed. Few screenshots would be helpful as well.
problem Test Plan section is not maintained in the documentation
problem The writers have explained what they did in the project and how they did it. But, I could not find a 'why'. No reason behind the approach is specified.
problem Inadequate information
problem The writeup mentions what lines of code were changed but it does not clearly specify what each changed portion of code means.
problem I don't see any new tests
problem On checking, the code, we find that, in agreement with @TravisBuddy, the code had a build error which seems to be unresolved, which is strange, and should have been looked into. Moreover, the overall coverage shows a decrease of 0.1% which should be a cause worth looking into. But one must say that the details in the code changes have been to a good extent for the majority of the part and thus worth the merit. One thing that surely catches the eye is variable naming, especially 'handle_dups' which is a strange/ amateurish way of variable nomenclature and there is reason to believe that it may result into conflict in code at some point.
problem There are many places where "puts" statements are used where a logger statement should be used. There is also a set of if/else blocks that check to see if a variable is of a certain type, which could have been abstracted with an appropriate design pattern.
problem While some functionality works, the replace existing team functionality did not work when I tried using the examples in your write-up.
problem Crashed for me once randomly. Might be not because of these changes but I am not sure
problem NO TESTS added.
problem Test cases were not mentioned. Can't test as the link to the deployed application is notÂ working(Unable to login with correct user credentials. Even after giving forgot password, did not receive password reset email)Â nor the screencast video link is provided. Please include check either of them.
problem I could not figure out how to test the code. I could not make an account for myself because Expertiza is not set up that way. There were no setup instructions in the writeup for testing the emailing capabilities.
problem Can't test as the link to the deployed application is notÂ working(Unable to login with correct user credentials. Even after giving forgot password, did not receive password reset email)
problem there are issues in the build
problem no test plan availble in the documentation.
problem The Writeup does not have a test plan. Not able to check if they consideredÂ different pre-conditions, edge cases, invalid input values, and other possibilities
problem No the writeup does not mention the test section.
problem The 'why' part is missing for the code changes. What does each code line of change do? Maybe you'll can incorporate that.
problem The writeup explains to a limited extent the approach that was followed.Majority of the writeup consists of code and not how it was implemented.
problem You could have made the empty method end on one line. I think _args could be named args.
problem The writeup does not explain the changes. Also the wiki page is not elaborative about the changes made
problem The testing of initialize is very well described with descriptions of how and why the tests were written in that particular fashion. However, all other tests are not discussed. When looking at the github it seems that there were many more tests that were not elaborated upon. The test descriptions were included at the bottom of the page but without explanation of implementation or purpose. It would be helpful to include more of the test cases. If anything, it would be a good idea to discuss them without the code inclusion like that of initialize because that section of the wiki is very well presented.
problem This doesn't apply here much as its just writing testcases. However some of the tests documented in Menu like Mean with role and without role are confusing. I had to look through the entire doc to figure out why is that written that way. It could be better to have comments as to why a particular test is written , what does it test and why is the expected output the way it is.
problem Does not apply much.But instead of using names like temp and temp 1, a more significant name which is self explanatory of its content will be useful.
problem They could have also documented their design approach if any and also useÂ of mocks and stubs. Their test intentions could have been more detailed
problem There could have been other tests with different inputs tried on the setup, initialize and select methods. the pre-conditions could have been more eloborate.
problem 1) No, they have modularized well. 2) No 3) They could have provided more comments on tests where they set nodes at few places. 4) They could have used factories more extensively, due to various mock data they might have needed to cover different inputs 5) Their code can be more DRY, as they seem to repeat instantiations in all places
problem The whole wiki page is complete and neat, while it might be easier to understand if they reorder the test plan with other parts of the page.
problem Though the authors have included a thorough testing plan Inside the commits I couldn't find any commits for adding testing files. they could have added basic UI testing using Capybara and cucumber.
problem Both the specs fails spec/controllers/student_task_controller_spec.rbÂ fails spec/features/airbrake_expection_erro
problem The test plan needs to be significantly improved.
problem The pull request link is not provided to verify the tests.
problem Pull request not created / link to pull request is not found in this submission.
problem I could only see 3 commits with no significant file changes. I would request team to add and contribute the changes as soon as possible. With the present changed code, methods names and variables and class names are proper with reasonable naming conventions.
problem Link to the pull request is missing. Please add it.
problem The variables, methods, and class names do seem to follow proper convention and are suggestive of the functionality they are being used for. In some cases they could have used a liitle more desciptive names for variables for example inside app/helpers/student_task_helper.rbÂ they could have used background_colour instead of rtn as a variable name in the due_date_color() method. It will become more readable for the reviewers to understand the functionalities.
problem @all_task vs @student_tasks Â The name 'all_task' does not sound appropriate. It should be
problem No pull request has been created as I can see from the link provided. The commits have been made, though. I think they are just one step behind creating a PR. Some variables like, @students_teamed_with, seemed ambiguous as to what do they represent.
problem The variables, methods and classnames are aptly named. I could not find names which are not suggestive of functionaliy.
problem In due_date_color switch case would have been a better approachÂ then if else if block. Lots of code that is done in viewÂ can be moved to the controller. Follow MVC architecture.
problem The functions seem to be implemented in a good manner and the code seems to be DRY.. In some cases though the authors could have improved as in the i app/helpers/student_task_helper.rbÂ file. In side the due_date_color method they could have used case expressions in Ruby instead of the if else logic implemented as that would be a more Ruby on Rails way of doing it. As it will reduce the lines of code as well as being a more elegant way of handling it.
problem In the due_date_color(due_date
problem Not possible to test - neither a deployment nor screenshots provided.
problem Can not find any video or link or Ip address link to manually test the changes. I would request team to deploy the changes so that we can test the system partially.
problem Can't test as the link to the deployed application is not given nor the screencast video link is provided. Please include either of them.
problem Student dashboard Â Please see the dashboard. The UI elements are not properly aligned. The title "Current Assignments" is not where it should be.
problem Couldn't test it manually as no link/guide provided for the same.
problem Whether the task is due is determined by a date str and it may be go wrong under different timezone.
problem Thee writeup page is concise and easy to understand but there is no insight into the code.
problem Screenshots are missing under Test Plan section.
problem Writeup is readable and written properly. Team could have added code snippet and pictures of changed or improved functionality. Also team could work upon formatting and could also add links and references.
problem Please include the code snippet that was changed and also a screenshot of the view before and after the change.Â Also, Please provide the link to the pull request and not the repo created. Good written explanation of the changes done in WIKI.
problem Wiki page does talk about test plan. But it is explained in brief,Â but no details of test scenarios or testing technology to be used.
problem Few test cases are missing context and it block so it is difficult to understand what the test case is doing unless you read the entireÂ code.
problem I could think of 1 missing test case, where an assignment due date changes from future to past, that assignment should now appear in the past assignment section, Â apart from this test case, all edge cases have been covered.
problem It feels like test plan only covers one aspect - "changing of the background color for tasks as we approach the deadline." Â here are other aspects which can be automated for testing, perhaps by Rspec or the likes: Add past due assignments to the studentâ€™s task list (on Student View). -- Verify if they are being added/saved Check for correction in due dates of assignments (when an assignmentâ€™s due date is edited, it should be appropriately moved from the â€œPast assignmentsâ€ list to the â€œCurrent Assignmentsâ€ list if needed) --- Check if the functionality works. On Student Task page, separate the list of 'teamed with' students from the cur
problem There is no edge case.
problem Yes, Writeup explains the approach taken by team to solve the issue, theoretically. Team could have explained the issues and resolution practically. Also no design pattern or principle were used.
problem It only explains how they did but not why they did. The various approach could have been mentioned in the WIKI.
problem The authors have documented the steps they did to solve the issues. Although they haven't mentioned any particular design principles or design thinking that went on in solving the issues. They should haveÂ explained all the functionalities of each file they have modified and stated why they have modified the particular file. One thing they could have added were class diagrams and dependency maps. Or some pictorial representation of the flow of each task which will help the reviewers and instructors to quickly catch up on their idea.
problem The writeup only tells what is to be done and how it is done. The rational behind choosing the approach is not mentioned, neither are any of the principles mentioned.
problem It is better to state the change of the feature or added feature with diagram to show the difference, to state what remains the same and what is added or update understand certain circumstances.
problem Cannot check. Link
problem Test plan is clear but doesn't have any test cases.
problem Functions are named properly.
problem The functions are not too long so the code doesn't have to be extracted into separate methods. More commentsÂ could have been added for easy understanding of the code. The code follows the Ruby style guide and the code looks refactored, statements "unless" keyword are written in a single line.
problem I was able to create a new user with the username "abc def". Although the changes made to the code seem to be sufficient to fix this, the deployment does not seem to reflect the changes.
problem Wiki or read me does not include instructor or student credential so couldn't check anything.
problem The author's work is implemented well and is implemented as expected. Few edge cases can be written to test the code completely.
problem Yes, I was able to understand the issue as well as the solution overall. But I couldn't understand why there is a need to append a team name to an assignment. It was just mentioned that it is done in other part of the code as well. Mentioning that would have given me a better idea.
problem The write up has been written well. There's obviously some additions possible to the write up. The code changes/additions have been shown, I would recommend description of why those changes/additions were made. I would also suggest the team to standardize the size of their screenshots.
problem While the test plan for fixing team names have been shown, i couldn't find the test plan for validating username.
problem Test plan has been well implemented for one of the issues. The test plan does not show what happens if a user tries to create a new account with a space in the username.
problem The test plan is explained in a good manner, but the edge cases and invalid values are not mentioned. What if a space is in front of the username.
problem The how part is clear. As to the why part, thought they have clearly mentioned the the problem statement, i think a little bit more of an explanation could go into why is that actually a problem.
problem How has been shown well through the screenshots but why has not yet been described. No particular reference to a design pattern has been made, but that is understandable since their project was based more on changes and less on additions to the code.
problem The writeup does not have a test plan or any related info on why it is not covered.
problem No,test plan has not been implemented but I don't think a test plan is required for their functionalities/
problem Could not see test plan as well as automated test cases are not included Team could work upon adding test cases to test the functionalities. That would make the issue resolution more robust.
problem No tests added.
problem The test cases were not created.
problem No new test cases have been added to test the newly defined functions.
problem No test plan or the test cases.
problem Some checks fail in the build. But I feel that few checks are much intricate (one failed because of a score of 15.07/15) and can be neglected. The TRAVIS CI Build error was faced by many teams too. The namings are not unclear or ambiguous. goto_controller('Questionnaires','3') goto_controller('Review','3')
problem The code is well written and very understandable Newly defined function parameter name isÂ self-explanatory Suggestion: 1. Rubric Array can be declared outside the function, so as to follow DRY principle.Â 2. Meaningful comments can be included for the function definition in tree_display.jsx, explaining what does the tree_display represent
problem For the discussed solution, the code does not smell or does not need to have separate methods. The commits show the contributions by only one author.
problem The code is nicely written 3 More comments needed 5 Not DRY in one place (rubric array definition) Â Suggestion: Â 1. Simply define a getRubricArray function to return the rubric array wherever required.
problem No information on two other issues that need to be covered.
problem 1. Clicking on action from manage menu correctly opens the corresponding tab. Â Â Clicking on any manage sub menu action, correctly loads the corresponding rubric. 2. Whenever is rubric is changes, user is being asked for confirmation. Â Â On conformation from user, correspondingÂ review response is deleted and email is being sent to user. Â Â When user declined the confirmation, rubric is set back to original one. 3. Issue#1173Â does not seem to be resolved.
problem The team has only fixed one issue related to selection of questionnaires according to the video. The other part of the problem statement is missing. The application could not be tested as the application is not deployed.
problem After manual testing, issue 1 seems to be fixed and reflects the changes properly. Nothing seems to be done to fix issues 2 and 3 of the problem statement. Suggestion: 1. You can include any approach or design of functions to resolve remaining 2 issues in the writeup
problem The code has not been deployed. But according to the video, the workflow has been demonstrated properly. Out of the 3 issues, 2 have been resolved. One is not done.
problem The Fixes Required part has been explained well with the cause of the issues. But, more lightÂ could be shed on what the formative and summative rubrics are.
problem Writeup is written well. Understandable and clean explanation. Team has explained the problem statement and issues well with good amount of pictures. Team can improve on formatting.
problem The writeup was written well enough to understand. Screenshots were also attached along with the steps making the documentation better. Can definitely understand what project does and how it is done.
problem The wiki is well written and contains all required information for issue 1. The documentation for other issues still needs to be included. Apart from this , the team did a great work.
problem The writeup is lucid enough to explain the details of the issue and how the system works after fixing it. Suggestion: 1. The authors can add a section on testing, explaining about how the issue fix can be tested. 2. They can improve the readability by mentioning issue numbers (from document issued by the prof.) on the write-up. It will save time of the reader to go through the document and map which issue has been fixed.
problem The write up is clear and concise. The details about the functionalities are adequately explained.
problem The writeup does not have a test plan.
problem I could not see any test plan. Team could work on writing test plan and implementingÂ the same for the issues resolved. Also where team is failing to implement some functionality, as future scope, they can try design the solution and also test cases for the same,
problem The test plan column is missing from the documentation
problem No. there is no test plan section included
problem I did not find any test plan in the documentation.
problem What and how explained well but they explain the why behind their actions a bit more.
problem Writeup is written well. No design principle or pattern involved, But the approach taken is explained in detail, step by step.Â Â Team could add references and links.
problem Yes, the writeup seemed to include everything that was required. Code was also attached along with the screenshots and steps.
problem The writeupÂ explains the problem statement well, but fails to explain the approach and just have pasted their code. It also fails to have a reasoning behind the approach they chose. Suggestion: 1. The author can describe how they came up with an approach starting from analyzing the issue. This will remarkably improve the writeup. 2.Â The author can talk about atleast one more approach to fix the solution and explain why they chose a particular approach for implementation.
problem The implementation details have been mentioned in the writeup clearly. Information about what every function doesÂ has been explained in an eloquent manner.
problem As mentioned earlier, they have not considered testing at all at this point and hence, we are assuming that they are to implement testing at a further point in the project. Of course, mentioning an approach to the testing framework and how they would be going about it would have helped.
problem No Test plan included in the submission.
problem No tests were added. No test plan too. So, difficult to interpret
problem No tests have been discussed in the test plan.
problem They have not provided a descriptive test plan, however they have added rspec test cases for their code changes
problem The Test plan is not a part of the writeup. The team can improve upon this by following the general guidelines of writing the document. The test cases can be coherently designed following the Better Specs documentation. The team must have the test cases designed that span the required goals.
problem Their methods name is too long such as "#copy_questionnaire_details and #assign_instructor_id':
problem Not only does the build fail with multiple errors, the overall coverage is shows a significant decrease instead of an increase which is a real cause of concern. Moreover, the number of commits even though impressive does include a lot of minimalistic changes which one does beg to question the necessity of. But that's still fine since, I am assuming that the complexity of the code may require so many commits. But still adding a line break as a commit? I am unsure if its a great way to go about it.
problem I feel that the writeup was incomplete and none of the code changes made have been explained. It is difficult to see what approach they took.
problem All the names and methods look reasonable but some of the function size is still long.
problem The variables, methods and class names used do not justify the features performed and do not implement the desired functionality expected. Also, the code added does not improve the coverage of the files. The team should look towards using appropriate names and provide desired code segments to get a high coverage.
problem They did not offer any link to code of their project.
problem The functionalities relating to Questionnaire have been moved to Questionnaire from QuizQuestionnaire which is very helpful. Suggestion: 1. You can try to create sub functions for code inside create and view, as they are really long functions
problem (1)Functions are still long, save choice and save quizes are the top two, consider increasing more internal methods
problem The code contributed does not follow the test rule in that the tests are made using create instead of build. The code functions do not implement much function and does not follow the Ruby style guide. The team should focus on getting the tests running by following the DRY principle.
problem Not possible to test as no way of testing has been given at all. No procedure to be even followed has been mentioned in the poorly constructed Wiki page. All that is possible is to try to infer whatever is possible through the pull request in which I have reason to believe as suggested by the code tester that multiple files are failing in the build stage itself.
problem No link to the deployed application is provided. Hence, cannot be tested manually.
problem Cannot test the work as application link is not provided. They have not provided a screencast for working code
problem Couldn't test manually as no information regarding the steps to take to test is provided.
problem Upon manually testing the author's work it is noticed that the functionalities have not been implemented to the full. The team did perform migration of the CRUD functionality for the Questionnaires from QuestionnairesController and removed large patches of if-case statements by placing it in the helper function in the apt model. This however has reduced their coverage.
problem No, their writeup is neither clear or adequate, which just contains a few lines without any explanation or introduction to the project. So i think their writeup is terrible.
problem The write up does not show any detailed explanation of the project.
problem No, the team has not been diligent in specially making a section of "what it does" as the introductory section of the doc so as to make us understand the goals of the project. They have just copy pasted the problem statement on the wiki page in a single paragraph. Even, that statement seems to have been incompletely pasted in just a single paragraph. So, it highly unclear what they are doing. I had to open the projects assignment doc of the professor to try to make sense out of the motivation of the problem.
problem I think they have simply copied the text from the requirements document presented by the professor. The page is not well documented
problem The writeup can be improved to begin with a short description of the project backgound so that anyone reading the writeup can understand what the project is all about.
problem They don not have a test plan
problem Unfortunately, no mention of the word "test plan" has even taken place in their whole Wiki page. So, it seems that they are yet to implement the testing functionalities in their project. Although, it would have been better if they had checked if the checks or the tests already existed in the first place in the git repository.
problem No test plans has been explained. But the Git repo shows one test successful.
problem There is no mention about their Test Plan. The section has not been included in the wiki page as well.
problem Writeup doesn't conatin the test plan section.
problem Couldn't find any test plan.
problem No, there is no test plan included in the review
problem The writeup does not have the Test Plan section. They need to include it by specifying the section that describes the pre conditions considered by the team while working on the refactor review on the different question types from the uiz feature.
problem No they did not mention any design principles or patterns in their writeup.
problem No explanation is given.
problem No, the write up is a simple copy paste of sir's doc on the wiki page which half-heartedly states the problem statement in question. Also, what or how they have worked and approached the solution is not even mentioned. Difficult to follow any flow.
problem There is no mention about what work they did. The wiki page hasn't been properly formatted and the information is not adequate.
problem It does not show any code or any thing related to the work they did
problem The writeup should be written in a emore elaborative way clearly stating at the minimum - the problem statement; new implementation strategy; design principles; test plan and references.
problem The writeup states correctly the changes performed, but fails to provide a reasoning behind every change. Suggestion: You can include reasons behind choosing an approach, for atleast one refactoring code change
problem It was difficult at first to understand why they are doing what they are doing. I feel that the information is right there, it just needs better elaboration and description.
problem Not completely its lacking lot of informations, consider writing the code before and after the changes to explain the changes done
problem The team needs to provide a list of sections including the test plan and unit test cases that would make it easy to refer to the pull request and the github code. They must also work on designing the wiki page making it easy to read and understand it.
problem The writeup gives a high level overview of the work done Suggestion: 1. You can try to make the write-up more illustrative by discussing which refactoring principles were implemented in which files and how does it make a difference. 2. You can take help of code snippets to make it more understandable.
problem Good description. I think with the use of headings and subcategories it will look good also need lot of conteent to mention the changes done
problem The write-up is pretty ambiguous and feels all cluttered up. Maybe elaborating on few lines and separating the one whole paragraph into bullet points under different headings would have made it more readable and clear.
problem The writeup is disorganized and does not specify the function carried out by the team during the project.Â It does not follow the typical format of the writeup and provides a list of items such as files involved and task expected.
problem Although no specific test plans have been mentioned, the wiki page does show screenshots of the changes that are visible after logging in.
problem It does not seem to be an automated test plan. There are screenshots placed, which seems to be manual testing done.
problem I could not see any mention of test cases in the wiki or github. Team could add/mention test cases surrounding the change that lead to checking the changes in this merge.
problem There are no test cases
problem Testing for the UI changes has not been done. Maybe they were not supposed to, but if they were, more documentation in the wiki would be helpful.
problem No they haven't added. But i think its not required for this project, as its just UIÂ change.
problem There is a change in the colour code required, so there was not much of a naming convention to be followed here. Dint find any instances in the attached code where name could be changed. One instance ofÂ is_submitted could be changed toÂ is_submitted?
problem In-line CSS style tags inserted instead of linking external CSS file.
problem The naming looks fine in html file. Although your pull request shows changes in schema.rb file which i don't think you have used any where or had to make changes int it. Probably is went through by default when you pushed your changes. You might want to revert that from the pull request. That way I think your build will also pass.
problem The build seems to have failed due to some unknown reasons. Travis CI states something unrelated to tests or something about dependencies that I can't quite comprehend. The names are quite comprehensible and the code was written well.
problem The color combination could be changed for buttons. Maybe for someone who has a difficulty while differentiating colors (me) faces a lot of problem.
problem Code does follow the conventions. Just that the comments could be better explained for the functionallity
problem 1. Code is simple and written efficiently without long functions, unnecessary looping or dead code. 2. Shown snippet itself is well modularized and no need to be written as separate methods 3. Code is well understandable. 4. Code does follow ruby style guide. 5. Code follows DRY principle.
problem I couldn't login to the deployed website since there were no credentials which I could use. Perhaps the wiki page should have included the credentials for logging into the deployed website. However, from the screenshots it seems that the functionality works.
problem The page is complete. Only thing which I mentioned is a good color combination is needed.
problem Writeup is written very neatly and in elaborated fashion with understandable images. Team could have added Github Expertiza link and pull request link at the bottom of the wiki page. AlsoÂ references and credits.
problem The write up has not been formatted well, most of it consists of what can already be read from the OSS assignment specifications document. I would strongly suggest the team to include screenshots of their commits instead of using wiki code formatting.
problem The write up is well documented. There is a clear flow from the code change part to the screenshots of the implementation. It would have been better if there was a screenshot of the code from git or a link to git so that the code changes would have been more defined as per the green and red colour. Also, the code change could be explained more.
problem The code block runs out of the space. Needs to be corrected for proper look.
problem Looking at the commits, there is hardly any work done by the team other than adding style tags in 2 commits.Also, the wiki link attached is of Fall 2018. New Wiki has not been created.
problem They dont have a test plan in their write up but they showed the screenshots for various cases.
problem There is no separate test plan section, but the test functionality has been shown in the form of screenshots. Could add it under the Testing header in the document so that the code and test would be separeated.
problem Project does not have test cases included, hence can not check further functionalities. If team is not able to add test cases for exact change, team could add/mention test cases surrounding the change that lead to checking the changes in this merge.
problem Team has used in-style tags to add CSS styling in HTML pages. They instead need to create an external CSS, define the styling there and use the class names in HTML tags. This provides styling maintainability throughout application.
problem The writeup clearly explain why the team did the work that they did. Good job on that. The only thing I may have preffered to have as a reviwer is a detailed step by step instruction on how to view the changes made by the team in the app. This could be added in the wiki, or a short screencast could me made to help follow the steps.
problem Yes, the code change along with the screenshots does explain the ordeal, but the git screenshots and some more explanation would be well appreciated.
problem They have not yet reached the desired goal of 90% coverage.
problem Some cases haven't been implemented yet.
problem The tests have been added as per the test plan but some of them have not seemed to have passed. The team could have a look at the tests not passing and work on them.
problem Test plan is not mentioned. Currently test cases are not running because of model file missing. Youtube video with description will be useful to show how the tests are running and if any of them fail
problem No Automated tests.
problem Not enough data for judgement
problem One file is missing. May be a commit issue. Test coverage is not mentioned. Pull request is not raised so it does not mention about the whether the test coverage increased or not.
problem Haven't uploaded the link for the pull request.
problem Pull request has not been submitted or uploaded at all which makes it hard to decipher any of the above data hence make it a problematic scenario to certain what all changes have been made in the first in the terms of number of commits or pull request.
problem Can't find the pull request to comment on this
problem Code follows standards but variable names can be better and more 'readable'. Another suggestion: declare ALL variables first then use those variables to call methods. When you add/declare variables in between method calls, it looks as though you 'forgot' to declare earlier and added them later. Just a thought !
problem Some names are ambiguous, like pptn, I cannot know clearly what this name is for.
problem Just one contributor
problem Please extract all "let" to avoid the repeat code.
problem For each cases, it include too many things need to be test, it is better to separate them into different cases. Also, the object used for this test seems not be put into the factory, it is better to make them into factory which is a good practice. The use of context is not good enough.
problem Including basic Understanding of the problem statement and work will help in manual testing.
problem Impossible to do since no submission or uploading of the image have been done for this project. It is unclear how to decipher any meaningful data without the help of pull request as well.
problem The functionality has been written well. Though I do feel it would have been better if the test cases implemented had been explained in more detail as to what the do.
problem No pull request link
problem The write has only details of team members and files changed. Out of the two files mentioned , only one is currently committed in git(vm_question_response.rb) is missing. May be a commit issue.
problem More details required regarding the functionality for which the test cases have been written.
problem Yes, the team has taken care of it by specially making a section of what is the problem as the introductory section of the WIKI doc so as to make us understand the goals of the project. They have even attached code snaps of the relevant changes they have in mind whilst explaining the error. Although, one questions the details in which they should have gone into explaining the errors and resolution. More mentioning of details is required.
problem The writeup has proper instructions but needs some improvements: 1. Explain the problem statementÂ 2. Explain 'why' you need the solution 3. Explain the steps you took. The code snippets are added but could be improved by adding explanation of the tests. May be adding 1-2 lines can help.
problem There are not enough introductions about what the functionality of the class they will test and what it is used for. The team can introduce more about what expertiza is and what the role of the class will be test and its functions.
problem Test plan documentation is missing currently. Plan will help to relate with the code and understand if things are tested appropriately and the response is as expected or not
problem The plan is simple and don't list detailed cases for each method, also it does not include various Â conditions may include.
problem No details about the problem statement is mentioned currently. So it is difficult to understand the test code directly.
problem Yes, they surely have done a good job in mentioning the errors in the wiki doc.Â They have vaguely described the handling of the same, but doubts remain in the details or the changes in the code.Â WhichÂ means that a better jobÂ andÂ a more technical description of howÂ It is happening should be given so as to grasp aÂ better understanding for the same.
problem Need a bit of detailed explanation on 'why' and 'how'. Too many screenshots with little explanation in words.
problem The motivation is not enough. It is a little bit simple and general. The team should add the introduction to the specific motivation for this project.
problem The team has implemented automated tests. There could be some addition to the test, which I have suggested above.
problem All the cases discussed in the Test Plan have been converted into automated tests.
problem all the test scenarios are included in rspec. The tests are also increasing the test coverage. Great job!
problem The variables, methods and class names are aptly named. I could not find names which are not suggestive of functionality. (i) The writeup is well written and easy to read. (ii) It is adequately descriptive of the work done. (iii)Â Explanation of reasons for the style of code and problem solving approach is lacking.
problem The features work correctly, as expected. The instructor login only has one "Student View" tab under the Manage menu. On clicking it the instructor is successfully redirected to the student view page which has the "Close Student View" button to redirect to the default view.
problem "Switch to student view" - But to which student? Open and Close student view is handled on clicking it to switch the type of view. Same changes (to delete session[:student_view]) need to be doneÂ on logout in auth_controller as well.I logged in as instructor6,Â clicked on "Open Student View" and logged out. When I login again as instructor4, I must still see "Open Student View", but I see "Close Student View" while I'm not in the student view at all since I just logged in...
problem Covers all edge cases like checking whetherÂ AssignmentsÂ is absent in the menu in default view and present in student view.Â Could not view the reviews done by students.
problem Yes, the team has considered the two important and required test cases- 1) To check whether "Assignments" is not present in the Instructor view, and check the presence of "Open Student View" button in the flyout menu. Here, the team has also checked the precondition whether the user is viewing the correct page (tree_display/list) which is meant for the Instructor.Â 2) To check the presence of "Close Student View" button for the instructor to return back to the default view and have the "Assignment"Â tab for students.Â Suggestion: The team could add a line to check whether the system returns back to the instructor page after clicking the "Close Student View" button. maybe include : "expect(page).to have_current_path('/tree_display/list')" .
problem The writeup clearly explains the implementation details and why those changes were made. It is nicely articulated and leaves no ambiguity.
problem The explanationÂ of the why they write the test code like that could be more clear.
problem The unit test step section is included, but there is no test plan.
problem There is no test plan
problem The test works well, but there is no edge case.
problem The project is about adding tests to the a model. So this is okay but there is not sufficient background on the model itself. More details would be good for the uninitiated.Â Also they mention that the number of tests for the model were not sufficient. It would have been better if they would have quoted the code coverage numbers before and after.
problem TheÂ submission is about adding tests to the projectÂ and authors have done a great job of adding 92% code coverage.Â I would have liked to see more -ve test cases for example cases such as user with incorrect names. As of now the test cases only checks of the user name is present or not. How about the case where user name is such that it is not allowed. User class throws an exception or add method can. This could have been documented.
problem I would have liked to see more use of context in the tests and grouping of similar test methods in context.
problem Could be better if contain withÂ more info about the test itself instead of the rb file they tested.
problem Nope, again they did not mention a lot about how they test but what they have done .
problem Since it is a test rb file, there are not many variable need to be named.Â The "it " part at line 362 in the assignment_team_spec.rb file, "get max num" could be better if substitute with "get maximum value" or something like this, max num seems little bit wired.
problem Writeup is very clearly explained. Writeup clearly explains how they are doing their work but why team is following approach is not explained.
problem there is no test plan.
problem The write up as well done. However, the write-up is missing the test plan.
problem The writupÂ includes the work done. However, there is no explanation about why that
problem Please add the test plan to the write-up.
problem Even though there is a no test plan available in the write-up, however, a lot of tests have been added.
problem Naming is good. There are few names(eg. is_selfreview_enabled ) which don't seem fine but they were from before, any thing new that has been added by them follows proper naming convention.
problem The code has almost no comments. I found someÂ lint, particularly some commented-out blocks of code.
problem Code looks good apart from a lot of commented code. If that is written by the team and was not already present, then it should be removed if not used before submitting pull requests.
problem The code is very well written, there are no bad names or long and complicated functions. However, there are no proper comments that have been provided for the viewers understanding. One suggestion would be to include some comments for better understanding.
problem Could not find any test cases. The team seem to have made changes to only the views. The team should implement test cases for the issues they've fixed.
problem New code was committed but all at once on the same day.
problem The code has been modified to include the modifications requested (test cases added for failing scenarios and edge cases - two assignments with same name) in my previous review. Appreciated! Overall the code quality is good. Only some variable names are ambiguous for example: check_validate.Â What does it validate? Name it like validate_same_name or validate_common_directory etc
problem No deployment link was provided, but from the video and tests they provided, the features works as intended.
problem Since, the git repo link of their hasn't been given it can't be certainly said how well the code has been written. But going by their video in which they have meticulously explained step by step what they have done, I would day It is reasonably well executed and follows the Ruby style conventions.
problem Some small coding guideline related problems are there which can be addressed.
problem There are commits on a single day, that is yesterday. One suggestion would be to commit regular progress on the git.
problem The tests were mentioned in the report but not in the pull request. There was also no coverage information. The approach looks good though.
problem The code is well written but it can use comments to help explain what the code is doing. For e.g. the code below is hard to understand: if quesparams[:assignment][:directory_path] == "" and quesparams[:check_validate] == "on" quesparams[:assignment][:directory_path] = "#{quesparams[:assignment][:name]}_#{quesparams[ :assignment][:id]}_#{quesparams[:assignment][:course_id]}" end
problem The features work properly but still need more tests to test the functions.
problem The suggestions have not been improved. Comments aren't explanatory and does not give an idea about what the author intended to do. It would be good to include meaningful comments. Debug code is still in the commit. Even though we may used debug code like the puts statement, we should not commit these as they could create junk data in the application log. Please consider removing them.
problem I don't see any tests added by this team, although they do mention that their code additions were not particularly testable except with the existing automatic tests, which they enabled.
problem I don not think their code is good, because they did not solve the problems existing in the first round.
problem The build fails so this project will not work in its current state. There were instructions however on how to set up the project and show that it is working.
problem Some parts of the code are still left to be implemented
problem It's fine to good. I wish y'all would have posted a link to your repo in stead of the pull request.
problem No link was given to the demo of the project.
problem the latest commit is on 2nd of Nov.
problem No, they did not commit new code.
problem This system doesn't have a UI I can view as it seems to be a browser add on.
problem No new commits in the second round.
problem The wiki is quite comprehensive and gives the build steps clearly. It could also include a more basic explanation in layman terms about what the OffScreenCanvas API does
problem I cannot find any new test cases.
problem No, they did not add new test case
problem No the team did not add any new test cases. Coverage is low.
problem Only 34% of the lines of code in review_response_map.rb were covered, according to their video. This is much lower than the 90% required by the project descriptions.
problem Not cover all theÂ scenarios.
problem No, changes made from last review.
problem Although the write up clearly explains the problem statement and also contains the changes made, it doesn't include the test plan which would give a clearer picture of the changes added.
problem basically, it is good. however, i cannot find the test paln, and some explanation is not complete.
problem No, it is not good at all, they didn't explain the functionality of their test code.
problem Y'all did the least possible work, AND put it on wikipedia instead of the expertiza wiki.
problem No, they code is not complete, and many cases are not covered.
problem 34% is better than nothing, but it's still a far-cry from a complete unit test suite for the review_response_map model. I'd recommend it be merged, but it needs to be completed.
problem Still 25 issues, checked byÂ codeclimate, to fix
problem The build does not pass. Also, the coverage is very low. Not many testcases.
problem It's probably fine if the integration tests can be resolved, and the code smells from code climate can be fixed.
problem The biggest concern are the simple code climate issues.
problem No, they did not pass Travis Ci.
problem Passed Travis but had many lingering CodeClimate failures.
problem The project does not pass the Travis CI integration tests. I looked at its output, and I cannot tell how significant the failure is. Maybe its an easy fix?
problem The reason to give 3 is that there are certain simple code climate issues regarding spaces, indentation and so. These are easy to fix and are related to code quality.
problem They have kept up to the standards of the goof coding practice , like they have given reasonableÂ variables names and functions name which makes it easy to understand what is the function supposed to do. However, they haven't added the comments
problem There is some repetition of code but overall code quality is ok. There are some comments from the professor which should have been addressed.
problem There were some issues which I reported regarding comments and Notice messages displayed to User which needs to be improved. But they haven't been incorporated. It is not a blocker but definitely an important change to improve User Experience and better code readability. For example, In submitted_content controller there is a comment which says sending email to users. However it is just a method call which redirects it to delayed_mailer.rb. So this should be properly mentioned as it will be helpful for someone refactoring or understanding the code later.
problem No new code was committed during this review to incorporate the changes suggested
problem No, I don't find such commits during round 1.
problem Test case has been added, but Since i cannot run it locally, i am not sure if it is passing or not.
problem Yes, they have added a few new test cases. But all scenarios are not covered.
problem The team has added one test to check if email is sent or not. However, the coverage as I can see on Github log is not increased.
problem The team added a test case. However coveralls shows the following.Â Overall coverage decreased (-17.2%) toÂ 19.566% I interpreted this as as decrease in coverage.
problem The project is to refactor the existing functionality and code. The functionality seems to be working fine.
problem Could not find steps to replicate on UI. Documentation does not mention steps how to test the feature. More information required as I was not able to follow the steps
problem They should have added the code as a part of the writeup instead of providing links to github commits.
problem Write up is really good. but little short. Could have been described with more details. Also, it would have been better if they ha uploaded the screencast of the work they had done.
problem Writeup is descriptive. But missing the following: 1. Screenshots of implementation 2. Steps to replicate the problemÂ 3. Instructions not provided. 4. Too many sub topics for solution implemented
problem The writeup is written in a very verbose manner. They still haven't added the test plan which was missing.Â Suggestion: I feel that the test plan should have been added explicitly.
problem Needs some work, code climate changes, a bit of DRYness and a passing CI is needed.
problem First review comments not addressed.
problem The team has added the test case for issue#1190 which are Rspec tests. The test plan includes how to test issues #391 and #1201 by logging in as an instructor, but test cases do not seem to be present for this part.
problem I think User experience and code readability are as imp as producing a working code. So based on how urgent is the requirement for this functionality, I would prioritize refactoring the Notices and Display messages to more appropriately indicate what action was taken when we try to add a participant to the assignment or import using a CSV file. Secondly improving the comments as explained with an example in the first question.
problem The code is well-structured and easy to follow. Styling and indentation are consistent.Â One major issue that was not addressed is that the object that is being tested is an instance of AssignmentParticipant as opposed to Participant. As a result, the team had to comment out the #scores method of AssignmentParticipant to hit the #scores method of Participant. One possible fix is to define a new participant instance in factories.rb. One further suggestion is to improve the expectation for method #scores by testing the attributes that are relevant in that context as opposed to checking the string value of #inspect method.
problem The overall test coverage decreased by 0.6%. You could have added test cases toÂ response controller.rb and application helper.rb. These files have contributed the most to the decrement in test coverage.
problem Build issues to be fixed. This pull request is not in "ready to merge" state.
problem Not sure, since could not replicate.
problem Yes, a fairly good job in that regard. They have first explained their test plans, then even provided links to their RSPEC tests which I checked. Then they have run and shown their screenshots of the Rspec tests going through successfully. Even, so theirÂ coverage seems to be anÂ issue since itÂ hasn't been updates since the last submission that was 19 days ago as per their pull request whichÂ even shows aÂ decrease in their coverage.
problem I'm unable to get a really good idea of exactly what was done here for this project other than that it can be used as a display and rendering port and that it improves fail-safeness of browsers.
problem The build is failing, but it seems the team has it working locally. I think they can get it working with this approach.
problem They have added a test for the feature implemented. But coverage has decreased by a little.
problem The Pull request shows that the code has failed all the checks. Therefore it should not be deployed.Â Suggestions: Rectify the code climate, Travis Build and the merge conflict that is being displayed on the Pull request(Gemfile.lock conflict) . Once done, the code could be deployed. Functionality is working fine, no doubt but build must not be deployed unless the above issues are resoled.
problem The team has added one spec to check whether a different directory path is generated after generation of a duplicate assignment. The overall coverage decreases by 0.6% The written test covers one of the three issues given to the team. There is scope to add some more tests
problem The build hasn't passed in the travis CI
problem Because of the merge conflict in gemlock file, it is not merged and travis CI has not run.Â i believe they ran bundle update and committed the file which should not happen as it updates the dependencies and might break some features.
problem Travis CI tests have failed. But there are no conflicts and the build is ready to be merged with Master branch.
problem Travis CI build is failing.
problem No, Travis test did not pass. In fact, I can see test failures for each commit. Continuous integration tests has failed.
problem The Travis CI build does not pass.Â Suggestion: Team should have rectified this.
problem Pull request failed the tests, so that must be fixed before merging.
problem There was no new code been committed in the 2nd round as the last commit can be traced back to 7 days ago
problem The last commit was on 11.04.Â There's no new commits. sadly.
problem They did add one test case, but I think it is not enough.
problem no new commits after round 1
problem The team has added a new test to cover the functionality. But this test is failing. There could be an issue with the notice that is generated, as during run time it is set to nil and this is checked against the string provided in the test. The overall test coverage has decreased by 0.6%.
problem TheÂ last commits were made on November 4 which was prior to the first review.
problem As suggested by the Mozilla team themselves, a few errors need to be rectified. The final code also needs to be formatted using rustfmt to make it consistent with the design
problem Did not even pass the auto test.
problem There can be a few changes incorporated to the code- especially the name mismatch of the web IDL and corresponding Rust file needs to be fixed. The unnecessary comments have to be removed. Moreover, the pull request shows that there are a few changes that have been requested and all checks have failed. So, the code can be merged and deployed only after these are incorporated.
problem I think that they need to fix some things that are mentioned by travis CI. Once they do that they are good to go.
problem I don't think this project is the type that would be deployed on a production server,Â and I can't say it's ready to be added because every thing in the pull failed on github.
problem Still did not pass the Travis CI
problem Everything in the pull request failed (although this is not an expertiza project)
problem The system works well and performs all the operations correctly. -1 for the aforementioned errors in code.
problem Yes, the code has been refactored to cover all the intended scenarios and the tests have been very well documented along with testing the edge cases as said from their videos. TheirÂ Rspec howeverÂ doesn't seem to test many test cases butÂ that's expected I guess given their problem statement.
problem Everything works as per the video linked in google drive. A link to the same can be added on the wiki page.
problem One of the videos linked in the wiki has a broken link. The other link shows the functionality is working correctly.Â Even though the wiki has given instructions to test the functionality, the team has not deployed there code. This has blocked manual testing.
problem The writeup is great. I could get all the info i needed to understand the problem. Could refine the describing issues section a bit as I could see sentences like "Â Please take a look at the Github issue for suggestions on how to solve this."
problem The team did not have a writeup in the last submission. In this submission, they do have a writeup with the problem statement, the files modified, approach to solving the problems, and test plan. This seems to be a significant improvement from the last submission. As for the screencast links, I think one link is absent and the other one is a YouTube video of the same project submitted last year. Please check this, I think you have added the wrong link. I would also suggest that a references section needs to be added to the Wiki page so that the deployment, pull request and other project reference links are shown.
problem It is very well written with a nice flow diagram. The secondÂ video link on the wiki page is unavailable, which can be fixed/removed in case it is legacy.
problem The team had not added a link to the wiki during Round 1 of the review.Â 'Issues to be fixed' section seems incomplete and not the right kind of writing. Please review and try to add more details on the issues that are being addressed. Otherwise the wiki looks good with relevant diagrams and code snippets.
problem The code can be deployed once the Travis CI passes and there are some 6 minor warnings to be fixed in code climate. There are 4 failing and 1 successful checks, the team needs to make sure these checks pass in order to be able deploy the code onto the production server.
problem This code is ready to be deployed if they ensure that variables are renamed to resemble their actual functionality.Â No big issues as such. Resolves the problems well.
problem There's no new commits after the first round review. But for the first time, there's already almost full coverage. The tests covered the range of the project very well.
problem they didn't add test cases in the second round
problem Once the issues with pull request are fixed it can be merged.
problem Unsure in this regard since they neither have the deployment neither the GitHub link to their repository, and also the coverage and the Travis CI say otherwise. Even so, in their video they show in proof that everything runs. One does wonder though, how to test without actually having the links of the repo.
problem Some improvements are required before deploying it to the main server. There are changes suggested by codeclimate which need to be looked upon. The future team must ensure to pass the build. There is scope for the new tests to be written and code that would improve the overall coverage. Overall, the team has done a commendable effort with respect to the difference in the first and second submission
problem I believe that code, as it stands, is not ready to be deployed. More comments are needed and the code is hard to understand, so even though the changes are small, one might need to see id the changes can be simplified. I believe testing can be more thorough too.
problem no new tests were added.Â coverage was achieved in 1st round.
problem If they can write more test cases to test their code and make sure their code does not have bugs, i think they can deploy their code onto server.
problem No. The code needs to be cleaned up before it can be deployed. The build failure needs to be fixed. Also, as the project is not deployed, manual testing could not be done.
problem Coverage is same as was in the 1st round. No further addition
problem On checking the pull request, it shows the Travis CI check has failed.
problem The build does not pass in Travis CI check. Â They build job for TESTFOLDER = controllers is failing currently. I would suggest them to investigate the cause of this.
problem The Travis CI build has failed however there are no merge conflicts. You could have fixed the Travis CI build errors in phase 2.Â Still overall good job.
problem No, according to Travis CI the build doesn't seem to have passed due to some bundle install errors. Although they surely should have resolved it because the code wouldn't be able to achieve the above results as stated by their video and wikipedia page.
problem Few of the travis tests have failed. The issues were code guidelines and spacing issues.
problem The build test failed in Travis CI. However there were no conflicts with the base branch.
problem The build fails and there are several issues and warnings that need to be fixed.
problem I cannot yet implement the environment to do the UI. The work looks very good. As test case, they have covered all scenarios.
problem Even though the build is failing in Travis CI, there are no conflicts. The controller tests are failing as there is no flash message that is appearing. Please look into this.
problem writeup is comprehensive and very carefully written. A lot of details included. I would suggest to add more examples, and more explanations of why there's such mock cases
problem The wiki page includes all the information. If they can add more details about how they test the methods, it would be better.
problem The write-up has been written well including the problem statement, test cases, andÂ the test result. However, I feel that informationÂ about tools such as 'Rspec' and concepts like "BDD" is not that necessary as the reader is most likely familiar with these concepts.
problem Though the code works well. The build does not pass. Also, some more edge cases will make the testing of the model complete.
problem The project is almost perfect. But, as mentioned above, they need to fix some issues.
problem The project fully covers the functionality for testing the participant. 100% code coverage is achieved. However, the biggest problem is that the #scores method is commented out from the class AssignmentParticipant. Obviously this will break the existing code that relies on that functionality. Furthermore, the future testing will possibly become complicated because the object under test for participant_spec.rb is an instance of AssignmentParticipant as opposed to Participant.
problem Need to fix the build issues and code climate issues(bank lines and indentation errors).
problem The build hasn't passed in travis CI. There areÂ some conflicts that are to be resolved example :Â SignUpSheet.add_signup_topic will return a SignUpSheet when the topic already has deadlines
problem it says that the Travis tests failed, but the teamÂ mentions that they couldn't get rid of two issues.
problem Unfortunately the build does not pass in Travis CI and there are still some code climate issues.
problem The project is almost done but the Travis CI build failed and 2 code climate issues need to fix.
problem No, the Travis CI build test has not been passed, but the forked branch has no conflicts with the base branch.
problem No build isn't passing. There's a test failing.
problem The build did not pass Travis CI. The reason is because #scores method is commented out from the AssignmentParticipant class.
problem Build has not passed and there are two issues which are required to be fixed(code climate ).
problem The writeup is explicit and easy to read. But it may be better to include the explanation of the test code.
problem The test file are almost ready to be deployed onto the production server, only one code climate issue need to fix.
problem Needs to work upon the build. Need to fix issues related to code climate.
problem With only one code climate issue and passing Travis, this pull request is ready to go!
problem Just a simple issue in code climate which can be resolved.
problem Travis CI failed. It seems that '47)Â assignment function review strategy tab sets number of reviews by each student' has some problem.
problem Build has failed and no new commits are done to fix it.
problem In the first round, which files were related to what issue was not mentioned. However, now they have edited the wiki to reflect the mentioned changes. Each file and its related functionality has been mentioned. Appreciated!
problem There is no change in the code in this round. The variable names and method names are intuitive. The code is well indented; some useful comments can be included to improve readability. The code is DRY.
problem The team has implemented proper functions and has used a proper naming convention. However, there is scope to add some comments. For ex: in the new method - get_feedback_assessments_for method which will return a feedback assessment, the team could have added some comments about the logic implemented. Apart from this, the code is concise and good coding and Ruby practices have been followed
problem The code is well-written with proper comments. But none of the suggestions from the previous reviewÂ hasÂ been implemented. Teams are provided reviews so that they can further improve upon the code.
problem The last commit was 21 days ago, so I fear that that there are no commits being made in round 2. Could have done a commit in round two just to confirm that there were no changes required in round 2, so that the reviewer may be certain about it.
problem Yes, the team has added test cases, the code for a couple of test cases are in the wiki in a separate section. Again, it would have been better to explain the test cases a little more, may be using screenshots of successful test cases.
problem The team has added test cases but the code coverage has decreased by 0.04%. The newly added tests cover almost all the new functionality implemented. The new test cases are pretty diverse.
problem The code was well written. Although there were some problems with codeclimate identations. The team have made changes to fix those issues.
problem The team have added the test cases which covers the range of the project. Coverage increased.
problem The code is structured well and is straightforward to follow. Test blocks are succinct and contain one assertion per block. The project has been greatly improved since the 1st round. Naming and indentation issues have been fixed. Furthermore, significant work has been done for the code to be consistent with Code Climate. One suggestion would be to elaborate on the #score method. Decomposition could be used to extract the common set up into a separate before(:each) block and test expectations using multiple 'it' statements as opposed to having everything asserted in one 'it' block.
problem The coverage has decreased by 0.04%. The team has added some tests which were not present in the initial submission. 44.9% of the changed lines are covered
problem The team has written new test cases, but the overall test case coverage has decreased by 0.04%. The tests cover the range of this project.
problem Yes commits are done to fix the code climate issues.
problem An unnecessary commit has been performed becauseÂ of whichÂ build has failed, and i think it wasn't required as already codeÂ had 100% coverage. You should check that out, it just an indentation issue i think.Â Format it using rubymine and push, it should work.Â AÂ shorter video to explain the work has been added as well.
problem I found many commits related to the code climate fixes.Â No suggestions.
problem Works as intended. Could have elaborated a little more like a guidance in wiki.Â Was able to test the features. Works fine.
problem The team has not provided steps for manual testing even though this was requested during round 1 review.
problem The authors have added the screenshots from github which clearly shows the code change. But since there are many changes, the explanation in the wiki is small. A better way would have been to put the links to the git files where the changes are made and there could be more explanations instead. This would also reduce the size of the wiki.
problem They should have included screenshots associated with the issue. it would help one understand the solution better
problem Dissatisfied with the write up because no clear explanation has been given for how they arrived at the design. At some places the documentation abruptly stops mid-explanation. The code screenshots and the accompanying explanation is good.
problem Could have been more elaborate how to check the work. No mention of design principles or patterns used.
problem The writeup was still on wikipedia and didn't expand on the reasons why the test cases were the way they are. No justification was provided for why only 34% of the LoC in the model was covered.
problem The write-up lacks screenshots/ relevant images/ screencast to explain the workflow of the project. This would increase the readability of the wikipage. Also, the team has added testplan and included description for the code presented in the wiki. These points were mentioned during the previous review which were picked up by the team. The team has done a good work in improving their writeup as compared to the previous version.
problem There has been some improvement in the content of the write-up, but not all suggestions have been incorporated. Adding more screenshots of the functionality, or a video of the project being explained will always be helpful.
problem When i try to run manually, i still see the same errors Â Participant#email sends an email to the participantÂ Â Â Â Failure/Error: assignment = Assignment.find_by(id: self.assignment_id) Participant#score Get participant score within a roundÂ Â Â Â Failure/Error: scores[questionnaire_symbol][:scores] = Answer.compute_scores(scores[questionnaire_symbol][:assessments], questions[questionnaire_symbol])
problem Yes, the test does covers 99% of the models variations. The team could have enhanced tests with varied inputs, such as for the handle method check. Even a more through test of the score method with different input data could have been done.
problem Although I believe this project is ready to be merged into the branch, I would still like to make sure as to why their build is failing in Travis CI. Most likely it's not because of their own code, but as a suggestion the team should have also looked into this matter themselves, and explicitly stated somewhere in the wiki by getting clarification from the instructors.
problem The document straight away starts with the explanation of the project specifics without any background as to what was the whole purpose of doing this. Problem statement is very general, it could have been more specific as to what was the drawbacks of the existing implementation and how that can be resolved with the new changes. The doc also lacks a test plan.Â It is preferable for the doc to be written in expertiza wiki rather than the normal wiki.
problem I feel confident if the Travis CI integration issues are addressed, then it can be deployed in the production server.
problem as long as they fix 3 indentation issues for code climate, they are good to go.
problem The test is almost ready to be deployed onto the production server. As mentioned above, there are some issues need to be fixed.
problem Build is failing, they should solve that issue, then it is ready for production.
problem 2 of the methods are resulting in Errors
problem The code can definitely be deployed but once the 3 pending code climate issues(I believeÂ the 3 are to be resolved by he mentor) and the Travis CI build have been rectified. Suggestion: Rectify the Travis CI issues.
problem The project is ready to be merged. The source code is clearly structuredÂ andÂ can be used for the future teamÂ to work on. The project has 100% code coverage.Â In order to avoid potential problems of using AssignmentParticipant instance, participantSuper object is defined in factories.rb, which is an instance ofÂ Participant class. The possibleÂ suggestions areÂ to deconstructÂ #scores method and introduce 'context' constructsÂ toÂ enhance code documentation.
problem It's a test project, so not applicable for production deployment. But the code can beÂ merged as appropriate test for participant model. Any future teams can enhance the test with varied input scenarios.
problem Conflicts were resolved to an extent for the Travis Cl. But not all the tests are passing.
problem Unfortunately, the build failed in the second round.Â But, in my opinion this was not due to the team's mistake. The build failure says the two examples failed are in files "assignment_spec.rb" and "assignment_participant_spec.rb", both files which the team had no connection with. I could be wrong though. As the build was passing and there tests were running in the first round, I am inclined to believe it was because of another team's incorrect code that this team pulled into their branch by mistake.
problem The pull request says the Travis CI build is in progress, but that seems improbable. Upon closer investigation into the Travis CI "details", it looks like the build is failing.
problem It is pending while I am doing this review. When I click on it, it did not pass Travis CI, but it fails on tests on features, while this group is testing participant, it happened to our group as well, I assume it is not an issue with their code.
problem The Travis CI is in progress and there are 3 codeclimate issue to fix.
problem Some travis ci tests have failed and some code climate issues are still pending, though the commit comments say that the issues aren't related to the project files. But they have tried to fix the issues though so good work.
problem A commit has been performed 4 days back , which isn'tÂ making any change to the code just the indentation, and since thenÂ build hasn't passed. You should check that out, it just an indentation issue i think.Â Format it using rubymine and push, it should work.
problem TRAVIS CI didn't Pass, but team have fixed most of CODE Climate issues
problem The Travis CI build did not fail exactly but it did not pass either. It showed in progress. But when I clicked on the details, it showed that the test failed.Â Suggestion: Travis CI issue should have been rectified.
problem The previous builds of this project did not pass Travis CI. The current build status is pending.
problem TheÂ pull request has failed but doesnt look like its related to the team's commit. there is already an existing issue present.
problem yes, the authors have improved the code. the team has worked on the issue which I mentioned in the previous review. The code doesn't seems to be confusing now but it still needs proper commenting to be done.
problem The function process seems to be a bit long. It could have been splitted based on oscillator types rather than having all of them in the same function. Apart from that rest of the code seems great.
problem The code seems to be fine but due to lack of comments a little hard to understand. It would have been better if there were some comments in get_due_date_data and addQuestionnaireTableRow.
problem There are lots of code climate issues to be fixed.
problem They haven't made any change since round 1 review. Haven't changed the naming as well egÂ topic_id1 doesn't seem right to me. But other than 1 or 2 names, everything else looks clean. Also you haven't added comments to you code. YOu should add comments when working in a open source project.
problem A few comments could be included in code to make it more clear.
problem Suggested changes related to naming convention are not included in the 2nd round.Â variable names : rop_topic_deadline1 , topic_id1 Puts statements are not removed : p topic_id1 Â Other than this the code is properly written following coding best practices.
problem there is only one commit made during the entire project. there is no new code added during the 2nd round.
problem There has been only one commit for the entire project.
problem No. There was a single commit throughout the project period and that was during the 1st round.
problem No commits were done in round 2.
problem Nothing changed since round 1. Haven't added a shorter video or a video with sound. Haven't made naming changes.
problem No, the code was last committedÂ on Oct 31st.
problem There were no new commits in the 2nd round.
problem I don't see any code changes after the first round.
problem No, there are no test cases added by the team.
problem No, the team did not add any test cases and the coverage did not increase. The overall decrease was -13.6% to 34.007%
problem No new tests were added and coverage has also reduced. Some UI testing could've been done.
problem They have mentioned that its UIÂ change and has been discussed that testing isn't required in there documentation. But i think you should still have mentioned something there. Steps to follow to check how your changes work.
problem The link to the deployed application was not available. So testing could not be performed.
problem the authors has worked on write-up.they have worked on the issue which I mentioned in the previous review. The code doesn't seems to be confusing now. the content on the page is in proper format earlier which was not. Test plan still need the team's attention.
problem Write up isn't good. They have just added there code in the write up without explaining anything. Plus no comments in code. Code snippets in writeup are going off the page.
problem The writeup is good and clearly explains the issues faced. However instead of puttingÂ in the code changed, I feel it would be better to have screenshots of git commit history where we can see both the previous code and new code to get a good idea of what actually was changed.
problem The write-up is well written and organised. Everything looks fine. The team should have mentioned about the approach taken to solve the mentioned problem statement which will make the implementation easier to understand. Also the team could have included few screen shots in the write-up.
problem *Â Test plan is missing. * Code is directly copy-pastedÂ in the approach section - pseudo code with properÂ comments would have been better. * Wiki alignment is missing in those places where the code is copy-pasted.
problem some improvements are required to deployed the code onto the production server. The code should included proper commenting so that if the future team picks up from this project, they could know what exactly the code is doing.
problem It might be good to move the long function to smaller functions. But the code looks clean and understandable.
problem The feature seems ok but it can't be deployed yet with all pending issues.
problem Writeup needs to be improved, video needs to have sound or make shorter videos. Build is failing, code climate has 56 issues. So no its not ready for deployment onto production. The way they have implemented is fine but they need to work on the said issue to make itÂ production ready.
problem Since the code coverage has decreased and the video demonstratesÂ a proper working
problem ll the checks are failing currently. The changes have a lot of robocop issues as well which should be fixed. Also the CI build is failing at the moment. Some of the tests are failing because of the change.
problem Code looks fine, but build issue has to be fixed.
problem the build is still failing and there are issues which needs the team's attention. there is one warning and 1 error which needs to be fixed by the issue. according to the error, team should remove the debug code from the pull request.
problem Travis CI build is not passed. Though this was a bit common even for the second review, the 'codeclimate' issues are still showing.
problem No, the build did not pass in Travis CI. Several checks had failed but there was no conflict.
problem None of the tests - travis ci, code climate have passed
problem Everything is failing. Code climate has 56 issues. Build is failing. Haven't made a change since round 1.
problem The TravisÂ test has failed and overall coverage has also decreased. There were many errors in the build log of travis.
problem All the checks including the CI build is failing.
problem Build is failing in Travis CI
problem Code looks concise. However at few places, indentation is messed up.
problem I'm essentially keeping my feedback the same. There are places where I believe that better names could be used and smaller javascript methods could be used.
problem max_choosers name was not changed. As far as i understand it denotes the maximum number of slots and should be called max_slots. which is not changed. Apart from this code is good.
problem The code was well written during the last review too, it only missed comments. A few comments have been added but still a major portion of code remains uncommented.Â Other than that, the code is nicely written, follows guidelinesÂ and variable names are appropriate.
problem The coverage is actually decreased.
problem The team has done good manual testing but it would help to add few test in features to test the impact of the changes done in functionality of the project.
problem The overall coverage decreased, but not significantly. It reduced by 0.01%/
problem No new tests were written for this functionality.
problem No New Tests
problem Yes, team has added the test case
problem No new test cases were added. The new code changes don't change the modify the existing code coverage. The modifications were mostly on UI. They could have added capybara testing.
problem Unfortunately, I could not see any code written by the team for testing. However, the team has provided a description on how some of the edge cases have been handled. According to coveralls, the overall test has decreased by 0.01%. This could be one of the major topics for improvements with regards to this issue
problem No deploymentÂ provided so can't be verified.
problem The operation works perfectly from UI as shown in the youtube screencast. The App was not deployed anywhere (or the link was not posted), so couldnt test it by myself. Application could have been deployed during the second review for better understanding and trying out how the feature works.
problem The write-up is well written. It looks like they have improved the test plan sections, but still no automated tests in the repository.
problem Write up is good and self explanatory. Test plan helped a lot in understanding how to test it. As discussed in the earlier review, images could have been resized for better visibility. Was little difficult when one had to scroll along the page to view the entire image.
problem The writeup is well written with proper screenshots. I liked that the team has provided appropriate screenshots for specific scenarios which covers all the aspects of the project. However, the Test-plan section could be improved by adding the test code
problem I think with proper testing, this code is ready to be deployed onto the production server.
problem The code has passed the travis test and has addressedÂ all the issues of the Change Request. The code should be production ready after adding few more edge test case scenarios.
problem Overall, I think it could be deployed. There are no tests however written for this functionality, and there are some UI patterns that should be re-consideredÂ before deploying that do not matchÂ each other. When saving feedback, the ability to save feedback is automatically present and there is a button per row, while in the other location, you must first make a row "editable".
problem Apart from some code-climate change, the code seems to be ready to merged
problem The code seems to be working good from the screencast. My biggest concern was, if the link to deployment was given, it would have been easier to try the features. Other than that, capybara test cases could have made it strong to go to the production server. If they feature did work the way as it was shown in the screencast, it can be deployed to production.
problem The team has checked most of the points given in the problem statement. However proper testing should be done before deploying this project on the main server. It must be ensured that the overall coverage increases. Other than the testing part, everything else has been implemented as expected.
problem The build has passed. The are only 2 syntactical issues due to version difference.
problem The Travis Build has passed. The only conflicts remaining to resolve are the Code Climate conflicts.
problem Everything but the CodeClimate checks passed
problem The build passes and there are only minor warnings and issues which can safely be ignored.
problem In documentation it mentions participant.rb model file is changed to for increasing code coverage. However the file is missing in the pull request generated. There is no mention about changes in the assignment_participant.rb file. But that is present in the pull request. It may be a name mismatch or some files are indeed missing. I pointed it out during the first review but changes are not incorporated currently. The code overall looks good. Proper variable names are used. Commenting is required
problem The code consists of small methods that mostly test one thing. This results in high readability. The team has made an extensive use of 'context' constructs which further enhance the code documentation. Moreover, the team has improved the .sort_by_name method making it cleaner and easier to follow. This wasÂ complemented by the fix of badÂ names thatÂ were presentÂ in the first round (e.g. stu1, p1 etc.). One suggestion pertaining to the '#scores' block would be to use specific assertions of fields instead of testing the object via inspect method and comparing it to the string value.
problem I do not see any new commit after 5th November. In my opinion, some of the tests could be made more articulate in round 2.
problem No new code was committed in the second round
problem Code was not committed in second round.
problem According to the githubÂ page, it doesn't seems that new code are commited
problem The team has made two commits since the first review. The issues that were covered were '#scores' block and mock instance handling. However, the primary problem thatÂ theÂ specÂ isÂ testing an instance of AssignmentParticipantÂ class instead of Participant was not addressed.
problem According to the githubÂ page, no new test cases
problem The coverage has increased from ~77% to ~94% which is impressive. However, the previous issue was that #scores method ofÂ Participant was not called because the objectÂ that is being tested in this project is an instanceÂ of AssignmentParticipant class. This problem was handled by commenting out the #scores method of AssignmentParticipant so that Participant #scores method will be called instead.Â ThisÂ breaks other parts of theÂ code which depend on AssignmentParticipant's #scores implementation. The solution to this problem is to either define a new Participant class instance in the factory or to define it in the test code itself.
problem There was no working deployment presented.
problem Write up is good but the explanation of plan of work could have included some points like the approach taken.
problem The writeup is excellent. Very carefully written, a lot of detailed explanation. Some more background information about the functions can be more helpful, as well as syntax summation.
problem Explains the testing functionality appropriately. As mentioned in Review one, technicalities are explained thoroughly but the functional knowledge required to understand what the test is doing and why it is doing what it does is missing. Along with mentioning what are the mappings and return values, proper explanation of what the test is written for will be more appropriate in a document.
problem The writeup is detailed, but it doesn't explain why code in the model had to be commented out very well. That was a bit alarming.
problem There are several minor issues to be fixed before the code is deployed.Â 64 code climate issues Travis Build 1 error and 2 warnings. I guess once these are taken care of, the deployment is likely.
problem Few checks are failing. The checks suggest to use build or double instead of create in test cases.
problem The unit tests affording 95% coverage is great, but the code climate and other build problems are a bit concerning. I think this could be pulled in with more attention from the developers.
problem If they had presented a working deployment, then rest everything was done. So it could be deployed onto the production server.
problem The project covers a significant part of the functionality for testing the participant. However, the biggest problem is that the #scores method is commented out from the class AssignmentParticipant. Obviously this will break the existing code that relies on that functionality. Furthermore, the future testing will possibly become complicated because the object under test for participant_spec.rb is an instance of AssignmentParticipant as opposed to Participant.
problem The build does not pass the travisÂ CI.
problem The travis test has not passed
problem Checks aren't successful.
problem Yes, no conflict that's not resolved.
problem Travis Tests have failed. No conflicts in the pull request with the master branch.
problem There were many lingering code climate issues, and the Danger bot and Travis didn't pass either. A little cleaning could be done.
problem The build did not pass Travis CI. The reason isÂ because #scores method is commented out from the AssignmentParticipant class.
problem I'm afraid none of the three checks passed.
problem The code is almost perfect except for the lack of proper commenting. The author has not improved or updated the ocde since the last review, as the last commit was about 11 days back.
problem Review 1 comments weren't addressed. Better name could have been used than ca_testx. Also scenarios test the code and not the behavior- instead of- "when x happens, this method does this" we have - "x happens so y contains this". This isn't maintainable as changes to implementation will break/stale out these tests.
problem As mentioned earlier, no new commits were added by the author.
problem The team did not perform any commits for the 2nd round. However, the team did take note of previous review and added comments to the test cases making it easier to understand.
problem The Wiki should not include Conclusion and learning outcomes part, it is not a report of the project, but a page to show what the project itself is.
problem The write-up is good, but it doesn't feel much refined or improvised after the initial edit. As mentioned above, the image isn't visible clearly, which means that it wasn't reviewed much after posting. But apart frm that, the flow of the write-up is very effective, in fact one of the best that I've reviewed. The concept of giving a higher lvel view, and then diving deeper into the implementation is very subtly applied.
problem Their writeup is good, but i think the test plan should show how they plan to test.
problem The write up starts with introduction about Expertiza, Test Driven Development and Unit Testing. It then moves over to describing the problem statement, team members, test plan and implementation that contains detailed documentation on the procedure to set up the Expertiza environment, functionalities of Menu model, sample views , declaration of mock objects as test entries and finally the conditions tested on each of the method of the Node and Menu class. The various methods tested on the Node class include initialize, setup, site_controller, controller_action, content_page and add_child. Similarly the methods tested on the Menu class include initialize, select, get_item, get_menu, selected, selected? and crumbs.Â The write up also includes the screenshot of the Rspec tests that were run. The screenshot of the SimpleCov coverage report is blurred and not readable.Â The write up ends with concluding remarks, learning outcomes and References. Overall, the documentat
problem Other testing projects I reviewed have also given code snippets under the particular scenarios they are testing. The writeup doesn't help mapping out the test plan written and the specs code.
problem Yes, if must be, they must need more test cases ot cover some edge cases.
problem The team has worked on achieving the path coverage by taking the edge cases into consideration. But, as most of the builds have failed, it may need a working deployment for it to being deployed on the server.
problem The build #6205 of this project failed inÂ Travis CI. I checked the conflicts and the failures that caused the build to fail, and they are: 1) assignment function creation page is able show tab due deadlines Failure/Error: JSON.parse(child_nodes) JSON::ParserError: A JSON text must at least contain two octets! # ./app/controllers/tree_display_controller.rb:96:in `child_nodes_from_params' # ./app/controllers/tree_display_controller.rb:207:in `children_node_ng' # ./config/diagnostic.rb:11:in `call' # ------------------ # --- Caused by: --- # Capybara::CapybaraError: # Your application server raised an error - It has been raised in your test code because Capybar
problem 1 check is failing so the build has not passed.
problem Travis build failing atÂ ./spec/models/menu_spec.rb:120
problem The Travis CI did not pass this time.
problem Travis CI build indicates that the tests have failed. The code climate issues in the Danger Bot also did not pass. The team must look towards cleaning up the code.
problem The travis CI test did not pass. Suggestion: Rectify the Travis CI issue.
problem Yes, the code already followed all the good conventions earlier, except the lack of proper comments. The code still lacks comments, and the author hasn't made any changes since the last review. But the overall code quality is upto the mark.
problem The code quality is good however, it can be improved significantly. The code lacks proper comments and contains many if else statements. They could have been refactored and avoided.
problem There are a few issues regarding code repetition and extra white space (especially in the controller rspec file).
problem Overall the quality of code is great. There some variable which does not follow naming convection.
problem Code looks okay, Suggestions for improvements not done.Â build still fails
problem The code is well-written, follows code standards. The naming conventions are followed. However, in some parts code is not formatted.
problem The code is well written, follows ruby guidelines and variables are aptly named. However, the changes are extensive and there are virtually no comments. The code can do with significantly more comments to explain what is being done.
problem Yes, the team did add test cases and the coverage increased too. But the team didn't put any efforts after the initial review round, since the failed tests are still failed, and there are no new commits since 12 days.
problem They did add the test-cases but the coverage only increased by .3 %
problem yes good number of tests added coverage increased a but but i would like to see more -ve tests. Mostly +ve test cases are covered in the tests
problem Seems to be working as intended. But all the features have not been implemented. The documentation mentions future work but no new code has been added.
problem It seems that everything works, though it was hard/confusing to find everything as per the instructions on the write-up.
problem Very good guidance. Works as intended. This project is about enhancing Juniper bookmarks. The features work as they are supposed to. Automated RSpec tests were added. Could have described the automated tests in the wiki.
problem The solution of problem 1 was not clear from the write up, no explanation has been given.
problem The writeup needs significant improvement. "No clear explanation is given as to which files are edited for which reason. Only file names are stated along with changes made. Why the changes were made and what do those changes correct is not given." - This review was given by me last time,and no improvement has been made in this regard.
problem The write up is good, contains lots of pictures to show the added functionality. I found the test steps a bit confusing and it made validation hard.
problem The write-up is very detailed with comparisons between previous and new versions, as to what features have been implemented but lacks on explaining how they are implemented. It can be improved by adding how the features have been implemented, why they chose this logic to implement the features.
problem the Writeup misses out on elaborating the approach taken, it just lists the problem statement and jumps to test cases and fix. I would like to see more details on the approach taken.Â The "why" is missing
problem Documentation mentions the steps, problem statement, solutions and screenshots. The description are detailed. However, I feel there is no need to give screenshots for tests written.
problem The write-up is well written and looks through. The write-up details what has been accomplished and there are plenty of screenshots to support this. However, there is no mention of what code has been changed/added and why the authors chose this change.Â Test plan has also been well written.Â The parts written are well written, but there's a good scope of improvement.
problem Since the TravisÂ test has failed, merging the code would not be a good idea. The project doesn't need to be redone from scratch, some modifications to the existing workÂ could make the project ready for deployment.
problem No, all the features have not been implemented e.g 1. A reviewer can be recognized or credited if he added useful bookmarks i.e if the author has made use of the bookmark. 2. A function to add badges automatically if a participant had submitted more than threshold number of useful bookmarks. plus build did not pass as well
problem Yes, the code seems good to deploy if we consider the manual testing and the video demonstration. But since it didn't pass Travis CI, this claims seems a bit of a concern. If we ignore the fact that lines of code was >500, and thats why Travis CI failed, but still there are a few lingering issues which the Travis CI pointed, which still hasn't been fixed. It seems more of a patch, which would require more patches to patch in the future.
problem This code will need to be refactored, however, we will not need to build it from scratch. Only some functionality has to be divided into chunks and moved into helper functions. The functionality works well.
problem No issues codewise. Can add test cases and after thorough testing It can be deployed. Yes other team can take up and fix the minor issues and build pass.
problem build fails that needs to be investigated , once that is done i dont see why the project cannot be merged with the mail branch. Loot of good work has been done and merge with the main branch would bring the work to fruition.
problem The code is not altered much but it follows the standards and not changed in the second round
problem No. I do not think the code is ready to be deployed. I found the code change hard to understand, there are no comments and neither has the logic or rationale behind the new/changed code been given in the wiki. Besides, the build fails and there are a host of issues thatÂ need to be fixed.Â Although all this might only be trivial issues and can be fixed rather easily, the code as of now, is not deployment-readyÂ according to me.
problem Unable to login to the expertiza url
problem The code has been merged in a good way and there have been no merge conflicts. However, the Travis CI was failing and the code climate check was failing too. This is something that the team must look into and make sure that the changes that they have made are consistent with the existing expertizaÂ code.
problem Travis CI did not pass. Code climate also has 121Â issues to fix.
problem No, the Travis CI had failed. Yes, there were a few conflicts, like the lines of code was very large for a commit (>500), also there were a few pending test cases in the pull request.
problem The build isn't passing one of the added tests, but it looks to be a simple fix.
problem Yes there is one conflict that must be resolved to go ahead reported by TRAVIS CI.
problem Travis CI build is failing. Lot of warnings and issues that have not been fixed. Many of them are trivial and easy to fix.
problem Build fails. pls check the same. There are no conflicts with the mail branch.
problem Build fails and there are aa plethora of issues (121 by code climate) and several warnings.
problem Code is written well with simplified approach. Naming conventions are standard without long functions. DRY principle is followed.
problem The build did not pass, their test failed. It seems that theirÂ grades_controller_spec.rb has some problems.
problem The code is well written. Although as suggested earlier, the team has not added comments to the code. In the wiki page, the team displays of how the code was before and after. But, I still feel this is not adequate information for a layman to be able to follow line by line what the code does. Adding comments in the code for future projects would be my best suggestion. Or, as an alternative, briefly explain in a line or 2 as to what the code does.
problem Code written well. Remove the unwanted methods, there are few duplicate methods which can be removed.
problem The code was well-written and no problem with long or bad names. But, no comments were present. Commenting would have made the code easier to understand. Also, refactoring was not done.
problem The code hasnt been changed from the first round. New definitions that were added follow naming conventions properly. remove_administrator remove_instructor Viewing their pull request and code climate bot, there were few places where identical blocks of code can be found.But they are in the spec files.They could have refactored those areas alone.
problem The code is really well written , there are no bad names. The functions are also easy to understand. However, I would suggest them to include more comments in the code so that it becomes clear for the person reading the code that what the function and changes are all bout.
problem The writeup is well written but not as explanatory as required
problem Unfortunately the authors have not added any more text to improve the writeup as suggested in the first round of reviews.
problem The code is very well written as previously said. However, some test cases are still not passing and that may be troublesome if deployed onto production server. It would be a really nice opportunity for students in further classes take this up and improve the work so that they can complete the work which was left incomplete due to time constraints.
problem Issues with the build Can be fixed quickly. Issues seem trivial.
problem The build passed in Travis CI and there were no conflicts. But, some issues are not fixed like refactoring is not done and block has too many lines. These issues should be considered for a well written code.
problem The code was already very well written. But the author did not made any changes after the first round. The lack of proper commenting still remains.
problem The code was written good enough. THere were problems with indentation. I have seen some improvement compared to the last round.
problem They have added test cases but very limited. The code coverage was just 14 percent.
problem Yes the team has added tests. I am not sure of the increase in coverage as it is not mentioned in the doc. however, the team has very well explained how the tests were done and what areas they have tested.
problem Yes, everything that the project required to do works. There were a few things which caused issues in the pull request, but none of it related to the functionality of the product to be tested, but rather related to the code complexity. Even the video demonstration clearly shows the changes implemented.
problem The link does not work.
problem Haven't deployed so could not manually check. Though according video and wiki page it look likes that teh code would work fine.
problem The test cases covers the required test scenarios and the system operates as intended. The video file submitted though seems to crash. A link could have helped.
problem The team didn't no provide the link for the deployment, but according to the video they provided, the features worked well.
problem The write-up is very self explanatory. It successfully covers each and every aspect of the work done by the team, and also, to an extend, delvers what mindset they had while working o the project, which is very great. Just one sugestion is that, instead of simply dumping the files, they could have made a quick note of what the code in the file does. No one want to go through each and every line of code just to get an idea what it is meant to be.
problem Overall the write up was not bad. Here were some of the things I believe that could be improved: Problem Statement;Seems to be wrong. I believe it should be included in the background as it merely describes the files that they are supposed to work on.
problem Very impressed by writeup. One suggestion: Problem statement is not mentioned thoroughly however, solution is very well ellaborated with screenshots and code snippets.
problem The wiki provides enough introductions for this project. According to the wiki, I can get a clear insight about what the project is, what's the issues include in it, why the team do things as the way they said and the tests they give to make sure the functions work properly. However, the description for the first issue is not very clear and makes me confusing.
problem The code is almost perfect, apart from the code complexity issues, which in my view isn't very tough to fix. The project need not be done from scratch, and it is certainly a good starting place for future teams to pick up.
problem The feature implementation section is good to go. However the test cases can be improved on a lot. That doesn't mean that the test cases shouldn't be deployed.
problem Excellent work but the codeclimateÂ build has failed
problem The team gave fixtures for the issues exist, but to make deployment, it is better to add more tests to make sure the function work properly.
problem Yes, the pull request did pass the Travis CI. It didn't has any conflicts with the base branch, but it did have some unresolved issues which needed to be fixed, namely: cognitive complexity was 6, and condition size for two files were too high.
problem The build did not pass travis CI. I did a demo of their project and it seems to work given the credentials provided. THe encountered some minor indentation errors but otherwise the feature addition/fixing part seems good. The test cases written for the controller was very little though. The code coverage was just 14% approximately.
problem The code passes for the Travis build as well as Danger Bot. However, it fails for code climate with 3 issues yet to be fixed. In totality, the pull request does satisfy the need to pass the required builds.
problem The code has no bad names, or long functions and follows a good coding style.Â However, the suggested change was not implemented which would make the code more "DRY".
problem There have been no new commits since the last round of review. The integration with master branch still has conflicts to be fixed.
problem The build for the pull request has not passed and has the same issues from round 1.Â Build logs suggest that out of 4 build jobs, 3 jobs pass and 1 job still needs work.Â According to the build job 4 log, there is a json parser error which needs to be fixed.
problem No, there have been no new additions to the test cases since last round of review. The code coverage still remains the same as before, with an increase of 6.6%.
problem Yes, both the the issues seem to be fixed from the screencast video. It clearly explains the before and after scenarios and the system works as expected.Â The test plan is still missing for the fixed issues.
problem Yes, since the issues are fixed as required, I think that the project can be merged to the production server. However, there is some work on the conflicts upon resolution of which the fixes can be included to the code. I don't think that there is a need to take another approach for solving the issues.
problem The code seems clear and dry. However, a few comments would have made the code more readable.
problem The travisÂ tests have failed. There was one main failure in the TravisÂ log which could be addressed.
problem The team did not add an automated test plan. But manual testingÂ was clearly demonstrated using screenshots.
problem The write-up was good and clearly explains the issues faced and the code changed. It would have been much more clear if screenshots of git file changed were posted.
problem well written document my suggestionÂ is put the cropped version of images or even links to images is also fine.
problem The CI build was failing in the previous submission as well in the new submission. The team should have corrected the same.
problem Although the test coverage is increased according to github, i could not find any new test cases in the project. The team has not added any test case for the correction.
problem the code looks fine. The only concern is related to the CI build which is failing at the moment. Some of the tests are failing because of the change.
problem No, the build did not pass. It seems that airbrake_expection_errors_feature_tests_spec.rb has some problem.
problem The code seems to follow good Ruby on Rails Coding practices. The implemented code is DRY. They could have increased commentingÂ by making comments more descriptive.Â The comments for say a particular function could have includedÂ the input arguments, their data types and the return value and its data type if any. For the second round they haven't added any new commits and haven't changed their implementation.
problem The pull request that the authors have submitted does not pass the Travis Bot builds. But the bot has failed in the tests for which the authors haven't changed any code. So overall the pull request doesn't seem to break any code.
problem The team has included a thorough testing plan but I couldn't find any commits to any of the rspec testing controllers. They could have added as per there test plan. These tests could have been included 1) Login as Instructor4. Add a new assignment Assignment_Instructor4 under the course Course 617, Spring 2016. 2) Make student6400 as the participant of that assignment and logout. using Capybara and Cucumber.
problem The authors have documented the steps they did to solve the issues in a clean manner. Although they haven't mentioned any particular design principles or design thinking that went on in solving the issues. They have explained all the functionalities of each file they have modified and stated why they have modified the particular file. One thing they could have added were class diagrams and dependency maps. Or some pictorial representation of the flow of each task which will help the reviewers and instructors to quickly catch up on their idea. It doesn't seem like the authors have updated their writeups since the last submission.
problem I think the authors have done a good job in fixing the issues but they should have added tests to check if their code does handle all the possible edge cases and does not break any other code functionalities. I think this is a good starting place for a future team to pick up this project and implement some testing specs regarding the functionalities that the authors have fixed.
problem Yes, theÂ code seems well written and there was no issue with the naming or functions used. However, a few comments could be added to impersonating_as_admin.
problem The write up is well written and self explanatory.Â It would have been better if the screenshots were of standard size but that is not a problem since the purpose of the document is just to explain the project.
problem The build was failing last time as well but not fixes were made.
problem The coverage has actually decreased.
problem The code is more about refactoring which is mentioned in the wiki, but I do not see any of the codeÂ in which changes are made. Could have mentioned them in the wiki for better clarity.
problem Bad names like "review_num" have been used.
problem The code is nicely written overall. It follows Ruby guidelines and DRY principle. It would be better if more comments are written.
problem The code is well-written and follows good programming style, has good naming and is DRY. The team has not implemented any suggested changes since there has been no commit after first round.
problem The last commit I see was 23 days ago, which seems that there wernt many changes done in the seond round. The wiki mentions the suggestions at the end, so it would have been good to have the code changes and tests for the same.
problem The team could have added more test cases as they have mentioned about refactoring the code. The refactored code and the screenshots of the test cases would have been better to display in the wiki for future students.
problem The team has added tests and the coverage improved by a small percentage. More tests can be added to further improve coverage
problem test cases were not part of the requirement doc. Test plan added in the wiki. Could have added more negative test cases.
problem I feel that the project could cover more test cases which would have explained the functionality better. The sql that has been mentioned, could have no results as well, so covering negative results would have been better.
problem Most of the functionalities that were required have been implemented but the final changes haven't been merged due to some build issues on Travis CI. The tests are quite comprehensive
problem I can't really tell how to navigate to this portion of the project in the application. The writeup is not descriptive enough for me to know where to go to test it.
problem I found the write up to be same. There is more scope to improve it with more explanation and test cases, specially the links to the refactored codes could be added for the other teams to know.
problem The writeup is clear and has illustrations to explain the flow. However, none of the code is added to the documentation. The project also only defines the test added but could add more details about the increase in coverage
problem The authors should have added screenshots for the changes made in the code. Otherwise, the purpose and work done has been explained well.
problem The writeup leaves me unable to really determine what was done to the point where I can examine the work in their application for correctness, especially since, as a refactor, the behavior should not have changed from the base expertiza application.
problem The writeup is good overall. ButÂ it would have been better if more code snippets were added along with explanation of why certain methods are obsolete.
problem YesÂ I think with additional testing it can be deployed.
problem The code is written in a modular way but there are some errors as shown by the CI. If these are fixed, it can be merged with the main project
problem I feel there are more number of test cases that need to be covered before deploying this in PROD.
problem The code build passes the travis CI test and it has notÂ conflicts with the base branch. However, the team should resolve warnings.
problem The build seems to have passed, but there are not many test cases listed to check the same. There is more scope of test cases in the same.
problem Most of the tests passed. However, a small fraction of the tests have failed and the code needs to be modified to incorporate these changes
problem Travis CI test has been failed on Github.
problem Few issues with the build but I feel they are trivial.
problem The pull request did not pass the automatic build requirements. It seems as though this team worked very hard to try to fix the build errors.
problem No new code was committed in the second round. I would have really appreciated it if the team could have taken the time to add comments, and fix some "codeclimate" issues.
problem I see really less commits in the second round. The last commit was on 31st October. It would have been really nice if they have worked on the project further to enhance the work they have done.
problem Same test plan as previous phase is present , no new cases added
problem Team has added capybara test. but team could have worked upon improving test coverage. Team can explain test description in test plan in wiki, step by step so as to understand what all test scenarios were covered.
problem The test cases added by the team pass. But overall coverage has decreased. I would suggest the team to have added more test cases for the new lines added in the controllers.
problem The team has added test cases. But, they haven't explained it well
problem The team added the test cases but the coverage did not increase.Â Overall coverage decreased (-1.04%) toÂ 46.605%
problem The team had added test cases in the first round of submission itself. The overall coverage has decreased by 1.04%. The test covers the logic implemented by the students.But reduces the overall coverage. The team did a good work in using Capybara and testing the web functionalities too.
problem The changes works as per the changes. Test does not cover entire scope
problem Everything works from their UI. Their peer review plan works as intended and clearly explains how to test on UI. There are SQL errors when trying to delete a user which is tied to some assignment. Although the team has mentioned it is out of scope of the project, future work could be to remove those SQL error displayed on pages and give a pop up / alert box, saying your user is tied to an assignment.
problem Writeup is written well and explained properly with good indentation, content and screenshots. Team could have explained test plan in more brief so as to understand number of test scenarios covered.
problem Yes.From the system and code, these code changes seem ready to be deployed in production after heavy integration testing as issues seem to be working, but github pull request shows more fixes to work upon.
problem Although as per functionality, this code is ready to be merged and the team did put in a fair amount of work into it. Still, I believe this project can be bettered by another team in the future by refactoring some the code to improve code writing principles and also improve the wiki documentation.
problem The code seems ready to be deployed as the features are working as intended but it would have been better if the code was refactored.
problem The code can be readily merged into production. 1) I felt code climate failing not an issue, because their similar blocks of code were on spec files and deleting 2 different roles is the same functionality in the end. Few places has indentation errors which can be fixed before merging. As suggested earlier, removing the error for SQL and replacing with some form of alert box could be helpful for a future work.
problem The build does not pass, but only because of codeclimate issues. The code written by the team, in terms of logic is absolutely perfect. But certain conventions were not followed, such as "proper indentation was not followed", "DRY principle violated". Although these have no impact on the functionality, these coding practices are industry convention and maybe the team would want to consider giving them equal importance for the next projects.
problem Build is not passed. Build failed Travis CI. Team can workÂ to fix suggestion given on the pull request.
problem I coud see only few builds passed the Travis Cl. There are many builds that are failing and should be worked on.
problem Build did not pass. Version compatible code can be written
problem A better explanation on the test cases would have made sure that the code is ready. I feel that some more tests need to be done before deploying the code.
problem The code is ready to be deployed on production server with few caveats. At some places values and logic is hardcoded. This project would be a really good starting point for further work.
problem The code is functionally ready to be deployed in the production server, because it is sound and even passes the build of Travis CI. There are a few minor issues due to Cognitive Complexity of names of methods, lines of code and a few indentation errors. If they are fixed, the code is complete and will pass the build of codeclimate as well. The team has proceeded in the correct approach and there is no need for the project to be redone from scratch using a different approach.
problem The team has covered the implementation of the points given in the problem statement. However, testing of the project is necessary. This is one of the point which cold be worked on by the future team. According to codeclimate, there are 7 issues which need to be fixed as well. The future team could improve on those points.
problem From the file diff in GitHub, it looks the code is in good shape. There were a few suggestions provided during round 1 review. If those could also be integrated, it would be better. The test cases are successfully running. But the functionality could not be tested due to lack for steps in the wiki.
problem The build seems to pass, but it would have been great if the test cases were explained better. Maybe some screenshots or a video would have been easier to test.
problem Yes travis CI is passing. Code climate has few issues but they can be easily resolved.
problem Build passed. codeclimate - 7 issues to fix. 2/3 checks were passed. Issues seem trivial.
problem Code is very neat and readable. I appreciate you attention to following good syntax practices. There is some similar code was exists in the controller action method and the content page method but simple to bring out and make dry. Overall great job.
problem The code is well-structured, the team uses context and it properly to separate different cases and using each to make the code DRY. However, it seems the object used to test are not all stored in the factories file properly.
problem The last commit was listed as 12 days prior to this review. But the code looks to be in great shape so there was no need for new additions.
problem Not ready. There are still a few errors in Travis CI and code climate.
problem As mentioned above, they can make it better by fixing some issues.
problem The travis test had failed and codeclimate shows indentation and other such minor errors. I think that the team just needs to work on the styling and following some Ruby guidelines and they are good to go.
problem The project is almost on the stage that it can be deployed on the production server. However, there are few test cases that are failing as shown on the git. If these minor flaws are fixed then the code is good to go.
problem There is a minor code climate error as mentioned above, similar code. An easy fix and you will be green with the climate check.
problem The build didn't pass in Travis CI. There is still an error.
problem They did a good jobÂ and they can make it better by fixing some issuesÂ . According to the pull request page, the Travis CI build failed and there are 5 code climate issues to fix
problem The pull request is the same as the previous one. And as in the case of the previous one it fails.
problem The code passes almost all Travis CI . However, there are really few which fail.
problem The code was not much changed after the first round. They added a few more sanitation check and rspec. Functions are not long enough and understandable.
problem Overall the code looks good with most of the coding standards being followed. However I think it lacks proper commenting and also there were few strayÂ pieces of commented out code lying around. Adding few more comments and deleting unused code would be better.
problem There were not any bad naming in round 1 as well. Comments could have been added for new additions which is still missing. There has been no DRY issues
problem Yes there were some commits fixing the travis and code climate issues.
problem Test cases added but the video is not very explanatoryÂ in itself to understand the test plan.
problem No new test cases were added
problem Automated and manual tests have been added and coverage has increased by a very tiny amount.
problem Yes the team has added test for the UTF encoding acceptance. the coverage is not 100% and not tested with varied inputs but i believe would suffice for sanity check. Although the description of test in rspec file is ambiguous not clearly mentioning what exactly the test is expected to do. There is no test available for the issue 2 documented
problem Videos provided and the project is not deployed so cannot test from UI. But the issues are fixed and the system is working as expected.
problem It was not deployed so couldn't check manually
problem Write-up is little vague. Some are not explained properly.
problem Watching the videos, I feel it is ready but no deployment link.
problem As It did not pass the test, it is not ready. For a future team, end of this project should be a good starting place.
problem According to write up, it's good to go but since there is no deployed link I couldn't manually check.
problem I believe this change that affects the system as a whole, needs more test to be performed in all affected tables and functions to be sure, no other part of the system is broken.My opinion is that, once all parts of the system test is done, corresponding to this centralized db change the code can be deployed to production.
problem Build did pass successfully. Could have written version specific code to avoid errors
problem Travis says some tests have failed. No conflicts though
problem No, It did not pass travis ci and there are many conflicts that must be resolved.
problem Few minor issues with the build which can be ignored.
problem No, build pass did not pass Travis CI
problem Not all changes has been verified successfully. few code climates rejects has happened as well.
problem There are no new commits during second round.
problem The team did change the project as there are 2 new commits. The CI build is still failing .
problem The team has added test cases but the coverage did not increaseÂ by much
problem The write-up is well written and organised. Everything looks fine. The team should have mentioned about the approach taken to solve the mentioned problem statement which will make the implementation easier to understand. Also the screenshots could be a little better.
problem The code has mast elements ready but there can be more test cases generated with better test coverage. The code need not be rewritten from scratch, it just needs to include some more of the expectedÂ functionality
problem According to write-up and video yes but since I couldn't manually check I would say no.
problem There must be some test cases that should have been covered according to Travis CI. Also the build has failed. However, the team claims that some of the tests are running locally. If some of these points are looked upon, the code would be ready to be deployed on the main server.
problem the build fails and there is one warning and one error which needs to be fixed.
problem There are build failures mentioned but IÂ don't think the errorsÂ are due to this team's code, hence, giving them the benefit of doubt.
problem There were some build issues raised by Travis CI which have not been handled yet. However, there are no merge conflicts with the master branch.
problem No pull request link is provided
problem Travis failed
problem No build did not pass. 1/3 checks very successful. It is fixable and the issues are trivial.
problem The build in Travis CI failed. 3 out of the 4 build jobs had passed. The build job failed in the features folder. The branch did not have any conflicts with the main branch
problem The code us good as mentioned in the previous rounds, except the lack of proper commenting. The authors did not improve the code from the previous rounds in this aspect.
problem The code is well written according to the video. Since there's no github submission, I went to the sumitter in the pull request to check his work. It seems that the code is relatively good. There's some minor indentation and alignment issue. And not much explaining comments. But other than that, no bad name, no long function.
problem The code is difficult to understand. There are cases where factories are used and then later replaced by mocks in the individual test cases. The code also does not appear to be DRY, as several of the mocks appear redundant in the context of the plethora of factories built.
problem For each method, there should be multiple test cases, but they put all tests for a method together wrap by a single it '.....' do, they should consider to add more it '......' do, to separate each test case, so the reader know what are they testing.
problem Yes, the team made commitsÂ days ago, but then it seems that they didn't follow-up with the feedback they received on the pull request, as their were 7 issues, though of minor severity, which required fixing, and then there were no commits after that.
problem There's no upload for the local folder. It seems that no new pull requests has been committed during the 2nd round, so I would guess no new code being committed for the 2nd round.
problem They are trying to fix code climate issues, but there are still many failed, and no code change to improve readability.
problem Involves fixing code climate issues.
problem The team did not attach the link for the github repo along with the other files submitted. This makes it difficult to comment upon the commits made. However, from the video link it can be seen that the test cases have improved to give a full path coverage.
problem FRom the Pull request i see Coverage Decreased, But from the Screen-cast looks like 100% covered When i tried running manually i get the below errors Â 1) ReviewResponseMap #final_versions_from_reviewerÂ Â Â Â Failure/Error: prepare_final_review_versions(assignment, maps)Â Â Â Â Â Â Â Â NoMethodError:Â Â Â Â Â Â undefined method `prepare_final_review_versions' for #<Class:0x007fab83429010>
problem The team did not add any test cases since they had achieved a 100% coverage in the first round itself. However, certain changes made to the test cases included using proper naming conventions for attributes and following the DRY principle effectively throughout the model file.
problem Build says the overall coverage decreased but the coverage of theÂ Test has increased.
problem The system operation is verified and works as intended as demonstrated from the video.Â Also, all the test scenarios are covered.
problem The write up has some great information and snip its of code. It would have been a great addition to have included more discussion on the overall design of your test cases. Overall a nice wiki.
problem This is where the project lacks the mos. The write-up isn't very informative, specially for an outsider. It states the points very shortly, without going into much depth. Also, the writeup bombards the user with lots of un-relevant information and pieces of code, which make it feel very long, although lacking significant content. The writeup could have been more detailed, and could have omitted the unnecessary parts, like dumping of code, and not explaining what it does.
problem The writeup is a bunch of codes, there's not enough explanation.Â The "allow" function is important for the mock functions. But it is explained in no place.
problem The write-up is difficult to follow, and doesn't provide much insight into how the testing code works. Despite having a test plan section, no test plan is included.
problem The team has worked on improving the wiki document. The writeup now includes the Test plan sectionÂ that was suggested in the first round specifying the how the team setup an expertiza environment, the model functions used and the mock instance built for testing the model file.
problem Still missing the details.
problem Yes, apart from the 7 issues of minor severity from codeclimate, the code is perfectly well to integrate with the project. No, the project need not be planned and executed from scratch, it is implemented well enough.
problem The code is good because it covers the scenarios. But one thing that prevents the 5-star is that they do not have enoughÂ commenting and seems to be not that detailed and careful in terms of the explanation.
problem It is very difficult to recommend merging this code. Although it builds and appears to function correctly, it is not properly documented. It is difficult to tell how the code works and whether test cases introduced actually function as they intend.
problem As soon as they fix code climate issue, and separate each test cases with more it '......' do, it is good to deploy.
problem It can be merged after fixing the code climate which has 7 issues(needs to follow the coding standards )and need to work upon the overall decreased code coverage.
problem Yes, the code did pass Travis CI successfully, but as mentioned earlier, the code did fail on 7 grounds, of low severity. This should have been fixed by the team, as the issues were very small, and required just minimal follow-up.
problem Great job with your pull request and passing the Travis CI build. There are several code climate failures that could have been addressed many to deal with incorrect formatting and extra parenthesis or braces. Simple fixes so great job!
problem Travis CI build passed, But Code Climate identified few issues
problem The Travis CI has failed and also code climate.
problem The Travis CI build passed for the test cases. Also, the code passed for Danger bot. However, there were some issues for the code climate that required to be resoled. Overall the pull request satisfies the required criteria.
problem The code is written very well. There's some minor issues (sometimes there's duplicate "allow"s. But actually in the same "describe"Â just one "allow is enough. On the other hand, there's no bad name, no hard-to-understand functions. Comments can be added just a little bit more to help people understand. Some comments are not supposed to be there (such as discarded codes)
problem The source code is mostly written in a coherent way and is straightforward to follow.Â The 'context' blocks are extensively used which increases the project documentation. The commented chunks of code blocks that were present in the 1st round are mostly removed. There are still a few instances left and I would suggest to remove them because they reduce the overall readability. I would also suggestÂ to decomposeÂ the 'it' block inside the '.final_versions_from_reviewer' by moving the common setup to a before(:each) block and spreading the assertions across several 'it' statements.Â Another improvement would be to remove the 'xit' code blocks because they only increase the clutter and do not add any value to the code. Adding one comment explaining why the blocks are no longer necessary would do the job.
problem The number of commits that are made after the 1st round is impressive. The team has made a significant progress during the 2nd round, however I would suggest using more descriptive names for the commits so that it becomes easier for the reader to refer to them in the future.
problem The command to run the test cases is given in the wiki. Better thing would have been to provide the screenshots of the test cases and git links to the code to make the wiki more concise and well explained.
problem The test coverage on the diff in this pull request isÂ 100.0%Â (50%Â is the threshold). This pull request will bring the total coverage in the repository toÂ 28.7%Â (-19.
problem The features work as per the given instructions. Though there seems to be more scope for extra test cases.
problem The write up has a lot of code in it, which does not show up what are the changes exactly made. It would have been better to put the links to the git files where the code changes are made for good comparisons. Also, with this the wiki size would have reduce.
problem The writeup hasÂ covered nearly everything we need. all the function details are in the writeup, as welll as each function. However, I think there's too much code and not enough textual explanation.
problem Some parts of the writeup are not includeed, such as test plan.
problem More details about the test cases can be given in the write up for a better understanding.
problem Still a lot of code on the writeup page.
problem The team has improved the writeup since the 1st round. The 1st round version consisted of the copied code from review_response_map.rb and review_response_map_spec.rb files. This version clearly defines each test case and in some instances elaborates on the inner workings of the blocks for example ".import" Method discussion. However, design principles and patterns that were used in this project are still missing from the writeup.Â One thing that stands out in the code is that every mock object is defined at the start of the file. The team could provide a rationale for this decision and why it is superior to for example using different mocks for each separate test suite.
problem The code seems good enough to proceed, but with few more test runs as I can see alot of code added.
problem Most of them are good, but some edge cases should be considered.
problem All is good. Only one code climate issue needs to be fixed before complete.
problem There is only 1 issue stated in the Code climate regarding code refactoring. If that is done, this code can be merged.
problem The given source code is ready for deployment.Â The object under test is fully covered and all of the test cases areÂ implementedÂ correctly. The build successfully passes Travis CI. The future team will have no problems in picking up fromÂ here. However, there is a room for further improvement when it comes to simplifying several test cases, especially the '.final_versions_from_reviewer' block. Moreover, 'xit' blocks need to be removed because the final version should not contain any tests that are in the pending state.
problem Not really. They did not pass.
problem Yes, passed Travis CI. Only one code climate issue
problem The most recent Travis build was run 2 days ago and the build log says that it has failed.
problem The team has completed the missing code in the file oscillator_node.rs which generates different wave forms like sine, square, sawtooth and triangle. They then created the file oscillator.rs that generatesÂ objects and calls methods to run the different oscillator type examples. The code in both these Rust files have good comments that clearly explain what every snippet does and the significance of variables. This made it easy to follow the syntax and semantics of a new programming language like Rust (Rust is a systems programming language that focuses on memory safety and concurrency). The variable names used are intuitive and the code is well indented. One issue that I can point out here is that the code is lengthy and complex with a lot of redundancy; especially those that define the audio context, destina
problem No test cases present but test plan covers it.
problem This project does not deal with UI
problem This project doesn't involve the UI. It focusses on audio processing by fixing the missing audio nodes in Servo's WebAudio standard. Precisely it generates the sine, square, sawtooth and triangle waveforms. The code that was modified and included from scratch works as intended.
problem The overall structure of the code looks good and all the coding standards have been followed. I feel like there could have been more comments to support the large amounts of changes that have been made.
problem No proper commenting . authors havent improved as expected.
problem The code has been written as per the coding standard. The code written by the team adheres to dry principle. However, as per my first review comments it is advisable to follow better naming conventions. The team could rename their function names such as the below one to something smaller such as get_time_diff. The code needs refactoring in names and addition of comments.Â def get_time_diff_btw_due_date_and_now(due_date)
problem Issues related to not mentioning the functionality of each method have been resolved. The wiki now mentions what each method does and what issue does it fix. Only issue with the current codebase is that it contains very long functions that could have been refactored and broken down. The 'perform' function contains a lot of lines and has tons of if-else statements.
problem There's still some minor style issues in the code regarding unnecessary parenthesis.
problem Yes, the team has made few code climate fixes and also added tests for the UTF-* encoding issue. though no test is available for the sanitize fixes.
problem Yes the team added test cases and the overall test coverage has increased. But the team seem to have only modified the existing test cases. The team could have implemented test cases of their own.
problem The team has added 2 test cases in theÂ sidekiq_mail_worker_spec. More test cases could be added to fully test the functionality.
problem Test coverage has increased by a very small margin. More tests would have been better. There are only 2 tests. There are various other scenarios that could have been tested like missing or wrong attributes in request,email.
problem Yes the team added the test cases. 45/69 new lines have been covered in theÂ tests. good work. but I feel that they could have added additional -ve test cases.
problem No new code or improvements have been done in round 2. Only documentation has been edited. The code could have been improved a little after the suggestions were given.
problem writeup is too concise code were addded. But the implementation was not explained in detail.
problem Lots of improvement over the last phase. Many recommendations have been implemented. The write up is well formed and structured. The entire flow is explained along with files changed/methods implemented in each stage. Some formatting issues so -1
problem The code is ready to be deployed in my opinion to the production server. The team could improve the quality of their code by visiting the code climate tests.
problem The code implementation is correct , so with more edge test cases and after resolving the warnings in the travis test, the code would be production ready.
problem The code is written well but there are some small build issues as pointed out by Travis CI which need to be rectified for it to be deployed
problem Code is ready to be deployed in production if it is refactored and broken down into smaller chunks. Maintenance might me tough on this one. Functionality wise, works great!
problem There's a lot of changes made to the project to incorporate Sidekiq, but assuming that's fine, the project is ready for merge.
problem There are a few warnings thrown by other tests that must be rectified, but otherwise ready to deploy.
problem The code has been merged in a good way and there have been no merge conflicts. The build did pass the Travis CI. The code climate test failed but those were small issues which can easily fixed by just revisiting the code. Also the team have added a debug code which will need to be removed.
problem yes build passed but there are many code climate warnings that can be easily cleaned up such as tips for refactoring and unassigned variables. A more careful look at the tool warnings was required.
problem Code build passed the Travis CI build with some warnings thrown by the other tests.
problem The overall test has coverage decreased. However, the RSpecÂ tests added to the project seem appropriate.
problem The code that is written has long functions. Few names do not really provide the gist of what the function is intending to perform
problem Write up is Okay, The test plan comes before solution / approach section . pls change the ordering. there is no reference sectionÂ instead of putting screen shots of code it would be better if the authors had put code snippets
problem 1) The write-up is comprehensive and clearly explained. 2) Should explain the test cases in more detail.
problem 1) Yes, just could not check the mailing functionality. 2) Also the test coverage needs to be improved.
problem Without a video or instructions, I cannot easily verify that the solution works since there was an error thrown when I tried to follow the recipe. The error occurred while I was trying to request an account. More detailed testing recipes would help. Getting the accounts and their email addresses set up in the deployment is the main difficulty.
problem The team added the test plan section but it was too short and did not explain all the test files created and/or modified. The implementation section could do without the many code dumps. Otherwise, the writeup was concise and effective.
problem It looks like the code is almost ready, but there are simply some failing tests to get past.
problem Build failing due to bad test. Log shows one error for now. Also, I have a feeling tests on some projects aren't able to run all test- the coverage log for this PR shows that none of the files are getting covered:Â https://coveralls.io/jobs/41685719
problem drying is possible
problem The git link to the code repository is not provided.
problem Code looks okay, changes suggested have not been implemented. I wanted to see more comments on "why" this is has been done, which is missing.Â Also strings checks for str != '' are still used and not .empty
problem I don't see new code being committed.
problem Lots of test plans are added. The coverage decreased for the plans added. The test plan covers the basic functionality and not the edge cases
problem 1) Yes. The team has added test cases.Â The newly added tests are not covering the range of this project well. The total coverage has decreased and more number of files have lost coverage. Â 2) Overall coverage decreased (-28.6%) toÂ 8.18%.
problem Didn't see any test cases.
problem Overall coverage decreased (-28.6%) toÂ 8.18%. The team did not add test cases that covers the scope of this project. Could have thoroughly tested with test cases. Also could have worked upon increasing test coverage.
problem Yes the team did add test cases but I am surprised on why the coverage numbers have fallen so much. This needs some investigation.Â I think good test cases were added as part of the work, i would have though liked to see more -ve test cases checking for the failure conditions
problem The basic functionalities are working as mentioned in the write-up. RefactoringÂ the code would hamper a few functionalities as there are multiple instances where a single function is performing different actions
problem Checked the following functionalities through UI:1) Log in as instructor. - checked2) Got to profile page. - checked3) Check the box that says 'Send me copies of all the emails'. -checked4) Log in as 'student2064' with password 'password'. - checked 5) Trigger any action that may result in mail being sent to the student. -checked6) Log in to instructor's
problem Was unable to test the work from UI , but the implementation looks okay. I would have liked some screen hots of mails and videos to be uploaded as references so that reviewers could look at them as well.
problem writeup covers all the specifications and descriptions but is too lengthy.
problem The write-up is well explained along with the test plans explained in steps to make it easy for testing but that just have a few cases with cover basic functionalities
problem A few changes to functions and their declaration have to be made to make the code production ready
problem No the build failure needs to be investigated. Some refactoring regarding the messaging should be done. instead of hard coding the mail it should be read from a config file.
problem The build does not pass. It looks like some failing new tests are the issue.
problem build not pass in travis ci.
problem Not it didntÂ pass the test.
problem The Travis builds have failed but there are no conflicts to be resolved.
problem The build did not pass in Travis CI. There was one failure which needs to be fixed.
problem No Build still fails in spite of asking them to fix the build issues in first place
problem Build did not pass Travis CIÂ but there are a lot of warnings and issues that have not been fixed. Many of them are trivial and easy to fix.
problem The code is visually stunning. I am a great fan of the readibility. There are some instances of redundancy in the #controller_action / #site controller tests. Also in the #get_item/#get_menu. Would be easy to pull those out into a begin block. Otherwise, very lovely.
problem Currently your team haveÂ 4 code climate issues that denote code redundancy as stated in the code comment above. Best just to bring those statements out to keep it as dry as possible.Â From what I can tell, none of the pull requests pass these requirements including my own teams so I am not sure what is the cause of this but I guess no one will be getting all the stars on this questions :)
problem The write up is good overall. I believe there could be more explanation or discussion into test cases not included in the design but otherwise a good wiki.
problem The test plan should have come before the implementation details. I gave this suggestion in my previous review as well. Still, the documentation is well written overall. It's just a puzzling choice to put the test plan near the end.
problem I had suggested changing the ambiguous or bad variable like temp, temp1. These changes have been incorporated. However comments missing. Adding these will improve the readability of the code and make it easy to refactor at a later stage as per requirements
problem I'm afraid that the build failed and there are code climate issues.
problem The wirteup is pretty good. It gives the test plan and all the test cases. Also, there is explanation of the test process and logic. Just one minor problem.Â The 29 tests provide 100% coverage of the lines in menu.rb. Before the project the coverage was only It is an incomplete sentence.
problem The introduction to the scope of the project has been written neatly, but I feel the test plan shouldÂ have been a little more elaborative, a short description of the tests would be nice to have.
problem While the test coverage has increased to 100%, the team has made some changes to "schema.rb" file, this might cause a problem on other dependent modules. Hence, I feel it is risky to deploy it on production. The project doesn'tÂ need to be started from scratch by the next team.
problem There has been few code climate issues reported, but few of travis tests has failed. mot all changes has been verified successfully
problem Yes the project is a test project for menu.rb. The code coverage has increased to 100%. Though the code covers all lines, i feel edge cases are not covered well.
problem Yes the coverage is good but the test scenarios are fairly straightforward and no elegant stubs or mocks used. The code isnt DRY
problem No significant improvements to the write up. It still doesnt explain clearly the functionality of menu.rb and the need for different tests. There is code provided in the write-up, which is more reductant than informative. No future scope or enhancements documented. They have provided all necessary links and coverage data.
problem As its a test project, deployment to production may not be applicable. The code can be merged, but i would suggest few changes to DRY the code as the test seems slow, which is a scope for improvement.
problem I don't see tests for the logout button on the menu.
problem The code written is following the Ruby on rails guidelines. The variables, methods, and class names do seem to follow proper convention and are suggestive of the functionality they are being used for. In some cases they could have used a little more descriptive names for variables for example inside app/helpers/student_task_helper.rbÂ they could have used background_colour instead of rtn as a variable name in the due_date_color() method. It will become more readable for the reviewers to understand the functionalities. Also they have added to few commits for the amount of code change that they have done. The commit messagesÂ are not descriptive enough about what changes have the authors committed.
problem Code Snippet added.Â Still, Git link is not of the pull request.Â Â No link provided for the change. Either screencast or the URL of the deployed application would have been ideal.
problem there is no code included in the write-up,but the team had mentioned the changed files in the write.As a reviewer, it is difficult to find out which code has been added by the team. The team should clearly explain what they are doing.
problem There have been only two commits - one on 30th Oct and second on 31st October. There have been no commits since. It would have been better if you people had given one more commit resolving the issues given by code climate, since most of them are trivial.
problem No new commit has been added since the last submission. The commit messages are not descriptive. They should commit small portions of code one by one with proper description of the changes in the commitÂ message. Also their functions seem to be very long. they may consider refactoring and creating more cohesive code. Each function should do only one task.
problem It is given in wiki that most of your test cases depend on checking the output. However, like I mentioned in my last review, several test cases like the ones mentioned below can be automated. This is especially true as TDD is explicitly mentioned in your problem statement: "Write the required tests before implementing/refactoring the methods in the above-mentioned classes". Add past due assignments to the studentâ€™s task list (on Student View). Check for correction in due dates of assignments (when an assignmentâ€™s due date is edited, it s
problem No Screencast or deployed URL provided.
problem I can not see any link to test changes as well as no video to watch the changes. Team could have shared implemented part to test and review.
problem Write-up needs serious attention of the team. The approach followed is good but it still needs to be worked on. the write-up should include contents which makes it self-explanatory.
problem lacking necessary UI description, eg, the final appearance of the task listÂ or the pathway toÂ show a task list.
problem The write-up is very detailed as to what features have been implemented but lacks on explaining how they are implemented. It can be improved by adding how the features have been implemented, why they chose this logic to implement the features and how to test the code or show how they have tested the code.
problem The wiki documentation has been updated. All the information has been documented in a neat and logical manner. The write up adequately provides what functionality the work is related to. They havent updated any part of the wiki documentation but overall their documentation is concise and to the point.
problem Write up is too brief. No detail description of approach taken as well as no picture to relate to changes as suggested to add in last review.
problem - The write-up does mention the files changed but misses out on adding code snippets. - Little formatting inconsistencies found like "-- Expertiza Project" in the introduction, and a ":-" only for Overview but none of the other headings. - Looks like "Separate the list of 'teamed with' students from the current tasks box" needs to be a heading rather than plain text! -Â Now we have created a separate table for assignments" sounds ambiguous - does it mean a new database table or a html table..? Please be specific. - "A helper function was also added to format a string into multiple lines" - please mention what the string is about (what it represents), what are these multiple lines that it is getting split into, and why you would want to split them. - Test Cases are not stated. Test Plan does mention one as "for example" but the testing process could've been given a little more respect. :)
problem The write up is lacking screenshots, for example, the colour coded views etc and the test plan to verify the issues. Only the test plan for colour coding has been mentioned. The issues and the plan of action have been described properly.
problem The view file contain 200 more files so it is quite difficult to figure out theÂ structure of the View. It is better if independent component is introduced to construct the whole task view. And the commits contain the Gemfile, which is considered not secure to deploy for it alters the production environment.
problem Codewise no issues. Build issue has to be fixed.
problem Not able to see the changes done by the team. Test plan could have been explained better. If the URL or the screencast was provided it would have been better.
problem No. i can not see any link of video to check the changed functionality or system, hence it is difficult to pass the changes to production. Yes new team can take up remaining changes and provide a working system.
problem Code looks okay, and the spec is written in detail. But as mentioned earlier, I'm not in a position to judge due to lack of video or deployment link or even some screenshots proving the work.
problem before deploying the project onto the production server, this projects asksÂ for some attention. new test cases should be added to the project. I can't say much on that.
problem The build fails. there are 3 warnings which needs team's attention. there are no conflicts with the base branch.
problem One of the Travis CI tests is failing,Â https://travis-ci.org/expertiza/expertiza/builds/449165455?utm_source=github_status&utm_medium=notification Â Found many "code climate" issues.
problem No link of the pull request provided.
problem The travis CI build did not pass. But the tests on which the build fails has no direct relationship with the code that the team has changed or added.
problem The TravisÂ build passed but there are a lot of warnings and issues that have not been fixed. MAny of them are trivial and easy to fix.
problem The pull request has some failed cases. no conflict.
problem The code is written aptly and it does what it is supposed to do. However, code comments are missing.
problem The code was well written and there was no issue with the naming or functions used. However, a few comments could be added to the current_team,new_team and team to make the code more readable.
problem The team has modified an existing test case, but itÂ didn't increase the test coverage.
problem The team added test cases in the spec file for both the issues. Further, a detailed explainationÂ is given using screenshots for manual testing if necessary. The coverage increased for 1 issue while it remained the same for the other.
problem The user name issue does not seem to have been resolved. Although the code added seems adequate, I was able to create a username with spaces in the string.
problem The write up has most of the relevant information. The formatting could have been better. I would suggest the team to use a standard dimension for the screenshots they have added.
problem I think work is still needed on this project. All test cases are not able to pass so.
problem I did not understand why is it necessary to prohibit spaces in usernames. I believe the code could have been modified to work with spaces as well
problem The code looks good and it could be deployed onto the production server. However,Â there could be a situation where even though a random num(0-1000) is assigned to each team there might be a chance that two teams get the same name.
problem Build pass was failed in Travis CI.
problem No the code did not pass Travis CI tests. there was an issue with generate_team_name which could be fixed.
problem No updates after first review.
problem Looks good. Function nameÂ componentDidMount is a bit confusing.
problem Code is written well without dead or complicated code. DRY principle is followed. I can not see any changes or commits in code after last submission.
problem Comments in the code would have been helpful to understand the flow.
problem I can't examine the code because a link to the repository is not actually given in the project, and when I navigate to their repository, I can't figure out which branch is the correct one; however, from the details of the writeup, it seems as though the code is well written.
problem The code was already well-written . The team did a great work in following coding best practices. The team should have include code comments to make the code easier to understand.
problem The code is well-written and there are no bad names or long functions. The coding style is also pertaining to the Ruby standards. Although it would be good if they could work in making the code more 'DRY' by making suggested changes to the code.
problem One new commit after first review.
problem Can not see new commits after last submission. 2 Issues are resolved out of 3 issues given in problem statement.
problem No new commits were made during the 2nd round.
problem I can't actually see this team's repository because they linked the expertiza/expertiza pull request, but it doesn't look like new code was committed in the second round.
problem There was one new commit during the second round.
problem Yes, there is one commit during round 2, and it fixed trivial rubcop issues related to indentation.Â Two suggestions of adding meaningful comments for tree_display function in tree_display.jsx and second on having a single copy of RubricArray for two functions were not implemented.
problem No additional commits were found considering one issue was still left to be implemented. Suggestion: There should have beenÂ someÂ commits present pertaining to test cases or at least the 3rd issue that was not implemented.
problem No new test were added and existing test are failing. AssignmentsController#update when params has key :assignment_form when the timezone preference of current user is not nil and assignment form updates attributes successfully shows an error message and redirects to assignments#edit page Failure/Error: if current_round !=
problem I don't see any test cases added. The overall coverage has decreased by 2.99% to 33.88%.
problem No test plans added and the coverage decreased in the pull request. Test plans are not needed for the project
problem No test plan added and no test cases written in code as well as in wiki.
problem The test coverage has decreased by 2%.
problem No test cases were added and the coverage decreased.Â The overall coverage decreased (-2.9%) to 33.88%.
problem The test coverage decreased, but I'm not really worried about that because that seems to be a common theme with many of the refactoring projects.
problem The team has not added any test case for the implementation. The overall test coverage has decreased.
problem No new tests have been added to the project. Commits for the first round had increased the code coverage by .0004 which was good, but the code coverage has decreased by 2.9% as per the latest build report.
problem The team did not add any test cases.Â The coverage did not increase as a result of that.Â Suggestion: Unit test cases should have been written as a part of the final deliverable.
problem The team might has out 2 issues to be resolved.
problem On checking the videos, the functionality seems to be working fine. I haven't been able to manually test it.
problem No UI provided but videos are uploaded to demonstrate the functionality
problem The team only implemented 2/3 parts of the project and has not created the tests for the same. The CI build is also failing for the pull request. The functionalities implemented are working as expected.
problem The team has uploaded manual testing screencast to show fixes for 2 out of 3 issues to be fixed, and everything works as expected. The audio in the screencast helps clearly understand the before and after scenarios. However, there are no corresponding test cases to test the fixes. No changes have been done to the spec file.
problem The project was not deployed. The project should have been deployed. However, the video that the team uploaded shows the 2 functionalities that they have implemented. And they work as intended. Suggestion: One feature was not implemented (3rd issue) and should have been done as a part of the deliverable. And the project should have been deployed.
problem Unable to find any difference after the first review although the team had to explain about some issues.
problem It looks decent. The screenshots should be with the issue write up and not at the end
problem Write up is written well and it is understandable. Images are not in proportion and not of same size and hence wiki page does not look steady. Team can work on image size and image description and manual test plan in more detail.
problem The content is good and explanatory but the writing styles needs to be improved as there is inconsistency in the font size and font type.
problem The writeup was well written and easy to understand. However, it would have been better if some steps accompanied the screenshots as to what was happening in each screenshot. That would have made the writeup even easier to understand.
problem The writeup thoroughly details the changes written in this project, but the first section seems like informally written reminders for the development team.
problem The write-up is well written and organised. Everything looks fine. The team should have mentioned about the approach taken to solve the mentioned problem statement which will make the implementation easier to understand.
problem The write is well-organized and clear in its material. The authors have improved the write-up by explaining what each newly defined functions work. and added code snippets wherever necessary.Â However, the test plan is still missing from the write-up.
problem No,it should not deployed till the build is fixed. It is aÂ good starting place for a future team to pick up
problem Two issues resolved seem like working pretty well and can be deployed in production. Third unresolved issue is a good start for future team to pick up.
problem I don't think this code is ready to be deployed due to the fact that I can't actually examine the functionality, nor can I see the actual repository this project was written in.
problem I think that the team has done a great work for the future team to pick up. They can improve it by adding comments for newly defined functions. Although, the pull request build has not passed, after fixing the conflicts, the new team can readily work ahead on the remaining issues.
problem I do not think the code should be deployed. The test cases are not yet written and there are a few code climate issues. Due to the lack of test cases, the Travis CI build has also failed.Â Suggestion: Once they are resolved the code can be deployed. There is one remaining issue, but that could be done in the next iteration.
problem Not able to merge. Issues regarding Travis tests etc need to be resolved.
problem feature and controller test failing. Mentioned in the previous review as well. Travis Failing and issues with code climate as well
problem Travis test build have failed. Can write version compatible code
problem Pull request is not accepted, also build did not pass Travis CI. But the functionalities improved and accepted and working fine.
problem The Travis CI test has been failed.
problem No, the build did not pass in Travis CI. several checks were failed but there was no conflict with the base branch.
problem The pull request did not pass Travis CI, but there were no conflicts.
problem No, the build for the pull request does not pass. The build had 4 jobs, out of which 2 jobs passed successfully. However, 2 build jobs have errors. FirstÂ job failure is related to webdriver error for chrome where test fails. Second job failure is related to NoMethodError for method []
problem The Travis CI test did not past.Â I did not find any test cases written. Suggestion: Test cases should have been written as a part of the final deliverable.
problem Not very good, some problems existing during the first round are still here.
problem Most of the updated code is well written. Some functions could have been shortened. For example, in the set_display_type function, instead of writing a 'when' statement for each of the options, you could have stored them in a hashmap and set display type to that value if it exists in the hashmap.
problem The code is well written. It follows DRY principle. It would have been better if more comments were added.
problem The code follows good coding style, adheres to naming standards and is DRY. However, the suggested changes since last round have not been implemented which emphasized on shortening the length of long functions create and view.
problem No, they seems did not commit again
problem No, the strange part is the code hasn't been committed during the second round. It is strange because they have surely seem to have achieved all their requirements to problems going by the wiki page so, why haven't they committed the new changes is the question.
problem No new commits were made during 2nd round.
problem There have been no new commits since the last round of submission. There seems to be some work pending since the last round for integrating the branch.
problem There have been no additions to test cases, although they have added a test case in last round.Â The test coverage has significantly gone down by 39.4% after their code changes.
problem No, they did not commit any new code, so no coverage increased.
problem The team has made sure to write the relevant test cases wherever possible. But the overall coverage has decreased. In my opinion the newly added test cases coverÂ more or less the entire range of this project. But I think that they need to focus a bit more on the test casses.
problem Yes, the team did add test cases to test their changes, but the overall test coverage has decreased
problem The team did not perform any changes from the first round. No test cases were added and the coverage remained the same. The test cases from the previous round considerably fulfill the range of the project.
problem No, it did not work intended.
problem There wasn't any link provided to check if the UI was working fine. This project was majorly focussed on refactor and looking at the code changes in the PR I can guess that the features might be working as they were supposed to.
problem N link to the deployed version is provided hence cannot comment on this question
problem The team has added screenshots on the submission page, which show that the UI is working as intended.Â However, it had been more clear had they made a screencast of the same.
problem I don not think it's good, because they just paste most of their code on the writeup.
problem Overall, the writeup was pretty good. Everything is explained in a good way with the help of code snippets and screenshots. There is definitely lack of explanation on how to check the work. THis is the only thing that I found where the writeup could've focussed more. Other than that it looks good.
problem Alignment issues for the content
problem The authors have portrayed their work by adding many code snippets. It is cumbersome to go through the entire code in the write-up. A general approach towards refactoring principles used would have been impressive.
problem No, they didn't pass Travis CI.
problem No, according to Travis CI the build doesn't seem to have passed due to some bundle install errors. Although they surely should have resolved it because the code wouldn't be able to achieve the above results as stated by their photos and wikipedia page.
problem The code has been merged in a good way and there have been no merge conflicts so far which is commendable. However, the Travis CI was failing and the code climate check was failing too. This is something that the team must look into and make sure that the changes that they have made are consistent with the existing expertizaÂ code.
problem The pull request did not pass the TravisÂ CI build. There are no conflicts with the base branch.
problem The pull request still shows that the build fails. On observing the logs, there is only one build job which fails due to a ActionNotFound error for view_action method. This needs to be looked at.
problem The build for the Travis CI fails and also the code climate shows 79 issues to be resolved. However, it does pass the Danger Bot with considerable warnings.
problem No, I think they code have some bugs in there.
problem Even though the code has been refactored keeping in mind the coding standards but I think that there is still room for improvement in writing the test cases and the PR checks should be checked as well since they are failing. This is something that the next team could pickup and then the code could be ready to be deployed on the production server.
problem Since the TravisÂ test has failed and the test coverage has also decreased, merging the code would not be a good idea. The project doesn't need to be redone from scratch, some modifications to the existing workÂ could make the project ready for deployment.
problem The code enables properly testing the various features and describes the system working as desired. However, since the Travis build did not pass, the code could be deployed but with careful intervention by the developer. It could be taken up from here and does not require to be redone from scratch.
problem The overall code quality is moderate. I would suggest the team to either use hexadecimal color codes or names, to ensure that the code remains consistent.
problem Code is written properly with no bad naming conventions. No major code change can be seen after first submission. Â Code is DRY. But I could not see color change specific comments in the code.
problem It was a simple UI color change, so not many categories are not applicable. the code can be DRY, by using the CSS file for styles. Also there is no need to add colors in bothand . would suffice
problem No commit has been added since round 1. They should have fixed the build failure which is probably happening because they have pushed changes few extra changes in schema.rb which I don't think is required for this project.
problem Unfortunately, no tests were added. It would have been good if the team added test cases to check their UI changes.
problem They have added test cases and the coverage did increase but only by a little amount. They should have considered adding more test cases since the task of changing the color of the links was such a minuscule one.
problem It says it failed, but I am not sure the most recent commit has been checked yet.
problem The coverage could be increased to %100, but this is a great start.
problem A huge improvement from Round 1. In round one not much code was submitted so this is a huge improvement. Keep it up. I have a Suggestion: It is very important to have comments in the code which will help other readers understand your code or in this case understand what you have tested without having to look for any other documentation which explains it. (Code file should be self sufficient)
problem Lack of Comments
problem Your team have put all "let" behind the code. However, there are, still, a lot of 'let(:response) { VmQuestionResponse.new(review_questionnaire, assignment, 1) }'. It is repetitive and unnecessary.
problem The structure of codes is not very good, that is, for a "it" statement, there are two many things include in it to be tested. It is better to separate Â the test cases clearly. Besides, the objects seem not store in factories properly.
problem No code was committed during round 1. MostÂ of the code was committed during second round based on reviews of Round 1.
problem The test cover most cases, but some scenarios like different cases for the if statement for add/team method is not sufficient.
problem The team has heeded to the advice given in the last round and explained their tests in a more detailed manner. I do feel that the write up is well written and covers almost all the important points of the project. But I do feel images showing their tests running successfully could be added to the results part of the writeup.
problem The description for the background, motivation and the deign is not very clear. The team can give more detailed introduction specific to this project.
problem I do believe the code could be deployed after a bit of refactoring is done as suggested by the code climate tests. But overall looking at only the functionality of the code, it is ready to be deployed
problem It is a testing project which aims at improving test coverage. So production deployment is not in question. However before merging the code to Master branch here are a few recommended changes. 1) Adding comments to improve readability and understanding for future use. 2) Avoid using comments like "I swear this is the last one". They do not explain anything about what you changed from your last commit and why. Proper professional comments are expected. All these comments should be refactored.
problem Ready to be deploy but must resolve the build issues.
problem I am not sure since these are Unit tests and there are Travis tests failures too. Need to check with the team and mentors.
problem The test made the coverage increase, but it still have room to improve its structure to make it more clear and useful.
problem The code has been merged in a good way and there have been no merge conflicts. The build did pass the Travis CI. The code climate test failed but those were small issues which can easily fixed by just revisiting the code.
problem Travis CI has error ed. The tests fail.However there are no conflicts with the base branch or master branch.
problem The build has failed in Travis CI.
problem Travis Passed. Code Climate has 82 issues
problem Build does not pass. Also, code climate issues are observed.
problem Travis test did not pass. Errors were not fixed. Continuous Integration failure.
problem Detailed. But the screenshots of the manual testing are missing in the test plan.
problem Except one method, all the other methods have been covered. This is similar to round 1 review given by me.
problem The coverage has increased by 6.3%. The team has added new tests that check whether Assignments is absent in the menu in default view and there is an option to Open Student View. The tests also check whether there is a close button present when the instructor is in the students view, also it checks whether the Assignment is present by default in the student view or not.
problem The write-up was nicely written in the first round itself. It gives a clear idea of the project.
problem Yes, the changes work as expected in the UI. The test cases cover most of the scenarios. Would have been good if there was some scope for negative test cases that could be explained.
problem The added features work as expected, though the login info on the write-up didn't work for me.
problem I can't say about this since I tried to login with the credentials mentioned in their wiki(student5408/password) and I couldn't. However looking at their screenshots it seems that the UI looks good to go.
problem The write up is short and to the point, it could have been formatted and arranged in a better way.
problem The write up was well explained. Test cases were with images of test cases in the UI. The code could have a github screenshot or the link to the changed file for more clarity.
problem These are my views on their writeup: 1.Â Certain sections are too bold. I find that to be distracting. 2.Â I like the way that they highlighted the lines of code that they have edited/modified. It made it easier to understand their work. 3. It was also good that they included references section at the end. It was something that I haven't seen in the other projects I have reviewed so far.
problem Again, the problem persists of containment of sentence.
problem The code looks to be ready to be deployed on production, but would appreciate to have a few more tests run prior to it.
problem Although as per the scope of the project, the team did extremely well. All implementations as written in the project description were completed. However I feel that this project in general has more scope. Say introducing email notifications to the students when a review is due. As far as the work of the team is concerned, they completed everything that was asked of them.
problem Build needs to be fixed. Then its ready for production.
problem No. This is not standards to add colors in the respective element. It becomes very hard to maintain or modify such changes in future. It would be better to move the style to a scss file and use a class-UI to make this change, which is clean and DRY
problem There has been test failures, but not related to the project
problem Build is failing probably because they have pushed changes few extra changes in schema.rb which I don't think is required for this project.
problem I am honestly unsure how to rate this. Earlier the build was passing. Now Travis CI cumulatively says the build failed, but when you look at the build history, Job#6150.3 failed, but Job#6150.4 passed.
problem Within the travis builds, the test folders of helpers, models and features are passing. The test folder for the controller seems to be failing for some reason.
problem The code changes are accepted but build does not pass travis CI. The problem statement is simple and team has implemented a clean solution for the same.
problem No. I see there are some code was commented, which seems unnecessary, so just delete it.
problem In the wiki, I really appreciated seeing the appropriate build statements next to the unit tests. It helped connect what each test was testing in my mind.
problem Yes good write up but would have like to see details on model.Â In test plan lines like "Â two test cases for method " are redundant. Can / should remove them
problem Most are good, but the Test cases part just a combine of "describe" and "it" part of spec code. Could be replaced by a link of git.
problem the team has made great improvement as compared to the last submission. The new code added has no bad names, long or complicated functions but there is lack of comments. the heading of the write-up pages explains what the test case is doing but there should be proper commenting done in the code too.
problem Write-up includes everything the team has implemented. It clearly show the files which were involved to complete the project, background of the project and evrything. overall work done by the team is good but I feel that the test plan on the write-up page should be edited. The team should work on presenting their work to everyone in a good way.
problem The code has been very well written and it follows all the coding practices. There could have been few more comments but other than that I don't see any other problem.
