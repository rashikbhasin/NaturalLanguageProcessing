noProblem Couldn't find the wiki page
noProblem Code written following the coding standards
noProblem Code is written excellently, provided with DRY implementation
noProblem Couldn't find test cases
noProblem Works well when tested
noProblem Though the write up explains the functionality that is added, it does not include any specific patterns that is used for the development.
noProblem No pull request related to the github repo owner name was find. The test coverage is unvisible as well due to no pull request.
noProblem They list a part of RSpec in the bottom part the wiki page, they explain what should be tested and provide their code as well. However, they also mentioned that they can't solve the json_generate problem which make their test failed.
noProblem Code review not possible since the pul l request link is missing.
noProblem They have added few test cases. Explained why a lot of them were not necessary.
noProblem Yes, the authors have created all the required test cases as discussed in the Test Plan.
noProblem No new test cases were added, newly created functions could have included corresponding unit tests to verify functionality however trivial it may be.
noProblem Yes, in the write-up part, the author discussed the test plan, and in the code part, the author complete the pending test in response_spec.rb, in the test plan, the author describe the methods need to test, and give some contexts, and in the code part, the author implement all test of methods, including unit test and integration test.
noProblem Yes. The team contribute a lot of test code and no obvious missing.
noProblem Since their primary task was refactoring which included changing variable/method names, this is taken care of.
noProblem The names a bit suggested and the naming has been done as suggested in the design requirements too. Also I can not find any unreasonable names provided in the refactored code.
noProblem Good choice for variable, method and class names. The selected names follow good Ruby conventions. They are reasonable and easy to understand.
noProblem The team has implemented good ROR guidelines. They have implemented changes from the last review suggestions. The names used are reasonable and do suggest the functionality.
noProblem Code changes include minimal refactoring to accomodate the requirements of the project. As the changes were mainly single line or even single word in the code, it seems reasonablly suggestive of the functionality.
noProblem The write up has a section called - "Refactoring Decision" which explains what decisions were taken to perform the refactoring to be done in this project.
noProblem The write-up is done very well. The writing style is smooth and flowing and shows that the team went to a great deal of effort to implement and explain different design strategies and patterns.
noProblem Yes, it clearly explains why the authors worked the way they did. The team tried to refactor as much as they could in the requirements. Team has also implemented many changes since the last review in code base as well as wiki.
noProblem The author actually did the explanation part of how and why the authors did the work the way they did, the author give some introduction of this problem and explanation of how to fix or refactor it.
noProblem They have explained why this is not relevant.
noProblem The test plan has been provided in the wiki and tests have been shown in the screencast. Several cases have been considered tests have been made accordingly.
noProblem The test plan looks complete for the given scenario of changes. There are some changes such as in response_spec.rb many factory objects are created where only one could have been used.
noProblem Since it basically is refactoring, this is not extremely relevant.
noProblem The new-added test plan part is good, in this part, the author describe the different method which need test, and give the contexts, it's very clearly. And in the code part, the author complete the pending test, pass all the test.
noProblem There is no link provided where the project is deployed so that I can manually test the test cases. But the screencast consist of a run of the tests which execute successfully thus it seems like everything works.
noProblem The team's final submission passes the test. They have also done a great video explaining the changes they have implemented and this is commendable.
noProblem I could not find the edge cases where the code didn't work. Also the team is integrating changes so hopefully they will pass the pending scenarios.
noProblem Nothing specific to add here as pre-existing test cases pass with the given changes.
noProblem Yes, I download the files the author changed and run the whole project in my own work space, following the Manual testing steps stated in wiki, I do the manually test of author's work. And the expertiza runs correctly and all the test passed.
noProblem yes they work very well. all the tests are effective
noProblem No obvious error occurs.
noProblem The explains all the aspects of the project really well. Screenshots of code depict the changes that have been made and also help in explaining the approach these guys have taken to solve the problems assigned to them.
noProblem I have seen a great improvement in the documentation of the functionalities. It explains the goal of the project and how the changes have been implemented.
noProblem I can understand what the project is about and what the team refactored fairly easily. The team has explained their work in a simple way by describing it effectively in the wiki as well as in the screen-cast video. Team has also implemented many changes since the last review in code base as well as wiki.
noProblem In this wrteup, I think it very clearly, there are background introductions, problems need to be done, and the statement of the wrong of original version. After reading the first part of this writeup, I have a basic understanding of this project's objective is to refactor the original version. Compared with the original version, this latest version added more specific description and more screenshot, these new-added part help reader understanding this project and I think the author did a good job.
noProblem As per the video, it works fine.
noProblem The code (functional tests) are well written. They are intuitive and easy to go through. The test coverage has also increased 0.3%.
noProblem The code adheres by the ruby guidelines, is DRY and tests have been written properly and to the point.
noProblem The variables, methods, and class names look good.
noProblem They converted all the cases discussed in Test Plan into automated tests.
noProblem The writeup is clear about the functionality changes. It is clear from the requirement that this project was to create functional test cases and how it was implemented.
noProblem The authors clearly mentions what the topic was and what is the solution they have provided. From the write up it is clear that this was a project to create Test functionality for Test assignment selection. And they have mentioned the tests they have created to check those.
noProblem The variable, and method names are intuitive enough to understand that what it does.
noProblem The author has converted all the cases mentioned in the test plan into automation cases.
noProblem Test plan is the major part of this project and it is comprehensive. Good include console log screenshot into the wiki
noProblem That's the whole project essentially.
noProblem All the possibilities are covered in the test cases.
noProblem Mostly methods are taken from the previous code.
noProblem The author has converted most of the tests mentioned in implementation.
noProblem Works well for most cases.
noProblem The methods and variables are named well and are intuitive to their functionality.
noProblem The code is dry and does not smell. The travis bbuild for the code has passed.
noProblem All the test cases that the author dicussed are automated and work correctly.
noProblem The test cases written work correctly as discussed.
noProblem The write up is pretty clear.
noProblem Methods are understandable like last time.
noProblem tests are covered and passing.
noProblem The writeup explains in detail about the project and what type of test cases the team has built for it.
noProblem Names are intuitive and suggestive of the functionality they do.
noProblem The code follows good Ruby practices and DRY principle. Functionalities divided into components.
noProblem Could see from the demo video that the test cases have passed and are automated.
noProblem The functionalities work properly for the test cases that the team has designed and as intended.
noProblem yes, write up explains the work to be done. Video explains the work properly.
noProblem yes names are intuitive.
noProblem test cases mention in the write up are converted to automated test cases. But the test plan does not satisfies the requirement.
noProblem The writeup has a good design and roughly indicate their work
noProblem Test plan is completed enough
noProblem Reasonable and easy to understand
noProblem All tests passed
noProblem I did not find edge cases not working
noProblem The authors have explained the gist under "Changes to be implemented" and their approach.
noProblem The writeup contains all the code, but the code is too much for a reader to read, and it contains all the functionality the work is related to.
noProblem There are so much code but not enough explanation. They did not use design principles or patterns.
noProblem Names are intuitive and reasonable for the functionality.
noProblem The document is very well structured and has enough information about the project and the intended change
noProblem Difficult to identify design pattern, however, the writeup explains the approach very well.
noProblem Update: Initial feedback not considered, hence response is the same @inv.reply_status = 'D' in app/controllers/invitations_controller.rb , here 'D' is not clear. Not sure if this trace is necessary in code.
noProblem Update: Initial feedback not considered, hence response is the same No Test Plan
noProblem Update: Initial feedback not considered, hence response is the same The code is not merged with master. also the code did not pass the integration check and also reduced the test coverage. Assuming the video is a valid one I can ascertain that the code works locally.
noProblem Yes, they have mentioned the approaches that they have taken and also they have mentioned what exactly are the changes to be implemented to improve the notification system. Code snippets are perfectly handled and written well.
noProblem They haven't tampered with any of the variables or method names and hence they have followed the original convention.
noProblem Yes, I did test the author's code. It did work accurately I didn't understand some parts of the code but their other functions are working properly. Didn't have much difficulty implementing the code.
noProblem The wiki page is well written and explains all the changes the team has made to overcome the problems.
noProblem The team has explained in the write-up the approach taken to solve each of the problem.
noProblem The team has followed proper coding conventions.
noProblem The code is well written and made into reusable functions. DRY principle is followed by the team.
noProblem I have tested the code as shown in the video and works as demonstrated. But could not think of new edge cases.
noProblem No use of any design patterns or principles was explicitly stated in the wiki/video. The video was well made and easy to follow. However, if a voice over was added to the video it would have been easier to understand and follow the author's action.
noProblem Names are intuitive like they used the variable inv for an invitation, etc.
noProblem It is clearly mentioned in the writeup what the issue was and how it has been fixed. The write up also clear about the functionality implemented.
noProblem The write up is pretty clear about the work done. Though there is a very little change in the code the functionality is achieved. Test Plan (Other than UI)section could have been included in the write up.
noProblem I think the tests have been done perfectly. They have covered all the cases and all the tests passed.
noProblem The test plan does look complete enough. I would like to comment here that not only should they specify the test code snippets but preferably also specify what the code does and what all test cases are they performing. This would help a novice user to understand better.
noProblem In the video, they pass their test and all the test cases pass the automatic test tool in git. But some tests about your new method extracted from original method is wanted. What's more, a GUI test or an online test is wanted in your video or writeup.
noProblem There are 55 test cases written and they all pass. New tests have been written for the code that has been added.
noProblem Clear names and code follows DRY Rule
noProblem In the first peer review, I said they should add some explanation about their code, and at this time, they modify their writeup, and added a thorough section to explain why they did that. It is very useful to help me to understand their code.
noProblem As the result pasted on the writeup, every test case passed. All the features work as intended.
noProblem They refactored the long methods before. No functions too long now.
noProblem The wiki consists of a section where all the tests are explained. These consist of several conditions and possibilities that have been considered while creating the tests.
noProblem Tests are added as per problem statement and test plan.
noProblem The team has updated the written tests as recommended in the previous review.
noProblem They have considered my previous review comments and have added tests to their code.
noProblem 3 tests were added and 1 test was commented out.
noProblem code is not commented.
noProblem All tests are automated.
noProblem Pull request link is not provided. Had to check main expertiza for the pull request. Appropriate names are used and they go with the functionality
noProblem I think the variables, methods, and class names are well defined. it's clear to understand.
noProblem They have used very reasonable names for methods and variables as far as possible
noProblem They've used proper variables, methods that make it better to understand the code they've written.
noProblem 1. The implementation is simple and understandable. 2. The variables, methods and class names have the reasonable names and there is no ambiguity.
noProblem All changes seem to work. The issues that were listed seem fixed. Good work.
noProblem The features work properly according to what they have shown in the video.
noProblem The features work properly according to what they have shown in the video and what is described in the wiki page.
noProblem Works well as per video shared.
noProblem Edge conditions have been tested
noProblem There was no video or heroku app. Could not test.
noProblem The write-up is very detailed about the two issues and explains what they intended to do clearly. The screen-casts are also informative and well structured and they provide a good overview to their problem statement. Added automated test sections in the wiki which explain the testing they have done.
noProblem They have written clearly their requirements and the work that they have done.
noProblem The wiki explains clearly about the task to be done.
noProblem They have mentioned their requirements clearly and the work that they have done.
noProblem Writeup explains the problem clearly with what was expected as the cause of the problem.
noProblem Problem is properly explained!
noProblem 1. The problem statement is clearly written. And it indicates what functionality the work is related to 2. The issues are divided and written precisely. 3.The steps to test the application has been described
noProblem Both how to test and automated test cases have been mentioned in the wiki. Detailed information.
noProblem The test plan is explained in detail but concise which is good.
noProblem Yes, they have mentioned the test cases and how to run them. It also covers edge cases. Its pretty extensive. Good job!
noProblem Test plan looks complete enough now that they've added explanation to their tests and how to test it.
noProblem All the cases are covered, with specific tests written for specific issues separately.
noProblem 1. The test steps have been given in the wiki page. Step by step description helps in testing the implementation. 2. Great job team for including the issues separately and explaining them clearly in your wiki page as well as in your videos
noProblem The explanations were added in the wiki as expected. Correct use of design patterns was incorporated. Good work.
noProblem They have explained clearly the steps taken by them to approach the problem.
noProblem Wiki explains what changes they have done.
noProblem The approach was explained clearly in the wiki.
noProblem The algorithm is explained.
noProblem Clearly explained approach with proper sequence of steps.
noProblem team has converted all the testcases that are mentioned in the test plan. and all of them pass
noProblem Yes, RSpec tests were created for the test cases discussed in the Test Plan and the write-up
noProblem Perfectly written automated unit tests.
noProblem Yes, all the cases discussed in the Test Plan have been executed and completed. None of them fail and the thus the build passes successfully in the pull request.
noProblem There are no test case failures. All the cases are passing. The authors have even fixed all the issues which may arrive of merging. The test coverage has increased as well.
noProblem Test plan is generic and could have been specific. It seems that they have done all the test cases required to be done.
noProblem The author did not converted all cases discussed in the test plan. The code follow 3 characters: is DRY, following ruby style guide, is commented, does not contain long methods and variables and functions are property.
noProblem All the variable names and ITs written in the code have appropriate names and no changes are needed in them.
noProblem The names are inttuiteve and easy to understand the code is simple and direct
noProblem The newly added tests follow good ruby convention
noProblem The test cases are thorough. A lot of it has been added. Commendable in terms of the volume of work done.
noProblem Variable and function names are proper.
noProblem The code is written really well and all the names provided in the code seem reasonable to me.
noProblem Code is easy to understand.
noProblem Yes testing related name and variables and quite intuitive and understandable easily which variable relates to which particular thing
noProblem The names are intuitive. Good coding practice
noProblem 1. The newly added code is mainly in test files or spec files. 2. The code has relevant variable,methods and class names.
noProblem The names used are intuitive and easy to understand their usage.
noProblem None of the befores, IT are too long. code doesn't need to be extracted into different methods. Few more comments would have made the code better. COde is DRY and it follows Ruby Style of coding
noProblem None of the functions are too long
noProblem The code looks proper and the function size is proper.
noProblem The code nicely written. It is very systematic and easy to read. Ruby Style Guide is followed and overall the code seems DRY to me.
noProblem now the tests written which have been implemented, the factory creation and adding test cases for review_response_map.rb followed the ruby styles well by using the factories for creation of the testing scenario.
noProblem Long codes are usually of 100 lines, but all the changes the author have done are small. So the coding standards are maintained.
noProblem All the test cases are passed and they have covered edge cases as well
noProblem The functionality seems to work and the test cases added, have passed.
noProblem Since it is not a deployed version, I cannot test their working and rather since its a testing project the build is what we have to be concerned which is successful from their pull request.
noProblem Last time the authors didn't provide the pull request. This time it can be seen that the authors have contributed a lot and have been more careful. All the cases are working fine, I didn't find any edge cases failing.
noProblem Their task was to write test cases. I don't think manual test is required.
noProblem Write up is written excellently. It covers all the points and explains the project very well
noProblem The project explains in details what is they want to test in this case they want to response hierarchies
noProblem Yes, the write-up explains what the project is about and what work the team did as part of the project - Testing various response maps by writing factories.
noProblem The write up is well written, specially the sections have been divided such that the reading becomes easy.
noProblem Yes, the write up is updated and easy to understand.
noProblem The video gives a hands on easy understandability too which is good, They have explained quite clearly with also mentioning suggestion files to refer to understand their implementations, since it is related to testing implementation. More information regarding the functionalities of the response map in format of images will be easy to understand.
noProblem 1. The problem statement describe the problem clearly. 2. The work to be done section explains what is expected in the project. 3. the team has clearly written what files to be modified. 4. Overall the wiki page has proper flow of information.
noProblem Test plan is incomplete.
noProblem testplan looks complete because it covers all the cases which are mentioned in the requirement document and it covers all the edge cases as well.
noProblem The whole project is about testing only so they have done a good job of explaining the testcases
noProblem Test plan looks complete.
noProblem They have mentioned that they need various spec files under spec_models and they have their tests implemented too. As stated last time now they have added the unit tests too which satisfies their primary objective of the project which looks better now and the video also explains those tests with easier understandability.
noProblem 1. The test plan is complete. 2. The team has explained how the factories are created. 3. The team has included the explanation of a few unit tests for understanding.
noProblem Yes, writeup explains why team did the work in specific manner and how they have used Rspec to do the testing.
noProblem The text was easy to follow and they explained that they used factory design pattern for testing and also they created
noProblem 1. The page description explains how and why authors did the work the way they did. 2. The team has listed all the files which they have modified. 3. I could not see any explanation about design principles. I could understand that the project includes only testing. Hence, the design patterns are not required.
noProblem They have what was asked to them.
noProblem After browsing the new-added code in the pull request, I think the variables, methods, and class names are all reasonable and suggestive of the functionality, actually what the author did is to refactor variables and methods. So, I think in the new-added code, there is no variables, methods and class names not reasonable and suggestive of the functionality.
noProblem This wiki include introduction, problem statement, use case diagram and test plan. But the project purpose has not been clearly indicated. I suggest that you add "Project purpose" section in the "Introduction" chapter. The design of this assignment is not stated, the wiki only provides a use case diagram. I suggest that you should explain your design with some words.
noProblem This wiki used a use case diagram to illustrate its design. But since no words is provided it is not clear what the design is about. So I can't tell whether it covers all the functionalities required. I suggest that you should talk about what functionalities are included in your design.
noProblem The wiki doesn't provide a word about the changes. I suggest that you should talk about what you have changed in your design, and give corresponding explanations.
noProblem The design document explains in detail the intended purpose of the design document and provides enough details to make the reader understand the problem.
noProblem The team has incorporated all the required functionality as per the given documentation on mutation testing.
noProblem The team has been given clear instructions has to the placement of the test files and the design document reflects the same.
noProblem The design doc seems complete with proper flow charts and testing plan.
noProblem Looking at the requirements, it seems like design doc covers all the required functionality in the project.
noProblem Since the design is just doing Mutation changes, I don't think it may cause any additional 'smell' or existing code might get complicated
noProblem All UML diagrams follow proper conventions.
noProblem It seems that everything on the project write-up follows: the initial steps and the subsequent steps they are going to do, the mutation strategies they mentioned, the execution flow of the mutation testing, and the strategy design pattern they are going to use. I think the design does incorporate all of the functionalities completely.
noProblem They introduced the bug in the existing mutation strategy and proposed multiple mutation strategies for mutation testing. However, I can not really understand how these strategies will help to fix the bug in the existing mutation strategy.
noProblem They are going to use the strategy design pattern, which allows them to deal with different if-condition they will meet during the mutation testing, and the design sounds like a plan for me because it seems that they have considered all cases they might face during the mutation testing.
noProblem They offered the execution flow and the UML diagram for their strategy design pattern to illustrate their thoughts and design for the problems they want to fix, and these diagrams are clear for me to understand what they are planning to do for this project.
noProblem All relevant details are present on the wiki page. However, it can be structured better to improve the overall appeal of the page. Example: 'Testing' should not be a part of project description, but a separate section itself!
noProblem The design incorporates all the functionality required. The team can however think about some small additional extension features that they can implement, related to the scope of the project and add it to the list of functionalities.
noProblem The team seems to have a good understanding of changes required, however it is important for the team to write test cases to test their changes. I would recommend having a test first development approach.
noProblem The execution flow diagram can be improved by grouping logically similar components in one component.
noProblem Yes it incorporates all the functionality required
noProblem The diagrams provide a good insight to understand the project
noProblem Mutation testing is explained thoroughly in this project. What is the purpose of the project and the design about how they are going to achieve it is mentioned vividly.
noProblem Yes. The design doc mentions everything that the problem statement asks them to.
noProblem Explained clearly to be understood by any layman not aware of Servo and Mutation testing. Good work!
noProblem Design seems fine as the project requires only mutation testing, i.e., changing a part of code and checking whether the mutation tests fail. Code smells are not seen as per the design. Everything mentioned in this question seems fine.
noProblem Flowchart explains everything required. Diagrams are easy to understand.
noProblem I think this design doc is complete, because I didn't know the Mutation Testing before, and this is my first time knowing mutation testing, but following the author's description, I have a basic understanding if it, and the background information is specific, for me, it's easily to follow up.
noProblem In the final project doc provided in syllabus, I didn't find the topic "M1754", so I can't evaluate if the design doc incorporate all of the functionality required.
noProblem I checked changes proposed by the author, it's mostly the refactor changes, and I think the author explain it very clearly.
noProblem As I mentioned before, in this current version, the author proposed changes are mostly the refactor changes, for these changes, I didn't find problems.
noProblem In the design doc, the author draws the execution flow diagram, and I think it's very clearly and also helpful for reader's understanding.
noProblem The design doc is very effectively made which includes all the functionality required.
noProblem The author has briefly explained the changes needed by giving proper explanations for it. The presence of proper diagrams showing flow charts of the functionality along with written USE cases makes it much easy for a person to comprehend the author's idea. The author also mentions that they will try to make use of the code as much as possible and avoid redundancy which further strengthens the author's viewpoint.
noProblem The proposed changes by the author seem to be efficient, although the exact changes that will be made have not been showcased yet, but the way of achieving that has been properly given by stating the design principles that they will be using, test cases that they will be checking. The author also mentions that they will try to make use of the code as much as possible and avoid redundancy which further strengthens the author's viewpoint.
noProblem Visual aids have been thoroughly used along with there proper explanations which makes it very easy for the user to comprehend and understand the idea of the project.
noProblem project document looks complete .All necessary information is mentioned in design doc.
noProblem All requirements are included in changes to be implemented and also related required tests are also mentioned.
noProblem It seems they are using same logic all ready implemented and adding a partition so, i think the approach they have decided could work without making code smelly,surely it would not increase the response time.
noProblem Yes,visual aids are used appropriately.
noProblem Use case diagram depict the functionality of the design doc
noProblem Yes, the use case diagram has been explained well along with the given user interface screenshots. They are self explanatory. The UML diagrams do follow all conventions too.
noProblem The visual aids are really good the Use case diagram which has been shown here is very descriptive as well as the author has given a description regarding each step in the USE case which helps to understand the project in a much deeper way.
noProblem UML chart is very helpful, very good job team. Some screenshots also help me a lot to understand your project. But I recommend you guys add some mockup screens(screen after finished your project) to your doc.
noProblem Proper Visual aids are used to show the use case and work flow.
noProblem The visual aids provide enough details and give a clear insight of the project
noProblem The flow of the functionality is well explained wrt to the (High-level) components in the implementations. The authors have considered all the scenarios incorporating all the functionality.
noProblem It doesn't seem like the new design would make the code smelly. The team is going to implement changes in the existing classes and use "DRY" principle. It all boils down to implementation however at this point in time it looks good.
noProblem Yes they have used UML diagrams adequately in their design document. It becomes simpler for someone with less experience to follow through their project and understand exactly why and how they are going to implement the changes.
noProblem The problem and changes to be implemented are really complete. They also mention the design principles they will follow. In the last part, there are some test plans they will use to test their functionality.
noProblem As describe above, they list some design principles to follow and each function to be implemented later in detail. I think it is a thorough design.
noProblem I think from the problem description, this functionality did not be implemented from the previous quarter, so they just propose their thoughts in this part.
noProblem In this part, they give very detailed explanation by three use cases come with the work flow schema, I can clearly see their design diagram.
noProblem Their incorporate all of the functionality required and they analysis the problems in details, how to solve the problem, all situations might happen and how to deal with these situation.
noProblem It's very intuitive and easy to understand what they proposed to do as they provide a graph which is definitely helpful for other people to understand their job.
noProblem Their design is pretty clear and easy to understand, and they deal well with situations they might meet and logic there is quiet clear.
noProblem All the functionalities are described
noProblem it includes everything required
noProblem it incorporates all of the functionality required
noProblem No visual aid for understanding. No UML diagrams, structures of databases used.
noProblem No visual aids
noProblem The design doc is pretty clear and complete. The problem is that Servo uses the Web Platform Test (WPT) suite for testing, but does not perform an evaluation of the breadth of the tests. The goal of this project is to use techniques from mutation testing to evaluate the performance of the WPT suite when bugs are deliberately introduced into the code base. All the parts are covered in the document.
noProblem The aim of the project is not to create a full browser but is rather to create a highly parallel environment that allows for many components be handled by fine-grained, isolated tasks. All the functionality are incorporated in the doc with details.
noProblem The explanations given by the author is great. They provide the steps to build the changes and showing pictures to make it more easily for readers to understand.
noProblem The diagrams are really good, they give clear pictures to show their ideas. It helps a lot for me to understand the project.
noProblem It is a Mozilla servo project, Full of details, very informative, they must have put a lot of effort in the project. A diagram that explained in details.
noProblem Yes. Mutation Strategy Test.
noProblem The explanation is in details. And they explained why they don't need to include the test plan.
noProblem I have tried to understand the project, but I am not very familiar with servo project. I think they did a good job.
noProblem There are execution flow, and Strategy Design Pattern.
noProblem The design doc seems very much complete as they discusses in depth what they are doing and how do they want to do it
noProblem The doc seems to be complete as they have given ways to complete the functionality required in this project
noProblem The changes and additions given by the author are adequately explained.
noProblem The design proposed by author looks clean
noProblem They have provided 2 visual aids which adequately describes what they are doing and how will they do it
noProblem They details document is quite through
noProblem Is the project supposed to be done using Python. Shouldn't they be using RUST.
noProblem They have made good use of diagrams
noProblem Use cases provided by the authors help in understanding what the system comprises of. Although the explanation of these use cases do not seem relevant.
noProblem Visual aids like UML, UI have been given for easy understanding on the team's plan of approach
noProblem The visual aids are all helpful. They provide a more clear understanding of what the authors are trying to convey. The UML diagram is explained in great detail, along with the use cases.
noProblem Screenshots and UML diagrams explains the requirement and design changes. They provide a more clear understanding of what the authors are trying to convey.
noProblem Several good images have been provided and also a detailed UML diagram has also been given. this makes it very easy to understand the objective of the project.
noProblem The author's team has taken effort to provide a use case diagram and also explaining each case along with its pre and post condtions, making it easy to follow.
noProblem The design doc explains the complete requirement of the project.
noProblem It includes all of the functionality required.
noProblem as this a new feature addition there is no need to mention the changes required.
noProblem Right now design seems sound
noProblem Provided proper execution flow diagram and design pattern diagram as well.
noProblem The flow of control and the UML diagrams highly boost the overall understandability of the document.
noProblem Visual aids are used very nicely. Flow diagram, Use cases diagram used by the team make is very easy to understand this project and proposed design.
noProblem Except for the testing plan, this design doc is complete. It nicely explains the purpose of this project and How team is going to make those changes.
noProblem Detailed project description along with the design is present in the wiki.
noProblem Explained thoroughly with the use of visual aids. No UML diagrams, but the application flow and use case diagram explain what is to be done. All diagrams are easy to follow and provide enough details for basic understanding.
noProblem Visual aids like flow diagram have been appropriately inserted.
noProblem Very well written document with UML Diagrams and database design explained properly.
noProblem The team has made excellent use of use case diagrams and control flow diagrams.
noProblem Proper visual aid is included in the document such as the application flow, Use Case Diagram, Database design and table about the method to calculate the composite score. All these diagrams help in better understanding of the design and proposed implementation.
noProblem About the visual aids, I think the author did a good job of it, he add some very helpful tables and diagrams, for example, in the database design part and application design part, the author added some useful diagrams, even the working flow, I think it;s very useful for reader learning about what you need do and why you wanna do that.
noProblem use case and application flow diagrams helps to understand the flow the things they are going to proceed
noProblem The design doc looks complete with all the reasons, choices, diagrams and expectations.
noProblem Yes, the use case diagram is well explained and explains itself. Also the table showing the grades has been done well. I suggest they either have a flow chart of they have a class diagram along with the use case diagram.
noProblem The diagrams are clear and concise.They ate helpful for the reader to understand the approach of the author.
noProblem Project description and problem statement is clearly explained.
noProblem The authors design a complete design doc and It's easy to understand the task of this group.
noProblem The authors have been complete in incorporating all the necessary functionalities.
noProblem Design doc incorporates all the functionalities required.
noProblem The wiki mentions what functionality needs to be covered. No changes in design required as per my understanding.
noProblem The complete functionality has been covered and explained with the help of pictures.
noProblem the link in the question has projects from Spring 2017, and cant find this project
noProblem All the required functionality is present with proper explanation of everything. The Use Case diagram and application flow along with planned changes deal with all the required functionality.
noProblem Yes, I checked the final project document of this project, and there are two implementations job, and in the author's design doc, it incorporate all the functionality required.
noProblem Team is adding the changes to the correct class. New design wont be making this code smelly. They are trying to use the existing code, So code will be DRY. New design does not look complement. I guess design explained in this doc is enough to solve this problem.
noProblem All functionality is included in the document. everything is captured
noProblem Seems fine. Nothing to point out. Simple implementation of a formula to calculate the composite score is required. Good topic to work on! The team has put efforts into the design document.
noProblem the design doc shows the flow diagram of how the things would be approached.
noProblem Datadesign and user flow diagram shows that author has complete idea about what they are doing. Also they are following DRY principle to avoid code duplication.
noProblem Design doesn't seem to have any gaps.
noProblem The design talks in detail about the changes and database design. The design patterns being used are also mentioned. The required changes are also included in the design and the plan looks proper that would not cause issues as most changes are being done in already existing code.
noProblem At the current version, I didn't find problems.
noProblem neat table of calculation is present that is very helpful to understand the requirements
noProblem the design incorporates all of the functionality required.
noProblem The description covers the big picture and then moves on to explain the smaller details which makes the description easy to follow.
noProblem The classes chosen seem apt for the placement of methods.The designs are simple and easy to understand.
noProblem Team has explained this project nicely. They have mentioned all the files that need to be changed and in what way those changes they are planning to do.
noProblem There is no problem in the design proposed, which is detailed and everything looks good.
noProblem 1) the methods are well designed. 2) the design is simple and easy to understand.
noProblem Changes are very good, the author has proposed Design patterns they will be used in the implementation, along with that method to calculate score has been explained elaborately
noProblem This is perfectly explained. Each scenario and edge cases are written well.
noProblem The design doc provides a comprehensive explanation of the high level design and the requirements,
noProblem The explanation of planned changes looks proper. Database changes, file changes are properly explained which is very easy to follow as the description is in detail. The use of diagrams makes it even easier to follow the explanations.
noProblem explained in detail. therefore easy to the document.
noProblem Author has shown a valid approach .It seems a good way to start the project.
noProblem The explanation and description are fully implemented
noProblem the quality is very high. they have a detailed explanation of the changes.
noProblem they do have a visual aid. it can help the reader understand this project.
noProblem The authors explain well what Mutation Testing is, it would be better if they give more description about their project scope.
noProblem The Initial steps and Subsequent steps mentions all the project functionality requirements.
noProblem Two UML diagram helps viewer to digest the processing model.
noProblem The author just added some sentences from google doc. I am giving some suggestions: 1. brief discussion of 2 lines what is the functionality, why the previous project was rejected, what changes you are needed to be done. ( project purpose) 2. your project can be divided into 5 issues. showing due dates, showing submission links, file uploads. each of these issues can be divided into problem, solution and design sections.(project design) . 3. As explained in the doc I think you people need to implement test-driven development. Try to add some more matter to it.
noProblem Following things are missing- 1)UML Diagrams 2)Database structures for tables that are going to be used. 3)Way of problem approach
noProblem The author has explained each of project purpose, design and test plan in detail and therefore the document is complete.
noProblem The team has provided enough details about their project in the design document including Problem statement, the work to be done and test plan.
noProblem All design doc gives a sense of completeness as they have exhaustively covered everything ranging from installation to the test plan.
noProblem Their design document is very complete. They have a detailed instruction, what and why they proposed such way to solve the problem, and they have a very detailed diagram to show the control flow.
noProblem The design document is very comprehensive and well organized. It includes everything from the problem statement, the design to the test plan and visual diagrams.
noProblem The page is complete and has a good flow. All sections include adequate details.
noProblem yes most of the sections are available
noProblem All parts are completed.
noProblem Yes, all the functionality are covered in the design document.
noProblem All the functionalities are stated but not clearly explained
noProblem All the functionality required are covered.
noProblem Yes, the design doc explain the functionality required well, especially for the time line designed. In this project a time line in the student task list page would be added to navigate student to the due dates and the necessary links easily and keep a track of them. After the addition of the functionality, the student task list page would have the timeline as shown below.(Actual visualization of the page might differ from the static page displayed). We will be using HighGraphs to generate the timeline.
noProblem Appears to be complete
noProblem The author didn't explain the functionality at all. Suggestion: explanation about the method that the team is planning to draw graph would have been helpful .Like using javascript or some gems.
noProblem they have involved most of the requirement of the functionality, especially for visualizing the timestamps of the items, they give a sketch graph of what it will be like on the page, however, for the hyperlink part i did not see their design of that, which should be added.
noProblem Which page shpould have the implemented code? Give us a clear idea.
noProblem The design document addresses the feature that they are asked based on the Final Project document.
noProblem All the functionalities are mentioned.
noProblem The functionalities have been covered up to a good extent, but just one one proposed diagram as timeline has been showed.
noProblem As mentioned earlier, the project design is not explained thoroughly, hence difficult to say if each functionality will work correctly.
noProblem Explanation about the approach to solve the problem is needed.
noProblem I think the explanations lack detailed information of how they achieve the changes step by step.
noProblem The author has stated only the objectives of the project. Though the screenshot shows the expectation, there is no use case diagram stating the actors involved
noProblem Simple and clear explanation along with the files names which need to be changed mentioned. Explanation was easy to understand.
noProblem I think some UML diagram, or database tables are needed. For a design doc, these elements will make the doc easier to read and understand.
noProblem No explanation provided.
noProblem No information added at all by the author. As suggested add problem, solution, and design for each issue. in the design section add UML diagrams, Images and tables used.
noProblem They have provide very good graph to show the UI design in the page, but the explanation is not enough, for the part they design the timestamp, which has a good appearance but lack of explanation of why they do the every step, should try to say more about the details.
noProblem just one diagram is shown
noProblem The authors have provided visual aids and a design analysis. They can add additional description to make their document even better for readers to follow.
noProblem Need more explanation what exactly they are going to do. Just file names are not enough.
noProblem The changes proposed by the team seem to be fine, the files which they have planned to work on upon with why those files is a good step but the writeup on the whole misses completeness, as the testing plan is not sufficient, although screenshots have been put up proper explanation is missing. Also giving the timeline option on task list is a good approach, but apart from it, the timeline associated with each deadlines or timestamps can be shown on that particular assignment page also. Proper explanation is missing on the whole.
noProblem Explanation is hard to follow. Wiki is filled with unnecessary log in page screenshot.
noProblem They didn't mention the code changes in the design doc, so I can not judge this. But i think the response time will not be influenced too much.
noProblem The system approach seems to be good.
noProblem No classes is introduced in the design doc.
noProblem Design sounds good with no smelly code, also doesn't look complicated.
noProblem Nothing about implementation is specified and hence cannot tell anything about design
noProblem suggestions: 1. mention the code snippet where the changes are made in each issue section so that it will be easy to follow for the reviewer. 2.As already said explain about the gem or javascript library you are planning to use for this project.
noProblem Design is proper and seems to be a good and simplified approach to solve the timestamps for student submissions.
noProblem More effort should be expended on the design.
noProblem The Design appears sound and I don't see any flaws with the plan.
noProblem looks good, but no implementation details.
noProblem The designs seems not so complicated and easy to understand, there is no code involved in the page so there is no methods in wrong class, all of their work is to show more information on the page, which will not influence the response time.
noProblem No new methods are mentioned. No class diagram given.
noProblem The time chart for submission timeline helped in understanding the flow of the project. Enough details to make the reader understand what the team is planning to accomplish.
noProblem 1. The description about the problem requirements is written. 2. The source called credly has been mentioned which they will be using for the most important part of the project. 3. All the functionalities are properly explained in the document.
noProblem 1. The images are included in the preliminary mocks section. 2. There are no diagrams at all to check for the helpfulness. 3. The diagrams are necessary to help understand the project. I strongly suggest you to include the diagrams. 4. No UML diagrams are present in the document.
noProblem Adequate explanation is given for program description, current work and the work that is needed to be done.
noProblem All the required functionalities are mentioned
noProblem The content is easy to follow
noProblem After checked the final project doc provided in syllabus, I think the author posted every requirements in their design doc, which is a very good job.
noProblem In the project requirement part, the author post idea of the design of database, including added the primary key and foreign key, I think these changes are no problem.
noProblem Yes, almost all functionality is covered.
noProblem Well explained.
noProblem The functionality is completely covered as mentioned in the requirements
noProblem All the feature requirements and approaches are explained adequately
noProblem yes it shows the description along with requirements of the project. they are stated clearly.
noProblem the explanation is very easy to understand. the preliminary mocks help.
noProblem the design is very good and hows whatever is required.
noProblem The functionality seems complete to cover the requirements for the project.
noProblem The changes seem fine in accordance with the requirements.
noProblem The team has listed all the scenarios that they are going to cover and the approaches that they are going to use in order to do the same. It looks like a good start in that perspective.
noProblem Design seems to be adequate.
noProblem Most of the details are explained well. Test plan was not included.
noProblem The visual aids are appropriately used.
noProblem Yes the design incorporates all the functionality which is basically identifying the pages decreasing the performance of Expertiza. The team seems to have followed it well.
noProblem The team has proposed a solution which they believe will reduce the cost overhead incurred due to many SQL query calls which results in delayed response of the controller. They have also explained using code snippets which further helps in understanding of the problem.
noProblem The code that the team plans on incorporating are profiler gems that will not affect the original code in a significant way. The team should try to successfully reduce the lag time with the proposed solution then they would get full points.
noProblem The graphs used certainly help in understanding the problem a lot better. The team should also try to add UML diagram and test plan in their design document.
noProblem Exceptional work. You guys seem to be 75% done with your project already! The majority of the project requirements are outlined in the design doc. There still needs to be work done on the actual refactoring of the code identified as the cause of lag, but I imagine this is still pending. Is a Test Plan section appropriate for this project? If so, consider speaking with your mentor about the best way to test, and include a section in your Wiki about it. Also, I am not sure how much you guys are planning on tackling in terms of refactoring, but it may be helpful to specify which of your fixes apply to which pages ï¿½ï¿½ï¿½ e.g., does you your proposed changes improve load times on expertiza.ncsu.edu/tree_display/list only? Does it affect the other three pages outlined in the project description? More info here would be helpful.
noProblem The design is only missing the actual details of the planned refactoring of the code that has been identified. Otherwise, all functionality outlined in the project description is included.
noProblem Please see the note above -- the only reason for the low score here is due to the in-progress status of the work.
noProblem Overall, the visual aids are very helpful. It would be helpful to edit the screenshot of the flame graph to make it more understandable (i.e., even with your descriptions I was not able to see how it showed that the controller was slow). I would also recommend cropping the screenshots that include the MiniProfile boxes and making them larger so it is easier to read. Again, marking up the screenshots with circles or text will be helpful in understanding what is being viewed.
noProblem The solution looks pretty straight forward. They just need to refactor few things in children_node_ng
noProblem The design doc has involved completely the requirement mentioned in the topic sheet, they also introduced their idea about how to improve the performance of the specific page as well as gives some basic code, which is quite wonderful.
noProblem The team gives adequate explanations about the way they did the work, full of details of every step with vivid picture of the performance.
noProblem They provide some of the basic codes of the way to improve the performance of the page response, i did not find any complicated codes needs to be modified, the basic code they give for the first step to give a change.
noProblem they give many screenshots for the appearance of the page, as well as some explanations about the graph, i did not find any unreadable diagrams in there wiki page, quite a good one!
noProblem All functionalities addressed.
noProblem Visual aids are descriptive.
noProblem yes all has been covered
noProblem Most of the work has been well explained, maybe which pages to be optimized could be done much better, as there's a lot of scope to do so.
noProblem Author did good job. They included proposed solution as well.
noProblem Yes, Design incorporate all the functionalities
noProblem Authors provided good explanation to the changes they have proposed.
noProblem Authors plan seems good. They used good approach.
noProblem Visual Aids are used properly . Authors provided enough details.
noProblem The details of project purpose, design, and testing plans are very clearly stated in the doc. It is easier to understand the purpose of the work, I like the Analysis section provided by the author to provide a visual representation of the problem.
noProblem Yes, the team has included all the functionalities required to be implemented as a part of the project. I like the project description provided in the document, it already has all the small changes required to be done as part of this project.
noProblem Author has provided enough visual aids in the section "Analysis of page" to understand the purpose of the work and the problems related to it.
noProblem It captures all the required functionality
noProblem changes are explained comprehensively
noProblem visual aids used help understand the design better
noProblem The solution for the problem is very easy.
noProblem The project purpose of improving page loading is clear, also design pattern and testing plan are included.
noProblem The project description follows the requirement about identifying the Expertiza pages needed to be improved and solutions.
noProblem The authors mention how identified component causing the delay.
noProblem The authors have mentioned what they'll be changing, but have provided few explanations. Detailed explanations will make the purpose and the approach clearer.
noProblem Limitations to the current system is missing. Project purpose was clearly mentioned in proposed plan. Description of Badges is very important section and it was written very clearly. System overview/ Project design section is not mentioned. But it's contents are partly covered in other areas.
noProblem There is a ambigous term Teammate. In one sence the document says that a best member of the team will be awarded a badge of "good teammate". In other sense, it says review other's work. Then the best reviews team will be awarded the badge. So it didn't sound clear who will receive the badge.
noProblem The proposed changes are very clear. Only a diagram representing flow of the proposed plan will make the design document more clear and comprehensive. A system over view section can be added briefing about the project overall.
noProblem The design looks proper and it's not going to be smelly according to the description in design document. The proposed design looks good enough. Need not spend more time in designing.
noProblem Write up is with little to no explanation regarding how their implementation design would look like or is their implementation really is lightweight(Some comments on this)? Overall inadequate writeup.
noProblem The project purpose, design and testing plan is provided by the authors. However, they have not introduced other important aspects like introduction about Expertiza
noProblem I think that the team needs to expend more time on the design and write to-do steps after discussing with mentor so that their work is elaborated.
noProblem The idea of assigning badges is pretty straightforward. So I do not think they have missed anything noticeable but again the connection between various changes they propose to make is not obvious. So I cannot comment on how far they have thought about the design.
noProblem I believe that this part can be better graded as we move ahead and start working on our implementation. Still, if possible now, I will suggest if an author can provide some structure of the classes, which an author is planning to implement.
noProblem The authors just gave us an overview about how they will make the changes and they look reasonable. More details would be helpful.
noProblem There are two pictures of badges which look good. More visual aids like UML diagrams would be helpful.
noProblem Yes. They have covered all cases mentioned in the Documentation. In fact, except for the Test Plan, they have written exactly what is there in the Requirement document
noProblem They have not mentioned about the methods.
noProblem All changes written on the wiki is given the requirement doc.
noProblem As I said in the first review comment, I could not actually find the design proposed by the team in the design doc. They have mentioned that in which files they will be doing changes but, they have not actually mentioned they what changes they will be doing.
noProblem The proposed implementation mentions the files that will be changed. I think description about how the particular use case will be implemented can be included along with the screens that will change for both the instructor and the student.
noProblem No diagrams.
noProblem Use cases are clearly mentioned
noProblem As it is, the design document incorporates all the functionality proposed. It is aimed and extending the scope of assignments from just regular class assignments to other types of submission and I think the team has implemented that well.
noProblem Yes the authors have provided all the functionalities required in the design document.
noProblem All stated in "Requirements"
noProblem All aspects covered
noProblem All of the requirements are listed.
noProblem The team has fully incorporated functionality.
noProblem The changes are adequate and the explanations are clear and concise. The explanations are easy to understand. Too much use of etc. Try to limit that especially in a design document that is meant to be complete. If you have to list fields, list all of them.
noProblem It's all stated in "Database Design" and "Class Diagram"
noProblem Very well covered changes
noProblem They drew the use cases, database designs and the class diagram for us to understand their thoughts and the solutions easily. From the use cases, we can easily to understand what actions might occur between the presenter and reviewer, such as signing up, adding contributors, creating a submission, uploading paper, reviewing submission. For the database design, we can see how they designed the table for Paper class and the table for handling with many to many relationship between contributors and paper presenter. For the class diagram, we can see the relationship between User, Presenter and Paper class. As a result, the visual aids they offered are useful for me to understand the ideas.
noProblem I think for the use of visual aids, the author did a good job, for database design, they draw the different table to explain their plan and give the class diagram for explaining the relationship between 3 class: user, writer and paper. As a reader, I can easily understand the objective of author's job.
noProblem The best thing about this project document are visual aids provided by the authors. They have provided UML diagrams to demonstrate the working of the application.
noProblem Yes, there's a class diagram and a UML diagram in use cases which are very helpful to understand.
noProblem All diagrams are easy to understand
noProblem Visual aids are very good and make it easy t understand.
noProblem for the current version, the author give a good explanations of changes.
noProblem There is no design proposed, only functionalities are explained with diagrams
noProblem They offered a couple of concrete ideas, such as use cases, the design of database tables and the class diagram to show us how these classes interact with. In the end, they also offered the design practices that they will follow. These thoughts for me are clear and make sense to me.
noProblem There is a test plan provided in the wiki which covers manual as well as the automated testing part of the project. In the automated test cases part, the authors have provided how they aim to approach the test cases.
noProblem This wiki first gives clear definitions for the 3 problems: 1. Implementation to see self-review scores juxtaposed with peer-review scores. Design a way to show them in the regular ï¿½ï¿½ï¿½View Scoresï¿½Û page and the alternate (heat-map) view 2. Implementation of the methodology to combine self-review and peer-review scores to derive a composite score 3. Checking if the author has submitted the self-evaluation(s) before seeing the results of their peer evaluations(already implemented). Then it uses an application flow and a use case diagram to describe the design of changes on the system. The wiki also provides descriptions for the diagrams. In this section, it is difficult for me to determine which problem this design is aimed for. It seems this section is about problem 1 and 3. I suggest that you should explicitly indicate which problem this design is solving and how. After that the wiki briefly introduced the database design. It is too simple to explain this change. I suggest that you should explai
noProblem According to the assignment document, 3 main designs are made: 1. It should be possible to see self-review scores juxtaposed with peer-review scores. 2. Then implement a way to combine self-review and peer-review scores to derive a composite score. 3. The author(s) should be required to submit their self-evaluation(s) before seeing the results of their peer evaluations. From the description and diagram provided in the wiki, I can see that the design is able to solve the problems stated in the first section. This wiki also provide the logic design on the score composition algorithm. But the wiki doesn't talk about how they are gonna to implement it with code, so it's hard to tell whether it follows appropriate principles or using appropriate patterns. I suggest that you should provide your code design for each function design so as to show the principle or design patterns you used in your design. For example, you could use a class diagram to show the architecture of your code.
noProblem The team has added strategy pattern to decide the change at runtime. Also the design allows for a little modifications to run a new variation of mutation test.
noProblem The design is clear and tackles the specific problem statement mentioned and the steps seem clear enough.
noProblem The author has clearly written the problem statement and explained where ever necessary. And necessary figures and flow diagrams have been provided for further understanding.
noProblem Class diagram has been added where necessary and explained in detail.
noProblem There is no test plan as the project it self is about testing the existing test scripts.
noProblem In my opinion, the design they provided sounds reasonable. They mentioned the problem of the existing mutation testing, and next, they mentioned their solution of the problem with several code blocks, a graph of execution flow, and the design pattern they are going to use in the project, which is the strategy design pattern.
noProblem For their design pattern, they chose to use the strategy design pattern, which can help them reduce the redundant code when facing similar but still different situations. And their execution flow clearly shows us what situations their program will face during running and what decisions it can make to go through different results. Also, they offered code blocks to show us their solutions, which for me are simple enough to implement.
noProblem They offered the reviewers a clear execution flow graph, the UML design pattern to describe their strategy design pattern with relationships and functionalities inside. In addition, they also gave us some code blocks which include their implementation of the project. This also gave us another concrete view of the solution of their project.
noProblem The design includes a test plan. It consists of the steps that would be tested in the RSpec tests that the author aim to write. These look good and it seems like that these steps would help to perform good testing.
noProblem The explanations are sound and easy to follow and give a good picture of how the team intends to proceed with their solution. The combination of the listing the database changes, the files changed, and visual aids help the reader understand the project.
noProblem 1. The design document is very well written. 2. The most important part which is present in the document is Use case diagram and flow diagram which are adequate and they explain the changes to be made to the system. 3. The document includes existing limitations and tasks involved which is explanatory. 4. The team has also included information about the database which is very important.
noProblem The design appears to be sound, and follows all the appropriate principles.
noProblem The design looks good to me. The authors have also provided the principles and patterns to be used.
noProblem Design seems to be good and they are not creating any unnecessary file and also they have divided their tasks into front end, db refactoring, etc which suggests that their approach would follow MVC structure and would be DRY.
noProblem Their design appears to be proper and they have taken into consideration to avoid making the code "smelly"
noProblem The design looks good and by using proper explanations of the design patterns used, it becomes lucid for the reader to understand.
noProblem The team has chosen an appropriate design and aim to reuse the existing code.
noProblem 1. The changes the authors have proposed are relevant and sound enough. 2. The authors have clearly written about the existing issues or the limitations. 3. The authors have included the refactoring steps and the implementation information which is really good. This gives the information about the principles and the methodologies the team is going to follow. 4. Overall, the document has good explanations and is of good quality.
noProblem The test plan is pretty comprehensive.
noProblem I'll have to repeat one of my statements that I have already used before but it clearly explains the question. The design seems to be very clear as the use of proper flow charts that cover almost every possibility like whether something happens or not and what would be the corresponding result for that which makes the design very simple to understand and the reader can easily comprehend the flow of the design using this flowchart. The presence of UML diagram helps in presenting the responsibilities of the student, instructors and TA's even more effectively.
noProblem They have provided a clear flowchart of how the vary-rubric-by-round feature would work. The team has also added a UML diagram.
noProblem project doc is well prepared and explained with enough details.
noProblem All requirements are included in changes to be implemented and also related required tests are also mentioned.
noProblem explantion is complete enough
noProblem They have appropriately used the visual aids such as use cases to explain their view.
noProblem yes, the test plan looks complete enough.
noProblem Yes the authors have adequately explained the changes that they are making to the system.The design document is complete with respect to project purpose, design and introduction as well as testing plan.
noProblem Yes, the team have made good use of UML and use case diagrams to make it as simple as possible for reviewers to know about the project as well as review them properly.
noProblem I remember the first submission they already did a good job in design write up. This time, they have more complete use case diagram.
noProblem From the use case and workflow chart, I can easily see their design and implementation they are going to do. The design also follow the design principle they claimed: MVC, DRY, inheritance, polymorphism.
noProblem Yes, from the workflow diagram, there only some simple logic, no complicated condition check.
noProblem I think this project is an extension project which adds other feature based on the previous structure, so I am not sure if there has some class diagram to show?
noProblem Yes, they will do manual test which means unit test when each function is implemented.
noProblem The authors give a detailed description about what they planned to change, and they draw a graph to show the use cases that apply for their modification, which makes their logic clear and easy to understand.
noProblem Their design is quiet simple and very intuitive. I could understand their logic easily via the use case graph.
noProblem It appears simple. It could have been simpler.
noProblem Yes, the tests are complete and explain the given functionality.
noProblem The test plan is comprehensive enough explaining how the UI testing will be carried out.
noProblem Test plan shows how to test and not which edge cases or conditions are to be tested.
noProblem The test plan looks good and exhaustive. It does include a plan, but some concrete steps could have been explained.
noProblem Edge cases need to be written. ex: When a student does not submit the assignment on time.
noProblem The design document is well written and clearly describes the multiple problem statements and provides the necessary solution.
noProblem Since the team is fixing existing issues and not adding a new feature to the system it is difficult to introduce design patterns.
noProblem The team has added adequate screen shots and code snippets. And explained as and when necessary.
noProblem The design plan needs to be elaborated more. It doesnt not mention what patterns will be used.
noProblem The design looks clear and simple. Unnecessary long statements and paragraphs are avoided, which makes the design very readable.
noProblem The test plan is elaborated well
noProblem they have a list talking about the all the manual test they will go. but there is no coding related to it
noProblem They have included all the functionalities required to be implemented as a part of the project but nothing is detailed. They have not explained any specific details about why and how these changes will be implemented.
noProblem The authors explain orderly and clearly. Their description is very tidy and concise. But more explanation is needed for their design I think.
noProblem With many details, in several different part, maybe it is better to combine them.
noProblem The design appears to be sound, but I think more details are needed.
noProblem Yes, very simple and clear.
noProblem It is simple and clear.
noProblem Execution flow is simple and clear
noProblem Yes, I think their test plan is pretty comprehensive.
noProblem The design seems to sound as the changes proposed seems to be intuitive, the description of the design principles followed makes the WIKI page more effective.
noProblem The design appears to be quite simple, clear explanation and the presence of UML diagrams make it easy for the reader to comprehend the changes required and hence further strengthens the design.
noProblem Great UML diagrams that cover various possibilities from the student's point of view, like what happens if a condition becomes true and what happens if its false makes the WIki page even more effective.
noProblem The design appears to be succinct and complete. The design conveys the work the the authors are intending to do for the project.
noProblem The changes needed to make to the system is adequately explained by authors in the design document. The code that would be changed is also explained well in the document.
noProblem There is nothing to test in this project
noProblem The execution data flow diagram is very helpful and also the design pattern diagram.
noProblem Design is very clear and authors have mentioned all the changes that would be done in this project in the wiki.
noProblem The design deals with all details with the required file changes for the required functionality. There is a proper explanation of the proposed changes
noProblem The authors have clearly mentioned what the objective of the project is and what they are planning to change to achieve that.Its is easy to understand their goal in the project.
noProblem The authors have adequately explained about the project they are doing
noProblem The design appears to be sound and they have used strategy design pattern which is good
noProblem They have tried to be as simple as possible
noProblem They have used visualization adequately
noProblem They have written that it does not require testplan but i think it does require a testplan
noProblem Yes, they explained very clearly in the first part. There work is to write python code to change the source code to let tests failed and change it back. Mutation Testing
noProblem Yes. There strategies are replacing existing code conditions. I can't think a better way. They explained using UML of strategy pattern.
noProblem Yes, there design is very simple. There code use regex which is also the best practice for this problem that came to my mind.
noProblem Yes, there are execution flow and UML, very clear.
noProblem They explained why they don't need test plan.
noProblem The design doc is pretty clear and complete. The problem is that Servo uses the Web Platform Test (WPT) suite for testing, but does not perform an evaluation of the breadth of the tests. The goal of this project is to use techniques from mutation testing to evaluate the performance of the WPT suite when bugs are deliberately introduced into the code base. All the problems are explained well in the document.
noProblem Detailed explanation is given for the issues as well as the proposed implementation. Use cases are explained properly.Contains all the information necessary and easily understandable.
noProblem The design of the project is to create a highly parallel environment that allows for many components be handled by fine-grained, isolated tasks. After checking the descriptions, I think the design appears to be sound. And they use Strategy Design Pattern which is also appropriate.
noProblem The designs are reasonable and simple. Also, they use Strategy Design Pattern which makes the logic design simple.
noProblem The project seems to be a little complicated, but the diagrams are really clear helping to understand what they are going to do. The diagrams explain the design step by step which are really helpful.
noProblem no tests are necessary for this project as said in the doc.
noProblem yes the changes required by the system is very well explained
noProblem the design is very detailed and yet very understandable all the required subheadings are there which makes this even more clear
noProblem yes more number of screenshots and flowcharts are present which makes the concept very clear
noProblem yes a very good test plan has been included in the design where different kinds of tests are present
noProblem the design is sound. the fixes are useful and the plan of testing is also good.
noProblem the quality of the explanation is very good. it is not hard to follow. it is extremely detailed and is expressed in simple terms going step by step such that any viewer can understand
noProblem it clearly states what exactly the project aims to do. what functionality needs to be fixed all the reasons this project is important is clearly stated.
noProblem The design document is extremely thorough. the purpose of the project is stated clearly. the problem and solution is explained well.
noProblem yes there is a test plan included
noProblem there are tables shown for database design such that a viewer can visualize better. the diagram for use cases also helps to a large extent. below use cases a flow chart would be a better option instead of plain text.
noProblem yes the desing is very simple , a viewer who is reading for the first time understands well
noProblem yes the design is very sound all the patterns are mentioned the test plan has also been included with a design pattern
noProblem yes the authors have explained whatever changes needed to be made to the system
noProblem tables and screenshots of appropriate sizes has been put into the design document
noProblem yes the design is very simple and clear. all the required data has been included in the design
noProblem yes it follows all the appropriate principles. it uses all the appropriate patterns required, the page has been completed, all trhe required fields have been added.
noProblem yes the authors have explained the changes to be made in the system.
noProblem Authors have explained all the changes that are needed for the requirement in very simple and lucid way.
noProblem The team has done a good job explaining the problem statement of the project and the changes they propose to solve the issue. They have used visualization perfectly as desired and have put the efforts in designing the solution in the right direction to achieve their goal.
noProblem Yes, the proposed changes to the system are easy to understand. The author has clearly explained the problem statement, solution and supported it great diagrams and mockups!
noProblem Everything related to problem statement, design and future implementation and the test plan has been mentioned.
noProblem This is one of the best design documents I have seen.
noProblem Not much need to be updated
noProblem yes the explanation is complete and easy to understand.
noProblem All necessary functionalities have been described.
noProblem Design appears to be sound. I dont think changes are needed on that front.
noProblem The design is well structured and follows the design principles and appropriate patterns for implementing the feature.
noProblem Appropriate patterns and principles have been used.
noProblem They have mentioned that there are no design changes, and have explained the existing design patterns used.
noProblem The design doc provides a comprehensive explanation of the requirements and use cases that are being covered and the choices made to resolve these.
noProblem Yes, I think this design doc is sound and following appropriate principles. The author gives a part named design pattern which introduces the design pattern used in this project.
noProblem Design looks promising following appropriate principles and using appropriate patterns
noProblem No mention of any design patterns have been done. Also no mention of the architecture they plan to use has been done. However, it seems that they will use appropriate patterns while implementing the project.
noProblem The design is straightforward and simple.
noProblem Design is simple.
noProblem Yes. The design is crystal clear and the team has done a good job to keep it simple and detailed.
noProblem Yes, the design is clear, as per the sequence diagrams and explanation of the potential code modifications.
noProblem Design is simple and clear
noProblem Yes the design has been made very clear, especially since the choice of design has been very simple to understand.
noProblem Design is simple and proposed changes are easy to follow with the help of explanation provided. and seems a nice design.
noProblem Very easy to understand everything
noProblem Yes, the design is simple and well articulated. No issue with the integration with the master branch should occur while implementing this project.
noProblem the design doc is simple and easy to understand.
noProblem The flow diagram and UML diagram adequately describe the design which the team seeks to implement.
noProblem Team has used all sorts of things that can be used as visual aid.
noProblem Too good. Use Case Diagram, application flow, screenshots of html pages and tables for calculations. It has got everything that a wiki page needs. Good work!
noProblem The team has made maximum use of visualization including use case, flow diagrams and mock up screens to explain the design details in very clear manner,
noProblem All the required functionality is present with proper explanation of everything. The Use Case diagram and application flow along with planned changes deal with all the required functionality. More diagrams have been added after the 1st submission.
noProblem in this design doc, there are two main figures, one is application flow and another is use case diagram. With these two figures, we reader can get the basic understanding of this project's objective, specifally, we know the working procedure of self-review functionality. As an advice, I think the author could add some screen shots of some changes in this design doc, it will help understanding.
noProblem All are clearly explained
noProblem there are sufficient uml diagrams to explain the strategy followed.
noProblem A detailed test plan has been added which clearly states the team's motives and expected outcomes.
noProblem Design doc includes test plan which explains all the testcases team is planning to write
noProblem The test plan is well tabulated and explains all the test cases the team is going to perform.
noProblem Very elaborate test plans are mentioned, which cover all basic test cases.
noProblem Very elaborately written tests.
noProblem A complete test plan with required steps, functionality and other applicable details is present now.
noProblem design includes the test plan. Tests are clearly explained with test date, pre, post conditions, objective etc
noProblem Very well documented test plan, covering every aspect of the test cases from the test data, pre conditions and expected result. One of the best testing strategies I have seen.
noProblem Yes there is a full flagid test plan for the project.
noProblem This wiki provides a complete test plan, with four test cases. This is the best test plan I've ever seen so far. The test plan include test object, pre-conditions, steps, test data, expected result and post-conditions. It contains almost every important information for a test. I think there is no need to improve it, but in case you still want to improve it, here is a suggestion: You may add more details about how to implement the tests. For example, you might want to use RSpec for the test. In RSpec you might want to use mock or something else to create the pre-conditions and use expected statement for the expected result.
noProblem The screenshots of the changes to be made clearly describe them.
noProblem The design seems sound and uses proper design patterns.
noProblem The design as shown in the screenshots is simple and straightforward to understand.
noProblem The screenshots greatly increase the understandability of the project.
noProblem Authors have explained what changes needed in great way. Authors have mentioned database tables, files which need to be changed. They have also mentioned what testing related changes that are needed.
noProblem Design doc is well written. It follows all the principles and patterns. They have also mentioned what changes need to be done in really great way
noProblem Yes, Design appears to be simple as possible. I dont think it can be made more simpler
noProblem Authors have shown the sample page views on which badges will be displayed in the great way
noProblem Authors have mentioned which all files will be added for the testing purpose and what testing they are planning to do
noProblem excellent improvement from last time
noProblem Some of the designs have been implemented as well
noProblem The design is very clear
noProblem some of screen shots have design implementation
noProblem Action plan, design, requirements and test plan-everything is covered.
noProblem The review 1 feedback has been incorporated and the design document now explains well the changes that need to be made to the system.
noProblem The approach is not complex
noProblem Compared to previous version this wiki has a drastic changes, it includes all of the things of a perfect wiki. I liked the visualization presented, it made me easily understand the project you are working on.
noProblem As i mentioned in above comment, the visualization helped me clearly understand the badges used and the the screenshots explained me clearly understand how this is implemented, how it looks when implemented.
noProblem Good: Wiki says that they need to write the feature test and required changes will be made by them in badge_system_spec.rb.
noProblem It seems the design was already given in the project description. It had in-depth details of what changes to the db has to be made.
noProblem Yes the design does seem simple enough
noProblem Yes authors have adequately explained the changes to be made.
noProblem Yes, the appropriate design principles have been explained.
noProblem Yes, it looks quite simple.
noProblem The files and their contents that will be modified are explained clearly
noProblem The principles used to solving the problem are sound
noProblem The design seems to be slightly complex. However, the implementation would be easy and direct
noProblem 1. The design appear to be simple and sound. 2. The team has included the detailed information about the database design by mentioning about the table structure. 3. The team has included the designed badges. 4. The team has proper description about what they are changing. 5. The appropriate principles and using appropriate patterns have been described.
noProblem The article very well explains what needs to be done and why.
noProblem The project deals with refactoring, so there does not exist a significant design or pattern change. As the document says, DRY principle is kept in mind while optimizing code.
noProblem Yes, I believe the design doc is pretty simple.
noProblem The test plan is satisfactory and emits the idea of what they will try to do to measure the optimization effort..
noProblem There is not much design in this project, but it appears to be sounds and seems to follow the patterns.
noProblem Yes, it seems to be as simple as possible, since it only involves refactoring a bunch of code pieces and making sure they work. The author has also mentioned the test plan this time, which is a big plus
noProblem Yes the authors have adequately explained the changes they are making to the system in a simple manner. It becomes easy to follow with the use of graphs and easy language.
noProblem Yes the design appears to be simple and clear. It becomes easy to follow with the use of graphs and easy language.
noProblem The test scenarios mentioned will help in finding out if the implementation has positively affected the system or not.
noProblem Please see the note above -- there should probably be more detail about the other three pages in the project requirements, or a note explaining that the fix affects all the pages. Otherwise, the design seems sound -- I do not think you need to specify that it is MVC, all of our Rails projects are MVC, and this is assumed.
noProblem The Wiki does a good job of thoroughly explaining the process for addressing the project requirements. There is a lot of information leading to the "Proposed Solution" section, but once we reach that point, the pseudocode is concise and understandable.
noProblem The manual tests described in the new "Test Plan" section adequately cover the project requirements. You guys are effectively optimizing Expertiza, so testing the speed of the required pages is appropriate.
noProblem The project design looks quite sound, the authors have mentioned about the MVC and DRY principles and how are they implemented in the project.
noProblem The authors gave adequate explanations in the page about what they will change in order to cover all of the requirement, they not only considered about the functionality and the viewing, but also think a lot about whether the performance will be changing after that, which is really good.
noProblem They design is full of adequate descriptions and details, completely satisfy the requirement, i cannot figure out what kind of appropriate patterns they should necessarily use, but nothing disobey the design principles.
noProblem Last time their description is complex and hard to follow, but this time they change that, all of the paragraphs seems simple and has a clear logic, seems like they improved a lot since last time.
noProblem They have many diagrams in the page, each was followed with several sentences to explain, all of them are the key points to clearly describe their job in this program, none of them are useless.
noProblem The design include the test plan, mentioned about how to set up the environment for test and how to do the test, in fact this project focuses on the time shown, so seems like no test code is needed in their work.
noProblem Test plan seems good.
noProblem Design is well explained
noProblem Design is good with appropriate patterns.
noProblem yes, Design is simple and clear
noProblem Yes, the team has included all the functionalities required to be implemented as a part of the project. I like the project description provided in the document, it already has all the changes required to be done as part of this project. Moreover, in the section Proposed Solution of the design, an author has provided enough details to understand the problem and its solution.
noProblem The author has organized the designed document in a proper structure which makes it more readable and easy to understand the flow of the work. I really appreciate this as it was a good learning for me too.
noProblem Author has provided enough visual aids in the section "Analysis of page" to understand the purpose of the work and the problems related to it. Thanks to the author for including the FlameGraph Statistics in the design to provide a clear picture of the time taken by a particular page to load.
noProblem In this project, performance testing is the major part which the author is already performing while analyzing the time taken by each case. One suggestion, please do test the refactored action children_node_ng.
noProblem The wiki has improved from last time and some of the changes suggested are included.
noProblem Patterns implemented are mentioned.
noProblem Design is straightforward and concise.
noProblem It was missing last time, added now.
noProblem I dont think design is applicable to the project is about performance improvements.
noProblem Visualizations are given. Class diagram and use case diagram not given but I don't think they are required.
noProblem Test plan is given and it seems very straight forward.
noProblem The three sections, introduction, project description, and project design, explain clearly what the project is to do.
noProblem Sound test plan is listed in the page.
noProblem The authors have mentioned what files and tables need to be changed. However, a 1-2 line explanation regarding why those files/tables need to be changed would have made the purpose really clear.
noProblem The design appears to be sound, and appears to have followed the proper principles. Good job!
noProblem A use case diagram has been provided, along with sample badges. The visual aids do describe the changes made to the system.
noProblem The design does include a test plan section. However, a 1-2 line description for each test, as to why that test is necessary for the project would have been really helpful. The tests mentioned seem to cover all the functionalities though, so well done.
noProblem The "good temmate" reward/badge wasn't well explained. Does this mean in each team a member who got best teammate review is given, or, on the whole class a student is selected?
noProblem The design and the plan are well designed. No description about how you crack your problem statement except for "files to be modified" section. Should have been great if you include "Design Plan".
noProblem No such specific section for "Design". But overall description and test plan were clearly explained. The "Description of Badges" was very important for this specific writeup and it was neatly described.
noProblem The use case diagram is big. We have to slide it all way right. Better you have a resized version of it. And, can a student see who has got a badge for a specific assignment if he didn't get? Does it feature consider privacy issues. If yes, have you checked if that is a good idea for a student to see other's badges. The database in the usecase diagram may not be that necessory. It just makes the diagram more clumsy as it's anyway understood that whatever actions are performed are stored in the database.
noProblem You've said that you are using TDD methodology. So a section explaining TDD should have been there. Then the test plan section will look sound and complete.
noProblem The authors have taken into consideration the review comments from the last round and improved the formatting of the document. They have also added a Use-Case Diagram to better facilitate understanding of their project. But they have failed to address the review comment involving the amount of work involved as pointed out in the previous review.
noProblem The design could be improved by adding extra details as well as making it as simple as possible while still conveying more.
noProblem Yes they have used great visualization that describes the changes in an easy way for a layman to understand.
noProblem There is not much explained on the design principle perspective. I feel they could have touched upon some of the design based point while the current wording is pretty straightforward. How their changes
noProblem The design is indeed simpler than required.
noProblem Changes are explained with use case and database design but it seems like data flow diagram is missing
noProblem The design appears simple and clear.
noProblem Yes, the team has included all the functionalities required to be implemented as a part of the project. I like that author has provided enough details about the models needed to be added and files to be modified as a part of this project. One suggestion, the project document shows that some team has already done this project and it was rejected because of some reason. It would be a good idea to include some details about the work done by the other team. Like what was their approach and how things are done differently this time.
noProblem Yes, the design proposed by an author seems good to me and it follows appropriate principles. The author has considered all possible relationships between reviews, student, and different badges before designing the solution, following the appropriate pattern which is really appreciated.
noProblem Thanks to the author for including the Use-Case diagram in the design. This is really helpful to understand the interaction between the involved components in the review functionality. Also, I appreciate that an author has included the section "Description of the Badges" and provided the images for each badge with description.
noProblem The test plan is complete and this will test all the changes done by an author. But I have one suggestion, that we can organize these test plan in a proper structure like in a tabular form with columns like Test ID, Test Condition Expected Result and Procedure. This will be helpful for both, reader and an author while implementing and testing functionality.
noProblem Overall the changes are well explained. But in "Files to be Modified" section, I think the authors need to give us more details about what kind of code they are going to insert in those files.
noProblem The authors have clearly explained the design they are going to implement. It follows appropriate patterns and uses principles.
noProblem The authors just gave us an overview about how they will make the changes and they look simple and straightforward. But I think more details without adding much complexity would be helpful.
noProblem The visualizations are appropriately used. The use case diagram and pictures of badges are helpful for clarifying their tasks.
noProblem The test plan are included and contains almost all scenarios and use cases. It would be better to consider some edge cases, e.g., what if the instructor assigns the ï¿½ï¿½ï¿½Good Teammateï¿½Û badge to a student whose grade is below the threshold value.
noProblem yes they have explained adequately
noProblem Sound design but limited scenarios have been proposed for implementation
noProblem It is very basic as they are implementing only 2 scenario for the respective 2 badges
noProblem Manual test. The tests do not cover corner scenarios. Scenarios where only few team members have reviewed and there are still pending reviews
noProblem The presented test plan by the team in the design document is very sound. The tests will actually test the functionalities and are not shallow.
noProblem Yes, the changes are demonstrated in problem statement part and modified files part. But I think some pictures and details are really wanted here. There are some reasons. First of all, because your task is adding badges, some mockups of the related screen are necessary here. Secondly, because you just say you will insert some code into related files, don't talk about insert what, how to write your code and what methods you need to newly create. Please write your change as detailed as possible.
noProblem By checking the content they have written, I would like to say very good design. But I also would like to say some details are wanted. Because all of the design steps in your doc are just copied from project description offered by the instructor, I want to see something new and meaningful.
noProblem Yes, it does have a test plan. But I also suggest that add some details to your test plan and you should demonstrate your test plan step by step.F example, 1. login as instructor 2. create a assignment 3.give review to student reviews 4.set badges of students. 5.view badges of students. What's more, you should split your test plan into 3 part, which are student, TA, and instructor. Because different roles have different views and features.
noProblem The design pattern has not been mentioned, however I think there isn't any class level changes which would affect or change the existing design pattern.
noProblem The design looks clear and appears to be simple without violating the dry principle.
noProblem The UML diagram and the image of the badges provide a fair idea about the design. However, it is not clear which page in Expertiza will be affected by the changes. A screenshot of the existing portal with an explanation would be helpful.
noProblem The test plan includes the scenarios that need to be tested for the implementation. Both, student and instructor flows have been tested properly.
noProblem Yes. I understand the process of "badges" clearly by the Use Case Diagram and the Description of the Badges. However, I don't understand why it is written in "Good Teammates" that "This is evaluated on a scale of 100% by the teaching staff". Shouldn't the grade is given by other teammates?
noProblem The design appear to be sound but no patterns included.
noProblem Yes. By looking at the "Tables to be Modified" and "Files to be Modified", I think the design is organized and simple.
noProblem The team includes the use case diagram which is very helpful to understand the process. I think it will be better if they can include some mock up screens.
noProblem Good TDD method and good test plan.
noProblem The DB design seems faulty to me. First of all, there should be badges for students for each assignment. so awarded_badges should have assignment_badges_id as FK. And how is Good teammate handled? it should have some team and badge association, similar to assignment and badge.
noProblem The test is simple and most of the cases are written. But it needs more explanation and edge cases coverage.
noProblem From the overview of the approach given by the author the design appears to be simple. The author could have given more explanation of the implementation.
noProblem According to the design doc, their designs is let student be able to visualize the submission records as a timeline including: 1. Timestamps of hyperlink submission records 2. Timestamps of file upload record 3. Due Dates 4. Peer review link with round number and timestamps 5. Author feedback to otherï¿½Ûªs review link with feedback hyperlink, timestamps The design has covered all the problems and it is reasonable.
noProblem Yes, I think their idea and design is simple. The design intend to develop a timeline omitting the need to scroll and being concise.
noProblem Yes, it has test plan included. The test plan covers the TDD approach and manual test on UI. The tests are useful.
noProblem Yes, the authors have adequately explained the changes to be made to the system. They have a separate section to list files to be created, and another separate section for files to be edited. After the above two sections, they have implementation section that talks about the changes to the flow of data in controller and view. It could not have been explained better.
noProblem On their wiki webpage, their write-up described the introduction for the background of Expertiza, the definition of the problem, the scope. Next, they mentioned the requirements of their project, the use cases that they will face, the database design they will use, the diagram of classes they designed for implementation, and the design practices for their projects. For me, the completeness of the design doc is great enough. Especially they offered the requirements and the use cases in the write-up because I didn't see these in the write-ups from other groups. And these make their idea more concrete and easier to understand.
noProblem The design docs is great and captures all the changes that need to be done in detail. I am happy that you have added visual aids such a screen shots, UMLS, code examples and stick figures These are very helpful for the overall design on the document. The is commendable.
noProblem In this current version, I think the author modify many things, the author added some screen shots and background information, descriptions about the project's objective. All these parts can help reader understand this project more clearly and accurate. Additionality, The author also posts their changed codes into the design doc, I think it good! With the codes and figures, reader can understand the design doc easier.
noProblem Yes. The design document explains the changes clearly in the "Requirement" part. "Files to be created" and "Files to be edited" also help a lot to understand the changes.
noProblem The updates done are sufficient from a design doc standpoint. Added UML and UI diagrams are informative.
noProblem The author has described the problem very well. The database changes and files to be created and edited are given with sufficient description.
noProblem the design diagram in the documentation is really clear, and gaces the details how the process is working.
noProblem The design appears to be sound, following appropriate principles and design patterns. The team has used use case diagram, database diagram and class diagram to explain the proposed design. This is quite exhaustive explanation, therefore covers all possible changes in a well structured manner.
noProblem As it is, the design document incorporates all the functionality proposed. It is aimed and extending the scope of assignments from just regular class assignments to other types of submission and I think the team has implemented that well. Great use of class designs.
noProblem As I already mentioned the authors have not performed their task properly, they have only stated the design practices but failed to explain how?. I can't see any input from the authors.
noProblem The team declares that they will follow MVC structure, standard naming and DRY principle in the design process, which is great. However, I think they might also include their test design patterns like TFD or TLD.
noProblem The screen shot looks good on supporting for things that you are planning to do.
noProblem Yes the design appears sound. Designing principles are only mentioned but how to achieve them is not givem.
noProblem The design appears to be simple as they have clearly described the code and where they plan to change it.
noProblem Yes, because their project involved the front-end and the back-end, they use MVC framework here to separate the functionalities of models, views, and controllers, which is a nice design to avoid of dependencies. And they are going to use the standard naming convention for variables and methods, which is also useful for maintaining the project afterward. And they are going to apply "Do not Repeat Yourself (DRY)" principle, which is also good for keeping the functionalities for themselves and other developers in the future. Yes, Although they are not going to use some fancy design pattern, such as the strategy design pattern. However, sometimes a simple idea is better than a fancy idea.
noProblem The changes are adequate and the explanations are clear and concise. The explanations are easy to understand. The addition of explanations to the code added and what they do it good and helpful.
noProblem Yes, the design is simple and clear and to the point. The changes that the user plan to make are implemented in a concise manner which would not affect any other modules of expertiza.
noProblem The design is simple and clear but missing important aspects such as explanation of design principles and patterns, proposed solution.
noProblem Yes. The design appear to be simple and clear. However, there are some impropriate uppercase in the beginning of the names of variables and methods in "Class Diagram".
noProblem With the current details, it appears complete.
noProblem The mentioned approach to the problem seems to be simple and straightforward.
noProblem The design looks good and screen shot also looks good.
noProblem Design appears simple thanks to multiple diagrams like use case, class diagram and db changes.
noProblem Just as I mention before, explanation is needed. Even their design is clear, without necessary explanation, it is still hard to understand their purpose.
noProblem Provided all required diagram like use case, db design, class diagram. gave relevant information to understand what they are trying to do. aslo the mokc up screens are provided.
noProblem The visualization used provides a good snapshot of the functionality that they're implementing, therefore the usage of class diagrams and other diagrams clearly describe the changes to be made to the system. However, I feel an additional data flow diagram or a sequence diagram would have helped improve the context explained by the visualizations.
noProblem They drew the use cases, database designs and the class diagram for us to understand their thoughts and the solutions easily. From the use cases, we can easily to understand what actions might occur between the presenter and reviewer, such as signing up, adding contributors, creating a submission, uploading paper, reviewing submission. For the database design, we can see how they designed the table for Paper class and the table for handling with many to many relationship between contributors and paper presenter. For the class diagram, we can see the relationship between User, Presenter, and Paper class. As a result, the visual aids they offered are useful for me to understand the ideas.
noProblem There is a very good and extensive use of visual aids to enhance the design document. Screens shots that show the user interface are use. We have code examples and list of files to be changed. UMLs and stick figures are also used. This has greatly improved the document.
noProblem As I mentioned before, I think class diagram and other figures help me a lot when I first read this design doc, I think the use of visualization of this design doc is good enough, in addition, as an advice, I think the author can add some comments with these figures, it will be better.
noProblem Yes, the class diagrams, use case diagrams and the UI Screenshots seem to explain the changes well and they have also mentioned the necessary theory along with these diagrams for novice users to understand the diagram.
noProblem The best part about this design document is the use of visualization, the authors have provided use cases, database design and class diagrams to demonstrate the working of the project.
noProblem Yes. The class diagram and the use case diagram help a lot for understanding.
noProblem Adequate use of UML diagrams and screenshots.
noProblem I like the screen shot on supporting your work.
noProblem I feel visualizations are very well used. They have put great attention while creating these diagrams.
noProblem Visualizations including UML, class diagram, screenshot have been given in their wiki. Both of them are clearly, and easy to be understood for the reader. This part is good.
noProblem Many commits periodically
noProblem Was unable to find any instances of not following best practices.
noProblem Yes it follows good coding practices.
noProblem I like your use of third-party gems, such as devise for authentication, to keep the coding "clean" and readable.Â I would suggest also using "CanCanCan" and "Rolify" for authorization.Â There is also a tutorial for using the three gems in conjunction(Devise+CanCanCan+Rolify).
noProblem The code follows good practise. The readme is also well defined.
noProblem User interface is above and beyond.
noProblem The interface is quite user friendly and easy to use. It displays all the necessary information.
noProblem UI is concise and easy to understand and the admin account information has been involved in README.
noProblem Testing appears thorough and follows best practices to my knowledge.
noProblem I cannot find code for testing.
noProblem Yes, as can be seen from the commit history and the messages, the team pushed changes onto the repository throughout the project period.
noProblem Many commitsÂ over the past week.
noProblem Yes.
noProblem The git hub pushes were regular
noProblem Code frequently committed over the course of a week.
noProblem There are git commits for every new feature implemented. The git documentation can be more refined.
noProblem No extra features have been implemented so far, and I am not able to create a job and hence am not able to verify if the person receives a mail or not
noProblem All the main models and views have been thoroughly tested. The naming convention for tests has also been properly followed. Good work!
noProblem The base edits were done two weeks ago and after that each edit was done prior to the last submissiond eadline. However, a consistency has been maintained in pushing changes. They have pushed after implementing almost every single feature, so it helps to track the files changed in every edit
noProblem 1. The code follows good "Ruby on Rails " coding practices
noProblem The code is well-formatted and concise
noProblem The code was written using good Ruby and Rails coding practices
noProblem Yes. Did not find any "bad" Rails coding practice.
noProblem Tests are written for every moudle, all functionalities are working properly and code is neat with proper indentation
noProblem Yes. Very intuitive and self-explaining UI.
noProblem UI is very concise and easy to understand with all functional buttons shown as expected. The admin login info is given in README file.
noProblem It has a wondeerful and simple UIÂ providing a better user experince to normal user applications
noProblem Have the basic testing functionality like create, destroy, show, edit etc.
noProblem He has created a test for each module namely Job Seeker, rceruiter and Admin and tested the application with all edge cases
noProblem The code follows the good ruby and rails coding practices. It is well defined and not that hard to read and understand.
noProblem The code seems to follow good ruby and rails coding practices.
noProblem Ruby and rails common practicesÂ seem to be withheld both ins style and in the model-view-controller architecture.
noProblem A lot of effort went into the user interface and it shows. It is much nicer looking than the generic rails views, well done. I especially like the forms highlighting in red when there is a bad input before the user even has to submit the form. However, this could be improved by also outputting a message while the box is highlighted with what rules the current input is breaking. For example when creating a new user as an admin the password field will show an error when under a certain number of characters, but the user wont know why. Another thing I might suggest is shortening the length of the text input boxes, they don't need to be across the entire screen (specifically I see this in the sign up/new users pages).
noProblem I don't see testing has been done yet. Don't worry, we haven't done it yet either.
noProblem They did a better pushing job than us.
noProblem The team seems to have commited on git plenty of times.
noProblem A few changes were made but no one has published for a few days.
noProblem The code follows good ruby and rails coding practice. It is readable and can be easily understood.
noProblem The code in git is clean and easy to follow.Â The use of enums in the model file for job_application status shows proper placement in a central and single location.
noProblem The code is neat and easy to understand. Have followed the practices that are considered good.
noProblem Default testing along with additional tests related to models and controllers has been done
noProblem There are enough number of commits to justify that the team has constantly pushed their changes onto GitHub
noProblem 90 commits by a 2 person team, very thorough in commits and updates. Good work
noProblem The team kept on pushing their changes throughout the project period. The number of commits is also good that is 90 which is clear indication that the team is working on the project throughout the project period.
noProblem Yes the team has continued to push changes continuously.
noProblem Yes the code on git follows good ruby and rails coding practices.
noProblem The code follows good ruby and rails practices.
noProblem The interface is easy to use.
noProblem Follows good ruby practices. The variables are stores in snack_case, the models contain the business logic, the controllers implement the CRUD functionalities, and the views are mainly there to provide the UI not to perform business logic.
noProblem The role selection requirement was to allow the user to switch between roles.Â The use of a radio button for this would have been better than a checkbox.Â Also, adding an admin selection for the admin user should be present.
noProblem user interface was intuitive
noProblem readme file is very simple but didn't miss any useful information.
noProblem The default tests which are generated after running scaffold has been implemented.
noProblem yeah, testing was done for company
noProblem they created a rspec folder for test
noProblem The user interface is very easy to use and attractive. The interface displays all the required information and links so that the user can easily access the application.
noProblem Cannot find code for testing.
noProblem Yes, the code followedÂ good Ruby and Rails coding practices
noProblem 1. test modules were made for every module
noProblem The code is developed in very good standards and the readme is very informative.
noProblem The information in README is abundant and the user interface of the app is intuitive.
noProblem Yes, the User Interface is very easy to navigate. And I also liked the online/offline indicator in the top left of the page panel
noProblem very clear documentation
noProblem Yes, theÂ team has tested at least one model and one controller.
noProblem Company model is tested by RSpec and almost all controllers are tested by rails test.
noProblem yes, all modules have test controllers
noProblem You have tested only the companies controller and mentioned in the GitHub readme.
noProblem Yes, the team were very frequent with their commits
noProblem most of the changes were done by one person only
noProblem The code on git follows good ruby and rails coding practices.
noProblem The decision to make separate controllers for each role has allowed the team to separate business logic related to the different roles.
noProblem The code is well written and formatted.
noProblem Yes, the application is easy to use.
noProblem The Readme file gives a great deal of information about what the project is, who the admins are, how to start the project and what each role will do and what their functionality will be. I liked the way they have systematically given everything.
noProblem Other then default controllerÂ Job application controller has been throughly tested and looked into, regex match has been looked into
noProblem There are some tests for the job application model.
noProblem The team has tested the applications model and applicants controller.
noProblem Yes, the team has tested models and controllers for respective functionality.
noProblem Yes. It is also present in the github readme.
noProblem The changes have been pushed regularly.
noProblem The commits have been fairly consistent throughout the project.
noProblem Regular updates are done. Can go through bugs and change their code.
noProblem Code followed mvc architecture . code followed the basic steps / conditions for rails application
noProblem the application was easy to follow through
noProblem The code follows good ruby and rails coding practices. They have maintained the required MVC structure.
noProblem The code is easy to understand follows the good ruby and rails practices.
noProblem Yes the code was well written. ItÂ followed the MVC architecture , and functionality was also goof
noProblem The user interface was clear to understand
noProblem Yes the company model/controller seems to be thoroughly tested.Â All functionality seems to be avaliable
noProblem There are enough number of commits to justify that the team has constantly pushed their changes onto GitHub.
noProblem The Team has got a good number of commits that is 54. And the team also made several changes throughout the project.
noProblem There was a gap of almost 6 days between last commit and prev one, which does seem a bit odd, but after careful looking into it, it was just related to bugs so it does show they looked into the errors and rectified them. Commits do seem to be evenly distributed
noProblem The team has been consistently pushing their changes throughout the term of the project.
noProblem Continuous commits were observed
noProblem The number of commits on Git is impressive. It looks like the team has been working on it regularly. However, the number of commits by each member of the team is skewed and it does not seem like the work has been divided equally. This could have been justified by stating what work each member did in the README.
noProblem The code follows MVC architecture and shows good Ruby and Rails coding practices.
noProblem The ruby and rails practices are followed
noProblem Wel written in ruby format. Naming conventions appear to have been followed.
noProblem I think their UI was quite extensive in that I was able to locate every action I needed to verify. All of the actions were nicely listed and when I clicked on them they brought me to the logical next place in the website that tells me the information I requested. It was also nicely outlined in the README file, where you can locate the paths to test every single aspect of the website, which I think was definitely a nice touch.
noProblem Readme file has been defined well.user interface could have a home button to make navigation easier and efficient.
noProblem Yes, the application has been deployed successfully on heroku.Â It works very well and is easy to use and understand.Â On top of this, the Read me documentation is very easy to follow and informative!
noProblem The test was done on the jobs_controller and model by simply testing the scaffold generated file. I think we were supposed to test extra aspects, but if not then this requirement was satisfied.
noProblem Yes, there were enough commits to justify that the team has constantly pushed their changes to GitHub.
noProblem Yes the team has pushed changes throughout the project period.
noProblem The code follows good ruby and rails coding practices and has also maintained the required MVC structure.
noProblem While I really enjoyed the addition of the "applications to this job" and "jobs in this company" portion of the views, it really goes against DRY principles. The code is just copied and pasted from the index of the related model. Models are just validations, there are no methods abstracted into those files, and controllers are a bit bloated. The overall ruby practice is good though, the variables are snake_case, there are minimal global variables etc.
noProblem Follows good practices
noProblem The code follows the good ruby and rails coding practices.
noProblem Yes
noProblem Just one point, maybe you don't need to scaffold a home model, add the functions to other model like user.
noProblem The UI is really nice and easy to use.
noProblem The app is user-friendly. Readme is well stated
noProblem pretty good interface, different color andÂ distinguishable titles makes it easily to use.
noProblem Based on your GitHub commits, your commitsÂ seem to show that you are putting in work on the project almost everyday since the 18th of February.
noProblem only 16 commits and all done by one account.
noProblem Yes, the code is very properly maintained with using suitable dependencies in database and proper test modules for every task in models, views and controllers
noProblem The code is well formatted and easy to understand.
noProblem pretty good.
noProblem Yes, they have made test modules for every controller and view
noProblem The companies model is tested.
noProblem they write rspec test for almost all the files. a pretty good work.
noProblem The team did a great job usingÂ github.
noProblem yes, the changes done were throughout the period and uniform
noProblem The team seems to have started on the project early enough. The first commit was about 20 days ago, and the most recent commit was 5 days ago. Throughout this period, most of the commits seemed to have enough change to the app to be notable.
noProblem The team has been consistently pushing changes throughout the term of the project.
noProblem over 120 commits, they really did a hard work.
noProblem The code follows Ruby and Rails best practices to the best extent possible. Most of the code is generated by scaffold so follows the systematic hierarchy of the scaffold. The authors have also put comments wherever necessary, which is helpful. The code is also properly indented as per ruby standards.
noProblem It follows good ruby and rails coding practices.
noProblem It is easy to use.
noProblem The UI is VERY pleasing to use. It seems to have been professionally made. All the parts of the application were easily accessible from the toolbar at the top. Well done.
noProblem The UI is neat and easy to use.
noProblem I'm not sure. I cannot access their github page.
noProblem Yes, they are still updating/fixing their code during Spring Break. I love their work ethic.
noProblem The code is easy to understand and follows the good Rails coding practices.
noProblem looks pretty good.
noProblem The UI is very user friendly and intuitive. Navigation through the pages is effortless and very much sticks to the norms of what is considered an intuitive UI. There is hardly any need to go through the readme to understand what the system does as it is very obvious. Also, the readme, although not required to understand how to go about interacting with the system, is very descriptive and covers all the aspects of the system.
noProblem I went through spec folder, and found some RSpecÂ tests. Some information on tests in README would be helpful.
noProblem The application controller and model was tested well with RSpec.
noProblem The team has tested the companies and applications model thoroughly.
noProblem they did the rspec test. and seems did lots of works.
noProblem Looks like the team did a great job usingÂ github throughout the project time. TheyÂ made 98 totalÂ commits.
noProblem Yes, the commits have been fairly regular throughout the term of the project. All three members have been active throughout the project.
noProblem almost 100 commits done by three people. they did a good job.
noProblem Unable to find any examples of best practices not being followed to my knowledge.
noProblem The Code on Github seems to follow Ruby and Rails coding practices
noProblem Pros: - Good user interface and designÂ - Easy navigation - Clutter-free user interface
noProblem Yes User interface isÂ not straightforward (you need to remember the jobid while applying { an apply option next to the displayed jobs would be very intuitive} )Â to use and the readme file is well described and is helpful while we review the project
noProblem Model test job_seeker_test.rb could benefit from having additional test cases. There are many basic controller tests, though these could be more thorough as well.
noProblem The team has tested one model and controller. The test cases seem to be thorough.
noProblem Yes. They have also mentioned it in their github readme.
noProblem the team has written appropriate number of test cases for each controller and model.
noProblem The team followed the program descriptions, and included the information of their tests in README, which helped to check their tests easily. Both recruiter's model and controller are thoroughly tested.
noProblem Many commits across the project timeline.
noProblem The team did a great job usingÂ github throughout the project time. They did 192 commits.
noProblem Pros: - Worked on multiple branches - Periodic commits done - Sufficiently clear commit messages
noProblem Yes the team has pushed changes at regular intervals.
noProblem The team consistently adding code to the GitHub. The number of commits was 192 which indicates that team keeps on pushing changes throughout the project. The code is also well maintained in GitHub.
noProblem Pros: - Good naming conventions used - Proper validations (regex, empty field checks, etc.) done - Proper relationships defined
noProblem One model is tested using Rspec framework. It has decent amount of test cases for whether a company is valid or not.
noProblem 40+commits were observed on linked in
noProblem rsepc for compan model was implemented
noProblem Yes. On the master branch, the team made commits that ranged from 8 days ago till 24 days ago. Furthermore, when I did this review (2/28/18 @ 8:15pm), the last commit was 43 minutes ago on the 'Staging' branch.
noProblem The code in controller test and model test is good.
noProblem A new user with no background knowledge could easily use the app.
noProblem There were many commits across several dates.
noProblem The UI is very clean and is easy to use.
noProblem User interface: - Good design - Easy to use - Easy navigation Â README: - All features explained properly
noProblem Extra credit features have not been implemented. Â Thorough testing has been done.
noProblem The team has generated the required scaffold for test setup for Rspec. But they have not specifically added test cases. For example, if we look into the models folders in specs, we only see the company_spec.rb file that does not have any test cases. Whereas, for controllers, they have the default generated test cases.
noProblem The code follows good Ruby and Rails coding practices. It follows the required MVC architecture.
noProblem Yes, the coding is in adherence with good Ruby and Rails coding practices
noProblem The code was written with good Ruby and Rails coding practices.
noProblem Pros: - Proper naming conventions used - Proper validations done & relationships defined
noProblem Good coding practices, almost equal commits done by each members
noProblem They have followed a very well structured coding pattern, one of the best things i have seen in their application is use of before_action, it shows how the MVC app should be developed,they have reduced the amount of code and redundancy, this is something i loved about their work, other then that indentation naming and other factors are well looked into
noProblem The code followed the mvc architecture. All parts of the code look clean . views were dry as required
noProblem Yes, the team made regular commits to their repo
noProblem The team kept on pushing the changes throughout the project period. The number of commits pushed by the team is 204 which clearly indicates that the team has worked throughout the project.
noProblem They wree consistent in puhing changes
noProblem more then 200 commits, thats a great job they seem to have increased the amount of commits to a great extent in the past few days, most of the later commits were related to bug fixes which shows how their products matured, commit naming has been well looked into
noProblem All 3 members contributed frequently and in about equal parts over the course of the project.
noProblem A large number - 200 + commits were observed
noProblem They did a great job on testing, more than just one model and one controller. Excellent.
noProblem Extra credit features have not been implemented. Â Through testing has been done.
noProblem The team has tested models and controllers. There are some functional issues which the team membersÂ have to look into. The functional issues are presented in the above comments.
noProblem Yes, they have tested for blank spaces and special characters while filling forms
noProblem yes the team has implemented test cases
noProblem Great work testing multiple controllers and models. The test cases seem very thorough as well.
noProblem User interface: - Good design - Easy navigation - Easy to use Â README: - Covers all topics - Formatted properly with clear headings & sub-headings
noProblem Loved the user interface, its very easy to use, its well divided in fields, css has been well looked into as well, it gives a very good over all look and feel. The readme does give a very good idea of what to expect from the application and what the application is providing and how to accomplish that.
noProblem User interface was intuitive
noProblem The user interface is very good and quite user friendly. The views present all the required information for a particular user and the links are very well directed.
noProblem Yes, the application has been deployed n an AWS server.Â The interface is beautiful and very easy to understand and use.Â Additionally, the ReadMe file is well written, easy to understand, and thorough.Â I really like the use of highlighting and bold text though markup to really make the ReadMe usable.
noProblem Yes, the team has tested the User model and controller. The testing is done using the RSpec testing framework.
noProblem Yes, the team tested one model and controller
noProblem They thoroughly tested CRUD actions of 4 controllers by using rails test and tested one modelÂ with Rspec.
noProblem yes one model and controller is tested.
noProblem Yes. There are ample number of commits to justify that the team has constantly pushed their changes to GitHub
noProblem Yes, the team was regular with their commits.
noProblem Yes, there has been constant commits throughout the project period. The commit messages enable us to easily understand the progression of the work. Most of the work has been finished well before the second review deadline. That shows that there weren't many changes done after the first submission.
noProblem Based on your GitHub commits,Â youÂ have been using your time wisely to slowly make progress on your project.
noProblem yes, the teamÂ made 53 commits to master, and each had their own branches to work off of.
noProblem Yes, the application has been deployed succesfully.Â TheÂ UI is well designed and easy to use and understand.Â The Readme file is also well written and contains helpful information.
noProblem The code in controllers and views are dry. No code that belongs a wrong file that they shouldn't be in.
noProblem code was concise and clear
noProblem code was well written following scfold , mvc architecture . all basic functionalities were seen to be good
noProblem looks good.
noProblem The user interface is very easy to use, you can have control of job seeker or recruiter at one time which is a good thing. Documentation has also been taken care of to some extent, there is required information
noProblem The UI design is uniform, easy to use and appealing. The team has used bootstrap for some of the UI component, which makes it look better.Â Also, there is a navigation panel on top to switch between parts of the application. Overall, great job on the UI part.
noProblem Names are intuitive and coding style looks good.
noProblem Comments would thoroughly help this project
noProblem existing tests pass after refactor.
noProblem Names all check out and read easily
noProblem Comments would improve the readability of the code
noProblem Couldn't think of any edge cases. Test pass for normal situations
noProblem Very clear how effective the refactor was
noProblem Only needed to show that your changes didn't break anything which you did perfectly
noProblem Used factory design pattern to simplify the refactor. Good job
noProblem There are no test cases mentioned. However, from the git pull request it may be that the project has to test cases. However, if it is present then the authors should mention it in the wiki or the readme
noProblem The python files use code that is very intuitive, I do not have any suggestions here.
noProblem 1. What isÂ kwargsÂ inÂ wpt/web-platform-tests/tools/webdriver/build/lib.linux-x86_64-2.7/webdriver/protocol.py?
noProblem The project doesn't use Ruby, but the style might also be applied here. The structure of their code seems to be clear for a reader who knows the language they use to understand what the code does.
noProblem The features seem to work exactly as described in the project spec. There seem to be no edge cases that can cause a failure of the work done in this project. As a result, most of the code in the pull request for this project seems to be relatively harmless.
noProblem Yes, the writeup conveys what their project's goal clearly.
noProblem The report was clear and adequately conveyed that the functionality of the team's work. After looking over the report, I was able to understand the mainÂ goal of the project and how the project aims to reach the goal.
noProblem I don't think the code needs to test something as from the pull request comments, it can bee seen that it is just an automation script, so i don't think any precondition is required in this project.
noProblem The "how" of this project is very well covered in the videos. However, there is room for additional explanation on why it was done the way that it was.
noProblem Yes, the reason why they design those functionalities is clearly explained.
noProblem As mentioned above, the Tests were already written. All the tests pass after the refactoring. So, the team has maintained that.
noProblem All tests are passed as per the screenshot provided in the wiki page. They have used rpec for testing which is good. I do not see any areas for suggestion here.
noProblem 1. In summary_ws_url, what is ws?
noProblem Some of the checks failed for the pull request. The code coverage has decreased byÂ 0.2%.In The team has followed good naming convention and classes and method names are indicative of their role or functionality.
noProblem The variables, methods and class names which the authors have used are self-explanatory. The authors have defined helpers which reduces the length of individual methods. This is a good refactoring practice.
noProblem Refactor automatic_review_mapping
noProblem The changes made by the authors make the existing code to be concise.
noProblem Good use of helpers.
noProblem Since there is no UI elements to be tested I ran RSpec on the refactored controllers and all tests successfully passed. Also the team has included screenshots of the passed tests which show that after refactoring the functionality of the application remains the same.
noProblem The functions of those two methods work as the original codes. They refactor the code without losing features.
noProblem As far as this project is concerned, since this was a refactoring project, I can see that they have refactored it properly and tested the code using rspec which shows that all tests have been passed which is good. I did not work on expertiza and I have not myself performed a test to see if this works.
noProblem Yes, the writeupÂ includes both problems and how they are gonna solve the problems. What's more? They include the files changed by them which is easy for a reader to look into it if they only got the codes instead of githubÂ pull request content.
noProblem The wiki is well documented and clearly indicates what functionality the work is related to. The project is based on refactoring and the team has briefly explained how refactoring works and what changes been made to the code files to achieve the target.
noProblem Yes, the writeup adequately and clearly explains the functionality of the project.
noProblem The write-up shows what needed to be done, what was done, and the results of doing it.Â This is a clear and concise approach to the project.
noProblem The wiki page is pretty clear as to what the project aims to achieve. What I really liked about the wiki page is that they have snapshots of what the previous worked looked like and how it looks after they improved it. This is really impressive as this gives a very clear and fast understanding of what you have worked on. They have also listed out the files that they edited which is really good. They have also explained what Review Mapping Controller is which helped me get an idea of basic functionalities of the code.
noProblem I would suggest adding more code snippets/detail to this section.
noProblem I believe they have extensively scanned the previous code and tried to improve the code.Â They have included the screenshots of the tests in the wiki itself which was apparent. However, I would do a screencast explaining briefly about the project and what a reviewer should expect.
noProblem Yes, they do explain why they do it that way. Also, they apply the dry rule to refactor the code.
noProblem Yes the writeup clearly explains how and why the authors have did the work they did. The team was supposed to use factory design pattern to refactor response_report method and the implementations for the same seems to be correct to the best of my knowledge for the same.
noProblem The factory pattern is used correctly.Â Also, what needed to be done and how it was done is also outlined.
noProblem They use factory design patterns, break up the long original codes and make it much more succinct. It would be better if they can add some diagrams to illustrate their work.
noProblem The writeup explains the reasons for the aspects the authors changed or introduced in their project. They have used the factory design pattern and the implementation is correct and adheres the principle of this design pattern.
noProblem They do not have to worry about design patterns here as they are dealing with only unit tests.
noProblem The authors were able to explain what they did in a clear way . they talked about using factories bot in the code .
noProblem All test cases have been converted as explained in the writeup. There is no way of testing them to know if they are failing, but looking at the code it seems that they will work just fine.
noProblem participant1,2,3,4 were good variable names when you were later comparing them with response12,21,etc You used good names for the context using the names of the method which are going to be tested.
noProblem colcyc' on line 15 could be better named but other than that the methods and variables seem to be reasonably named. They are suggestive of the functionality, cannot find any fault there.
noProblem The writeup is very good and they explained the cases very nicely. However, the pull request has not been accepted. I think even though the coverage has been increased the code lacks certain explanation such as the reason for the style of the code and approach.
noProblem Code makes good use of 'before' and similar statements to follow DRY.
noProblem Code seems to test edge and normal scenarios well.
noProblem The write up is pretty well documented. The write up explained what each method in Collusion Cycle is responsible for. The example located underneath Model Purpose,"Â For example, if participant A was reviewed by participant B, participant B was reviewed by participant C, participant C was reviewed by participant A and all the reviews were indeed finished, then a three nodes cycle exists.Â " was a good example what the class is made for.
noProblem Write-up is thorough, describing the code under test, describe the limitations and successes of the project, and is clear and easy to read.
noProblem The authors have put pictures up of the different type of test scenarios and have explained it well. They need to mention where the tests are in the project folder
noProblem The test plan in explained in great detail. The authors have mentioned all the tests they are performing on the model. Multiple cases are written for each function. They have also used diagrams to explain the various use cases, which is a plus point.
noProblem The test plan looks to be complete, considering this is a test case development project. Based on the wiki, the team has identified most of the test cases they need to deal with for each module that they are working on. This seems to be worked on well.
noProblem Extensive checks for nil and edge cases are described.
noProblem The writeup explains well what the tasks were through the 'Project Details' and 'Test Plans' sections. They provide a good description of what is required and what they have done and have included a testing plan to execute on the requirements. Since this is a test case building project, there is no requirement of any design pattern here.
noProblem The authors have done a great job explaining the tests they need to do and the test cases corresponding to the same. They have mentioned the test plan with detailed diagrams. They have written test cases for the various functions in the model.
noProblem The variables, methods and class names selected by the author are reasonable and clearly stand for the functionality they have been defined for.
noProblem Breaking up the logic into smaller methods in the controllers makes the code more readable.
noProblem For the code changes, the team have used proper naming conventions to name variables, methods and class names. They have ensured that the newly created variables and methods use the same style as the code that is already present in the relevant files. I felt that every named item in the code was self explanatory and the purpose of each variable/method was understood from the name. For eg, student_tasks is a list of student tasks. Hence I am giving a 5.
noProblem The methods are small, and follows the rails style guideline.
noProblem The author has not deployed the code and I believe it is due to some technical issue that most of the teams were facing.
noProblem The application has not been deployed.
noProblem The functionality has been adequately explained. From this explanation i have got a clear view about the project. They have given proper explanation of each of the issue which they have stated accompanied with the corresponding images for clear view of whats happening.
noProblem Yes. The problems specified did not as such require the use of any design patterns. The author mentions one task that has not been tested due to some issues with access to assignments page so apart from this everything else seems to be correct.
noProblem All the testsÂ conditions were mentioned in the spec file and all of them were implemented and tested
noProblem Code was very clear, diagram in the comments was helpful.
noProblem Yes,Â their unit test coveredÂ all methods in menu items model by testing 16 conditions.
noProblem Yes. They describe pre-conditions in details and show how they complete the unit test.
noProblem The tests provided in the wiki has been tested. The coverage has increased. The edge cases are mentioned in the wiki but can be added for round 2 submission.
noProblem Yes, the author has done a great job converting all of the discussed test cases into automated tests. Furthermore, the author has written strong tests that pass with 0 failures.Â Great job.
noProblem All tests are automated, as the projectÂ is a test.
noProblem Since they are writing unit test for a given model, there is little freedom to rename methods to classes.
noProblem The code looks very solid. The pull request was successfully put in to expertiza master.Â This PR was properly named with an easy to understand and descriptive title, as well as a short and to the point comment message.Â One thing that might be a nice addition here would be to attach the expertiza write up you did to the pull request.Â That way, reviewers can get a better idea of what exactly you are testing and why.Â With regards to the code, it all looks good and is well written.Â I would suggest renaming some of the variables though.Â For example, you created some "MenuItem" objects in your before(:each) method.Â You named these objects "test1, test2, test3, etc."Â This isn't very intuitive and descriptive considering these are items.Â Maybe consider renaming these, or adding some inline comments explaining what they are used for.Â Other then that, great job!
noProblem When combined with the documentation provided, sufficient detail is given to understand the workings on the code. There appear to be some unnecessary comments, but that is a minor issue. Overall, the code appears straightforward and easy to understand.
noProblem The tests are short and looks like it follows Ruby Style Guide
noProblem The code surely works but the before hook is too long, it defines @test1-6, @controller_action1-3 and @content_page1-3 but just 1 or 2 of them are used in each following "describe" block. I'd recommend instead of just using one before hook in the top, you may separate it for specific describe blocks.
noProblem The code is not too long. Some comments are required in the code to understand the flow of the code, but the description in the wiki helps to understand the structure of the code.
noProblem Code seems to provide substantial depth without having excessively long methods. It could potentially benefit from more edge case testing, however.
noProblem Yes, TheirÂ newly-added test menu_item_spec.rb runs correctly with 16 examples passed and 0 failure. Also in index.html, the coverage reached 100% for menu_item.rb which means their test have covered all cases in menu_item.rb.
noProblem Yes. The test file increases the coverage of the test.
noProblem The features work as intended. The edge cases is not mentioned in the wiki but can be implemented in the round 2. The cases mentioned in the wiki are well tested by the code.
noProblem All features work as intended.Â It appears that the author has thoroughly tested all test cases.
noProblem The description is so well-organzied and has all required steps. Easy to understand.
noProblem Writeup very clearly explained the need for their testing and how each test would help accomplish their goal.
noProblem The writeup is very well document. It is the best writeup among all the reviews given. They have mentioned everything that a wiki needs to have. I really like the images showcasing how to navigate to test the functionality of their code.
noProblem The authors have given a very detailed introduction to their project. They describe the Testing Process, Problem Statement and plan of work in great detail. The authors are required to add rspec forÂ menu_items.rb model.Â The explanation of the TDD process can be shortened and a Wikipedia link can be provided instead.Â The page can focus more on the project details.
noProblem The author has done a fine job with their project write up.Â They have done an excellent job indicating their projects functionality and purpose.Â Since the teams project involved writing unit tests, I really appreciated them defining and explaining the purpose of Unit tests in general before going into detail about what they were testing.Â This really helped me as a reader to understand the purpose of unit testing as a whole, and how it related more specifically to what they were doing.
noProblem The writeup is extremely extensive, covering every detail of background information, the project, the development plan, and even details on each unit test.
noProblem Yes. Their test plan is a clear outline for their work. They did not include those pre-conditions in the plan but they did that in their steps.
noProblem Yes. They explain their work with great details.
noProblem Yes they explained TDD and Unit Testing well. They also explained everything about the model they were testing very thoroughly.
noProblem The write up explains everything that the projects needs to work on. They have mentioned the design pattern they used and why. I don't think anything is missing from the wiki. section
noProblem The authors have done a great job explaining the tests they need to do and the test cases corresponding to the same. They have mentioned the same under "Testing conditions". They written test cases for the various functions in the model.
noProblem The writeup describes, in detail, the background of each method being tested, the test written for it, and why the test operates the way it does, in context.
noProblem Testing was not seen to be part of the requirements
noProblem As mentioned previously, I cant even find any code that was changed, so you should create a pull request or make it possible to see your additions.
noProblem Good rust practices followed. Functions are not too long, which is one of the important programming practice. The cognitive complexity of code is as per standards. In ResourceChannelManager method, there is no comment given on the changes made, add comments to understand whether the modification is done is by your team or it's existing. The team has made few changes as per the documentation given, so most of the code is existing and as per standards. However the code added by the team doesn't affect the standards fixed.
noProblem The team was clear in explaining what the project was about and what they were trying to do . It was explained underÂ Â Project Description section
noProblem It was difficult to get to the pull request. Having its name would help in easily identifying itÂ . I could see commits in the forked branch but , i couldnt get the corrospond pull request , so couldnt comment.Â Based on local forked branch commit information : names look intutive
noProblem A few lines were modified and they appear to be small and clear
noProblem The writeup was very clear and adequately describes the project they were responsible for. The writeup had detailed steps of what the team did. I was able to understand what the goal of the project was and how the project does what it does.
noProblem The writeup clearly explains how and why the authors did the work the way they did. clearly However, they had a numerous generic steps that are required before contributing ti any open source project. For example, one of the steps was: "Understanding the Servo Implementation." This is required for anyone contributing to Servo. As a result, it is unnecessary in the writeup and takes the readers attention away from the details of the contribution.
noProblem No tests were required for the initial steps of this project.
noProblem The entire code seemed to have built, and all the features work as intended. As for the edge cases, there don't seem to be any that are causing trouble.
noProblem As of right now, there is no mention on what they did.
noProblem All the tests return with a success and can run rspec on it successfully.
noProblem Yes they have converted all of their explained tests in the Test Plan into automated RSPEC tests. I can't test whether or not they fail, but I assume they do work due to the nature of them, though I believe they should explain on the website that they worked or not and show how they worked.
noProblem Yes. They have all the tests for all the cases. All of them passed.
noProblem The writeup of the project had provided a test plan with a few test cases covering both expected cases and edge cases. I was able to find corresponding test cases written in the rspec file too.
noProblem https://github.com/arunkrishce/expertiza should be linked, that is were I got your code from. The methods named question_max_score is not being tested, your only testing average_score_for_row method. The variables will look better is renamed from score to entry1,2,3. Name of classes and methods explain well on their purpose.
noProblem Do you think the name of "no_of_columns" could be changed to "no_of_nonempty_columns"?
noProblem Yes, the code written is short and concise and follows ruby conventions. The method name is descriptive of the function it performs and so are the variable name.
noProblem The function written is short and DRY. I cannot see a lot of repetition. However, i would like to suggest that in linesÂ Â Â "row_average_score /= no_of_columns unless no_of_columns.zero? Â Â row_average_score.round(2) these lines can be clubbed together using method chaining which makes the code more ruby like.
noProblem I was unable to test the authors code due to being out of time.
noProblem The explanation of their work is precise and clear. Especially with the youtube video, it is really easy to understand. Good job, guys.
noProblem The writeup is very descriptive. It clearly indicates the problem statement as well as the proposed solution. The screencast added is pretty descriptive and makes understanding this wiki really easy. The UI results after the change have been clearly indicated and are suggestive of the fact that the implementation was successful. I would suggest to include a screenshot of the successful tests to strengthen the wiki. Also it would have been better to add the original code along with the newly submitted code to the wiki to make it more descriptive.
noProblem Yeah. I think the authors considered different scenarios for testing this method. They covered all the cases (all null, all not null, and mix of both). I don't think there are input values for this method. Pre-conditions, if you mean @score_row instance variables, I think this should be tested in other places, not for this method.
noProblem The writeup has a separate testing section which mentions the new rspec file that was added and gives an explanation to the test cases added in the file. The precondition is to be logged in but precondition test cases were not written. Automated test cases were written for valid, invalid inputs and edge cases and screenshot of the rspec file was also provided. Although Automated testing was done properly, I don't find any steps to perform manual testing and hence reducing 1 point.
noProblem The write up does a adequate job explaining why the authors did what they did.Â It mainly focuses on the code though, and less about the explanation.Â I would suggest adding more of a written explanation to your wiki.
noProblem They haven't started working on this part.
noProblem All the new names for variables and methods are intuitive. Only one particular variable stood out to me, in db/schema.rb there is an additionÂ t.integer "simicheck". and im not sure what simicheck means.
noProblem The nomenclature used by the authors is self-suggestive and hence easy to understand the overall behavior of individual methods.
noProblem suckerfish.html seems like an interesting name but this was not created by this group.
noProblem Easy to understand and follows good coding practices.
noProblem For the code implemented till now, the functions seem to be of appropriate length. But since the work is still incomplete, the function sizes may increase in the future. The code follows ruby style guidelines properly.
noProblem for the requested task everything works fine.
noProblem This team has described what's the problem and how they solved them clearly
noProblem The explanation on the team's wiki page is adequate to get a person to be familiarized with the the project. Yes, i can understand what the project does.
noProblem Neat and clear explanation of the problem statement with separate section for the background information about expertiza is given. Added necessary screenshot of the code modified that helps the reviewer to understand the changes made. Code blocks are well highlighted in the wiki page, thumbs up to that. Good work team.
noProblem Yes i can get an idea of what the authors are doing from the documentation that they have presented. The team has followed good design practice. For example in the "tree_display_controller.rb", the items which are to be viewed by the user have been allowed to be viewed by segregating it into two different methods. This has simplified understanding of the design flow.
noProblem Did a good job showing what was changed and a reason for those changes.
noProblem Testing appears complete
noProblem Clearly states what the project does and how it does it.
noProblem Very thorough explanations as to what problems are solved and how they are solved. I have a very solid understand of what the project is designed for and how it operates.
noProblem No suggestions here, everything looks good.
noProblem based on the document and my understanding the code seems correct
noProblem The author has done a good job explaining what the project is, and what exactly it does.Â The step by step approach used by the author was really helpful considering this is a Mozilla project and not something I am familiar with.Â Good job.
noProblem The write up, while it explains what the authors project does, it doesn't really explain why the author did what he/she did.Â Â To be fair, the steps are well written in the project description and describe in detail what the author was doing.Â For this reason, it seems what the author has written is appropriate.Â Â Considering I don't really understand RUST or Mozilla, it is hard for me to decide if design patters are implemented appropriately.Â That being said, the code presented in the write up seems appropriate and well written to the extent that I can understand it.
noProblem The code itself looks solid to the extent that I can understand it.Â Once again, this is a Mozilla project and is written in a language that I have never deal with before, so syntax is definitely something I cannot judge you on.Â That being said, given my strong understanding of programming languages in general, it seems you have done a good job writing concise code.Â Given my limited knowledge of rust and the Mozilla project, I cannot really say whether or not some of the code should be extracted or not.Â From what I can tell, it is well written and as concise as possible, but it is hard for me to judge this.Â Â As far as I can tell, good job!Â Sorry I could not be more help in this section.
noProblem I am unable as of now to get the mozilla project up and running on my machine.Â This is not a shortcoming of the authors work, but just a matter of mozilla running on my computer.Â There for, I cannot really judge whether the feature works as intended or not.
noProblem The newly added code only includes changed migrations which corrects the error and changes Bookmark Ratings to BookmarkRating and thus there are no added variables. Therefore i would say all the variable names are spot on and depicts intent.
noProblem The write-up is well documented and the issues are elaborately explained. The problem statement is clear enough to understand. They have clearly stated what is achieved and also proposed solutions to the unresolved issues. Suggestion:Write up could include code snippets of the chnges that are made making it easy for the reviewer to follow the changes.
noProblem The changes made in the code are mentioned clearly with UI screenshots indicating the changes, making it easy toÂ understand as to why they are made. According to the problem statement no design pattern were required to be implemented. Out of the 3 issues given in the problem statement only 1 is achieved.
noProblem Very clearly defined what the issue is, what the problems are, and how they could be fixed
noProblem They explained each problem and what they needed to do in order to fix them.
noProblem The main changes were fixing the misspelling of Bookmark Ratings.
noProblem The bookmark ratings link works and the rest of the logic was in the already created questionnaire.
noProblem The code contributed does not have any of the mentioned problems.
noProblem Upon manually testing, the issues are fixed as explained. Testing through UI was easy as the steps have been clearly mentioned in the document.
noProblem The writeup was well written. It clearly explains the problem statement, the subproblems, the proposed enhancements to each subproblem, the files added/changed and how to proceed with UI testing. Some screenshots were also provided which helped me in understanding the problem statement properly. From the writeup, I could easily understand what the team was trying to achieve. Overall, it was written in simple, easy to understand manner and hence I am giving a 5.
noProblem For all the code changes, the team have used proper naming conventions to name variables, methods and class names. They have ensured that the newly created variables and methods use the same style as the code that is already present in the model file. I felt that every named item in the code was self explanatory and the purpose of each variable/method was understood from the name. Hence I am giving a 5.
noProblem By reviewing the code, I made the following observations: 1) None of the functions are too long; they are all around 10-15 lines each and good modular approach was followed.
noProblem Rspec code was added for this purpose and the names / formats were clear
noProblem The work they have done is completely related to testing, so there was no check needed for features, but in case of testing they seem to have done a good job
noProblem The code seems to work just fine. All the requirements seem to have been covered.
noProblem Rspec was run on the code and tested . All the cases seem to be passing
noProblem The code seems to work fine and test cases seem to be passing
noProblem The write up was clear in explaining what was the task at hand and what was to be done . It clearly wrote in the motivation section on what is expected fromÂ collusion_cycle.rbÂ testing
noProblem As of now, with the deployment problems, I am unable to test the author's work sadly.
noProblem The test plan in explained in great detail. The authors have mentioned all the tests they are performing on the model. Multiple cases are written for each function.
noProblem All the test cases seem to have been covered which was mentioned in the test plan,itsgood that invalid, valid and nullÂ test cases inÂ have been taken into consideration.
noProblem Yes. They follow the steps and convert everything to code.
noProblem The team has converted all the tests covered in the test plan into automated tests. They have rigorously tested every aspect that they were planning to test.
noProblem The code mostly deals with testing the code, thus there seems to be very few or no variables being involved
noProblem Since it is a unit test for a given model, there is much space to rename methods and classes.
noProblem I couldn't find their pull request so it hard to know if the test coverage has increased or not. The naming convention is easy to follow and is per the functionalities. As there is no pull request I can comment any further.
noProblem The variables are all necessary.
noProblem Since the code is the test file it does appear that the test classes pass on my local machine.Â I cloned the repository and all the tests passed.
noProblem Yes. They have completed the test and the coverage increases.
noProblem The code works fine and all the features are properly implemented. The features do work for all the edge cases. Everything is well implemented.
noProblem (NOTE): I was unable to find the PR, these results are from their fork Â The tests appear toÂ pass with 100% coverage, as listed.
noProblem Yes, the Wiki introduces the functionality of the work related to.
noProblem Perfectly well-organized with lots of details.
noProblem Project write-up has clear background, plan, implementation, and review material.
noProblem i think they make a pretty good wiki page. They explain their task purpose and test plan well. They introduce the 7 functions in the model and their corresponding test plan in details.
noProblem Yes, it does.
noProblem The wiki does explain how it tested all possible scenarios in the Testing Conditions section. Based on reviewing the code I found that all conditions were covered. The test plan for this does appear complete, and if the implementation follows this test plan it will test all conditions.
noProblem The project is about testing the project, and thus it naturally includes test plan. in each test case there is mention of valid and null cases which makes it clear that they have made a good check of corner cases
noProblem Yes. The plan is easy to follow. They did not include any specific pre-conditions in the plan but they did in their steps. That is a nice arrangement.
noProblem The test plan seems to cover almost all the edge cases which is nice. The team has very scrupulously tested the model which is commendable.
noProblem The test plan looks to be complete, considering this is a test case development project. Based on the wiki, the team has identified most of the test cases they need to deal with for each module that they are working on. The wiki says they have completed 13 test cases. This seems to be handled well by glancing at the writeup.
noProblem The tests listed test an extensive amount of edge cases and invalid values, and are extremely thorough. This can also be seen in their 100% line coverage achieved.
noProblem They give a very detailed test plan including all the possible situations.
noProblem Variables names, methods, and class names look good!
noProblem As it was a unit testing case , most of the conditions were in plain english and followed the boiler plate criteria . Everything was intuitive to read through
noProblem There is no Test plan included in the documentation. But the contributors have done a lot of Testing though missed a few which are mentioned.
noProblem Most of the variables and methods created are named reasonably and are suggest the functionality of the variable. The code written follows ruby conventions.Â Suggestion: for some variable names in order to make the code ruby like they can use snake_case for variable names.
noProblem They authors have made their intentions and approach very clear in the documentation and how they would approach the problem and what sort of tests they would be conducting, the plan of work gives a detail about what the steps are and the testing functions gives a nice idea about each case.
noProblem Yes. They have illustrated the requirement and present their work with great details.
noProblem The writeup explains well what the tasks were through the 'Problem Statement' and 'Plan of Work' sections. They also provide a description about the modules that they have worked on and have included a testing plan to execute on the requirements. Since this is a test case building project, there is no requirement of any design pattern here although they provide information about BDD which is good.
noProblem Writeup clearly explains the background forÂ why the authors took the paths they did,Â how they implemented those, and the results are clear and easy to read.
noProblem The developers are dealing with Test cases and thus their plan of action necessarily includes test cases, based on the code i came across, i would say they have considered almost all the cases.
noProblem The test case written, on_the_fly_calc, fails. Details from the failure (From the Travis build) are below: Â 1) OnTheFlyCalc#scores when current assignment does not vary rubrics by round computes and returns scores Failure/Error: score_team[:scores] =
noProblem The document was clear on what the problem statement was and how it was to be done . It was a unit test to be written for on the fly calc model . it was clearly conveyed
noProblem There is no explicit test plan section. Hence, it is difficult to know what all cases the team has taken into account. Test for invalid inputs could have been implemented.
noProblem I clearly understand. The writeup explains everything.
noProblem Yes, the authors have explained how they tested the functions in the model.
noProblem All the test cases authors have provided seem to cover all possible scenarios. Since the objective was objective was to achieve 90% coverage, they did that and left 2 functions untested.
noProblem Yeah. The work is well explained. They included their implementation, testing, and what needs to be done in the future.
noProblem Testing is documented in details. And all the cases are tested. Good job.
noProblem All the functions have the reasonable length. Codes are well written and easy to understand. Great work.
noProblem Yes. They did a great job in testing.
noProblem The selected variables, methods and class names seem reasonable and are suggestive of their functionality. Cannot find any major errors or problems with the naming conventions used.
noProblem Automated tests seem to be thoroughly done.
noProblem The features work as explained in the document. It was easy to test through UI as the steps were clearly mentioned in the document.
noProblem I think they have done a pretty good job at the writeup. I do see a lot of improvements compared to the time when I first reviewed. There were regular commits which shows they have been working in a timely manner. They have added details for testing along with steps and description of each of the steps. They did have screenshots showing that the test cases are passing in the last round of review and the suggestion was to work on screencast, which they have done nicely. They tried to explain their improvements and showed step by step testing.
noProblem Overall, the code seems to be well made. None of the functions seem too long (even though the execution time of one function is unnecessariluy long due to function that manually 'sleeps' for 60 seconds and then checks for a reply back from Servo). Â Most of the code seems to be concise enough to not split them into additional functions. The team also uses comments when needed. However, as someone who is not familiar with python, I would have appreciated a little more 'line by line' comments that took me through the code.
noProblem The code is extremely well written by following good coding practices The code does not have DRY principles.
noProblem The code was committed very frequently.
noProblem Yes, the team wrote test cases that were very extensive and it handled each of the scenarios in theÂ collusion_cycle_spec.rb file.The test coverage also increased.
noProblem The code has checked the edge cases, the functionality works as expected.
noProblem The writeup is extremely good. This is one of the better writeups , I have seen. Each of the headings and future work to test description is extremely intuitive and helpful for any reviewer to review.
noProblem yes, the code can be deployed to production as-is. The project can be taken forward by any team and they can implement their future functionality seamlessly.
noProblem There are no conflicts that need to be resolved.
noProblem Not really possible to tell, again, Mozilla project. It doesn't look like it, though.
noProblem Irrelevant to this project because the initial steps are too small to test.
noProblem No new code added in the second round.
noProblem Well written code.
noProblem Yes. The code runs perfectly.
noProblem No new tests added. 100% coverage achieved in the first round itself.
noProblem Well written wiki page. Covers all the topics I would expect to be in the wiki page.
noProblem Yes. There seems to be no issue with the code and I think it should be good to be deployed onto the production server.
noProblem The code was good and well written. few modification to the names could have been done while naming the dummy objects
noProblem 27 cases were seen to be written and all of them passed based on the understanding of the tests .
noProblem This is a testing project and all the test cases seem to have passed now .
noProblem The write up is pretty impressive . The team has done a good job in describing all the functions and the tests
noProblem The code / work seems to be done complete and could be deployed onto the production server.
noProblem There were lots of commits! The commits seemed to only fix one thing and one thing alone.Â It is very easy to read through them and see what exactly changed (from the description).Â Good job committing small changes rather than lumping them together like most group have done.
noProblem Passed the Travis Cl.Â Also thanks for linking the pull request.Â I sometimes have had to search for it.
noProblem The team completed all test cases and increased the coverage to 100%. Based on the coverage being brought up to 100%, documentation, and youtube video, it seems that you have covered everything you were supposed to.
noProblem The youtube video clearly explains the test cases and shows that they all pass.Â Additionally, it shows that the coverage is at 100% (clear proof).Â I really liked how you explained your test cases in the youtube video.Â It made it much easier to understand.
noProblem Yes! It is a unit test that has 100% coverage and has been proven to work.Â It definitely belongs in production.
noProblem The write up is good, and provides ample explanation, the video is amazing and explains everything very well. They have understood the problem defination well and they have given proper justification for what each test is doing.
noProblem Yes the code is production ready, just mint minor concerns will have to be looked into like spacing and similar block etc, the problems which are specified by code climate, rest everything is done great
noProblem The testing video does a amazing job in telling what the test cases were and it explained it well what the test cases do and very well explained video was provided.
noProblem Yes the test coverage has increased by 0.8 percent, which is quite a good job.
noProblem Yes there are a number of commits after the last review
noProblem variable naming conversions has been taken good care of, DRY code is something they have paid good attention to and they also mentioned the same in the video, the comments even though absent the describe part of the test cases does a good job in describing it. Overrall a very well structured well though of code.
noProblem The code seems to be well written and naming is well done , I feel that the code has improved a lot more than it was in round1.
noProblem New code was committed in the 2nd round, but not too much. There was a good amount of deletion however.
noProblem The new commits came in a single day.From the looks of it, the team would've benefited by making more commits early on in the week.Â The feedback they would have gotten from Josh would have been very useful for getting the team's contribution merged with Servo.
noProblem The video was very helpful. The operation of this is very well explained and UI does exactly what it should(since you know what to expect because you watched the video)
noProblem It seems like the code does the work it is intended to perform, The project was split into two parts and they seem to work well.
noProblem There was no specific user interface for this project, other than a blank web-page with different styling throughout it. However, the web pages that are made seem to be randomly rendered, which was the point of this project.
noProblem The dynamic web page functionality appears to work. I followed the directions provided in the doc and the scripts seem to have worked fine.
noProblem The code is pretty good. Since it is an automation script, it will likely be accepted. By looking at the comments on the pull request I can say that there is a good chance it will be accepted.
noProblem It seems like the objectives of the project were not met fully. In addition, as a Mozilla reviewer also pointed out, the code style and readability are not optimal. In addition, the structure of the code (e.g. extracting functions from longer ones) will require attention. Overall I think the team is on the right track and this is a good starting place for a future team to pick up (as long as the code stays readable!).
noProblem The team did a good effort to develop the project. The primary purpose of the project has been achieved. however, a lot of the process is manual rather than automated. Like generating the random webpage manually. instead the random webpage can be generated directly in the browser when triggered. This could be a better solution to the project.Â These along with some other changes could make the project ready to be deployed onto the production server. The project need not be redone from scratch instead it could be enhanced to make it better.
noProblem The writeup is neat. However, they can add more information to the writeup to make it more verbose. Rest is pretty good.
noProblem It appears that the team added a few test cases. I was able to observe the presence of various types of exceptions for a good amount of functionalities, so it is apparent that the new functionalities that team implemented were tested in some way. If not, the possible errors were in mind and the appropriate exceptions were created.
noProblem Since it is a mozzila project, i dont think coverage is required for it.
noProblem Since it is a Mozzila project I feel the test cases were not required as part of this project.
noProblem Manual testing was explained and everything checks out
noProblem Great. Lots of comments for the conditions.
noProblem My biggest issue with the code was the lack of comments which were added. The comments are great and I appreciate the numbering that you used since it is described in the wiki. Great work!
noProblem The code seems very well written, modules are small and clean, every module has well defined comments and small, in the previous stage I did mention about comments which i can see have been added
noProblem The code is well written and follows good rails practices. It is easy to follow with naming convention used clearly defining the functionality.
noProblem Code is easy to follow, well documented, and simple.
noProblem i didn't find problems for their code last time. and this time they add the image to show 100% coverage of their test.
noProblem Not much.Â But they did a good job on first round.
noProblem I placed this as a relative measurement. There were only 2 commits since the first feedback so I hesitate to give more than three stars, but at the same time, it is clear that there was not much work that needed to be updated from the first iteration. The work done here is solid so I will give it 4 stars since there is not much that needed to be updated.
noProblem Its is not dry used let to reuse code as well as before(:each) statements.Â The code improved as well as new code has been added to test more scenarios.
noProblem The team did aÂ great job covering all of the model's functions. There are no DRY problems in the code, all the objects and behaviors that are common within the tests are created in the right positions. The code is easy to follow and read, with no long lines.
noProblem Yes, the code is well written. The code was written well originally so no new significant changes made.
noProblem Code is well written, naming is done well and it is well dried up, The authors have been able to achieve 100% code coverage which is brilliant.
noProblem The code submitted is well written. It follows the ruby style guidelines and proper formatting. The method names also seem to be proper. The authors can add a few comments to describe the code which will make it better.
noProblem The Ruby guidelines have mostly been followed. There seems to be no issue there. No function is longer than necessary. This follows what was seen in the first review. They have also fixed the issue of having no comments and now it is pretty much how it should be. There are some issues that CodeClimate has detected that the team could work on.
noProblem The wiki page is very informative as to what the project wishes to establish. Rest the code needs some comments to understand the flow of the code. The authors didnt check round 1 reviews. The authors should look at the reviews and do the necessary changes.
noProblem Code is well written andÂ sufficiently commented
noProblem Code is very extensive, covers a wide array of testing scenarios, and is DRY.
noProblem Yes. The team added comments to their tests cases which made it easier to follow the code.
noProblem yes there code has been updated after the 1st round
noProblem There was just one commit since the last round which mostly just included adding comments to the code. Since most of the work was done in the first iteration itself, there wasn't any need for more commits. Good work!
noProblem 1 commit was made after the first round adding comments
noProblem They had implemented all the tests with the first submission, and the coverage had reached 100% also with the first submission. They added comments with the second one.
noProblem New tests have been added which cover the deviation scores of the different nodes more better by making it less DRY. The coverage is already at 100% before and won't increase.
noProblem Yes the team has added test cases and the coverage has reached 100% which is the maximum that can be achieved.
noProblem The team has added extensive test cases for the scenarios required in the project. The code coverage has increased by 0.8% as seen in the pull request (coveralls). This is a good indicator that the tests are actually helpful in these cases.
noProblem Based on the wiki, the team has identified most of the test cases they need to deal with for each module that they are working on. They have converted the same into code and this seems to be working well since the test coverage has increased as well by 0.8. They cover most cases that I can think of.
noProblem Test cases managed to cover 100% of the code
noProblem Coverage increases, tests pass, are extensive.
noProblem The project is a testing project and it covers the important all the scenarios and I can see when dealing with 2 nodes and 3 node cycles and similarity and deviation scores. They cover all the public methods.
noProblem All of the test scenarios are implemented. The team did an excellent job.
noProblem Yes, the test cases seem to cover all the scenarios and corner cases.
noProblem The code seems to cover a lot of cases, cases such as when reviews are null have also been included and scenarios where node count varies is also taken under consideration.
noProblem The authors have provided a screencast of their project. They describe the various aspects of the tests in the screencast. The tests seem to pass in the screencast. The tests are extensively written and seem to cover all scenarios.
noProblem All test cases have been converted as explained in the writeupÂ and the team has implemented this in code as well leading to an increase in test coverage. There is no way of testing them to know if they are failing, but they have provided a screencast of the code which was useful.
noProblem 100% code coverage was achieved when the project target was 90%
noProblem The writing is very well detailed as well as I liked that they have snipits of their code added in it as well as pictures to describe the process. It was helpful that they explained what each method did.
noProblem The write-up doesn't look changed since the 1st submission. The team gave clear details explaining what the model collusion_cycle is responsible for, what functions it holds,Â consequently giving the description of corresponding tests on every condition of each method.
noProblem Very well written and explained in the wiki page.
noProblem The writeup has also improved a lot and they have explained cases with diagrams and have done a really good job of explaining the functionality of their project.
noProblem I really like the way they have written out their writeup. It is detailed and has relevant headings/sections providing a good flow and readability to the user. The use of images for explanations is really helpful. They provided a video as well since the first iteration which explained about the collusion cycle which was really helpful. Overall very well done.
noProblem This is by far the best writeup for OSS projects I reviewed. The fact that the authors have added charts to make us understand different test cases is brilliant. During round 1 itself their wiki page was up-to date. As per my understanding wiki is perfect.
noProblem Wiki page is well documented and the write up is explanatory. Diagrams have been used to enhance the understanding of reviewers
noProblem The project should be deployed since there were no testing done before, and some of the scenarios are pretty important which the team has covered. All the tests seem to work as they should, as well as all of them pass. It has a coverage of 100%.
noProblem The team's RSpec tests are well-written to check all of the functionality of the collusion_cycle model. Since all tests pass, the model code is ready to be deployed.
noProblem Does not seem to have any issues.
noProblem I feel that the code is ready to be deployed as the test cases seem complete and the team has approached the problem correctly.
noProblem I think the code is ready to be deployed. The only thing that the authors need to do is to make the code climate fixes. The code increases the test coverage and should be a vital addition to expertiza.
noProblem The code definitely looks like it can be merged with the production server. My only concern would be to fix the Codeclimate issues as much as possible since it's a good practice to follow conventions so that future implementations will do the same and keep the code clean.
noProblem The pull request was not accepted which implies there are some changes required by the authors to be done. As a reviewer I believe if the authors added more comments it would be better for the code admin to understand the flow and then add the committed code to master branch.
noProblem Code seems to increase code coverage for the entire product and can't cause any side effects.
noProblem Code is extensive, easy to follow, and increases test coverage.
noProblem The build did pass in Travis CI. There is no problem with it.
noProblem continuous-integration/travis-ci/prÂ â€” The Travis CI build passed
noProblem Passed in Travis CI
noProblem Yes The build passes in Travis CI and looks ready to be merged with the main project.
noProblem Coverage has increased which is a good thing. Also, the build has passed but code climate check says fixes required. There was no conflict present.
noProblem The build passed in Travis CI
noProblem The emphasis of the project was refactoring two methods and looking at the work done by the team it is clearly visible that the size of the methods which were to be refactored has significantly reduced, thereby proving that the team has done a good job. As far as a naming problem regarding a variable "count " that was suggested in the first round of the review has been successfully fixed by the team.
noProblem The code is well written and comments have been added for understanding the code. The refactoring has significantly reduced the length of the existing code.
noProblem Names are very well defined. Refactoring really impacted the look of this code. Good job!
noProblem Yes there has been a significant number of additions to the code for the second round.
noProblem An entire helper method was written in the second round. This shows that significant work has been done. The team has properly divided the work during the timeline. However, only two out of the three team mates have committed to the repository.
noProblem Yes, the new code was committed during the 2nd round as well.
noProblem Yes the team has added new test cases and the pull request shows that there has been a 0.2% increase in the coverage. The newly added tests seem to coverÂ almost every aspectÂ of the project.
noProblem The coverage has increased. In the last review, due to lack of test cases, one of the controller was not achieving full coverage but it is now. The newly added code has taken the total coverage to 7.07%. The response_report and review_mapping controllers have all the tests pass.
noProblem Added many tests that pass and increase coverage.
noProblem Yes, after refactoring all the functionality works correctly.
noProblem Th team has not deployed the code and so, I cannot manually test the functionality. However, they have included a screen capture of the testing and all the tests have passed which is indicative that the functionality is achieved, given that the existing tests were exhaustive.Also, the screencast video shows that the functionality works.
noProblem As this is a refactoring project, the features are working as expected.
noProblem Couldn't think of any edge case so it seems that the tests do a good job covering the functionality of this project
noProblem There were not many problems with the writeup in the first round of the review and the team has added some content to the writeup which describes the newly made changes to the project. Overall the writeup is well written.
noProblem The write-up is concise. The project has been explained in details with comparison between the existing and the new code. The UI has been explained so as to see the functionality.
noProblem The write-up is great.Â Complete with examples and screenshots.
noProblem Very well written and very obvious how much of an impact the refactoring had.
noProblem Yes, the code is ready to be deployed as it works as expected. The refactoring, which was the goal of the project has been done very well and is achieving good coverage.
noProblem This affected the functionality none and increased the readability a lot. This should be deployed immediately
noProblem Yes the build passed and there appears to be no conflicting files present.
noProblem Passes the Travis CI build.
noProblem Not sure about the specific code contributions
noProblem The code seems to be complete and well written . The variables names seem to be logical and correct
noProblem Yes, they committed several times between the two submission dates.
noProblem The team added tests for controller and models file . The primary aim of the project was not testing , but the tests were seen to pass
noProblem Yes, the team has done a good job implementing the required functionalities. From the GithubÂ Data snapshot, it can be seen that summarization of the number of github commits,deletions per user is clearly visible.
noProblem From the screenshots provided, it is seen that, data is extracted from the pull request. With the new api, we cnaÂ specify what data is required. So the feature is well implemented.
noProblem The writeup was well written. It clearly explains the problem statement, the previous design, the proposed design, files added/changed and the test cases included. Some screenshots were also provided which helped me in understanding the problem statement properly.Overall, it was written in simple, easy to understand manner and hence I am giving a 5.
noProblem There isn't too much code to review, but I think they could have used a style that was more DRY. They continuously name the same variables (score1, score2, score3, ... scoren) where they could potentially put them in a before(:each) block and eliminate the need to use up all that space. The expectations are done well, but setting up that code in a more DRY way can be very useful and just make the code more manageable and easier to understand and follow. Other than that, they do have the situations labelled well as to distinguish specifically what each test does.
noProblem Modification were made to theÂ vm_question_response_row file . added code was seen to be clean and as per guidelines
noProblem The code was well written with proper naming conventions and modular approach was followed. I can see that no new changes were added after the first review, so I'm going to repeat my earlier comments that apart from a couple of comments in the model file, I couldn't find comments anywhere else, especially in the rspec file where they have made a lot of changes in their different commits including the hex codes.
noProblem No new tests have been added by this team after the first submission. However the tests written for the controller method are pretty extensive. I cannot think of more cases to be tested. The overall coverage has increased by 0.1%.
noProblem No new test cases were added inÂ the second round. But the team has tested the functionality. The overall coverage increased by 0.1%.
noProblem This project is a testing project and it does cover all the scenarios that I can think off. The it methods are descript enough I can understand what is being tested. All the different combinations of values,nills, and zero scores have been tested. All the tests pass.
noProblem Yeah. The modified feature works as intended.
noProblem The team has not deployed the app and thus cannot test the added feature manually. However, the author has included a screencast and a screenshot of the Rspec tests showing zero failed examples. These are indicative that this team has successfully implemented the mentioned functionalities.
noProblem Youtube video shows the case of fixing the issue of scores not being correct
noProblem The code has not been deployed but the team has included a screencast and screenshots of the test passing which is evident that the intended functionality works.
noProblem Manual testing for the project works fine and the average score is calculated as expected and mentioned in the document.
noProblem The writeup is well written. And it is easy to understand. The youtube video makes it way easy to understand what their work was.
noProblem Write up was seen to be complete and full as per my set views
noProblem The writeup written is quite detailed. The authors have included a detailed explanation about the problem, and also the proposed solution. They have included the code snippets and screenshots of the test passed. All this makes it easier.
noProblem Yes. It could be used in the production server.
noProblem Yes, i think the code could be deployed
noProblem The code seems to be ready as there were no issues with the build. The implementation is complete and works as intended. So it can be deployed.Â The approach they have used seems to be good and hence can be used by the future team.
noProblem I feel the only areas where the team has to improve are in fixing the code climate issues and in adding more comments. Otherwise, code and test cases are well written and everything is documented properly, so it need not be done from scratch.
noProblem It passed the Travis CI there is no conflicts which need to be resolved.
noProblem The build did pass in Travis CI. There were a few code climate conflicts about a few of their methods, but to be honest I don't consider this a serious problem, since in other aspects of the code in the project, there were pretty large methods that would have definitely failed the same checks.
noProblem The build passed. And there was no conflict.
noProblem Yes, the build successfully passes. There are no conflicts of the author's branch with the base branch. Some minor code climate errors persists.
noProblem Yes the Travis C! test was seen to have paassed
noProblem This team did a great job implementing the new Student view. I didn't find any DRY problems. The namings are in accordance with theÂ coding conventionsÂ forÂ Ruby.
noProblem The updated code is well written. The authors have included additional comments which ease the understanding of the code structure.
noProblem The code is very well commented and it is very easy to know what code was changed, and what the changed code does.
noProblem 1. The code is very well written and comments are well explained 2. modular code
noProblem The code seems to be written very well. There does not seem to be much/any repeated code.Â In addition ruby style/syntax is followed properly. Good job!
noProblem 1. The code has comments and is very well explained.Â 2. Since last review the authors have considered helper methods.
noProblem There are new commits since the first submission.
noProblem Yes, some amount of code was added during the second round.
noProblem Six to seven commits were performed during the second round. There were changes in the code and comments were added.
noProblem Code was indeed committed during the 2nd round.
noProblem latest commit was made 2 days ago
noProblem There were several commits made throughout the resubmission period.Â I like how even though you did not have too much to change during round 2 you still split up the commits to many different ones.
noProblem Yes new code was committed during 2nd round which was accepted as seen from the pull request.
noProblem The team's job was to test 2 cases:Â whetherÂ AssignmentsÂ andÂ Course EvaluationÂ are hidden when in instructor view andÂ whetherÂ Manage contentÂ andÂ Survey DeploymentsÂ are hidden in student view. Both cases are covered by manual and automated tests.
noProblem Since the code was not about testing, I dont think coverage needs to be increased, but since the pull request is accepted it looks like they need no testing, and the work is complete from their end
noProblem The team manually tested it and also provided 2 pieces of code that also test the code.Â Overall, I think this is enough testing for this project. The main goal was to get it working and not exhaustively test everything.
noProblem Since the project was not about testing i dont think coverage has to increase. Since the pull request is accepted it looks like there is no requirement of testing. However, they have mentioned it in their wiki page that there is an automated test for it.
noProblem They did recorded a screencast showing that the system operates well under their changes to the code. But I wish they have added the deployment link, so I could test the UI on my own too.
noProblem The UI works as expected. Detailed screenshots and description given on the wiki page made it easy to review. On switching to student view, the items of student view are displayed and there is revert to instructorÂ view.
noProblem As I followed the instructions outlined in the Wiki, the UI changes that were expected to be seen showed up. Great job! The Wiki should outline a few more features and expected outcomes, as this provide a clearer picture of what changed from a UI sense and what can be tested. Overall, the functionality seems to work.
noProblem The code works as intended to. The authors have used helper methods to make the code modular
noProblem The authors have shared a screencast of their application instead of live deployment of code. From the demo shown in the screencast, it appears that the authors have implemented the required feature.
noProblem While this seems to be working (video proves it).Â It would have been nice to have the app deployed.Â The video shows it is working for 1 or 2 cases but if I could have manually tested it I probably would have tested it for a lot more scenarios.
noProblem Yes the code works as intended. The authors have considered the idea of using helper methods from reviews. The project fixes code and as it is accepted I can say the work done is good.
noProblem Everything works as expected and shown in video
noProblem The write-up looks good. They gave clear details and explanations what the problems were, they included the code that was changed and addedÂ to enhance the functionalities for the project. They also addedÂ walkthroughsÂ forÂ tests.Â One suggestion thought to improve the look ofÂ the wiki page is to use the same style forÂ External Links and References as for the background (like, [http://expertiza.ncsu.edu/ Expertiza]).
noProblem The write up is detailed, and addresses issues presented prior. In addition, the doc includes pictures, which is crucial for this project since it required major changes to the UI. The team also utilized the code snippet feature of the Wiki, which made it very easy to understand the context, purpose, and details of code changes and test cases.
noProblem The write up is very clear and well explained
noProblem The write-up is sufficiently well written for the given problem statement. The have all the relevant sections included in the write-up. They have also explained their code in the write-up.
noProblem The w
noProblem The writeup is very well explained. The fact that they have added images makes it more informative and understandable. Since last reviews the authors have made good changes to the wiki.
noProblem The authors do a great job of describing the project, what exactly they did, and how to test their changes.
noProblem The code is complete and it works. I think it's ready for the deployment on the production server.
noProblem The code is very readable, the test plan seems solid, and the UI clearly works. However, I believe that a few more specifications for the "Student-view" should written up, implemented, and sucessfully tested. Given this, I think the project is in currently in a good place for a future to team to pick up and improve.
noProblem The ocde is already merged from which I can conclude that there are no merge conflicts and is very well written
noProblem While it seems that everything is working I think more testing is needed to prove everything works and nothing breaks.Â Assuming there was more testing I do think that it is ready to be deployed.
noProblem There are no build fail errors and merge conflicts. Since the pull request was already accepted I think the code is ready to be deployed. I still feel the code needs more comments to understand the flow of the code.
noProblem This is a pretty straightforward add. I think it could be deployed easily with no issue
noProblem Yes, the build passed the Travis CI.
noProblem All checks passed and has no conflicts with base branch. The Travis build also passed. There are 0 code climate issues
noProblem Based on the details from the pull request, the Travis CI build passed, the CodeClimate checks passed, and there are not conflicts that need to be resolved.
noProblem there were some conflicts initially which were resolved in the second round The code is accepted which means that code is well written
noProblem Yes, the build passes for the pull request. The authors have also made code changes to resolve conflicts.
noProblem Everything is working with the pull request.Â The build passes in Travis Cl.
noProblem There were conflicts which were resolved by the authors. The pull request is accepted by the code admin which implies the work done is good. There were no build failures and no conflicts in the pull requests.
noProblem Everything Passed
noProblem Yes. It works as intended.
noProblem Yes, it says that 20 commits were added between the first and second submissions, which is good that it basically means that functionality was improved.
noProblem Yes, the code was regularly committed.
noProblem Most of the code has been implemented in the first round with lots of refactoring and modifications done in the second round. There are lots of commits made (40 commits) which shows they have been pushing the changes then and there to the master.
noProblem Yes, a good amount of commits have been made in the after the 1st round.
noProblem Yes new code was committed during the second round.
noProblem Lots of new commits were made since March 29th.Â Most of these commits were either refactoring commits, or small changes to already existing code while the rest were new code added in wereÂ towards their sample submissions views and controller, their student tasks views/controller, andÂ their database.Â While I didn't review your work for the first round, it sounds like you all got a lot of work done and your final submission deadline was just wrapping up anything you didn't get done from the first submission.
noProblem The sample submission link and functionality seems to be working. This is not a testing project rather an implementation project.
noProblem Everything seems to work well.Â I did not exhaustively test everything (probably out of the scope of the review) but in the tests that I ran everything worked.
noProblem I am not quite sure about this. One thing is, for an instructor to select past assignment as a sample, it seems like all the assignment with valid course id would all show up in the list. Does this mean every instructor would have accesses to all the assignments in the database? Is this an issue or my understanding is not correct? Another thing is, could we improve this by providing a search function to search relevant assignments not listing all the available ones
noProblem All checks seem to pass the travis cl.Â Good job!
noProblem The pull request passes both Travis CI and code climate with no issues. Several commits went into fixing code climate issues after the first submission, this was something the team put a lot of effort into. great work
noProblem I did not find any merge conflicts.
noProblem My only hesitation with saying that it is ready for production is that I don't know the result from the tests.Â I am assuming everything passed and if that is the case I would say it is most likely ready.
noProblem The team has made good commits for the 2nd round which indicates the team has been actively working on improving the project. There were 8 commits for the second submission.
noProblem The code is well written and organized. Some of the naming conventions of the functions have been improved from the first submission. Some part of code require comments to better understand it. While team has made a good effort in making comments easy to understand and makes it easy to walk through the code. The authors improved the code when compared to first round. However, regarding some procedures there can be more DRY way to do it like for the test four_node_cycles and others.
noProblem Yes new commits have been made in the round 2.
noProblem The deployed version works as intended.The tests that are written seem to cover all the scenarios I can think of.
noProblem Yes, there are many commits after 1st round.
noProblem Yes, they included new test cases, and they also suggested further testing required. The coverage increased. I think the newly added tests cover well for this project.
noProblem Yes. It works very well.
noProblem The writeup is very detailed and easy to understand. Good job.
noProblem Yeah. Maybe after resolving the conflicts, it is ready to be deployed.
noProblem Yes the team has added new code during the second round.
noProblem The application was deployed on the Heroku server and it works correctly.
noProblem Yes, there are multiple commits in second round.
noProblem More test cases have been added.
noProblem The project works as intended. Project has been deployed on Heroku, which made testing much easier.
noProblem Screenshots, code snippets have been added in the writeup now based on given suggestion.
noProblem The team's work looks good. They added all modified files in their write-up , which helps in checking the actual code.
noProblem The team added test cases forÂ topic_suggestion_spec.rb. The file covers all possible test scenarios.
noProblem Their task was to add new features when managing topics. The team implemented the ideas that were provided by the instructions. The teamÂ gave great instructions step-by-step on how to test the system from the UI.
noProblem They did an excellent job. They gave clear details and explaining what the problems were, they stated their work plan, listed all the files that they had to edit to enhance the functionalities for the project. Great job on instructions forÂ 'Functionality walkthroughs'.
noProblem I think their improved functionalities are ready to be deployed onto the production server.
noProblem The team added the test cases. This increased the coverage of the project. And also the test cases added cover the range of the project.
noProblem The project is an expertizaÂ testing project. The test covers a wide range of scenarios. There could be additionalÂ scenarios that could be tested to increase the test cover range of the project. The team made a good effort in testing with various test cases.
noProblem The write-up was well written and described the intent of the project. The write-up was detailed enough to easily understand and test the project. The team made a good effort in write-up. The write-up clearly explained the type of tests written and their purpose. The authors explained all tests like four node cycle, three node cycle etc.
noProblem The team has made good efforts to test nearly 90% test cases and some additional test cases can make this code ready to be deployed onto the production server. The code was well written and tested hence some additional testing could make the project deployable.
noProblem The code is very well written and is easy to follow. The team has diligently stuck to following good rspec practices from the beginning and have done a very good job of trying to keep the code DRY.
noProblem Yes, new code has been committed during the second round. They have been pushing their changes throughout the course of the project.
noProblem They have done a great job with the writeup this time around. The writeup is very descriptive, and it's very easy to follow what all changes the team has made, how they have done it and where the changes are from the writeup. They have also added a screen cast of what all changes they have made which makes things easier.
noProblem The code works fine and the tests are as intended. They have done a great job of following good coding practices. The tests do cover all the scenarios.
noProblem The coverage has increased after adding their code. The test cases are well thought of and exhaustively cover the range of this project.
noProblem Commits were made according to the review given in the first round and changes were made accordingly.
noProblem Yes, the code is well written and follows the conventions of Ruby design principles.
noProblem The write-up is clear and self-explanatory
noProblem Yes, as per my understanding the code is well-written and has covered edge cases, but since the pull request has not been accepted yet, I believe there are minor changes to be done
noProblem They added new test cases for the project, coverage increases by 0.8%, altough there are few comments in the code, so it is difficult to understand the code flow
noProblem The authors have done well with the writeup. They have done a good job of explaining the test scenarios and also have uploaded a screen cast which makes it easy for a reviewer to review their work.
noProblem The code works fine and tests cover all the scenarios, but the code could have coupled the repeated statements in before each and that would have been great.
noProblem The coverage has increased a lot and reached 100% coverage. The team did a good job in covering all cases and edge conditions.
noProblem Yes they have pushed changes after the round1 of the project.
noProblem Very Few lines of code was written . They seem to be fineÂ as very minor modifications were done
noProblem Not an expertiza project
noProblem 1. The steps followed in code are explained but the code is not present in the wiki page. So, I am unable to review
noProblem They have mentioned the test cases, in the wiki page, however, from the github page, we see that there are no test cases present
noProblem writeup is clear. The authors have explained in brief, however, this can be made more elaborate
noProblem There are 8Â commits in the second round. According to the pull request, the last commit was 8 days ago. In fact, all of the commits were 8 days ago. Furthermore, the code still needs some changes before it can be merged into the master branch of Servo.
noProblem While review this team's work, I came across a bug on Expertiza. This caused me some problems when trying to edit my review after I saved it. I finally got an email saying that my problem has been fixed and that I can resume working on my review. However, I no more have enough time to answer this question thoroughly. Building Servo takes a couple hours on my computer, and I do not have enough time to test the code due to an Expertiza bug.
noProblem Like last time I reviewed this write-up, something as basic as "Understanding the Servo Implementation" is still on the writeup. This can take attention away from the actual material of the writeup by introducing clutter. Furthermore, it seems as though the implementation section was a little hard to follow. A few snippets of code would have helped me understand the implementation a lot better.
noProblem Code is will written and nothing new has been improved since the first review.
noProblem The write-up is basically the same as what I reviewed from the last review.Â Nothing new has been added to the writeup and their documentation needs major improvements to better understand this project.
noProblem This is still a work in progress based on what I have reviewed.Â Not enough work has been put into this project and nothing new has been put in since the first review.Â My biggest concern with this project is where the team is currently working on at this moment.Â They should push what they have so far done so that a future team can pick up on it for a future OSS assignment.Â The project is fine for the moment and nothing should be redone or redid.Â Overall, this team worked the best they could on this complex project and I give them all the praise for the work they have gotten done to this point.
noProblem The code written, as seen in the pull request, seems to be following the coding conventions. It is not very evident from the code, what is happening. So the authors might want to add more comments in their code.
noProblem The last commit was made 7 days ago. So there are no new commits after the review.
noProblem This is NOT an expertiza project.
noProblem The authors have not provided any live deployed code or screencast for review. It is not possible to tell from current submission how this project operates.
noProblem Code was well written. Naming conventions seem to be followed. Comments have been added for understanding code
noProblem No new commits were added in the link provided for the pull request
noProblem This wasn't a testing related projecct
noProblem The feature seemed to work although I do not have a full understanding of what the project was intending to do.
noProblem The write up should have included the description of HAR as it is not easily understandable from the code or the writeup.
noProblem The code is good enough to be deployed into production
noProblem This is a Mozilla Project.
noProblem Yes, the build passes successfully. There are no conflicts of the branch with the base branch.Â Some minor code climate issues persists. However, they are very minor and can be fixed.
noProblem The changes that the authors have made are mostly in the migrations. So they haven't altered or added the code from the last round. The migration that was added to add Bookmark Rating to Menu items follows ruby style coding. The changes include comments wherever necessary.
noProblem Yes there are a few commits during the second round. But as the authors have mentioned in the wiki, they were facing issues with the menu editor and hence could not implement certain parts of the code which justifies the less number of commits
noProblem Yes the build did pass. There are no conflicts shown with the branch. There are a few spacing issues that can be fixed.
noProblem No Tests were found to be added in this project. But as per the project requirement it doesn't show a need to add test for the part that has been implemented as the changes made are in the migration which mostly are changing variable name.Â The test coverage has increased by 0.05%.
noProblem The writeup is quite descriptive and contains clear explanation of the issues. It also contains proposed solutions for the problems that are unsolved. It conatins instructions for UI testing making it easier for manual testing.
noProblem They mostly had to update the existing code by adding spaces, capital letters, or underscores where it had been written incorrectly before.
noProblem Most of the commits were just removing extra comments from their original commits.Â They also added a bookmark rating field to the model.
noProblem It correctly added the bookmark ratings to the menu and passed the tests so I think it is ready to be deployed.
noProblem Everything looked good on this front.
noProblem couldn't reallyÂ come up with a corner case so when I performed the same process as the video, everything worked ok
noProblem The code was well written.Â Some changes in the project could make it much better. 1) The names of the functions and variables are long and complicated. 2) Though most of the code included comments the author missed some code for which comment lines could be easy to follow and test.
noProblem The team made good number of commits for the second round. The commit count was 5 and the code added, improved the previous code.
noProblem The team did not include the test cases. This could be one of the reason the pull request might not been accepted. The team could make test cases to increase coverage and range of the project.
noProblem The intent of the project seems to have satisfied based on the screenshots in the write-up. Since the pull request has not been accepted the desired tab is not displayed in the expertizaÂ page.
noProblem The team has made good effort in making the write up easy to understand. The primary purpose of the project is clearly displayed in the write-up. The write-up also included screenshots of the project which made it more easy to understand the project. The write up was detailed enough to understand the functionality implemented in the project.
noProblem Yes, the new code was commited during the 2nd round.
noProblem First round did not have any problems.
noProblem Yes, there are multiple commits in the second round.
noProblem #NAME?
noProblem No new test cases.
noProblem Project still works as intended.
noProblem Since number of code climate issues has been reduced to 4, with a little work the project can be deployed onto the production server.
noProblem Quite a few commits were made in the second round and the Travis build status has also passed for these changes.
noProblem Travis Build has passed and also there are no merge conflicts.
noProblem The refactoring works as expected and all the features mentioned in the document work have been implemented.
noProblem The writeup was well written. It clearly explains the problem statement, the solution, the files added/changed and the test cases included. Some screenshots were also provided which helped me in understanding the problem statement properly. Overall, it was written in simple, easy to understand manner and hence I am giving a 5.
noProblem Coverage decreased (-0.01%) to 43.886% when pulling 68a1d1d on ShrinathCheriyana:master into 57527db on expertiza:master. Â Not much else to say about that. Not sure why this isn't a checkbox either.
noProblem It works perfectly. Good job. Rating bookmarks is loads of fun, of course.
noProblem There are not much meaningful code refactorizations.
noProblem Yes, but this was mostly just removing comments.
noProblem Travis CI passed
noProblem The topic did not call for new test cases.
noProblem Good use of UML diagram.
noProblem It pass in Travis CI.
noProblem Changes a lot. It satisfies the requirements right now.
noProblem The team added many test cases and the coverage increased.
noProblem It doesn't need to be deployed.
noProblem The Travis CI build passes.
noProblem The tests added slightly increase the overall project coverage, dramatically improve the coverage of the class under test, and all pass.
noProblem The documentation is well-written, having a clear, logical path and detailed explanations.
noProblem Tests pass, improve coverage, and seem ready to be merged if deemed extensive enough.
noProblem The code is observed to be dry and well written / complete . They had issues with model in the first phase which seem to be corrected now
noProblem A good number of coomits were seen to be done for the 2nd round
noProblem Yes the build passed and there were no conflicts
noProblem The coverage is seen to increase and it is shown that 92% coverage was reached by the team . The team did a very good job
noProblem The test cases cover all the functions to be tested in the model file .
noProblem The write up was pretty much in detail of what was being tested . The team wrote about finctionality of different functions in the model file and then wrote the corresponding tests
noProblem The code is seen to be complete and could be deployed
noProblem They did add test cases, as that seems to be the crux of this project. They were able to increase the test coverage to 92% which is pretty impressive and good, such that the Expertiza team will have a good level of assurance that the code that was tested does what it should do and doesn't break other areas of Expertiza. They cover the whole range of what on_the_fly_calc does, especially to receive such a high amount of coverage as a result.
noProblem I think the writeup is very thorough and explains their thought process well. This type of design, where they explain the problems, proposed solutions, and the reasoning as to what led them to the solution is very easy to follow. I like how the were essentially having a conversation with the reviewer and instructors and whoever else may be reading the document.
noProblem There are some minor issues with Code Climate but besides that I do think this is ready to be deployed, as their video and results show, they have increased coverage from 0% to 92.74%, which is quite commendable. They achieved their goal and thoroughly tested a model to be integrated into the production server. Seeing as this what such a successful project, perhaps a future team could be made to do a similar project, where they thoroughly test other models or controllers that are in need of such test coverage.
noProblem The code is well written by following all good design principles.
noProblem From my review the code follows good practices, the variables and methods are named according to the style of other Expertiza files. The names are easy to understand and you know what a method is attempting to do by reading the name. I didn't see any obvious repetitions or poor formatting either. The most recent updates seen in githubs compare function show a lot of work went into properly formatting the code for Expertiza. Great work in this area!
noProblem Based on the commit history from March 18th to April 3rd, the code is written very well.Â Methods are commented appropriately for the sample submissions controller and student tasks controller and follow the Ruby and Ruby on Rails syntax.Â Also, I am happy to see that during the second round of reviews that you all were able to refactor their code and fix all Code Climate errors.Â Great job on that!
noProblem Yes. A lot of new commits after 1st round.
noProblem Yes. Test cases were added. I would think the coverage increased. They used capybara to test the views they created. I think it is thorough.
noProblem This is not a testing project and test cases to check the fun
noProblem New tests were added to test the functionality of sample submissions, but I can't tell if their coverage increased and how it covered the range of this project as their coverage for these tests are not mentioned in their writeup.
noProblem Lots of test cases are added in sample_submission_controller_test and rspecÂ is written in sample_submission_spec. These test cases cover most of the feature.
noProblem The team added several test cases and the test coverage does increase. The writeup does a great job of covering the test cases that were added and the tools used to create those test cases. Capybara was used to check the UI results of actions taken on their system.
noProblem Everything works fine on the UI. The guide to UI test this manually is pretty descriptive and detailed. It makes it easy to test. All the functionality proposed by these authors have been implemented and runs without errors.Â Though not required, this team has added tests to make their code full proof which is a good practice.
noProblem They have really made lots of improvement. Compared with first round review, they abandoned the lengthy before hood I mentioned before and use â€œletâ€ to create objects their test needs (they didnâ€™t build objects from factory because the factory they need doesnâ€™t exist in factories.rb which is reasonable). Also, I canâ€™t find any repetitive code. Good job! But Iâ€™d mention a minor problem, it seems they didnâ€™t make a good use of describe-context-it hierarchic structure. They just used describe-it. It will be more organized and intuitive if they can put some â€œitsâ€ into a context or describe such as â€œAbove a child item with parentâ€ and â€œBelow a child item with parentâ€
noProblem Yes. 5 commits in total in their master branch and the latest is made about one day ago.
noProblem Yes. Their latest pull request passed in Travis CI and has no conflicts with the base branch.
noProblem Their project is writing unit test and the coverage did increase 0.8% to 44.745% after pulling.
noProblem This is a testing project. Their goal is to thoroughly test menu_item.rb model. I think the test covered all the scenarios because I manually run the test and the coverage of menu_item.rb reached 100%.
noProblem The write up is well organized and almost covered everything needed. However, as I mentioned in the first round, I think itâ€™s not necessary to introduce expertiza, TDD and unit testing. Itâ€™s better to explain more about their project in the introduction section. Also, Iâ€™d recommend to include a screenshot about the coverage result they got which will be more intuitive to readers.
noProblem Almost ready to be put into use. Code is concise, well commented and covered all scenarios, so the code is good to go. But the write up on wiki I think still has room to improve as I mentioned above.
noProblem Tests appear to be extensive, covering a wide range of scenarios, despite the redundancy in test execution.
noProblem Write-up is clear, easy to follow, and detailed.
noProblem There was one update but it was just removing autogenerated comments from each test.
noProblem The build passed on Travis CI. The code climate was showing 73 issues but that wouldn't cause any issues in implementation.
noProblem Yes their task was to implement tests on an existing controller.Â It increased coverage by .8%.
noProblem It was a very thorough write-up.Â There was detailed information about testing and what they intended to accomplish with testing.Â They also showed the tests passing to make it easier to verify that the test cases were working.
noProblem It is a low risk deployment because it only adds test cases.Â The tests couldn't break the system and did a good job adding test coverage that wasn't there before.
noProblem Everything seems to be working with the pull request.Â The build seems pass in Travis Cl.
noProblem Kind of the same problem as before.Â While the tests pass and seem to be working, I cannot tell what the actual coverage is (the goal of the project).Â Therefore I cannot tell if the actual goal is met.
noProblem I feel that the write up is very well done.Â The pictures and video really help show that things work.Â I also really liked how you set up your problem statement and made us clear of the goal.Â Overall, I would really only add the coverage amount (and prove it with aÂ picture or video).
noProblem Yes!!! Even if coverage is not 90% it is still better than before and everything seems to be working.Â ShouldÂ not hurt at all to add to production.
noProblem The code is well written but I feel that the code could have been dried up a lot more. The assignments such asÂ the ones @test7, @test8, @tes9 have been used multiple times and can be moved in a before each clause, this would significantly dry up the code.
noProblem Yes, the team has committed changes after round1 . They have significantly increased the number of test cases from round1
noProblem The test seems to cover all the scenarios and from the video link uploaded it can be easily seen that all the test cases pass.
noProblem The write up is really well written and they have explained the functions and scenarios well using pictures in their wiki link. It is really helpful for a reviewer to understand the working of the functions and how the authors have approached to writing test cases for the function and the authors seem to have done a good job in explaining these things.
noProblem Commit was made after the last round. But there are very few commits overall. The authors need to be more frequent with the commits toÂ prevent loss of work.
noProblem The code coverage has increased by 0.8% as seen in the pull request (coveralls). This is a good indicator that the tests are actually helpful in these cases.
noProblem The authors have provided a screencast of their project. The tests seem to pass in the screencast. The tests are extensively written and seem to cover all scenarios.
noProblem The authors have done a good job with the write-up in expertiza wiki. All the relevant sections are present in the writeup. Also the sections are detailed in explaining the tests.
noProblem I think the code is ready to be deployed, only after the users make the code climate fixes. The code increases the test coverage and should be a vital addition to expertiza.
noProblem The spec file has been written well and overall seems to follow good coding practices. All the tests are short and the name of the test indicates its functionality
noProblem A new commit was made after the deadline. Also, very little code has been added in the new commits. A single line of code has been changed to fix a typo in the name of the test. Rest of the additions is in the comments
noProblem The project is based on writing tests for the menu controller. The coverage has increased by 0.8%
noProblem The writeup is very detailed and easy to understand. The use of screen captures from the UI and the Git-hub are useful. Also, the team has added screen captures to show the code coverage and also that all tests have passed.I mentioned in my last review, some of the informationÂ about Unit Testing and Test Driven Development is just a background to the project, however it will be useful for new users who wish to work on the project.
noProblem The team has worked on changes after the first round.
noProblem Coverage increased by 0.8%
noProblem The test cases are thorough and cover all relevant scenarios.
noProblem The write-up is very well written covering every aspect of the project. The explanation is very clear. Great work!
noProblem Code for menu_item_spec.rb looks good and it follows Ruby syntax rules.Â There is one suggestion I would recommend however.Â For instance, while it's fine creating your objects the way you have them, I would recommend using stubs for testing and build your objects from the factories given to you in the factories folder in the spec folder.Â Regardless, good job on coding!
noProblem One new commit was made during the 2nd round.Â All it was was just cleaning up comments in the spec file.
noProblem Latest build passes in Travis CI.
noProblem Tests cover all the scenarios based on the methods in menu_item.rb.Â Great job ya'll!
noProblem The write up seems well written.Â It's easy to follow, it provides all the necessary details from what the problem is for this project, what menu items are like between an instructor and student, andÂ what the testing conditions are for each test in the menu_item_spec.rb file.Â While I did not review this for the first round, I think improvements have been made accordingly.Â Great job!
noProblem With some refactoring and Code Climate fixes, I think this is ready to be deployed onto the production server.
noProblem Overall, I think the code is well written. Only minor thing is view code contains some logic. I don't really know how we could avoid this.
noProblem the difference in current and previous commits is of comments, other then that there doesnt seem to be any changes in terms of test cases
noProblem Yes, new commits have been added during the second round. The team has been working and updating their code throughout the course of the project.
noProblem There were just a few commits since the last round which mostly just included adding comments to the code. Since most of the work was done in the first iteration itself, there wasn't any need for more commits. Good work!
noProblem yes, they add many comments for different test cases separately.
noProblem The current iteration of tests achieve 100% coverage on the file, so the coverage increased and the team did add more test cases. These tests look great, and all of them pass.
noProblem The project was completely related to testing so there are test cases added.
noProblem The team has added test cases which exhaustively test every aspect of their project. The overall coverage has increased by 0.8%. The code coverage of the test written for the menu item model is 100%, which is commendable. The team has done a great job!
noProblem Coverage increases, tests pass.
noProblem they didn't add the test cases but they had already achieved 100% coverage last time.
noProblem Yes, it covers all the scenarios.
noProblem All of the test scenarios are covered. The team did an excellent job.
noProblem Based off what is in the wiki and test file it appears that all scenarios are covered. Again I think that the tests are set up well with the numbering in the test planÂ to have a directly associated test for each numbered item. After running the code myself I can confirm that it works. Good job!
noProblem The given test cases has been completed covered and explained well in the wiki and images in that do say 100% coverage was obtained.
noProblem The test do seem to cover all scenarios and all the edge cases have been taken care of. The team has very meticulously included all the scenarios in their test.
noProblem All test cases have been converted as explained in the writeup and the team has implemented this in code as well leading to an increase in test coverage. There is no way of testing them to know if they are failing, but only thing the team could have done additionally is create a screencast to show the testing they did on their system.
noProblem Tests cover a variety of scenarios, including edge cases and invalid input.
noProblem no, still the same problem i found in 1st round. Test case 7.2 is not complete.
noProblem An introduction video will be better.
noProblem The team gave a clear description on what their model is responsible for. They listed its parameters, described its methods, and included all test cases needed to test the functions of the menu_item model.Â As it was suggested from the submission 1, they added the coverage output that indicates that menu_item.rb is 100% covered.
noProblem The write-up is well-written. There a few sections I consider superfluous such as the unit testing and behavior driven development seem to be too long relative to the size of the rest of the wiki. However, these sections do not detract from the quality of the wiki. I think overall the wiki is great, and it has been improved since the original version significantly. Great work!
noProblem Write up has well defined structure overall, the project has been explained well, a well defined explanation of eah module and test case has been given
noProblem The writeup for this project is well written and has a lot of information that lets the reviewer know what the team is trying to accomplish. They have well formed sections that gives a nice flow to the task at hand. I did not have to go to the project description file to understand what the project was about. This is well in line with the first iteration. They have also included screenshots to show test coverage as a conclusion which is helpful. But as I mentioned previously, avoid using excessive descriptions about things other than the project description and instead consider providing a link to the user in case he want to reads more (For eg: BDD) as it might be redundant information. Overall, well done.
noProblem their wiki page is pretty good. if they could add some explanation on their how they make the test plan, the wiki will be much more better. ButÂ that's not a problem, just a personal advice.
noProblem Yes, It's good.
noProblem The team's RSpec tests are well-written to check all of the functionality of theÂ MenuItem model. Since all tests pass, the model code is ready to be deployed.
noProblem It looks like this could be merged into the expertiza master branch with at most one or two modifications to make sure it meets teaching staff specifications. I say this only in the sense that the TA's or the Professor may want to modify a few things just to make it fit in with the rest of the project. Overall I think that this is a solid test file and should be merged.
noProblem I think the team has exhaustively covered all the cases and have followed good coding practices. Their approach seems to be the correct one and I do think the code is ready to be deployed onto the production server.
noProblem Code appears to provide solid value, and is easy to understand.
noProblem Unit test doesn't need deployment, and their code is very good to be merged into the project.
noProblem Yes, it passes in Travis CI.
noProblem The build does pass. And there are no conflicts that need to be resolved. Great work!
noProblem they passed the Travis CI.
noProblem Since last round many changes has been done. The authors have made all efforts to finish the project in time.
noProblem Since round 1 review majority of the work is done and the authros have considered all the test cases as mentioned in their wiki. The coverage has increased and there are no conflicts in the pull request.
noProblem the authors have considered all the tests as they have mentioned in their wiki. I cannot find test cases where the authors missed.
noProblem Even though the pull request is not accepted, there are only minor changes required in the code. After those changes the code can be deployed to the production server. The build has passed and there is no merge conflicts.
noProblem Yes, majority commits were done during the second round. The team has made sure that they include every possible test case in their automated tests.
noProblem The team has added new test cases to their code and the coverage has increased. I think the added tests cover the range of the project. The team has included every test case they have mentioned in their wiki.
noProblem The authors have included tests which, I think, cover all the scenarios. They have meticulously considered every possible test case and everything works as intended.
noProblem They have improved their writeup a lot since I last reviewed their work. They have made sure that they addressed every problem mentioned in the last review. Every aspect of the project is well described. Also, the team has made things easier by adding a screen cast.
noProblem Since March 28th, there are a significant number of commits made on the day of the due date.Â Good job having each member contribute to these new commits rather than one person committing all the changes!Â New code was added, mainly new tests and stubs in order to increase their code coverage.
noProblem .No conflicts need to be resolved for this project.Â Build passes Travis CI based on last commit.
noProblem Based on some of their new commits listing where their code coverage was currently at, it shows that when they added in new tests, they also increased their coverage.Â Adding in tests like computing the average and ranges hash increased their coverage to approximately 75%.Â Later on, new tests such as computing the total score of an assignment given all questionnaires and when a current assignment varies rubrics by round and number of assessments by non-zero raises it up even more to approximately 92%.Â While I don't know the exact code coverage for each new test added, these examples show that from the first review, they have continued to increase their code coverage up to the achievement mark of 90%.Â Maybe in the future, as a suggestion, either tell in your commit message where your code coverage is currently at or mention it in your commit header as what you did for a few.
noProblem Writeup looks fantastic!Â I love the way youÂ broke down your sections from the introduction, to what "on the fly" means in Expertiza, the environment you used, and the details of your test functions.Â I even liked the cases for consideration for each test as well.Â That's a good way to show not only reviewers, but future teams tests that you they could work on that you may have either didn't have time to do or didn't know how to approach.Â Great job on your writeup!
noProblem Yes, there were a significant amount of commits for the second round. Â Again, good work!
noProblem Yes, the authors provided a youtube video showing the code running and that the coverage increased to 92%. The newly added tests are not toy tests and do cover the range of the project.
noProblem Yes, based on the test plan in the wiki, there are tests that cover all of the scenarios, and all of the code in the tests is well explained in the wiki.
noProblem The write-up has improved significantly. If I remember correctly the wiki in the last review was missing a test plan section entirely. However, it is been written well, and I understand the code much better after reading the code.
noProblem New commits were added in the second round
noProblem Build was successful on Travis CI
noProblem The team did add additional test cases to increase the coverage to 92%..
noProblem Write up was explanatory and made it easy to understand the test cases. Extensively written and a lot of extra background information was also there indicating effort and supplying context for the reviewer.
noProblem The code written is quite extensive.Â The code follows good coding practices. Yes, the authors have improved the code.
noProblem Yes, the code commits were quite regular.
noProblem Yes, the team added test cases that were required. The test coverage also increased. The test written covered each of the methods. Â #compute_total_score,#compute_review_hash,'scores varying rubrics and returns review scores
noProblem The write up is pretty extensive. Its is intuitive and it easy for a new reviewer to find out exactly what to review and give the review. So, it saves valuable time.
noProblem Tested the deployed version of expertiza according to the instructions given by the authors. All the said functionality is correctly implemented and everything works. The code does not break.
noProblem Very thorough documentation.
noProblem There weren't many problems with the code with respect to variable names, function sizes, etc. The only problem that was mentioned was lack of comments. After observing the code, I see that the team has added a few more comments to elaborate the what the code does and have also changed some method names to make them more suggestive of their functionality.
noProblem It's generally decently well written. There's not much in the way of comments (but there really shouldn't be, since it's readable without them and comments are a code smell anyway)
noProblem The code was well written with proper naming conventions and modular approach was followed. I can see that more comments have been included now in the controllers and models following the feedback from the first review making it much more readable. Good job!
noProblem The code is well written and comment shave been added for easy understanding of the code.
noProblem Yes the team has added tests for the second round. The pull requests show that the coverage has increased by 0.2%.
noProblem Yes, they added several rspec testcases for the new functionality.
noProblem The team added test cases and the coverage did increase, as seen in the pull request: Coverage increased (+0.2%) to 44.07%. The newly added test cases cover the vast majority of the range of this project. The -1 is for the tests file, lines 46,47, 56, and 57. These tests seem to cover the same thing? The context for both is the same, but you expect different results? Perhaps I am just confused on what the tests are attempting to do.
noProblem Yes, many new test cases have been added inÂ student_task_controller_spec.rb.
noProblem Extensive testing was performed onÂ student_task_controller_spec and also detailed instructions for manual testing were given. All the tests provided cover the range of the project testing all possible scenarios and the coverage increased from 44% to 44.07%
noProblem The app was not deployed so could not manually test the UI. Although the team has included screenshots of the UI which verifies whatever the team has achieved.
noProblem Pagination works, past due tasks are applied the correct colors and show up separate from current tasks. No errors came up when manually testing the feature. Seems to be all working as intended, great job.
noProblem Yes, the features work as intended.
noProblem The functionality which was supposed to work is working correctly.
noProblem It works perfectly. I see a big beautiful list of past-due assignments.
noProblem The UI works fine with every functionality working as intended.
noProblem Everything that is given in the requirements work as expected and also the team has gone an extra mile and implemented some extra features such as adding pagination, improving the layout and refactoring the student_task_controller. Great job!
noProblem The write is well written. There were not many issues with the writeup for the first round. The authors have added a few topics to the writeup which depict the new work that has been done on the project. So, overall the writeup looks good.
noProblem Second round improvements done based on suggestions: - Test plan has been added - List of files modified & new files created is added - Code snippets have been added
noProblem The write-up is well written. The authors should include code snippets with comments of the related files for better understanding of the code.
noProblem Go for it. Merge it! Â It would really improve Expertiza to have this functionality in it.
noProblem The team has not only implemented what was asked of them, but also gone ahead and implemented a few extra features; the build has passed with a marginal increase in coverage and there's also a writeup documenting all the changes. The only small drawback is code climate issues and if they're removed I think this code can be merged with production code.
noProblem I'm also not sure why this one isn't a checkbox. It does.
noProblem Build passed and no conflicts are seen
noProblem Yes, the build passes in Travis CI. It would have been better if they had submitted the link to pull request in the second round, or at least added the link to pull request in the wiki page.
noProblem Names of variables and methods follow good practices and are also easy to grasp the meaning of. I don't see any repetitive code that could have been refactored into separate methods, and the comments are not over or under used. Very good job on coding style! The only small quips are that quite a few lines in the student_task view are too long, they can be broken up into two separate lines to make it easier to read.
noProblem No problems in the first round.
noProblem Yes there were a few more additions to the code for the second round.
noProblem Several commits made after the first review period. Commits also made by a variety of team members. Good work on committing with small incremental changes rather than large changes. I don't have any real ideas for improvement in this section.
noProblem Yes. I'm not sure why this one isn't a checkbox.
noProblem Yes, there have been recent commits for the 2nd round.
noProblem Yes, new commits were added during the second round. These commits have taken care of the functionalities missing during the last review. Added automated tests which were missing in the last submission. They have done a great job!
noProblem I can see that many code commits have been performed in the time after the first review and many of the changes recommended during the peer review have been implemented!
noProblem Several different screenshots really helped convey what changes needed to be made. Maybe a UML diagram or mockup would have worked as well but I think the screenshots made the best since for this project.
noProblem The design wiki is completed. A lot of related pictures are shown there which introduces what they want to do very well.
noProblem This is one of the better developed layouts for the graders. The details were very well implemented and explained.
noProblem The Design document does incorporate all of the functionality they are supposed to implement as per the requirements.
noProblem Yes, the design incorporates all of the functionality required.
noProblem After checking the specification provided for the project, it can be observed that the authors' proposed design has incorporated all of the required functionality and does not appear to have missed any part.
noProblem Yes, the doc incorporates all the functionality required. They have tried to implement all the functionalities to their best
noProblem Looks like the project has lot of changes to be made in the system and the team has carefully noted them and included in the design document. Team has worked really hard in making sure not to miss out any details. Good work. In review report, right from adding metrics to the review report, adding background color to the sorted table, adding colors to the reviewers the team has taken time to explain the details with screenshots. In the Review summary page, the header changes, ui changes to the question, checkbox questions are all explained well with appropriate screenshots.
noProblem The design plan completely covers all of the functionality required in the problem description.
noProblem Yes, the design doc covers every aspect of the project. The team has provided a highly detailed view of what the project is and what should be expected of it.
noProblem Yes! Everything seems to be included.Â I like how you included screenshots just like in the spec of the projects.Â Helps convey info better!
noProblem Their explanations are extremely lucid an intuitive. Each of the sub modules are well explained and it is very intuitive for even a new person who does not know the application to understand.
noProblem The changes that the authors have proposed are easy to understand. The explanation provided is in- depth and well written.
noProblem The explanations provided for each of the proposed features are well written. The authors have also provided screenshots of the functionality that they intend to implement, which is an added plus point.
noProblem Project Purpose: The purpose of the project has been clearly explained in detail. Â Project Design: They have provided appropriate links and diagrams to justify the solutions have been provided. Testing Plan: The test cases have been included in the design doc
noProblem The design document is complete and includes all important sections.Â The team has done a nice job introducing the project with a problem statement, that accurately describes the issue they are attempting to solve.Â They also do a good job laying out a plan of action and a test plan.Â One thing I really appreciate about their design document is how they gave several different approaches to tackling their problem.Â This really shows that they understand their problem, and are making a concerted effort to solve it in the best way that they can.
noProblem Yes after comparing with the specification, the authors seem to have mentioned every required functionality in the documentation.
noProblem Yes design incorporate the functionalities required and try to provide explanation for each by including appropriate links and images.
noProblem Yes, it does. I mean, the design is mostly "We'll do the thing the requirement says do," so it had better.
noProblem Yes. It includes all the required functionality.
noProblem The design does include all the functionality provided in the project doc.
noProblem Yes the design has incorporated all the functionality.
noProblem Yes, the current design thoroughly covers all aspects of the project as describe in the project description document.Â There are three main points that need to be covered with this project, each of which is described in detail in the teams write up.Â Furthermore, the project description gives the team the freedom to choose the formula that they wish to use to calculate self/peer-review grades.Â Instead of just choosing the easiest formula and going with it, the team has put considerable effort into comparing and contrasting different approaches to this issue.Â This is much appreciated as a review, as it helps me to see your thought process and approach to solving this issue.
noProblem The changes they plan to make are well explained.
noProblem I don't think the proposed designs would cause any of the problems mentioned above.
noProblem Yes. The diagrams for calculation are very helpful.
noProblem This wiki page seems contains all the content needed. They introduce the project purpose and their design. Also they use some image and diagram to show the work in details. Moreover, they introduce how they're going to use TDD for this project.
noProblem They have a good explanation as to the problem statement and then go into showing a nice UML diagram which represents the usecases of their solution. I think this is good because UML diagrams are great to model systems and flow of information or data. After they describe the problem statement, they then go into an explanation of each problem and show their planned implementation, or potential mock-ups of what the views could look like to implement the features outlined. They also have the test plan section with several good possible tests they could write to ensure a functional design.
noProblem The design doc is complete. I didn't see any important part that is missing. Good job. They did not explicitly include the part for project purpose. However, I could clearly understand it through their implementation plan.
noProblem Strengths: - Problem statement is clearly mentioned. - Implementation details are given. - Test plan is given with a list of things to be tested. Â Suggestions: - A general plan on how each of the given item will be tested can be given (like steps for testing through UI).
noProblem The design doc has most of the information in it.
noProblem Everything is well documented. Use Case diagram is very useful in this situation especially since there are multiple contexts that are used such as the difference between a student and instructor and the operations they are allowed to perform. I think this has all the necessary sections to achieve full points. I would recommend better formatting for the Test plan section instead of a numbered list, but I do not think that this alone should cost you any points. You could achieve this by making a table or using the wiki formatting syntax to make it appear cleaner.
noProblem The description is complete.Â The required sections are present and the use of diagrams and screenshots provide good visual insights into what will be implemented. There could be more detail about the database tables.
noProblem The team has mentioned the project purpose , the project design and proposed solution along with the testing plan. They have also mentioned the work that was done in the previous implementation of the project.
noProblem Yes they did incorporate all functionality that was required of them as per the assignment criteria.
noProblem Yes, the design seems to have all the required functionality.
noProblem The design incorporates the functionality which the team has stated in their design doc as they are improving on the previous implementation of the design. These changes aren't fully listed in the above stated link.
noProblem Yes, in Implementation Plan theyÂ covered all the required functionalities in detail and gave descriptive illustrations on their implementation plans. Also they made an awesome diagram showing usecase. Good job! Maybe their Test Plan looksÂ a little bit simple, but I believe they will add more stuffs as their project progresses. And if so, I'd suggest to include the test results (like coverage) in Test Plan.
noProblem Addresses the problem statement directly, andÂ provides their solutions from a design perspective. I think that if the design is implemented it will achieve full points. Each section has an associated visualization and explanation.
noProblem The design documents appears to be covering all the functionality, they have mentioned the changes in views according to each sub topic which is a nice thing.
noProblem Yes the design discusses about the functionality which is required from this project and have uploaded images of how the view will look like when the functionalities will be implemented.
noProblem As far as the functionality goes, the design doc covers it and it seems to include all details no matter how small. I couldn't find anything that is missing based on the requirement spec. So, well done!
noProblem The explanations are easy to follow as they are supplemented by screenshots too.
noProblem Almost all of the issues has a pictoral description to elucidate the point.
noProblem All the explanations of their changes are well-written and easy to follow. They explained the previous related implementation, illustrate all to-be-done's in detail and split them into several reasonable steps in their Implementation Plan.
noProblem The changes have sufficient explanations and diagrams to support those functionality. they are easy to follow and provide good explanation in general. The overall implementation is divided in sub topics and each one has view files associated mentioned, it would be better to have controllers mentioned but with diagrams and all given the explanation is good enough.
noProblem The restatement and expansion of the requirements from the description has a good flow and describes theÂ proposed changes well.Â Consider reviewing and updating the Use Case Diagram arrows.
noProblem The document covers the changes that the team will be making and seems to know how they'll be tackling them. It's not hard to follow and I can understand it clearly. It seems like it is a good functionality to add.
noProblem they explained how they would realize the goal in details. they introduced the file in origin expertiza environment which need to be modified in their project.
noProblem For the scope of their project, I think their planned implementation looks pretty good. They just need to be able to coordinate the adding of all of those selections to different views and control their actions. I think any implementation could make the code "smelly", but they should be careful to not put too much code into the views. It does seem that it may be better for them to consider even extra implementation since modifying a few views seems like a fairly narrow scope, but overall their ideas seem logical and coherent.
noProblem I think the designs would not cause any of the problems mentioned above.
noProblem The above listed problems do not exist with the design. The design seems clean, as seen from the multiple screenshots posted. I don't think the design can be simplified further. I think all the changes they have proposed are necessary.
noProblem i didn't see anything that going to be a problem in their right now plan. But one thing they might need to pay attention is when they modified the origin files, they should avoid collision with other related files.
noProblem The UML diagram shows pretty well the exchange of data. It illustrates how instructors control creating and assigning badges, viewing badges assigned to students and approving badges. Then students can assign badges and view the badges they have received. Also their other diagrams show pretty clearly how they plan on updating the UI to enable these implementations.
noProblem All the diagrams are helpful in making me understand the project.
noProblem Strengths: - Use case diagram provided. - Multiple screenshots added for each part. - In each screenshot, whatever is to be added is marked and mentioned. - None of the above listed problems exist with the visual aids. Â Suggestions: - Add UML diagram.
noProblem The authors have uploaded screenshots andÂ UML diagrams explaining the project .Â The screenshots are very helpful as they reveal how the end product will look likeÂ . The UML diagram looks complete for the required project and shows the different use cases of the system that is going to be designed.
noProblem The UML diagrams are helpful and they have explained it with the use of mockups pretty well and hence I don't feel the need for further details regarding the flow they would take. The images convey what the current system is like. They also have some images depicting how it would look after the changes.
noProblem they use a diagram to show how will their project work, that's pretty good for reader to understand the project purpose. Also, they useÂ some images to show what the website looks like at the end of this project.
noProblem The documentation is quite thorough and provides all the required information for the reader to understand what the project is about and how the team will approach the problem statement. Overall the team has a done a good job.
noProblem There aren't any missing sections, I don't think. The problems I have with the sections that are there are well explained in other questions in this review. I do think that basically everything should include more details, though, especially the diagram.
noProblem I might include a bit more information in your proposed implementation block. Currently as a dense list of steps its a bit hard to grasp what goal each step has, if you expand for a sentence or two on each one I think it would be perfect. Overall, great job on this, the write up flows well and is intuitive.
noProblem The design document is very well structured. Everything important is mentioned and described. The team has also added all the necessary links, which some of them serve as illustrations.
noProblem You included all necessary parts (purpose, design, testing).Â I really like how you included all of the background on servo.Â While people who are doing mozilla project might understand I doubt anyone else would unless it was added. Good job!
noProblem The design incorporates all of the functionality they need to implement.
noProblem The design is very well written and the amount of detailed explanation for every aspect of the project is commendable. I don't think there is any aspect in which the doc is found lacking. Great!
noProblem The design documentation contains a detailed overview of the project and contains implementation ideas and test plan that they intend to use. They have also included the doubts they have regarding the files that need to be modified and whether the instructor will add a separate rubric for non-duty based questionnaire etc.
noProblem TheÂ overall changesÂ proposed by the team are explained in Project Description. They have also added initial and subsequent steps that are listed on GitHub, which add up more details for the changes.
noProblem As someone who has not seen Rust, Servo, or any of Mozillas codebase the explanations here were easy to follow and did not leave readers without direct Mozilla experience in the dark.
noProblem Changes are pretty good, with references appropriately placed throughout the document. Ex. I did not know much about servo or rust so I had to check the references, and they were good.
noProblem It doesn't seem that the proposed changes are complicatedÂ and will cause problems. Indeed, according to the document, it should decrease the response time.
noProblem Design shows that the code is added to the appropriate classes, and everything looks great from an implementation standpoint. Nothing significant is missing or wrong with the design that I can detect.
noProblem Everything that is explained seems to be pretty sound.Â None of the proposed changes/code seems to be smelly. Obviously if more explanation is added this will need to be reevaluated but currently everything "smells" good.
noProblem There were no visual aids except for those that correlated to the "Initial Steps" of the project.
noProblem They have included project purpose and listed out the problems and how they are going to solve them.
noProblem Strengths: - Project purpose - problem statement is clear. - Project design -Â - Test plan is very details for every method.
noProblem Reference kept blank. Â The design document appears to complete with all the files associated mentionedÂ I liked that they have considered each method and what functionality they would test in that
noProblem Very detailed description of what exactly they plan to do.
noProblem Design doc is very extensive and complete.
noProblem Functionality is defined as simply creating the integration tests, which I can see is heavily documented already. I really like the incredible detail you all go into to explain your plan for each method RSpec test.
noProblem Yes, since this is only a test project, all they need to do is to test the controller and it has been described in the document.
noProblem Yes. The design incorporates all of the functionality required.
noProblem The design document has mention of all the methods and classes associated one would test Its good to see all the components present, they have done a good job in designing the document
noProblem Yes. They have incorporated all methods.
noProblem The design doc covers the testing details and it seems to include all details on the methods they would test. I couldn't find anything that is missing based on the requirement spec. So, well done!
noProblem Laid out all the methods that need to be tested and provided a "it" statement for each test they plan to implement
noProblem Design seems to incorporate all of the required functionality, including testing all methods and many edge cases.
noProblem Seeing as everything they are adding is new, I can't see much problem with this. I like how they have already included the context descriptions each test will look into.
noProblem They have shownÂ that how they are going to test each method that needs to be tested and it's easy to understand.
noProblem Each method is explained clearly. It is very easy to follow.
noProblem They have proposed their detailed plan very early, which shows they have a clear idea about the code.
noProblem Since this is a testing project, the document seems to cover the changes what the team will be implementing and what test cases would be written out. It's not hard to follow and I can understand it clearly.
noProblem Very straightforward explanation.
noProblem Explanations are thorough and very detailed.
noProblem The above mentioned problems do not exist.
noProblem Methods are added to the appropriate classes, and I think that most of the other points for this section can be disregarded for a test class. (i.e. runtime does not matter too much for tests unless they are significantlyÂ longer, but this does not appear to be the case for this team).
noProblem In fact, it is too early to check. Although they have a detailed test plan, they have not covered any code information yet. So do other groups.
noProblem The group has the right approach in stating the tables and methods that deal with the users controller and defining the test plan to test the methods.
noProblem Since this is not a design requirement, there seems to be no reason to include any design proposition. But the test proposition seems to be adequate and should improve the system rather than decreasing any response time. Everything good here.
noProblem The design appears to be very sound.Â Since the team is just testing one file, they only need to edit/create one test file and their design document reflects this.Â Great job.
noProblem Design is solid. Tests all seem reasonable.
noProblem The tests appear to be thorough and sound.
noProblem They use a diagram to illustrate the new method, which is really helpful.
noProblem Adding more diagrams/visuals would be helpful, especially in the test plan section.
noProblem The visual aids that are included in the write up are very helpful in understanding the project scope and design.
noProblem The flow chart was very useful. Consider resizing it so readers don't have to scroll to see it.
noProblem The one chart is used properly, and aids in understanding the content.
noProblem It's all good.
noProblem The document is very well written and includes everything that first time reader needs to understand the work the project aims to accomplish. The team has done a good job.
noProblem The design document starts with the explanation of what expertiza is about with a crisp explanation. The problem statement states what exactly the project is about supported by screenshots how the current working scenario is and how the team has planned to enhance the functionality.Â The team has included details on Test plan has well that helps the reader to understand more on the feature. Team could have added details on the design, to be specific the UML diagrams.
noProblem The wiki has everything which was required. The authors have added images making it easy to understand. According to me the wiki is perfect and needs no additional work. Good Job!
noProblem They have provided the required information. One thing to improve is that they should include their emails.
noProblem The design doc is very detailed and explains all the functionality being added in plenty of detail. Test cases are well defined as well. I like how the current scenario is defined and proposed changes are shown as well.
noProblem The design doc contains all the information that is expected of the authors. They have given a detailed
noProblem The design document was well written. It included all the major details such as project purpose, design(with screenshots and files to be modified) and a tentative test plan. The proposed implementation was also explained clearly and the team seems to have a clear idea about how to go about with the project. I liked the way they had screenshots of both the current system and the proposed system. I am reducing a point because UML diagrams were missing from the document.
noProblem Very clear definintion of what the team plans to do and how they plan to test it.
noProblem Design document is complete, easy to follow, and demonstrates a clear understanding of the problem and a clear plan to implement a solution.
noProblem All the functionality described in the requirements are well covered and explained in detail.
noProblem The design has all the functionality incorporated in the documentation.
noProblem From what I can see, the design seems to have taken into account all of the required functionalities. The document had an explanation on how each functionality was going to be implemented and also mentioned the names of the files to be modified and the level of detail was such that the screenshots showed multiple cases!
noProblem Described everything in the requirements doc very well.
noProblem Design clearly covers all aspects of the task in detail.
noProblem The explanations is upto the mark. It is not hard to follow. Since the project is at a rudimentary phase, more changes might be required than the proposed one.
noProblem Yes, they have included required changes and explained their solutions.
noProblem The explanations are well done and indicate what files will be modified.
noProblem The explanation was really easy to follow as they have included before and after views of the application after they implemented which makes it really easy to understand.
noProblem Adequate explanation was provided on the features that are to be added. Everything from the problem statement to the proposed solution to the Test plan was explained. Also, the changes were explained in a simple manner and I had no trouble following what they had written. However, it would have been better if the explanation was complemented by UML diagrams. Hence giving a 4.
noProblem Explanation with pictures did a great job getting your point across
noProblem Explanations are clear and easy to understand, and cover each page on which changes would need to be made.
noProblem As far as the design is considered the authors have mentioned for each proposed change the files that need modification. Cannot comment on the points mentioned in the question as the details in those aspects have not been mentioned.
noProblem They have not mentioned any coding strategies so cannot comment on the code. But the design is well explained.
noProblem Design choices appear to be reasonable to implement and clear to end users.
noProblem The diagrams are upto the mark and are very helpful. The wiki is well written and they provide enough details for the reviewer to understand the project. Good work Authors.
noProblem The diagrams are rather helpful. That is much better than most other Expertiza projects.
noProblem Pictures were on point and needed
noProblem Visual aids (primarily mockups) are easy to understand and greatly improve the ability to follow the document.
noProblem The Visual aids provided by the team are very descriptive and helps the reader to get an idea of the proposed changes will affect the User Interface. The team has done a great job in this section.
noProblem After comparing with the specification provided for the project, I can conclude that the the authors have mentioned about all the functionality that was required.
noProblem They have included all the basic sections.
noProblem The team has followed guidelines and included all important sections including the Introduction, Overview, Proposed solution, Design Strategy and test plan. The document is well structured and shows that the team has paid attention to the details. Not much unnecessary data is present, the explanation paragraphs are short and diagrams are used excessively which I feel help more than lengthy explanations
noProblem The team did a very good work , It is one of the best reports i have reviewed, this project session . All aspects that i was looking at were well written and complete
noProblem The design proposal looks quite detailed and contains a lot of information including flowcharts and screenshots to help understand how the solution will be implemented. The test plan is well laid out.
noProblem Very complete project!! All necessary parts are included.Â Intro/purpose, overview of solution, actual solution/design, test plan, and files that will change. I also like how easy the flow of the document is. Very easy to read and understand
noProblem Very clear about what they proposed solution is. Having the suggested files changed shows that the team did their research in what exactly needs to be done.
noProblem It absolutely does. The functionality is definitely all incorporated.
noProblem This design doc incorporates all the functionality required
noProblem Yes, the design doc does incorporate all the required functionalities. They have covered every problem given in the problem statement and have proposed appropriate solutions for solving these.
noProblem Yes the design in cooperated all the functionalities required as per the document
noProblem All the required functionality is described in the design and the authors have proposed design changes to incorporate them.
noProblem The design document seems to have covered all the functionality mentioned in the problem statement
noProblem Yes! Each bullet point in the project specs page gets talked/explained about in the document.
noProblem The documentation talks about everything listed in the requirements doument
noProblem The changes that have been proposed by the authors are very lucid and intuitive to understand.
noProblem The team has explained all sections thoroughly. I just have one doubt, what kind of questionnaire will the SRQ be?A dropdown, checkbox or a Text field.
noProblem The changes proposed are very easy to follow and are adequate because of the flowcharts and screenshots provided along with explanations for each. Even the column details that will be modified are mentioned, which is very helpful.
noProblem The team used flow charts to explain , it was quite intuitive to understandÂ .
noProblem All changes are described in adequate detail and are easy to follow.
noProblem The changes that the authors seem to have proposed are explained well and are well aligned with the requirements of the problem. The authors have posted pictures describing the views and the flow of control expected in their solution.
noProblem Very good explanation. While the topics aren't super simple and the explanation alone may have been tough to understand, the UML diagrams plus screenshots really make it quite easy to understand.
noProblem Very easy to follow any your design makes sense. I think the only tricky thing will be ensuring that you are displaying the correct questionnaire for each team. Assuming that a questionnaire for each team would be unique then this should be pretty straightforward.
noProblem Yes , the team's work was clearly conveyed and the same was explained in the document
noProblem The project dosent fall in this catogory of questions. The task is db mogrations to make it more meaniingful, which the team has explained well
noProblem Question not very apt for this project
noProblem Yes, They include the content in first link to their wiki page.
noProblem this project doesn't need to change or coding somethingÂ new. it just checks the redundant and name confusion.
noProblem The planned steps mirror whats in the project description perfectly. The team has some ideas written down for how they will accomplish those tasks.
noProblem The design here is rather simple, create migrations to clean the DB, not much to comment or expand on. The team did a good job of keeping it easy to read and follow in the write up.
noProblem No diagrams, but its also not really needed so I didn't put any stars.
noProblem Too early to evaluate the changes. Will modify the review when they have included their implementation steps.
noProblem Too early to check those points. Will update the review when they have provided their implementation steps.
noProblem The team has covered almost all the functionalities as per the document (https://docs.google.com/document/d/1hEnWHshzGCvN5zBMA90L9-eQuuNKX7skYkkwwOQSjyU/edit). I do not have any suggestions here.
noProblem As I said earlier, they have tried to explain all the aspects of the projects. They did add what is expertiza section which was told by the professor not to do in last week's lecture, but well that doesn't matter much. They have added diagrams which I believe with a bit more details would be fantastic. Apart from that, great work!
noProblem The changes that they are going to implement are clear and detailed, easy to read and follow.
noProblem The team's plan is clear: to change visualization graphics. However,Â theyÂ haven't indicated what files they will work on in order to implement their design.Â So, it's not clear yet if their changes would make the code "smelly" or they would increase the response time.
noProblem Yes, the mock-up incorporates all of the required functionality.
noProblem 1) the authors plan to add method(s) to a wrong class No details about methods or class provided in the document. 2) the new design may potentially make the code "smelly" Not enough information provided in the document to judge if the code can become smelly. 3) the new designs look complicated and there might be existing gems that could simplify them Not true. The design looks simple and easy to understand. 4) the new design may potentially increase the response time of the systemNot true. 5) more effort should be expended on the design No, the design looks good and not rudimentary.
noProblem The proposed designs look very intuitive and have the potential to be useful if implemented properly.
noProblem The design changes haven't been proposed in detail that I can comment on the quality of code being added.
noProblem The diagram included is very good. Would help if there were mockups for the other changes being made as well.
noProblem The functionalities the team wishes to implement are easy to understand from the doc. The team has made a good effort in trying to explain what the changes would possibly look like. As there no predefined changes the authors are expected to make, it is difficult to explain in entirety what the end result would be. But the team has done a great job with whatever they know as of now.
noProblem It is very difficult to know as of now about the exact changes the team will make. But I think they are on the right track and the design they have proposed seems to do the job as of now.
noProblem The design does incorporate the given functionality of integration of review performance and class performance.
noProblem The authors have explained the changes sufficiently, a demo image has been provided for easier understanding.
noProblem They have mentioned all the functionality they wish to incorporate in the wiki. I would love to see how to project turns out to be.
noProblem The changes are easy to understand from the wiki. They have tried their best to explain what they wish to establish with the project with all the information they know about the project.
noProblem Hard to determine as there is no code present to check whether the changes will make it smelly. Overall they have explained it very well.
noProblem The design document is very well written. The problem statement and suggested solutions were described in detail. In addition, screenshots were used effectively to illustrate the problem statements and the proposed changes. The test plan is also very thorough as well, listing each problem, solution, and how to test it. Overall, this is a great wiki.
noProblem The design incorporates all of the funcitionality required and described in the problem statement. The specifics of each functionality is addressed, and the proposed solutions designed to implement them are well described and illustrated in theÂ proposed solutionsÂ section. It is apparent that this team has a very clear understanding of the scope of the project and have put a good amount of thought into the design of the solutions.
noProblem The explanaitions of the changes are excellent. They are able to relate the proposed changes to the problem statement, provide a visualization of the changes, are very detailed as to how the features will be implemented. One thing that is missing from these explanations is the files that they are modifying. If the doc had an overall section called Files modified or if each solutions explicitly stated which files are being modified and created, the explanations of the changes would benefit greatly.
noProblem The designs are well visualized, so it is apparent that the team has a clear direction for their proposed changes. In addition, the changes appear to be based on the view, so code smells and complicated code are quite unlikely. It can then be concluded that the changes will not affect the runtime of the system. The design appears thorough, and the team has a clear sense of what to do. I would suggest that a visualization be put in place for the second proposed change, as there currently isn't one.
noProblem Yes the design talks about all the functionality that were addressed according to the requirements document
noProblem The changes the author has suggested seem to be straight forward addressing the issues . And the changes were intutive and have been explained in 2 lines along with a diagram .Â adding a diagram after change for issue 2 would have been better. Â Also , if possible, where in the code the changes are to be made could be added
noProblem Your design document looks great so far!Â The task and problem statement is fairly straightforward and you highlight all the necessary issues that need fixing.Â Your proposed solutions and test plans also look promising as well.
noProblem Design incorporatesÂ complete functionality required for this project.
noProblem Your proposed solutions are great and the quality of each one is understandable to me.Â Overall, you all have a good understanding of your project andÂ have great proposed ideas in mind.
noProblem I like your use of a bar chart to display the Metrics of a student instead of displaying text.Â IÂ also like the idea of having each bar be a different color so that one is the average of all students, one is the average of just the student, and the others are the rounds for the peer reviews.Â For the second issue, while straight forward, you could have drawn up a mock design of whatÂ the review scores page would look like based on what you explained.Â Finally, for issue 3,Â I think it's a great idea to include another color to distinguish reviews that the reviewerÂ has made no revisions on.Â Is there a possibility to include another color, like yellow, to show if a reviewer has reviewed for one round and not the other if different questions are being asked in the second round?
noProblem The presence of screenshots for the current functionality and the proposed redesign provides good information to the reader. I would suggest adding more test cases to the test plan, outside of just the "happy path", and not going into the steps that each test case involves.
noProblem The design document does a good job of rewording and stating the pending tasks. It would be good to go into some detail for Issue 3 regarding color scheme of the reviews. More specifically, it would be good to see how the new changes will determine if the author has or has not resubmitted their work for the reviewer to review.
noProblem Applicable screen shots are used to describe the problems and proposed solutions. The only suggestion I would make would be to outline the problem in all three problem statement screen shots; this would mean outlining the white space in red for issue 2 and maybe adding an arrow stating that a red review is really red because the author did not resubmit. This would help make the screenshots more stand-alone.
noProblem The design document is well written. It contains all the major topics such as overview of the project. A complete and detailed explanation of the project. Proposed implementation and the Test Plan.
noProblem All the issues are clearly explained and all the functionality seems to be incorporated.
noProblem The proposed solution is very well put. It is easy to understand as they have included screenshots of the current scenario and how they wish to change it highlighting the current problems.
noProblem The design does incorporate all the changes required. they have done a good job in identifying what the issues are and what the related tasks are for each issue and what test cases would be there. The design does incorporate all the functionality
noProblem Yes the design document identifies all the issues and what test cases are there related to each issue which is something i really liked. Â "Check if the changes are appearing in the page as mentioned in the proposed solution" thisÂ particular statement is something i didnt like, it would have been much better to state what should beÂ the expected outcome.
noProblem They haven't mentioned which classes would be affected or what methods in those classes would be affected so its hard to judge this point. But based on the view it does appear they are moving in the right direction but its not possible to check for classes or methods.
noProblem The diagrams which have been provided give a deep insight of what and where the changes could be seen, the diagrams are a tad bit big, UML cannot be expected from this project as its completed related to view and controller. The diagramsÂ are just enough to give proper visual aid and are very helpful in understanding the project.
noProblem The design document was well written. It included all the major details such as project purpose, design(with screenshots) and a tentative test plan. The proposed implementation was also explained clearly and the team seems to have a clear idea about how to go about with the project. I liked the way they had screenshots of both the current system and the proposed system. I am reducing a point because UML diagrams and list of files to be modified were missing from the document.
noProblem Adequate explanation was provided on the features that are to be added. Everything from the problem statement to the proposed solution to the Test plan was explained. Also, the changes were explained in a simple manner and I had no trouble following what they had written. However, it would have been better if the explanation was complemented by UML diagrams and list of file changes. Hence giving a 4.
noProblem There were a lot of mockups which explained clearly as to what is the problem and how it is proposed to be solved. I didn't feel that any of the diagrams were unnecessary. However, I am reducing 2 points for the lack of UML diagrams.
noProblem All the basic parts have been incorporated in the project document.
noProblem Good visual information has been provided. If a flow chart depicting the various stages for each problem would have been a good idea.
noProblem The authors have done a great job in writing all details of the project elaborately. The only thing missing is a test plan for the project.
noProblem 1. There is a detailed explanation of all modules of the project 2. Images added to the project helps making a clear overview of the project and understanding it in a greatÂ detail
noProblem 1 The changes proposed are easy to understand 2. The plan of execution is clearly elaborated in modules
noProblem 1. The job described is appropriate and easy to understandÂ 2. They have done a good job in using images to help in visualizing things better
noProblem 1. Good amount of screenshots added to understand the project well 2. No UML diagram required for the project
noProblem Yes, it incorporate all of the functionality required.
noProblem It is apparent that the functionality required is known by the team and that they have a plan of action to accomplish the changes needed. Specifically, the Work to be done section does a great job of this, by listing the objectives of the project, and explicitly detaling how the team will tackle each of the tasks.
noProblem The teams document shows the completion of all the required functionality. It seems they completed it all during the OSS Project time line. The Subsequent steps portion of the Mozilla project description is included in the future work section, so they have plans to implement all the functionality required.
noProblem I didn't see any potential problem areas. I am also not familiar with the Mozilla codebase though.
noProblem The added screenshot of the randomly generated HTML page really helps readers to understand what is being created. Looking forward to seeing what it looks like after the future work is implemented!
noProblem The design is reasonable.
noProblem The work is explained very well. If there was a link to check the previous work, it would be easy to understand the future scope.
noProblem The explanations are taken from Mozilla. I can't imagine what they would do to improve upon them.
noProblem They're not so much adding stuff to existing classes as doing their own thing (as ordered by Mozilla), so that doesn't really apply. Servo is some of the smelliest code I've ever worked with. They couldn't possibly make it smellier on their own. ... Gems? This is in Python... Moreover, they are just doing what Mozilla told them to, so that's not really applicable. N/A. This is for testing, not for use in production. They aren't really allowed to expend effort on the design. It's not their design. It's Mozilla's.
noProblem There really shouldn't be many visual aids here. Too many would just clutter the page. UML diagrams would especially be inappropriate. Â The one screenshot they have is plenty.
noProblem Well after checking the specification provided for the project, it can be clearly observed that the team has covered all the required functionality in the documentation.
noProblem Covers the final project description perfectly, great work
noProblem Adding duties to each project and asking related questions so that they better incorporate what role each person had is a great idea. It appears they have looked into all the functionalities, the proposed implementation gives a good picture of how they plan to move ahead with the implementation
noProblem The doc incorporates all the functionalities required. The team has done a very good job of trying to explain every aspect in detail.
noProblem They have included all the functionality required.
noProblem From what I can see, the design seems to have taken into account all of the required functionalities. The document had an explanation on how each functionality was going to be implemented and also mentioned the names of the files to be modified and the new table to be created. The level of detail was such that even the primary key and foreign key of the table was mentioned.
noProblem The design appears to have incorporated all of the functionality they needed to. The team also was able to seperate the long paragraphs that the requirements were written in into clear action items, each with a detailed description of the problem, a picture to depict it, and what the planned changes are.
noProblem For the scope of their project the implementation the team has planned looks good to me. Most of the changes are in the UI part (View file, CSS changes) so they need to make sure they coordinate all the sections to different views and control the specific actions. It looks like the changes for the system doesn't require any additional gem so the implementation decision is correct. The team should have minimum code in the view so that it doesn't increase the response time of the system. Any of the implementation could make the code smelly so the team has to be careful in not putting too much logic into the view which is the standard followed. Optional additional improvements have also been given which is good.
noProblem There is a focus on reusing code wherever possible including utilizing gems.Â The changes should simplify the layouts which should only help the response time.
noProblem The design that the authors have proposed seems apt. There are no potential flaws in the design. They have done a great job of explaining everything in detail.
noProblem Overall, I do not think any of the proposed changes are "smelly" or will cause problems.Â They are all sensible changes that make sense.
noProblem All the visual aids are necessary. Show the functionalities directly.
noProblem The visual aids are extremely useful. All the diagrams are useful, to the point, succinct and follow the conventions. The high level diagrams are also to the point
noProblem The project is based on Mozilla and python. There may be packages that will implement the proposed functionalities. However, adding new functions may not make the code smelly as it is a scripting language.
noProblem The authors have provided adequate explanation by exactly specifying what needs to be done and how they are going to this at code level.
noProblem It is well explained. Good job.
noProblem The team has already identified the files that need to be changed and are planning to add a couple of new files. The team seems to have figured out a lot of stuff already, which is excellent. The explanation is easy to follow and is adequate.
noProblem The explanation is quite easy to follow and the proposed changes seem to be correct to be implement the intended functionality.
noProblem Adequate explanation was provided on the features that are to be added. Everything from the problem statement to the UML diagrams to the file changes to the Test plan was explained. Also, the changes were explained in a simple manner and I had no trouble following what they had written. Hence giving a 5.
noProblem As indicated in the proposed implementation, all the changes and additions that the team intends to do sound quite reasonable. They have also mentioned the files that will be modified/added. So, overall they have done a good job with the proposed design.
noProblem I don't think the proposed designs would cause the problems mentioned above.
noProblem The design proposed by the authors seems good. They have thought of every aspect as of now. I don't think there are any potential flaws that need addressing to.
noProblem 1) I didn't find any improper method additions in the design 2) The document explains how different constraints are to be handled and I don't see any potential code smells. 3) The design is simple enough and as most of the changes are in views, I don't think additional gems will be required. 4) Since the Duties functionality will be added to existing views, I think there won't be a major change in the response times. 5) The design looks good and the team should start implementing it For the above reasons, I am giving a 5.
noProblem Yes. The UML diagrams help me understand the project better.
noProblem the UML diagram really helped me understand the flow of this project. Without the diagram I think the write up may have been hard to follow, so I am glad the team included it.
noProblem The UML diagram gives a good idea of what approach they intend to take and where all the changes will be. The diagram is just enough to give a accurate depiction of changes required.
noProblem The UML diagram is a really nice touch that allows a lot of information to be shown quickly and concisely. It is suggested that similar mockups be added to the test plan and proposed implementation to serve the same purpose.
noProblem I don't think the proposed design would cause any of the problems mentioned above.
noProblem As far as the files that are concerned for this project, they have mentioned the name of the files and how they plan to add stuff to it. As far as the question asks if any of the work could result in a smelly code, I cannot find that much detail (not sure if it is required at this stage of the project) to evaluate that. I had worked on Mozilla project so I do not have enough knowledge to recommend which gems would make your job easier.
noProblem The team has made use of the design layout to explain visually on how the problem statement could be explained. All the diagrams are necessary and they help to understand as the team didn't provide any written explanations. Diagrams are drawn neatly. The diagrams are not high level, they give in depth information on the design.
noProblem Yes the design document in cooperates the requirements document specifications completly
noProblem The team has covered all aspects of the project mentioned in the problem statement.
noProblem As per requirements ad descriptions of their topic their design incorporate all the functionality that they need to implement.
noProblem The descriptionsÂ of their proposed changes are well-explained.
noProblem They have included which files they are going to modify. It seems reasonable to change them to improve the Expertiza application for an instructor user.
noProblem The design appears to be very sound. The authors have clearly thought out the implementation and design process. This is obvious from the files list they have added, and the detailed implementation details they have provided. None of the problems mentioned above seem to exist.
noProblem Files that need to be changed are listed. Can only comment on the code changes when the design proposals are implemented.
noProblem The proposed solution seems adequate for the requirements. They have proposed to make an extra view where the users(students) can add extra questions in the review,
noProblem Not a ton details (like classes) were added to the design document.Â However, of all the details that were added, none of them are "smelly" or seem to have any problems.
noProblem This is a good design for the task at hand
noProblem The subject like instructor should use a different shape to be distinguished from actions.
noProblem The team has made good use of flowchart and screen captures to explain functionality. There is not much text, given that the diagrams are sufficient to understand the work flow. The changes that will be made in the User Interface are also represented and it makes the document that much more crisp and clear.
noProblem Yes, the diagrams added are very helpful. The flowcharts added make their implementation ideas quite clear. They have added mock links in their views and added screenshots of that. I believe this is amazing as it gives the reviewers an idea of how the implementation would look.Â Just one suggestion would be to include the UML diagram , to explain the data flow from the controllers and models to the view files. This would make the implementation idea extremely clear and easier for the reviewer to gauge the implementation.
noProblem Good visual aids were used in explaining the requirements . UML diagrams provided required infromation
noProblem The images and visual aids explain the flow very well. There were no UML diagrams in the document though.
noProblem The screenshots depict the proposed solutions quite nicely. Some more screenshots can be added for the features described - like the review results page. Also, the first flowchart for creating SRQ seems quite unintuitive, as it connects the instructor enabling SRQ and student creating a SRQ.
noProblem The authors have posted a lot of pictures and flow diagrams explaining the solution. This makes the solution clear for a reviewer. They have described the design strategy with flow charts which is nice.
noProblem UML diagrams and screenshots were both included in this document.Â As stated above they really help in relaying the information to the reader.
noProblem The plan of work does implement all the requirements present mentioned
noProblem I like the user case block diagram, it was very descriptive on what users access what objects on expertiza, as well as how the UI will look like when its implemented.
noProblem Your testing plan is well developed for the TDD methodology. Checking if you can save a badge under different criterias.
noProblem Yes.Â From their wiki it seems they have totally thought throughÂ all the 4 implementations and had a clear plan.
noProblem The proposed file modifications for each change seem to be kept to a minimum.
noProblem The diagrams describe the changes to be made to the system visually.
noProblem A test plan is included. It covers the functionality to be added and does a good job of covering both negative and positive test cases.
noProblem The authors have clearly explained what they have planned to do. They identified the controller and associated views that need to be tested and have come up with an exhaustive test plan. Good work!
noProblem The changes are just to add a test script called users_controller_spec.rb and they have included all details about what tests they would make and include in the final file. Looks good!
noProblem Yes. Seems like the team has a clear understanding of what changes are to be made and relayed it in a concise manner.
noProblem This is a project composed of tests. I don't think this section applies.
noProblem This project only involvesÂ writing tests, and the team has identified an exhaustive list of test cases.
noProblem There is no mention of a design pattern and it doesn't seem necessary for them to include it. However, the tests seem to cover everything I can think of regarding the users controller.
noProblem Yes. Seems like all the sections are present and explained.
noProblem Again the tests provided are great, and there is not really a design pattern necessary for test plans so this deserves full credit.
noProblem Simple and clear and easy to follow.
noProblem No visual necessary, but the authors provided one anyway. I appreciate that you went over and above, and I wish I could give you more than 5 points for this because the visuals are great!
noProblem The team has one flowchart in place, which explains the workflow that they are going to test. However, it would have helped to show all of the views that would be rendered as well.
noProblem No visualization is necessary but they have a diagram depicting the current flow for the creation of the users which is helpful although slightly redundant.
noProblem The test plan is fantastic. All tests are well organized and test a clear piece of functionality. Great work!
noProblem The tests are very exhaustive. Good work!
noProblem Very thorough test plan. Seems like the team has given it a lot of thought.
noProblem The team have captured quite a few tests about how they would test the various methods of the users controller. The tests seem to be well thought of and have covered most of the potential cases where the system could fail. Good work.
noProblem They have clearly stated different scenarios: 1.Â PopulateToneAnalysisComments 2.Â ViewPositiveHeatMapMatrixChart 3.Â ViewNegativeHeatMapMatrixChart 4.Â ViewNeutralHeatMapMatrixChart 5.Â ViewBlankReviewScoresPopupPage 6.Â ViewBlankHeatMapMatrixChart Â I think this pretty much sums up on how much detail one can expect from this. They have followed the naming
noProblem 1. Testing plan is the best part in the wiki. It is the highly informative.Â 2. They have explained each and every use case and how they wish to test it.
noProblem Yes the design includes a very vivid test plan with each test enumerated with different scenarios. It seems to me that the team has considered all the cases that the system can go through and have devised a good looking test plan for their project.
noProblem Yes the team had cleatly mentione
noProblem 1. Very good test plan explaing in details all the possible scenarios 2. Good amount of effort taken in explaing the details for every type of user
noProblem Yes. The test plan is well written.
noProblem The team added Cucumber scenarios for 6 tests they are going to implement utilizing Capybara. Nice job on that!
noProblem Very detailed test plan. Seems like team has given the test plan section a lot of thought.
noProblem The major improvement they made after the first round of review is visualization. They had tried to sketch the frames on whiteboard which had minimalistic design focused on their part of the project but they went ahead and added details to the screen clearly showing the screens which is the best possible thing they could have done. I do not have any suggestions in this area.
noProblem Mockups are very good and they have been explained in great detail for all types of users
noProblem Lots of pictures and diagram aid the understanding of the reader.
noProblem Mockups helps us understand different scenarios and use cases that they need to implement it. The images helps us to understand the project very clearly.
noProblem All the tests seem appropriate.
noProblem A test plan is provided and it looks detailed enough to test all of the new functionalities of the system. However, I am deducting a point because rspec test files could have been mentioned where the necessary changes are to be implemented.
noProblem Test plan is included in the design doc and the test cases considered seem to cover the functionality implemented.
noProblem The team has written a test plan to test the views that would be affected by their change. However, they have not mentioned any tests for the affected controllers/helpers.
noProblem 1. The test cases are explaiend in a ery breif manner which is not clear in how they would work 2. The all use-cases should be taken into consideration
noProblem Looks like half of the changes are made to the view part of the system so manual testing is sufficient for that. The team has included most of cases that could appear in testing the controller part in the test plan. TheÂ tests doesn't look shallow. Good work team. Team could have provided information on what file they are changing or they are adding any new file for that.
noProblem The test plan included describes all the functionality that will be tested and looks very complete.
noProblem Pictures did wonders for explaining your point
noProblem There were a lot of mockups which explained clearly as to what is the current scenario and how it is proposed to be solved. I didn't feel that any of the diagrams were unnecessary. However, I am reducing 2 points for the lack of UML diagrams.
noProblem The team has made very good use of visualization to show what they intend on doing. Good work!
noProblem 1. Good amount of images are used to explain the before after changes.
noProblem The best part that the team has done is providing the screen mockups. They have clearly explained about how the current scenario is working. It is very easy for the reader to understand the changes.Â They have also shown how the proposed solution will work with mock up screens. Good work team.
noProblem As mentioned in the first round the team had done a great job with the visualizationsÂ soÂ I cannot findÂ any further improvement that is needed in this area.
noProblem Since their design is about UI mostly, so the screenshots they provided are enough for this topic.
noProblem This method sounds complex but when explained it seems actually quite simple. Good job
noProblem The design appears to be simple and I don't think any functionality is added without purpose. It looks like DRY principles will be followed in the implementation as well. Hence I am giving a 5.
noProblem The proposed solution appears to be simple and easy to follow.
noProblem The design appears to be simple based on their visual illustrations.
noProblem 1. Yes, they have a very simple and pragmatic work flow that can be implemeted with much ease 2. More cases could be added to explain how different types of users could be involved in different use cases
noProblem Looks like the team has found out the correct files for modification and the changes proposed also looks simple and no complexity is there in understanding from the proposed solutions. The team could have explained about the particular design pattern(MVC) or any design flow they are using to have more better understanding of the design/problem.
noProblem Yes, cannot find any significant complexities with the design.
noProblem changed files look appropriate and the proposed changes sound solid.
noProblem The design looks good. But it could've been supported with UML diagrams and design patterns to highlight the OODD principles used.
noProblem The design that they have given seems to be intuitive. They haven't mentioned any principles or patterns that they might have followed. So cannot comment on that.
noProblem 1. The plan is sound and seems to be clearly explained bullet points
noProblem Yes the proposed design looks good. The authors have mentioned the files that will be changed and have also described what kind of changes will be made to these files. The team has done a good job with the design.
noProblem The team has explained that the changes to be made are clearly. They have used visualization tools to show what the changes they have in mind would look like once they have been implemented.
noProblem 1. Clear and elaborate explanations 2. use of diagrams for shows how the work would help in course staff and other students to do the reviews
noProblem The author has clearly explained on what the problem statement is and then the solution he has proposed. The author has shown how the current scenario works and then has explained step by step on what all changes he is making for the desired output. It is easily understandable by the reader to know the changes the team has made. The team could have included a class diagram for better understanding.
noProblem Yes adequate explanation has been provided by the team and the document is quite thorough in this aspect.
noProblem The team was very clear in explaining what they would do. They also did a good job of simplifying the changes they will make to the DB schema, and how they will update the wikis. Overall, the team's design was quite clear, straighforward, and simple to follow.
noProblem This project was very different from the others . At first it appears that the team had not exaplined anything , but reading through it was quite informative
noProblem The project is about modifying the present data base and it was clear ,The question may not be very relevant in this case
noProblem The project is about cleaing us tables and getting them in sync. It was good simple and clear
noProblem No viscilizations needed
noProblem There is no need for class diagrams or visualizations in this project. The authors the structure of the tables in the database.
noProblem Tests are not necessary for this project.
noProblem No visualizations are necessary for this project.
noProblem They have explained that the databases that are unused need to be removed.
noProblem Simple and concise
noProblem No test plan outlined
noProblem It is unclear if they know how many databases need to be changed and how they plan to test if their changes cause side effects or how they plan to go about detecting unused databases
noProblem I liked the way the process flow of the system was shown in a graphical manner explaining each stage of the system. Since it was a visualization project, naturally more screenshots were expected and the team had improved from their first submission and provided more visuals this time, such as the visualisation of the red to green scheme for class performance.
noProblem The team has provided a clean design process flow of what the system is going to offer with necessary visualization to have the reader understand the design clearly. The design looks simple as almost all the changes are made to the view files.Â The design process shows how theÂ specificÂ screens are displayed by using the decision statements. Good work team.
noProblem This particular project is a visualization type and it requires necessary mockups/figures that describe the changes made to the system.Â The author has included a mockup screen on how the details are shown to the instructor. Design looks clean and neat. It is easy for the instructor to find specific information which is most important for any UI design.Â The team has included mockup graphs andÂ charts on what all operation could be performed. Overall the visualization part is done well by the team after looking over the first review comments.
noProblem Almost all the changes done by the team are in the view and so the test plan is not necessary. Though one controller is being modified by the team, they have mentioned clearly in the test plan on what file they are changing and what the changes are.
noProblem They have improved quite a lot from the first round of review. I noticed these major improvements: 1. Adding more content to the problem statement 2. Added design workflows to clearly describe step by step of how the user should interact. 3. Testing plan was empty during the first round of review which is now filled, so that's good. 4. Addressed the comments about visuals missing / different ways to represent it. Â Suggestion: It is nice to see significant improvements and you have tried to address almost all the issues. Judging by how your project is, I feel that more diagrams would make it really nice to visualize. You have lot of factors like:Â number of reviews performed, the length of the reviews, the summary of the reviews, whether or not the reviewers uploaded a file in their review, the average ratings the reviewers received from authors
noProblem I think this is a good enough test plan. They did not have a testing plan earlier which they have now which is nice. I believe it is okay to keep the same tests as the previous version, however adding more additional tests, ensuring the previous work is not missing any required test cases would be something I would include in the doc.
noProblem Yes, the team did an excellent job concisely explaining what the problem is and what they need to change to enhance the visualization for instructors.
noProblem Everything is well-organized, all sections are descriptive to the point. They have added the testing plan and more visual aid since the previous submission. Good job!
noProblem Yes, the design is very clear, no clutter, the flow is intuitive and very easy to follow.
noProblem WithÂ the second submission the team did a great upgrade of what they had for visualization before. More charts, more explanations, a nice graphical process diagram, all were dded to enhance the design document.
noProblem The team mentions to add RSpec tests.
noProblem The chart showing stacked bar charts could be simplified to make it easier to see the relative percentages of teams in each scoring range.
noProblem The authors have painstakingly explained every aspect of the project in great detail. The doc is very well written and is easy to follow. Visual aids are added wherever required. They have done a very good job.
noProblem The design that has been proposed is very sound and easy to understand. The mock up screen they have provided is very intuitive and follows appropriate principles.
noProblem Yes, the design is simple and very easy to understand. They have proposed various options that are possible. All the designs are very intuitive and easy to follow.
noProblem The authors have added visualizations wherever needed and it makes the doc very appealing and easy to follow. The graphical flow of the process is apt and easy to understand.
noProblem Yes, the design includes test plan. The main task here is refactoring the previously written code. They intend to test all the functionalities possible.
noProblem Yes, the authors have adequately explained the changes.
noProblem The team has explained the design well with the help of graphs and flow charts which i had suggested earlier. I am able to understand the flow due to this.
noProblem The diagram does represent the project clearly.
noProblem Without the UML it is difficult to tell the simplicity of the design, but based on the mock-up of the webpage I believe that the implementationÂ will be as simple as possible while also communicating the appropriate information.
noProblem 1. Yes, the block diagrams are helping in getting an overview of the project 2. Mockups added for better understanding
noProblem The authors have improved the documentation after previous comments. There have added the application flow diagram which is very helpful. The authors have clearly mentioned the changes they want to implement.
noProblem Since this project is relatedÂ adding reports. The designsÂ are mainly UI changes. The authors have given an application flow of their changes. The design of the flow seems reasonable. They have also provided mock-up design imagesÂ that are very helpful.
noProblem Given the requirements that are mentioned, the design is crisp and to the point. The authors have done a good job explaining the various elements of the design. They have provided application flow diagrams as well as mock screenshots to support the same.
noProblem The authors have provided application flow diagrams to explain the flow of the UI for their design. They have also added mock screenshots of the graphs that they will project on the UI. They have added all the required figures to explain the changes that they wish to do.
noProblem Very well explained. Used pictures to show their intended changes.
noProblem Seems like all the section are there and are well explained.
noProblem Yes. Easy to follow and understand. Lots of pictures are used which helps.
noProblem Lots of figures and diagrams used to explain what the existing expertiza and how they plan ot change it.
noProblem Yes. They mention that they will refactor some of the previous team's code and add newÂ tests based on the features they add.
noProblem The team did a great job in explaining the changes they will make. A combination of clear and concise descriptions and detailed visuals communicated the team's changes excellently.
noProblem The design appears to be simple and clear. The team's use of numbered lists really added to this, as it was very easy to see what the problem was, and how the proposed changes addressed them while maintaining simplicity.
noProblem Even though the team's work is mainly UI changes, they did a good job of detaling what exactly the are going to be doing to test their changes. This transparency and clarity contributed to the team's good test plan.
noProblem Yes , the authors have clearly explained the changes made to the system . 3 changes are being proposed in this project and each was explained, visualized and had a text mentioned
noProblem The design of introducing new components was pretty much clear
noProblem Visualizations was pretty clear in explaining what change was being proposed
noProblem Yes the team did include a text plain , but it appears like a finctionality testing , which is suitable for this project , But if the team could add in more , like units being tested , it would have been great
noProblem The changes are well explained and easy to follow.Â Â Each issue in the Proposed Solutions section is straightforward and addresses a simple solution to fixing each problem.
noProblem Design seems to simple as possible.Â All that is being done is fixing existing code and adding in new features to pretty up the review summary page and review reports page.
noProblem Visualizations look great!Â As I mentioned before in the first round, I like your use of a bar chart for the first issue and the different color distinction for the third issue.Â However I think a visual aid could be useful for the second issue to show that changes you plan to make to the Review Summary page.Â Refer to myÂ suggestion in the first round if it is of any use.
noProblem Test plan is present in the documentation; however, I think the test plan couldÂ be detailed a little more and include some edge cases.Â For example, checking if the visualizations are appearing in the review report is a little vague.Â You could split this up into two different tests where one tests the appearance of the bar chart and one that doesn't show a bar chart.
noProblem The requirements set forth by the description are adequately satisfied.
noProblem A class diagram is not needed for this document since these are only UI changes. The mockups provide good visual detail of what the final product will look like. The "Visualization of Metrics in Review Reports" bar graph is a exceptionally descriptive and needed graphic that shows that the authors have thought about how exactly the information will be displayed
noProblem The authors have explained the issue and explained the changes that can be made in order to address the issues are quite good.Â They could have included the flies that need to be edited and what changes will be made in the respective files to make it clear how the changes will be implemented in the code.
noProblem Yes, the changes that are proposed to be made are simple to understand and the screenshots attached make it easier to follow.
noProblem They have included a test plan and considered a good amount of test cases that should test the overall functionality of the project.
noProblem Adequate explanation was provided on the features that are to be added. Everything from the problem statement to the proposed solution to the Test plan was explained. Also, the changes were explained in a simple manner and I had no trouble following what they had written. However, it would have been better if the explanation was complemented by UML diagrams and list of file changes. Hence giving a 3.
noProblem The design looks good. But it could've been supported with UML diagrams and design patterns to highlight the OODD principles used. Also, a list of files to be modified could be added.
noProblem The authors have clearly stated the changes which are to be made.
noProblem Yes, the design appears to be sound. The proposed solutions do make sense which can be understood with the help of diagrams.
noProblem The team has proposed some solution for the respective issue. The solution for each issue appears to be simple.
noProblem Yes, the diagrams clearly describe the system. It would have been clear if the second proposed solution had a diagram or a screen capture to view the changes.
noProblem The design includes a through test plan.
noProblem Yes the authors have explained the changes very neatly. Since round 1 the authors have made the wiki page is very informative. The use pf images helps in understanding the project.
noProblem From the wiki, I can understand what the authors wishes to do and how they wish to do. However, it is hard to determine which pattern they have used and which principles they have followed. But from the wiki, I can say the design is upto the mark.
noProblem The images and mockups are the best source of information in the wiki. The mockups show how the changes will work which makes it easier to visualise what the authors want to do. Although the authors have made mockups, the final product may not be the same
noProblem The authors have mentioned the tests they wish to do before deploying their project. According to my understanding the authors have covered all the tests they should. However, after implementation of the project the authors may realise that there may be more testing that they need to do.
noProblem Well explained using screenshots and detailed sections in the doc.
noProblem Well designed. The team did not seem to miss any major sections except that they could have included what files they plan to make changes to.
noProblem Yes, the doc is simple, clear and easy to follow.
noProblem Lots of screenshots of the existing expertiza to make their point. Also included picture of proposed implementation which was great.
noProblem Included what the test plan should look like. Seems like they covered all the cases.
noProblem Good explanation and demonstration of the work they want to do. Easy to understand.
noProblem Yes, seems to include all the required sections in the design doc.
noProblem Easy for the reader to follow and understand.
noProblem The design doc has many pictures and diagrams to help the reader visualize and better understand the objective of the project.
noProblem Yes. Includes a test plan which I think covers all the scenarios.
noProblem The authors clearly outlined the work to be done on the system in their aptly named section, and provided explanantions of their implementations and outcomes.
noProblem Based on the doc, the authors are properly expanding the previous work done to meet the criteria set out by the project requirements.
noProblem Great job explaining the extension of your previous project.
noProblem The design seems simple. Extending the generation capabilities and adding image comparison seem pretty straightforward.
noProblem This design is as simple as it can be
noProblem The one flowchart was great at explaining the progression of what you project does.
noProblem The design document clearly mentions the purpose of the project. They also mention the proposed next step. The authors have added the Test plan in the document. They have also given the application flow which makes the design document clearer than before. The document is clear enough.
noProblem Yes. The authors have made a very straightforward approach to solve the problem. They have clearly articulated their strategy for the same. They have used suitable diagrams and explanation to support their approach. It is clear enough to understand.
noProblem The authors have given a flow chart of the application process. They have clearly described the application flow and their strategy to solve the problem. They have also added screenshot of sample HTML that they want to test.
noProblem According to me the design is pretty good. As they have not mentioned any use of principles or patterns, it is hard to understand which they have used. However, from the description the approach and the changes look good enough.
noProblem Yes. the authors have taken a very simple approach to their task. Since the project involves only making an automation script in python, the work is not much complicated. So the approach towards this problem will be a simple solution which the authors have taken.
noProblem The authors of the design doc adequately explained the changes that needed to be made. Most of the explanation was similar to the first iteration of the design doc, but even the first iteration of the design doc did a good job of explaining what needed to be done.
noProblem I understood the design plan, and I think it is straightforward enough that others will think the same too.
noProblem The design seems simple andÂ clear to understand. The fact the the authors included a flowchart made me understand the approach very quickly.
noProblem It wasn't really designed by the team as much as Mozilla, so, yeah, it does just fine.
noProblem Yes, the team has done an adequate job explaining the changes to be made to the system.Â The team has added to their design since the last time I reviewed them, and I am pleased to see that they added a new diagram describing the system they will be working on at a high level.Â The diagram looks great and is super helpful in understanding what is going on!
noProblem Yes. They have explained well the changes to be made to the view, model, database, and controllers. They also included how the view would look like after the implementation. It is well documented. Good job. However,Â the part where it mentions "Approval of badges by instructor" is not so clear me. It introduces a concept "student-suggested badges". I don't know where and how a student could suggest a badge for certain submission for a assignment. Is it about the badges assigned to the teammates?
noProblem This teamÂ did a great job explaining what theÂ changes to be made toÂ extend the functionality of badging, they provided the purposes behind them. Great visualization is seen throughout the design document.
noProblem The team has adequately stated the changes to be made in the project.
noProblem Yes. Their project is anÂ extending of a previous project and they included both the previousÂ implementation and their new changes to functionality of badging. They also removed the introduction to expertiza as I suggested in the previous review which is good. Now their wiki is descriptive. They got "Motivation" and "Problem Statement" to illustrate their changes and goals. I think can find everything I need, so it's perfect to me.
noProblem The sections are all there, and I think they have explained the content well.
noProblem A good high-level explanation of the functionality to be implemented is given. For the "Creation of new badges" and "Approval of badges by Instructor" sections, it would be helpful to see visual mockups.
noProblem Yes the team has explained what changes are to be made for the project and have explained them adequately using diagrams and visuals.
noProblem The document covers the changes that the team will be making and seems to know how they'll be tackling them. It's not hard to follow and I can understand it clearly. They have included good visualization to help with the understanding. It seems like it is a good functionality to add, well done.
noProblem Yeah. I would think so. They are following the mvc pattern.
noProblem Yes, the content of the design is well-organized and well-written, everything is its place.
noProblem The design looks fine. I would suggest adding any design patterns that you are using or explain why you do not need to use any patterns for this project. I think that is the most unclear part of the wiki, but not a serious issue.
noProblem Yes the design is sound and has all the content that matters to the project. They have explained the project well using visual aids.
noProblem The use of mockups, screenshots and explanations helps a lot to follow their design and to understand the purpose of their project. The flow is intuitive. Good job!
noProblem Yeah the project itself appears to be a fairly straightforward one. Just add Good Teammate and Good Reviewer Badges to views. The visual
noProblem Yes the design seems to be as simple as possible and seems to have enough detail about what needs to be changed in the project.
noProblem While the feature is tricky and complicated, the team seems to have figured out a way to design it in the most efficient manner and keep it as simple as possible. If executed correctly, it can be a good feature.
noProblem Yes. The usecase diagram and the after-change view diagram helps a lot in making me understanding the changes to be made.
noProblem This team input a great effort to create good visualization to support their design doc. They added Usecase Diagram, UI mockups, great explanations alongside with the visualization aid.
noProblem Yes the authors have used visuals and figures well to explain the project. They have shown what the views will look like and they also have included the use case diagrams which shows the different ways in which a user will interact with the changes made in the system.
noProblem The test plan is well written.
noProblem They have the test plan, nd it's pretty descriptive. However, they could have explicitly stated what testing techniques they are going to utilize (Cucumber scenarios, Capybara, RSpec).
noProblem They have a solid set of tests that they plan to implement using the TDD approach. This will help the features developed to be fool proof. They could definitely add a few more test cases as and when they develop the feature.
noProblem Yes, the authors explained the changes on system in detail. They introducedÂ what to do and why for every change.
noProblem Yes. The authors have provided detailed explanations with pictures that makes it easier to understand what the UI is right now and what changes they plan to make.
noProblem The authors have explained explicity what the current system looks and works like, and exactly what changes they are going to make.
noProblem The doc is very descriptive and well written. It is very clear what the changes are going to be and what is expected of these changes. The authors have done a great job of covering all the aspects of the project.
noProblem The authors have explained the changes to be made very well. They have made use of visualization tools wherever applicable to show what the system would like after they have finished implementation. They have also gone to the extent of mentioning what columns/rowsÂ in a view would require modification.Â Good job!
noProblem Yes. The team has explainedÂ how current expertiza is and what changes they plan to make it better. Clear and concise.
noProblem Yes, the design appears to follow appropriate principles and using appropriate patterns.
noProblem I don't think that the team missed any section and explained each section in detail.
noProblem The design appears to be sound and follows the specifications quite directly. Since the changes for this project mainly lay in the UI, principles and design patterns are not very necessary for this project's design. Suggested changes will prospectively enhance the UI and maintain core functionality as described in the doc.
noProblem The design appears to be sound. It is very intuitive and follows appropriate design principles.
noProblem The changes proposed are mostly to be implemented on the View side and hence I don't think there is any need for a design pattern. However, the changes mentioned seem to follow appropriate principles without any complicated need of changing the controllers.
noProblem Yes, the design doc has included all the major required sections.
noProblem Yes, every step in design seems to make sense. And it aims to the targets directly.
noProblem Yes. The design doc is simple and clear. Relays the message authors are trying to convey in a concise manner.
noProblem The design was straighforward, and the authors communicated their objectives very clearly. There does not seem to be anything confusing or overly complex about this design. The screenshots helped in this aspect, by providing context and visualizations of certain parts of their design.
noProblem Yes, the design is very simple and makes certain metrics easier to understand. Also, it adds to the visual value.
noProblem Yes, it does. Based on what they've written, it appears that they've identified exactly the right parts that need to be modified in order to get achieve the goals of this project.
noProblem The designs are simple individually. They authors have done a good job in explaining them as well. The screenshots with each feature are particularly helpful.
noProblem No changes are to be made on the controller side from what the wiki says. Hence it appears that the design will be simple and should easily reflect on the UI.
noProblem Simple and easy to understand.
noProblem Yes, every change on the system is followed by a introducing picture. It is very clear to introduce what happen.
noProblem The figures that the authors have included give the author an idea of the current scenario of the views and it helps the reader to understand where the proposed changes will be made. So, the team has done a good job in this area.
noProblem Had lots of screenshots to explain the project.
noProblem The team has worked really hard to provide great visualization for understanding the project. They have given screen mockups for all the changes they are doing in the Review Report Page, Review Summary Page.Â Great work team. No improvements for this particular section.
noProblem The team has made very good use of visualization. They have clearly indicated what the current issues with the UI are, and what the UI would look like after they have implemented their changes. Good work!
noProblem Design docÂ has many pictures and diagrams to make sure reader understand the purpose of the project and what changes the team want to make.
noProblem No the design doesn't appear to be simple, but the proposed design is explained in detail.
noProblem Use cases, images of the proposed design have been included in the doc.
noProblem There have been several updates since the previous reviews were performed and the changes have done a great job of explaining both the previous changes, and the upcoming changes. Good work team
noProblem The author well defined the changes that were made till now and the changes that need to be changed for the second part of the project. The author clearly stated the goal of the project, the test plan etc. The author also improved the submission from the first submission by adding a brief description of subsequent steps. The author has also used visual aids like screenshots for a better understanding of the project.
noProblem During my first review, I stated that I was confused about this. Now, the additional explanation of the Subsequent steps in the Implementation section helped me understand the goal of the project a little better.
noProblem The changes have been well documented and presented
noProblem The changes that the team suggests sounds reasonable. They support their document with all appropriate sections.
noProblem The design document appears to be sound with all the required principles and sections. The design document is also has a brief description of the subsequent steps which is a good improvement for the second submission.
noProblem The design seems to make sense. It shouldn't cause any negative effects with the prescribed implementation as per the spec. Furthermore, design patterns were not applicable to this project.
noProblem The design looks good. The code additions do not require the implementationÂ of a class and were described well. Since the code additions are somewhat small there was no need for any patterns or UML diagrams.
noProblem Since parts of code are being added to an already existing system, design should already be sound and follow appropriate principles and patterns.
noProblem Yes, the proposed design is thorough.
noProblem Design seems to be as simple as possible with my limited knowledge of canvas rendering.
noProblem The team did a great job of explaining the changes that are made, and how they impact the project as a whole. The inclusion of images and code snippets really shows how simplistic the team approached the problem.
noProblem The design appears to be clear and easy to understand. It clearly describes the goal of the project, the changes made in first submission and the steps to be implemented for the second submission. The design document also incorporates a brief description of the subsequent steps which made the steps easy to understand. The document also included the screenshots of the work which helped to understand the intent of the project.
noProblem The design is simple and clear. The project spec (and the description in the Implementation section) lays everything out that the end result will be easy to understandÂ for most.
noProblem I think the design is very easy to understand though it does seem that it will be difficult to implement.
noProblem The design itself is complicated, but it is broken down into numerous steps which are easy to follow.
noProblem Since it is a mozilla project, it is hard to determine the complexity of the project. Since I have less experience with rust, I cannot understadn whether the design is complicated or not. But as per my understanding the design is OK.
noProblem This was one of my biggest complaints in the previous round of reviews and the team really knocked it out of the park this time. very very good work, the examples of the canvas renderings and the testing page really make this project easy to grasp.
noProblem The screenshots clearly depict the work that needs to be done. This adds to the written explanation to easily understand the project. The screenshots also depict the changes that need to be made in the system.
noProblem Test cases were made to test the operation time and efficiency of drawing canvases.
noProblem Since the main problem is the performance, they have added a test for measuring the performance time that they are going to use.
noProblem No test plan was required for this project. The only 'test' was checking up on how slither.io performed after implementing the Subsequent Steps.
noProblem There is a small section about testing which I believe doesnt cover all the functionalities. But being a mozilla project, I dont know whether the project requires testing as a part of it.
noProblem Yes. They explained very well the changes that need to be made.
noProblem Yes, the design looks good to me. But I don't know the specific principles or patterns they are using.
noProblem Yes. I think so.
noProblem Yes the authors have done a good job with the explanation provided for the proposed changes. The proposed implementation section of the document includes the changes that the team intends to incorporate and it also includes details about how the team is going to achieve those changes. So, overall a good job.
noProblem Compared to the first version, this has massively stepped up. My initial complaints have been dealt with, so I'm not really sure what to add here.
noProblem The changes need to be made to each file are well explained. Great work. The database changes, instructor view changes, and student view changes are so well explained. Good job.
noProblem Yes, the authors have adequately explained the changes that are to be made in the system. The doc is very descriptive of every little detail of the project.
noProblem The authors have very clearly mentioned what the changes to be made are. They have structured the document very well starting with the rationale behind their choice of design and went onto explain their implementation plan and test plan. Good work!
noProblem The design documented is well written. It has an elaborate explanation of the changes that will be made or the implementation. They have included the screenshots of the view that are modified making it easier to follow.
noProblem I cannot find any significant flaws with the proposed design. The approach mentioned by the team sounds quite reasonable.
noProblem Yes, the design appears to be sound. All changes to the DB seem to be well thought out and have been supported with good arguments.
noProblem Yes, as stated earlier I cannot find any complexities in the methods that the team has suggested.
noProblem Yes, I think so.
noProblem The design looks simple, but more explanations about the design could have been provided
noProblem Yes. They just included the necessary information and it's concise and easy to follow.
noProblem The design does appear to be simple and intuitive. The design has been well though of.
noProblem The design is complex - however, this project requires a design of that level of complexity. It is easy to follow as the team has explained their plan very well.
noProblem Yes the team has worked on the suggestion provided in the first round and have included a brief explanation for the UML diagram. The team has done a good job with their choice of visualization.
noProblem Yes. TheÂ UML diagram helps me in understanding the changes.
noProblem The UML diagram seems apt and helps make things easier to understand. There are screen mock ups too to help with visualization. This has made the doc very easy to follow.
noProblem The team has presented a UML diagram that clearly explains what the interactions between the new classes would be like. Additionally, they have also included a screenshot of a view that will require changes.
noProblem They have included UML diagram and screenshots to explain the implementation. UML diagram is a little hard to follow apart from that everything seems to be fine.Â They have also included files that need modification and also explained the changes that will be made in each file.
noProblem The class diagram is detailed and explains the class level changes to be made to the system clearly. However, I felt more screenshots could have been provided of the different views and hence I am deducting a point.
noProblem Yes the document includes a test plan and it mentions what kind of functionalities that are going to be tested.
noProblem Yes, the doc has a detailed test plan.
noProblem Yes, the design does include a test plan which seems to cover all the functionalities as of now.
noProblem The team has come up with a few tests and have done a good job with grouping them into categories.
noProblem They have included testcases and seem to have considered enough test cases to check the functionality of the design.
noProblem They explained well on the changes to be made.
noProblem Yes, the authors have adequately explained the changes which are to be made in the project.
noProblem Yes the authors have made a very good attempt in explaining the new changes to be made to the system , like the scores
noProblem The authors have clearly explained the requirements of the project. The "Planned Approach" sectionÂ has been expanded after last review. It clearly articulates their approach for all the three problems.
noProblem Yes, the team has done an adequate job explaining the changes to be made to the system at large. The team's project is to improve self review and link self and peer review to derive grades.Â The team has done a great job explaining this in detail both writing, and visually with diagrams and pictures.
noProblem Yes the proposed design sounds very reasonable.
noProblem Yes, the design appears to be sound. The score calculation and corresponding explanation is given in detail.
noProblem The design seems to be clear. the alternatives are neatly mentioned in the report and have been explained well, all in all the design seems to be sound and seems to follow appropriate principles.
noProblem Yes, cannot find any significant complexities in the suggested design.
noProblem Yes , the design is concise and simple. It is not that complex and have been explained with adequate details. The different mapping functions for the peer review and self review have also been included which has made their design clear and helped me understand their idea completely.
noProblem The team has considered the feedback from the first round and have added additional screenshots which help the reader understand how the proposed changes will affect the UI.
noProblem 10/10 visualizations. Â You used conditional formatting. Â <3
noProblem The team has made good use of the heat-map diagrams for different scoring techniques and the mocks for showing the instructor and student view for review report. The comparison table for different approaches provides a good overview
noProblem Good visualization were added. I was impressed by how the sores were plotted with colour. It was a very easy was depecting how the scores change with different parameters..
noProblem The team has displayed tables representing how for each of the alternative formulas the result will look like, they have also shared a screen cast of how the heat maps will look like .
noProblem The test plan provided in the document covers most of the new functionality that needs testing. So, the team has done a good job with the test plan.
noProblem Good job. The test plan is well written.
noProblem The team hasÂ improved drastically from the first round of submission. As per my previous comments about explaining more information about the background, adding clarifications to the existing pictures, they have addressed all the issues it seems. They have gone in depth to help reviewers understand what is Peer Logic and why they will be using it. They have created detailed screen wireframes which clearly show what the pages look like and they have arrows pointing the workflow which shows how user interaction will be. It was really hard for me to come up with a possible improvement/suggestion, the only thing I can think of is you can add method names as well to add more details to the doc but I am not too sure if that would be a requirement.
noProblem Yes, they seem to have improved heavily from the previous round.Â 1. They have mentioned clear steps as to what method they are following 2. They have clearly mentioned how the views will be different for different types of users 3. I don't think I can come up with possible suggestions in this area.
noProblem They have worked to address all the comments made in first round of review and improved a lot on the design and visuals. They have added detailed screens to it is clear and easy to follow/understand. I cannot come up with possible suggestions in this area. A possible suggestion would be to link this image to where it was originally created so it isn't this pixelated and users can directly view the original image.
noProblem A good explaination about the changes to be made for the project was given
noProblem THe design appears to be sound and following the patterns as per the general flow of the text
noProblem The desin did what exactly was needed . No extra stray changes were being made
noProblem A very good use of visualizations was made in conveying the click by view changes using arrows in the text
noProblem Yes the team has done a good job in explaining the changes that are supposed to be made to the system. They have drawn UML diagrams and have explained the test plan well.
noProblem Yes the design appears to be sound. They have briefed upon all important aspects of the project and explained what is important with good amount of details.
noProblem Yes, The design seems to be simple. They have given a flow chart view of how control is gonna flow when going through the use cases and have done a good job of explaining what needs to be done.
noProblem Yes, the team has done a good job in explaining changes that are supposed to be done using diagrams. They have a flowchart using wire framesÂ Â showing the flow of the user control to each of the updated views. They have also drawn a UML diagram showing how they are going to use the API calls.
noProblem Since the last review, the authors have stepped up their game. The wiki is very good with images and explanations. i really like the wiki and the efforts they have put in after round 1 reviews.
noProblem Since the last review, the authors have made a lot of changes in their wiki project. They have explained each and every bit of the project.
noProblem Yes, the team did anÂ great jobÂ adequatelyÂ stating what the problem is and what they need toÂ add and modify toÂ make the grading process easierÂ for instructors.
noProblem Great work! Everything is well-organized, all sections are descriptive to the point. They have added the testing plan and more visual aids since the previous submission.
noProblem The team's design documentÂ is very clear, no clutter to be seen, the flow is intuitive and very easy to follow.
noProblem WithÂ the second submission the team didÂ some upgrade of what they had for visualization before. UML diagram, more explanations, wireframes, all were added to enhance the design document.
noProblem The designed document is extremely well written and all the changes have been explained
noProblem Yes, this is one of the better design docs. It follows all the principles and design patterns
noProblem Very well explained. Great used of visualizations.
noProblem Seems like the design doc covers all the major sections and explains them pretty well.
noProblem Yes. The design is easy to follow and understand what the team is trying to do.
noProblem Pretty self-explanatory, but they do break down the controller very well.
noProblem There isn't much design involved here since the project is just writing tests for controller methods
noProblem Design, again, is simple since only tests will be written
noProblem The project is technically the test plan
noProblem They've separatedÂ methods to be tested out and explain how each of them is going to be tested.
noProblem Though the diagram is not about the changes they are going to make since it's a test topic, it still shows how the object being tested works so that their test would make sense.
noProblem Massive improvements on this one from the first round. Good job.
noProblem The details are very well explained including the flow charts. They are visually very appealing
noProblem The team had made a very good attempt in explaining the changes . They were in a very clear format
noProblem The document is well done and complete. It explains all the changes involved in adequate detail.
noProblem Very clear on what exactly the problem is and what your implementation is going to be. The visual aids really helped.
noProblem Yes, the design appear to be sound and follows the appropriate design patterns
noProblem The design was clear and was seen to go on well with the appropriate patterns . They wernt major changes being proposed from code point of view, but everythign was in place
noProblem Yes the design seems to be sound , the different topics are well explained and seem to have enough information under them. I feel the different approaches or design alternatives could also have been mentioned.
noProblem The design document looks to have all relevant details about what the team has set out to achieve. They have mentioned all details about the files they are concerned with, which is good. There are no mentions of the design principles or patterns they will be using and this is important since they are building a new model as well. However the UML diagrams mostly depict the approach they plan on using.
noProblem At a top level, the design looks good though, knowing expertiza, It may be a little more complex once you start digging into it
noProblem Yes, the design appears to be simple but includes all the necessaryÂ requirements
noProblem The design from the explaination in the wiki shows steps very clearly and they are minor changes in different views and it was in the flow of the general expertiza style
noProblem The proposed design is very simple and very intuitive. I believe it will be very useful.
noProblem Very simple. They are manipulating current functionality of expertizaÂ to add this feature.
noProblem The diagrams they gave are pretty good. it's enough for readers to understand their design just by looking into the diagrams without reading other explanation.
noProblem MASSIVE step up from the first round. The flow diagrams are actually valid flow diagrams now! The screenshots are a bit excessive, but the improvements are clear.
noProblem The design diagram is visually very appealing. The authors have done a very nice job with the use of flowcharts
noProblem A very good work was done with viscualizations , every click was explained with a view that made is easy to follow
noProblem The authors have taken into consideration feedback from the 1st round and improved the flowcharts. It makes much more sense now and is easier to comprehend. Additional screenshots were added which also helps.
noProblem Yes the team has used a flow diagram and have uploaded screenshots of the changes that are supposed to be made. This makes it very clear to the reviewer where the changes are going to be made.
noProblem The UML diagrams are helpful and they have explained it with the use of mockups pretty well and hence I don't feel the need for further details regarding the flow they would take. The images convey what the current system is like. They also have some images depicting how it would look after the changes.They also fixed the previous contradicting UML diagram. So, good work.
noProblem Like mentioned before, the visuals were great at pointing to what exactly you are planning to do.
noProblem The tests are pretty limited, but they seem like they would get most the functionality tested. Â I'm not sure I would've realized there were any problems if you hadn't told me, though.
noProblem Yes, the design includes a detailed test plan
noProblem A basic test plan was mentioned but it was at a very high level
noProblem A basic test plan is included which I feel tests all the essential changes being made.
noProblem The test plans seem to be short on the number of tests they plan to run but they mention that they will be working on it as and when they progress in terms of developing the application. So hopefully they will have a very well tested feature.
noProblem Proposed tests look solid. Maybe add a test for if a student doesn't add supplementarily questions, that the system still acts accordingly
noProblem Of what code is available in the zip file, most of it is understandable. The devise gem seems unnecessary to their implementation however.
noProblem Github link is not submitted. I downloaded the repo and It has barely 4 commits with basic scaffolds and schema generated for realtors and houses
noProblem The link seems to be a local deployment.
noProblem All tests in the zip file are scaffold generated.
noProblem Yes, the house controller has been tested.
noProblem No testing has been done apart from the auto-generated tests.
noProblem The zip posted doesn't seem to be updated again later after 1st Oct
noProblem Yes, the controllers have been properly tested.
noProblem There are 24 commits done, however all have been made on one day.
noProblem There are no proper commit messages.
noProblem No, I just see all commits happened in one day, so I don't think the team has been keeping on pushing their changes.
noProblem No, there has been only one commit on 10/01.
noProblem All the changes were pushed on a single day. the last day of submission.
noProblem Interface is very basic It lacks in many major functionalities that made the navigation through the site difficult. README was not well described to understand the team's work and their functionalities.
noProblem The ruby coding convention has been followedÂ through out the project.
noProblem The MVC structure is good, but some details shouldÂ be improved.
noProblem Yeah in a way. The scaffolding generated code follows convention.
noProblem The code follows the common "Ruby on rails" application structure: Hence, it was easy for me to navigate through other files to see portion of the code. It follows the common MVC structure. However, In some parts of the code, comments were missing which was confusing as I didn't understand the logic for that code. README file was not properly described for other users navigating through app.
noProblem The controllers are well-written.
noProblem The code follows "good Ruby and Rails coding practice" from my point of view.
noProblem Have used DRY principles. The code has good readability and good naming conventions are followed. Have grouped similar functionalities into classes so that it is modularized. Have used iterators such as each instead of for and while.
noProblem UI/UX is awesome and intuitive. Read me file is also well described.
noProblem The user interface is easy to use and the README file is explicit.
noProblem Great UI. Admin dashboard looks very professional.
noProblem Yes you have the tests written.
noProblem The basics test are written. Some application specific tests can be written.
noProblem It seems that there is only one team member pushing changes.
noProblem The model and controller are well designed. Each method covers a single functionality! Good job
noProblem The MVC structure is completed. and basic functions have been finished.
noProblem the interface is good, clean and very easy to use.
noProblem They are simple links to pages which does tell you where to go so it's fine.
noProblem The UI is elementary but intuitive. The links have long descriptive names
noProblem Yes it is deployed on Heroku.
noProblem Yes, the team seems to have tested their UsersController completely that handles login, logout and other user signin validations
noProblem The code was presumable uploaded in the end (pushed from another repo) and hence I could not see any regular commits.
noProblem In total, there are only 3 commits done!
noProblem The models, views and controllers have been properly designed and implemented.
noProblem Most of the practices have been followed
noProblem The ruby source code appears to follow RoR conventions, and uses a few Rails associations. The directory names and project structure appear to follow good RoR MVC conventions. Source code is organized and uncluttered too.
noProblem The code is neat and precise with proper structure and comments
noProblem Very good structure, readable and names are very relevant to the functionality
noProblem The code is writtenÂ really well.
noProblem Good design and easy to use.
noProblem Controller has been tested
noProblem extensive testing was done
noProblem Team was active thoughout the process
noProblem No, the majority of the work was pushed on 09/29. It is an impressive product if they got all of this done in the past week.
noProblem There are many commits which are divided almost equally between all teammmates
noProblem yes about 75Â commits were done
noProblem Code commit frequency is good.
noProblem The code is very well written and arranged to be easily understandable. No extraneous code or unused code visible. DRY principles have been implemented very well.
noProblem Very clearly code
noProblem This team has followed the basic structure followed in every ruby on rails application which made my task easier to access files and understand their logic. Properly described README file and also one additional pdf given with application was enough to give me proper understanding of the modules.
noProblem ReadMe file contains enough information to understand the project implementation basics.
noProblem Please directly tall users where to sign up.
noProblem The user interface is very intuitive and easy to use. It is very well explained in the README file. The steps to run the code are described as well.
noProblem Yes, the user interface is intuitive and easy to use. also, the README file has been perfectly described to give the proper idea of the flow and login credentials of an admin.
noProblem Basic scaffold generated tests available.
noProblem Yes, from what I could see, they have done well in testing at least one model and one controller.
noProblem Team has perfectly implemented major modules and also they have implemented the extra credit portion. I tried to login with invalid credentials or some invalid password-email-phone lengths: but there were validations. Hence, they have perfectly focused on this parts too and tested it. Â I believe this has implemented a through test of at least one module and controller.
noProblem Several linear commits with good explanations available.
noProblem Tem has properly used Git and only pushed the changes when necessary and also, consistently throughout the project period.
noProblem Not a lot of code to begin with but whatever is there seems by coding practice norms. Most of the code seems to be commented
noProblem Yes, the code follows good Ruby and Rails coding practices as the models, views and controllers are well defined
noProblem The interface is preliminary, but is easy to understand.
noProblem The admin functionality is tested well, however there are some fields like validations of phone number which are yet to be tested or improved upon
noProblem Functionalities of admins are working.Though many other functionalitiesÂ are yet to be implemented.
noProblem I did see updates and commits 15 hours ago.
noProblem Yes, added the working functionalities timely.
noProblem The team has been pushing commits in a way that shows they have been making consistent progress on the project.
noProblem Yes, they have around 21 commits.
noProblem There is still work left to be done.
noProblem This code is organized like a proper MVC Ruby on Rails project. The code is easily readable and streamlined, and the functionality is clear based on just looking at the models and controller
noProblem You have a fantastic toolbar with links to all the places you would need to go, and your flow of control through the website is very good!
noProblem All commits were right at the time of deployment.
noProblem I see that only one person has committed all the code and it happened only 4 days back.
noProblem This team has pushed commits one day during the project.
noProblem No
noProblem Most files seem to be following good coding practices.
noProblem The readme file is well constructed. MVC files are properly made and easy to navigate. DB migrations can be seen easily as well. Overall good job done on this part.
noProblem Fairly good coding practices followed.
noProblem The UI is well built as well. Specially the navigation bar at the top is a delight in terms of User experience.
noProblem Yes. The controller and model for handling inquiries have been thoroughly tested.
noProblem The team kept on pushing changes throughout the project period, showing timely contributions from each team member. In fact, by looking at the commits, each team member was probably assigned a dedicated module to work on, which always works well to create such a big application.
noProblem Yes, through the commit record, I can see that this team has been keeping pushing their changes.
noProblem There are more than 70 commits , and they have been working continously
noProblem There were regular commits during the course of the project.
noProblem Fairly frequent commits to GIT.
noProblem Not much functionality is available. Of what is available, however, the code does followÂ "good Ruby and Rails coding practices"
noProblem The code is very neat and easy to read, but i can tell it is the auto generated code from scaffold.
noProblem The application is deployed on Heroku, and the user interface is easy to use.
noProblem No roles implemented.
noProblem Basic Tests are present. Not custom tests though
noProblem Yes. Good effort in case of pushing changes
noProblem No updates since 6 days ago
noProblem Only on 2 days all together
noProblem Most code seems to be written with good coding practices in mind.
noProblem The repository looks to be set up well and the app is laid out like a typical Ruby on Rails application. Good README file was present as well.
noProblem good coding style, names are well selected and good readability.
noProblem Have used DRY principles. Followed good coding practices.
noProblem The code follows the right style and in a good format.
noProblem They had a good amount of tests the UserModel.
noProblem comprehensively tested for users
noProblem In the files they provided, I found they provided test for most of controllers and models.
noProblem Have implemented basic testing. Could add more application specific test cases.
noProblem Last commit was 3 days ago, so they are not continuous throughout the period.
noProblem Yes, it looks like all team members contributed and they have 80 commits over the course of several weeks.
noProblem So many commits! It makes me proud. Starting as early as September 22nd, they make progress up until... today?! Either way, they passed this with flying colors.
noProblem about 80 commits were done along the timspan
noProblem According to the record on github, they committed for many times, so they may keep pushing changes.
noProblem Evenly committed code during the project duration.
noProblem The team pushed changes frequently.
noProblem The code is very well written and organised. All the framework conventions have been followed such as the naming conventions. Comments have been added at appropriate places which improved the readability.
noProblem yes. code is written properly. followed dry principle. added comments where possible. followed mvc with rails framework.
noProblem It does well to follow the "good Ruby and Rails coding practices". It follows the DRY code approach.
noProblem The Git code included almost everything that follows good coding practices using Ruby and Rails.
noProblem yes. User Interface is good and easy to access.
noProblem Excellent commit history. Contributions from all team members could be seen.
noProblem Yes I could see many push requests on the github. Hence concluding team is pushing their changes periodically.
noProblem Yes, the team kept pushing changes throughout the project period
noProblem There was consistent commits with a spike in between when probably most development happened
noProblem looking atÂ your commit history,Â you guys started it on Saturday when the submission was Monday.
noProblem The website did not seem to work at first. Now I was able to access it. I also noticed some features that were included in the meantime like testing by adding house hunters. Overall, the team did work on updating the site functionalities.
noProblem The Git repo shows total of 15 commits. Although majority of the places Ruby Standards have been followed but at some places variables names such as (househunter_url) does not show any relavancyÂ or understandidngÂ to the reader. If the variable is pointing to a function or belongs to, for example it can be house_hunt_xyz. Overall I think good standards are being followed.
noProblem Yes we can see many pushes on git. Hence , they have updated code.
noProblem Timely commits and elaborated readme file.
noProblem The code is clear and concise, it does follow good Ruby and Rails coding practices.
noProblem Yes, the code does follow Ruby and Rails practices to an extent, as I can see the use of many helper methods in the code.
noProblem Most files seem to be following good Ruby and Rails practices.
noProblem Did a good job using forms to stay dry with the edit and new pages. Some more comments especially in the models would have been helpful to understand why certain validations were chosen. The use of JSON to store and recall in views was clever.
noProblem yes. It is well written and they managed to follow DRY principle.
noProblem Code follows the basic CRUD structure given by Rails and neatly explains what is being performed. The notices nicely explains the user what is happening. The db schema is designed to incorporate most of the requirements.
noProblem Reviewed the Git code for all controller , models and views .Â standard ruby coding practices have been followed and code is easily readable
noProblem Code follows 'good Ruby and Rails coding practices'. NamingÂ conventions are correct, methods in controllers are short and concise and there are no instances of 'spaghetti code'.
noProblem Yes user interface is easy to use on the first page.
noProblem Tests are added for most controllers.
noProblem Multiple commits are present in the repo.
noProblem All of the commits for this application were made on the same day.
noProblem There were 4 commits on the day it was due, presumably to get the project up and running for submission and 1 today to upload the development database.
noProblem I see commits only on a single day .
noProblem All the changes are pushed at once.
noProblem They have attached 2 other files saying what all they have implemented.
noProblem Everything was described properly in the README file.
noProblem I could see testing done. I could see extra test cases added.
noProblem The team all had multiple commits throughout the course of the project.
noProblem Yes i could see multiple pushes.
noProblem The team has been pushing changes since around 12 days ago, and the project structure feels well planned with some changes and testing required.
noProblem They have 195 commits. Ui is great, everything is running smoothly.
noProblem The project was continuously updated during the past two weeks.
noProblem Code commit frequency is fairly good.
noProblem Well tested.
noProblem Well written code following coding practices.
noProblem Ruby coding convention has been followed almost throughout the project.
noProblem All practices were followed
noProblem Code looks good. Use comments wherever necessary.
noProblem Coding standards are fairly good.
noProblem Constant changes were being made.
noProblem Team was proactive in working together.
noProblem Code follows general Ruby guidelines and is formatted in a legible manner.
noProblem The ruby code is precise and the project follows a proper structure with all the required files.
noProblem Yes, the team has included tests for controller, model, and have also implemented integration tests.
noProblem Yes, their commits started from September. They have been working on the project for the entire period.
noProblem 16 commits in last 11 days implies have been pushing code frequently
noProblem The repo has many commits contributed by the teammates throughoutÂ the project period
noProblem I found many commits throughout the project period about fixing bugs, add new features and update readme.
noProblem User interface is very nice and well-organized.
noProblem readmdÂ has all important required details.
noProblem This application is deployed on Heroku, and the user interface is easy to understand and use.
noProblem The code is neat and concise with required comments and messages for all the changes
noProblem The code followed best practices for items such as indentation, line separation, and method naming.
noProblem MVC structures are very nice, and every required functions are finished.
noProblem Very nicely written code. DRY principles used nicely. Formatting is also done very nicely.
noProblem Code looks, as they say, 'hella fresh'. Very clean, from the files I looked over.
noProblem The team has used excellent Ruby standards coding practice. Controller as well as Model has variable names which are self explanatory.
noProblem The code on Git has good readability with proper indentation and naming conventions. Similar functionalities have been combined together into a class like, in the case of PotentialBuyerController. The use of a single User model and role based authentication has certainly DRY'd up the code. One possible alternative to further DRY up the code, is that in many controllers like in the case of users_controller, every method is storing the list of real estate companies in an instance variable @real_estate_companies. So, in this case a callback like before_action can be used to save the real estate companies in @real_estate_companies variable, so that all methods have access to it.Â The use of appropriate iterators instead of looping constructs like for and while follows Ruby's good coding practices. Every controller serves a specific purpose and the use of a common welcome_controller and its associated views has again modularised the code for easy extensibility.
noProblem Ruby Rails code standards are correctly followed. And code is committed properly.
noProblem UI has modified which is good.
noProblem the interfce is very good, clean and very easy to use.
noProblem Very nice UI, great UX. Great use of material design icons and bootstrap. Enjoyed using the website. Great job!
noProblem In general, UI was great. The site looks really clean, and the buttons did what I expected them to do.
noProblem User interface is well organized and easy to use.
noProblem Highly intuitive user interface. Properly states admin as well as new user login. The navebarÂ shows the logged in user as well as log out options. Very easy to user and understandable.
noProblem Yes The UI is interactive and easy to use.
noProblem Modules have test cases.
noProblem yes, at least one controller and one model have been tested.
noProblem Two tests have been implemented and working.
noProblem Hunters functionalities are working properly.
noProblem The team used multiple development branches and a master branch along with frequent commits to stay in sync.
noProblem yes, the team keep on pushing their changes.
noProblem Yes, there are periodic commits and the messages are very descriptive.
noProblem Starting on September 22nd and going up through today! 100+ commits is great.
noProblem A total of 105 commits. Consecutive update done on Github.
noProblem The team has started to work on the project from Sept 16th and has regularly pushed their commits to the repository. Both the team members have been actively contributing to the project. A total of 58 commits have been made so far and the project is progressing at a very good rate.
noProblem I could see commits made my team members in timely manner.
noProblem Code is written properly and followed ruby framework with MVC architechure. Also added various packages.
noProblem Basic Practices were followed Reusability of code is maintained and the code is well intended
noProblem it has a good structure, choice of names of the files is appropriate and readable
noProblem Realtor user can perform basic functionalities.
noProblem Yes. we could see updated git. Hence i canÂ conclude that they are updating code regularly.
noProblem Somewhat. Since I can see the commits were made in 2 days only
noProblem There were 24 commits in 6 days which means that they have been working in last few days and have been doing check-in regularly since they started work.
noProblem I can see 28 commits , which is descent
noProblem The code is as per coding practices. Nice first attempt.
noProblem Looks good to me. The Ruby DRY code approach is followed throughout.
noProblem easy to understand.
noProblem Yes, it is very intuitive and easy to use.
noProblem test cases are generated through scaffold.
noProblem only controller tested
noProblem The team has not implemented a testing module as of yet.
noProblem Test skeletons are present. Doesn't look like tests are added yet.
noProblem committed throughout the period to avoid merge conflicts.
noProblem yes, timely pushing of code and creation of branches to avoid merge conflict
noProblem The team has a well documented history of commits for the code repository
noProblem You guys started pretty late. But overall great effort. Great UI.
noProblem good coding style.
noProblem Overall the following things can be improved: 1) The primary key for the real estate company should be auto generated. This is done automatically by the rails framework, so maybe you can remove the code from the view which asks for the user to select the primary key while creating a company. 2) Whenever there is a reference to a foreign key in a model, you can validate and use that reference by following the format model_id, where model is the entity of your foreign key. Eg. If house has foreign key of realtor, realtor is the entity of your foreign key, hence you can reference the realtor as realtor_id in your house model. This is because rails follows convention over configuration, and this is the naming convention with respect to foreign keys.
noProblem Navigation between pages is not defined well.
noProblem Deployed on Heroku. Interface is not friendly, but thr README file explained some of it.
noProblem Decent coding practice
noProblem The app's indentation, method names, and line separation seem to match solid Ruby style guidelines.
noProblem From what I see it seems to be following the practice we have been using in class
noProblem Yes, the source code follows expected RoR style. The directory names and project structure also follow RoR conventions. Good job!
noProblem Good Rails coding practice has been implemented. In Model as well Controller we can see variables names that shows the relation to overall module and model.
noProblem The interface is intuitive. Specially, they have very good form structure for realtor as well as new users, and house hunters.
noProblem It appears minimal controller testing has been performed.
noProblem No testing, but at least they mentioned it in the readme.
noProblem The team used mutliple branches and many commits throughout the project to increment on the codebase.
noProblem They have a lot of commits so they were always working on it
noProblem Yes, it looks like sizable commits were made before the 24th.
noProblem Yes 95 commits.
noProblem The interface is good, and the READMEÂ provides good documentation.
noProblem Couldn't find any issues respective to Style Guidelines
noProblem There were 9 commits overall in the GIT
noProblem The user interface is quite intuitive to use. I had a very minor suggestion. I found a case where the go back link was missing and thus, I had to click on the dashboard link to go back. Ex. After I click on view companies, there'sÂ no go back link.Â Overall, I feel you did a really good job. For example, while switching the role, you gave an option to edit the roles as well. As well as a delete account functionality.
noProblem Very nice code, and almost every functions that test required are finished.
noProblem the interface is easy to use and it is wll described in the Readme file.
noProblem Good set of directions in readme.
noProblem There were continuous code pushes.
noProblem Have used DRY principles. Follows good coding practices.
noProblem Yes the UI is good and easy for navigation, usage.
noProblem The UI is good and intuitive. Good use of colors and html features.
noProblem Yes, tests are done for many models and controllers.
noProblem Yes there are lot of commits over many days from multiple contributors
noProblem Yes, there are many commits which added new features and fixed some bugs.
noProblem Yeah, they have done the project with even number of commits throughout the duration.
noProblem Yes, there are 24 commits done over a span of 13 days.
noProblem The code follows mvc architecture and practices in an organized way
noProblem Even though the codebase is not large, Ruby and Rails standards such as naming conventions, file structure, and the correct usage of MVC pattern are followed.
noProblem The user interface looks intuitive, as it has options for signing up with different roles
noProblem They have tested for the models and controllers constructed.
noProblem Seem to be following standard practices.
noProblem Yes, the code has the parameters well defined for all the users and has the correct MVC Layout as expected.Â For instance, they seem to have created separate MVC architectures for Houses, Inquiries, Interests, Companies and Users. This goes to show that they have a layered approach on access and privileges.Â Also, the code is written in a very clean and formatted style with the variable definitions to be self-explanatory of the functionalities they perform.
noProblem Good job done here! You have listed the features available to test.
noProblem The app is deployed very well and is very easy to use.
noProblem All the basic features implemented for admin,house hunter and realtor is functional.
noProblem There are 67 commits made during the tenure of the project by all the team members. The team has worked on git since the start of the project.
noProblem Yes, 67 commits. It seems they have been pushing changes regularly
noProblem Yes, the commits were regular. After the project was assigned, there were several commits on a weekly basis, and as the deadline neared, the frequency of the commits kept increasing in an orderly manner. There was no last minute rush, and the development of the project seemed pretty well planned.
noProblem Yes, as seen from the number of commits on each section of their GitHub profile, not only have they meticulously made a number of changes on Repo, but they have also updated what all changes they made against the files. This is a very neat practice in my opinion and shows that they have put ample effort to structure the code. Moreover, they have updates the GemFile multiple times so as to make it run for the Heroku app which is a must thing to do and a challenge we faced too.
noProblem Yes, there are git commits and pushes after initial commit as well.
noProblem The code seems to be following the examples in cookbook app.
noProblem Yes. Timely commits with comments.
noProblem The code written was clear and I believe that it follows good Ruby and Rails coding practices to a certain extent.
noProblem It is done well and I can say it is a indeed a good ruby and rails coding practice
noProblem I have seen they keep updating the github
noProblem There were changes pushed to the branch throughout the project period.
noProblem No, the initial commits were made the Thursday before the 1st submission was do. It is great to see additional commits since the 1st submission!
noProblem The first commit for the project was made only 4 days before the deadline. since then the team kept continuously pushing their changes.
noProblem I can see 28 commits with a good distribution over the time span.
noProblem The code follows common ruby rails guidelines
noProblem Yes, it is.
noProblem Code seems to follow the Ruby Practices.
noProblem Code is written in a clean and readable way. There are separete methods for separate tasks.Â Good naming convention is followed throughout the project.
noProblem recompany could have been just company
noProblem The team seems to have attempted to add to their functionality from the previous round. They have attempted to use the devise gem for allowing multiple user logins. It seems that they created a new git repo and started from the beginning which seems like a fair idea given that they wanted to use devise instead of implementing the user registration/sessions.
noProblem Yes, they have keep commit to git as their project been working.
noProblem The team submitted their changes towards the end of the project. They committed changes in round 2.
noProblem Yes, there is a "has_many" relationship in company model, and also realtor is able to create mutliple house in one company.
noProblem The relationship between house hunter, realtor and companies have been well established.
noProblem The link submitted is not live. As a result, I could not test if the system is working as it is supposed to.
noProblem Edge cases are not handled. But most of the logic will automatically handle edge cases.
noProblem Yes, they have tested a lot. Like admin, house and inquiries.
noProblem Testing has been done for users controller and model.
noProblem Yes, the team has tested model and controller.
noProblem Code is well written and organised. All the functions have been objectively defined and does only what it is supposed to do.
noProblem Code looks neat. Methods have only one functionality. Well organized.
noProblem The earliest commit is dated around Oct 4.
noProblem Yes they have been committing a bit regularly . Although the commits contribution are not equally distributed among the team members.
noProblem The team was regular in committing changes. The team continued to work in round 2 and made regular progress. All members contributed significantly. Great job! Could have started the project a bit earlier.
noProblem All commits happened during round 2, but work was done before.
noProblem Started committing after round 1
noProblem Yes, the team kept commiting the changes throughout the project and also in round 2.
noProblem Yes. Feedback has been accepted and changes made in round 2.
noProblem All the relationships have been properly defined in the models.
noProblem Yes they have properly defined the associations for every table and haven't missed on anything.
noProblem All dependencies are well modeled and designed. Every model has correctly associated relationships and validations. Your team is a pro! Realtor to house and house to company , other relationships are implemented. Each company has multiple realtors and each realtor can have multiple houses. Everything good here!
noProblem By looking at their model files, relationships are handled well.
noProblem DB mappings are done well. Cascading delete and cascading nullify implemented to handle delete cases.
noProblem Not many problem detected . working to the expectations.
noProblem All functionality seems to be present now.
noProblem Yes, the system works fine and authors have fixed the problems found in the first round. For an instance, Admin functionality and interest functionality were not present in round one but authors have implemented them now.
noProblem All feedback has been accepted and changes made to fix them.
noProblem When the admin tries to delete a real estate company which has some realtors and houses, all the houses and realtors are deleted as well. This is the expected functionality. Good job! All other test cases work as well. If an admin tries to delete a house hunter with multiple inquiries, all of his/her inquiries are deleted as well.
noProblem All deletion edge cases seem to be accounted for.
noProblem Yes, all the edge cases are handled very well.
noProblem Not able to log in as admin. Incorrect credential of admin.
noProblem The edge cases tested where handled properly with proper messages that shows which other entities will be affected by the change.
noProblem Models are not tested and controllers are partially tested.
noProblem No they haven't tested
noProblem Yes, the team has thoroughly tested and did validations.
noProblem Tests for controllers look good. Need to include more tests for models.
noProblem code naming convention done well.
noProblem The code has been implemented as per the Ruby standards of coding. However, there are few instances of code could be better handled such as the index function in admin controller.
noProblem 1) Yes 2) No 3) No
noProblem commits performed during the course.
noProblem All the code of the project has been pushed to Github on a single day.
noProblem Only 8 commits were found. The first commit was dated around Oct 6. No changes were committed in round 2.
noProblem Didn't commit at regular intervals. Yes, committed changes in round 2.
noProblem The git Repository was created on Oct 6 after the round 1 was completed. The commits were no regular during the complete course of the project. All the commits happened on the day of final submission.
noProblem handled 1 to n and n to n relationships succesfully.
noProblem The team has handled all the associations between multiple entities quite well.
noProblem The relationships are properly defined.
noProblem Follows the relationships properly.
noProblem the basic functionalities work successfully.
noProblem some edg cases are working.
noProblem Test for model are missing. Basic test cases for controllers are present but the testing is not through.
noProblem The code follows all design style guidelines for Ruby. Good job! All methods are well designed and serve only one function. Naming and structure is uniform across the project.
noProblem The code is clean and readable and has been properly modularized.
noProblem The code is clean and easy to understand.Â Code modularization principles are followed(didn't find any major code duplication issues).
noProblem Yes code is clean and easy to read. Has followed coding standards, there are separate functional calls for each task.
noProblem The team committed changes fairly frequently. There are no commits for the first phase of the project. However the project saw regular contributions after that (during the round 2). Overall good job! Could be more proactive during the first phase.
noProblem they only had 30 commits which I think is a little low considering there were two phases of submission. In my first phase, my team had at least 30 commits.
noProblem For the most part, it looks like this group only committed changes in round two. I know there was roughly one commit when I reviewed the first time, and the remainder of the changes were between Oct 6-10.
noProblem Yes, they did keep pushing updates after round 1.
noProblem Yes, the commit count has almost doubled from round 1 to round 2.
noProblem The team has committedÂ regularly.
noProblem The relationship realtor has many houses is not represented. However all other edge cases are covered. The DB is well designed with clear relationships and field names. This team is a pro!
noProblem It looks like all the needed relationships were present in the schema.
noProblem Cardinal relationships have been defined in appropriate models
noProblem 1-n and n-n relationships are all properly defined
noProblem All basic functionalities work as expected. You could have gone for the extra credit functionality such as the Google login or the email part. The email part was pretty easy :| . You've still done a great job with the overall design. The best I've seen thus far!
noProblem AuthorsÂ delivered nearly all the functionality I could think to test.Â It was a little weird being referred to a totally different page to have to upload images to houses, but not enough to deduct points.
noProblem Yes, major changes and feature implementations are there afterÂ 1st round. All basic functionalities are working properly.
noProblem (1): Admin can delete real-estate companies with realtors attached to it (2): Realtor is being able to delete any house (3): Admin can delete house-hunter with several enquires.
noProblem All test cases are covered. The README doesn't cover how edge cases are covered but that's not an issue.
noProblem 1. When theÂ companyÂ of a realtor was changed, realtor details got updated with this new company details. But he could still edit/update the houses that he/she had listed forÂ the prev company. They could send replies to inquiries also. 2. A realtor could edit the details of all the houses. 3. What will happen if theÂ admin tries to delete a house hunter who has submitted several inquiries? - cascade delete in working. 4. Other major edge cases are also working.
noProblem could see default testcases.
noProblem The code is well written following the right RoR coding practices
noProblem Follows good coding practice at most places.
noProblem Code is written in an efficient, clean and readable manner. All the functions are lucid and defined properly in blocks. A proper use of names for controllers, migrations and views can be seen.
noProblem yes the coding style was good
noProblem The committs have been done regularly throughout the development period, even during the round 2.
noProblem Code has been submitted frequently.
noProblem commit were done at a timely manner
noProblem The 1-n and n-n relationships are properly handled.
noProblem Handles most of the relationships properly.
noProblem All the relationships are correct. Also the houses table shows the time at which the house was created, which is impressive. Additionally, the real estate company also shows the number of realtors for each company, good work on that!
noProblem Yes, even constraints were defined well
noProblem Relationships are implemented correctly.
noProblem There were issues with the admin functionalities in the first round. They have been fixed.
noProblem most issues were fixed
noProblem I think the code is well written. The function calls are very well done. It is neat and easily readable. Also, there is no bad naming the project. Code very well follows the DRY approach.
noProblem The code is clean and easily understood. A separate controller for adding the buyers to the potential buyer list is created. Overall the structure and naming of controllers and migration file is clear and the respective functionalities can be identified based on the names. The team has done good work on that
noProblem Function calls are added. Code is formatted and neat. Naming conventions are followed.
noProblem Several linear commits visible on the git. Most of the work done in round 2 is fixes and additional functionalities on top of the base that was finished before round 1.
noProblem The team promptly handled the task by working on it regularly and committing changes frequently.
noProblem I was unable to judge if this works -there was no way for me to determine that. The admin can not delete companies, can not view, edit or delete realtors or househunters. Also, users cannot delete themselves.Â Further, the third party admin gem or moduleÂ used does not let me edit or delete users or companies either - it gives an error on heroku.Â Thus, I was unable to determine if the edge cases work. Also README does not specify anything.
noProblem By looking at their github page, I could see they submitted their changes actively and also they continued submitting changes in round 2 as well.
noProblem The team submitted the changes at equal intervals of time and the last commit was performed a day prior to the deadline which is commendable.
noProblem This team continued to commit throughout the project.
noProblem The test for real_estate_companies_controller and real_estate_company model are present.
noProblem Team has been consistent in pushing code changes
noProblem They have tested real_estate_company controller and model.
noProblem Yes, there are 60 commits. Well done.
noProblem Yes they have implemented unit tests as well as functional tests.
noProblem The team has done an impressive job in handling the tests for messages and real estate companies.
noProblem yes i can see a variety of edge cases being tested
noProblem The code looks comprehensive to a good extent with the usage of comments and clear naming. 1. Adding the remove from wish list feature is aÂ plusÂ point. 2. The naming is done well with attention to the singular andÂ plural nouns for models and controllers. 3. NoÂ problem with respect to the coding clarity.
noProblem The quality of the code is impeccable. Use of helper files and establishing a specific user through "def current_user" function in the application helper allowed the team to use a common user parameter throughout the application development and reduced the amount ofÂ effort that would have been needed other wise.
noProblem Code is very much readable. There are proper comments before the functions.
noProblem The code is well written. It is neat and easily readable. The function calls are very well done. Also, there is no bad naming the project. Code very well follows the DRY approach.
noProblem COde quality seems to be very good. Documentation aloong with instructions are present.
noProblem Mapping has been properly implemented.
noProblem The database design is close to perfect. The destroy and delete dependencies have also been well managed to allow deletion in cases where a house hunter gets deleted and all its inquiries are deleted automatically.
noProblem Yes, the system does handle the relationships and the mappings are clearly defined.
noProblem I think the system handles the 1-to-n and n-to-n relationships well. The relationships are clearly defined with no problems.
noProblem This system handle the 1-to-n and n-to-n relationships
noProblem The above case is covered.
noProblem The realtors controller has been very well tested by the team.
noProblem The test cases are running fine. Clear steps for the same are given in the readme.
noProblem Excellent use of Rspec.
noProblem Yes, the team has tested thoroughly at least one model and one controller.
noProblem There isnt any commit after the first submission.
noProblem There are several linear commits to show progression of all the functionalities that were added to the project from the beginning. The team had more or less finished their work before round 1 and fixed a few bugs that were not easilyÂ discernible, in round 2.
noProblem There are 136 commits I can see with clear commit messages.
noProblem By looking at their github page, I could see they submitted their changes actively and also they continued submitting changes in round 2 as well.th
noProblem 67 commits by oneÂ whereas 26 by the other two I was expecting an even number of commits
noProblem Very good commiting by entire team. Project was handled well and not messy.
noProblem The system has no perceivable issues.
noProblem Functionalities are working fine. They are well documented in a separate pdf file as well. Even the read me contains clear instructions for setup.
noProblem Almost every feature is working as it's supposed to.
noProblem App as a whole works very well. The look and feel of it is also very good. Contributes to a very good overall user experience.
noProblem The system was able to pass all listed test cases. All the views have been perfectly setup as well and have disabled buttons where needed.
noProblem There are enough edge cases tested and well documented in the attached pdf file. Could also view the some points to be taken care that are documented in specific cases.
noProblem 1) If the admin tries to delete a real estate company which has some realtors and houses, it would not delete the record, because a dependent realtor exists. 2) The realtor can change his real estate company and he won't be prohibited from removing houses. 3) IfÂ admin tries to delete a house hunter who has submitted several inquiries, the inquiries will be deleted and house hunter will be removed from the buyers' list.
noProblem Code written well with all DRY principles.Â Methods are simple and clean. Every methodÂ contains functions specific functionalities.Â Methods are simple and clean. Every methodÂ contains functions specific functionalities.
noProblem Looks decent.
noProblem Coding standards are followed properly
noProblem Code is clear and concise withÂ explanatory commits
noProblem This team continued pushing changes throughout the project.
noProblem Only one person has committed throughout the project, which looks strange to me. However, there have been regular commits by the person.
noProblem The readme file is completed and explicit, so great!
noProblem The mappings are present and clearly defined
noProblem The relationships appear to be documented correctly here.
noProblem The functionalities are working fine. The input fields in the forms have good explanations for some specific cases.
noProblem Yes, it works perfectly fine
noProblem Basic functionalities are working fine.
noProblem Validations are properly provided to handle edge cases
noProblem Houses and inquiries controller seem to be thoroughly tested, as do house, inquiry, search, and user models.
noProblem code is compliant to rails coding style
noProblem Nearly all commits occurred during round 2.
noProblem Yes they did.
noProblem None of the models specify any belongs_to or has_many relationship and no migrate nor schema stores an official reference to be used.
noProblem The inquiries aren't linked to house hunters.
noProblem None of the relationships are handled with the built in has_one has_many or belongs_to functionality, except the user model which randomly belongs_to realestate
noProblem Relationships are missingÂ for egÂ relation between inquiry and sender , receiver missing.
noProblem the relationships between inquiries and house, house and company, potential users and house are absent.
noProblem Houses cannot be created.
noProblem Basic functionalities missing
noProblem No idea.
noProblem No testing done.
noProblem No, automated tests for model and controller missing
noProblem The code is clean and readable.
noProblem Code looks quite readable
noProblem looks alright.
noProblem The code is clean and well written. The controllers and models are named accurately and each filename describes the desired functionality. Good work on that!
noProblem The system properly handles the relationships where a real estate company can have multiple realtors. Also, it supports a realtor to create multiple houses and the house hunters to add multiple houses to their interest list.
noProblem Yes, 1st cut did not have heroku link, this time apart from additional code + link is present and may of non functional flows seems to be in place
noProblem Different methods for different functionality. No long methods.Â Overall good job by the team on the structure of the project.
noProblem The code is clearly written and easy to understand. The functionalities are separated and well defined.
noProblem Commits aren't exactly spread evenly across the entire duration of the project. But, they have made changes in round 2. There have been significant improvements in the functionalityÂ and overall code in the project from my previous review.
noProblem With 108 commits, te team has continuously pushed changes to git to keep the version control in tact.
noProblem The team has been constantly submitting changes to the repository, with each team member having considerable commits, which says the work was divided equally among team members.
noProblem Yes, I think the whole team has been participated in this project and kept on submitting changes throughout the project, and they still keep on submitting changes in round 2, even though the deadline for round 2 has passed. Their last record of commitment is on Oct 16.
noProblem Good job on the comments and description of the Git commit.Â It makes the job of the product owner / Lead software to review your code.
noProblem The commits were fairly frequent even in round 2.
noProblem The project mentions the belongs_to and has_many parts of the problem specification in the right ruby files so they are handled correctly
noProblem Yes, authors have done a great job in this part, and they handle the 1-to-n and n-to-1 relationships properly.
noProblem Good Job on the DB design. Mappings between model are good.
noProblem Relationships are properly defined and mapping is correct.
noProblem Yes, I could not create another account with the same email.Â Validations seem to be done on user level, while creating account, signing in, etc
noProblem Yes, they did put effort on test part. They have done a good job in testing model users.
noProblem Only basic test cases have been given for any cont
noProblem Code in the files are auto generated. Every function is implemented in a clean and readable manner and performs only one task. Code on whole follows Ruby on Rails practices.
noProblem Code is clean and readable. 1. Yes 2. No 3. No README file is well written and descriptive.
noProblem Some files like comment.rb don't suggest what they are used for
noProblem The code is quite clearly written with all the good coding practices being followed.
noProblem Although there aren't too many commits, The team does seem to have been updating their git in a continuous manner.
noProblem A total of 26 comments and recently updated also.
noProblem The team has committed changes in round 2.
noProblem 26 commits overall with about 13 commits for round 2.
noProblem Yes,Â 1-to-n and n-to-n relationships are handled correctly. Tables are mapped correctly.
noProblem Most of the mappings are done correctly.
noProblem The relationships have been set up properly in the model files as well as the schema. However, a destroy dependency in the model file would be a great addition;Â Â has_manyÂ :enquiries
noProblem The code on Github shows the 1 to n relationship between real estate company and realtor. The realtor is also able to create real estate companies of his own.
noProblem Yes, the mapping is done quite well.
noProblem Edge cases are handled good and the readme is effective enough to understand the entire code flow.
noProblem No tests are added for any model or controller
noProblem No specific testing apart from scaffold generated tests seems to have been implemented by the team.
noProblem Only default tests are present
noProblem Yes. Code is well structured overall. Interests and Potential Buyers functionality are separated from house hunter model/view. Proper Naming Conventions are followed
noProblem No issue found. Classes looks very clean and nicely naming.
noProblem The quality of the code was efficient. It allowed to use the system in an understandable manner. It followed approach for clean coding using Ruby and Rails.
noProblem The code is clean and easy to read.
noProblem 30+ commits during the last week
noProblem Yes, the commit increased from 8 to 40.
noProblem The team worked on a lot of things from the first stage. This includes testing for admin and realtor functionalities. Allowing admin user to view and destroy the accounts of realtor and house hunter.
noProblem 40 commit, the last one was on oct 10.
noProblem Code quality is impressive. Every action has a different function call. The methods are well defined to understand to purpose it serves.
noProblem The code is clean. Naming conventions are followed.
noProblem Have followed good ruby coding practices with meaningful variable names. Single responsibility paradigm is well portrayed.
noProblem The code is clean and solid. Easy to read.
noProblem Commits in the repo are consistent. Commits show some changes were made to improve the functionalities
noProblem This team pushed code in a few very burstyÂ times, but they did push commits after the initial review.
noProblem The team has committed the code continuously. Yes, the team had made commits in round 2 also.
noProblem They have consistently checked in code during the project duration, even in Phase 2.
noProblem The last commit is in 10.10
noProblem Yes, code handles the mapping as mentioned in the given example
noProblem Yes, the DB design looks to have the proper relationships.
noProblem There are plenty of relations mentioned in the model files. For the mentioned case as well.
noProblem There isÂ a search.rb which seems very vague and unused. It has an extensive search logic. It should be a method in the house.rb file instead of a separate file of its own.
noProblem Enquiries hasnt been tested.
noProblem Tested for a realtor account. The code handles the lifecycleÂ of the user pretty well.
noProblem Yes, they tested the user_controller and model
noProblem Cant see a rspec folder.
noProblem Test cases in user model present.
noProblem Thorough testing has been done for user_test.rb and controllers.
noProblem They test 7 different controllers and 7 different models. Vert convincing work.
noProblem Code is well written. All the conventions of the rails framework have been followed. The functions have been properly defined and does only what it is supposed to do.
noProblem The code follows the general guidelines for quality and concept of clean coding. The models and controller were designed with general practice approach using Ruby and Rails coding methodologies.
noProblem Code looks neat and clean.
noProblem The code was committed throughout the project and code was committed in the second round too.
noProblem This team is keep on submitting their changes throughout the project, and not only one or two members of the team, but all of them are playing a role in this project. Besides, they did commit changes in round 2.
noProblem yes about 83 commits.
noProblem The team improved upon certain aspects of their code. This included establishing the admin functions and actions as adding new companies and to view various participants involved.
noProblem Found that company has many users missing HouseÂ has many inquiries and reply missing.
noProblem Seeing from the schema file the logic seems fine but unable to test it out.
noProblem The code procedure and application justified the 1-to-n and n-to-n relationships between the realtor and house hunter model as well as real estate company and realtor relationship mapped as 1-to-n.
noProblem I think the authors did a good job in developing the system. The system is working as it is supposed to work.
noProblem Yes, I feel the team has done pretty well in testing at least one model and one controller.
noProblem The team thoroughly tested the Admin model and controller. The tests for admin performed checks for admin functionality to be able to view the list of houses created by the realtors as well as look up for realtors and house hunters information that are involved in application.
noProblem yes, the code is written in a clean and readable way. Only one task is handled by each method and in case of multiple tasks, function calls have been implemented perfectly. There is no bad naming in this project. Code in model and controller looks fine. Proper spacing of function and its block is done.
noProblem The code looks comprehensive to a good extent with the usage of clear naming. The naming is done well with attention to the singular andÂ plural nouns for models and controllers. NoÂ problem with respect to the coding clarity.
noProblem Most of the code follows standards.Â But I was not able to verify the complex examples like adding house to interest list, email when a reply is given by realtor as it is not working. InÂ replies_controller.rb avoid using class variable and use instance variable.
noProblem Code is well written.
noProblem The code was very easy to read and follow good coding practices.
noProblem Solid code , easy to read.
noProblem Commits after the first review by all team members is seen.
noProblem Regular commits were not done. Everything was committed in one commit which should be discouraged. Think about working professionally, you should be committing code ASAP and committing with proper commits and description. Commit also should not be all module at once but individual.
noProblem Yes there are commits in phase 2 as well.
noProblem 26 commits with about 10 commits after Round 1.
noProblem 26 commits. Last one on 11th Oct
noProblem This relation is handled well.
noProblem The company, house, inquiry, userÂ etc mapping is done well and according to the functionalities.
noProblem Yes, all the DB relationships are handle properly.
noProblem First round their login functionality wasnt working, it is working now as expected
noProblem Few edge cases not working.
noProblem It seems some destroy function have some issue.
noProblem Only auto-generated test cases are present
noProblem None of the controller or model was tested.
noProblem No test for any of the models
noProblem From what I can tell, code quality in this application is good. Functions generallyÂ look small and there is good use of rails utilities.
noProblem Code is written properly. One method is covering only one functionality. Also for more features, team has created new controllers. Hence I can conclude code is neat and readable.
noProblem The code is clean.
noProblem Great code writing habit.
noProblem All the mapping looks good. Nice job
noProblem Yes, the DB design handles these relationships correctly.
noProblem Team has Mapped house, realtor, company also house hunter, inquiries well in the model.
noProblem The Schema is very well defined. Most of the suggestions provide as part of initial review are incorporated. The relationships are defined correctly and use of dependent destroy ensures that child records are deleted before parent record. This ensures there is consistency.
noProblem Implemented the mappings properly.
noProblem This system handles all relationshipsÂ properly by using has_many/belongs_to constructs correctly and addition of relevant foreign key attributes in the appropriate tables.
noProblem The team has done a great job in testing. Admin controller is tested extensively with relevant concise commentsÂ and Rspec is used to test admin model with its validators.
noProblem Every action has a different definition written. The code is well structured.
noProblem Code is written properly and followed DRY. Each Function is handling single task. Team understands MVC architecture very well, But i could see controller for every functionality , where in such functionalities could have been handled with mere methods in other main controllers.
noProblem No bad naming, handles multiple tasks with multiple function calls.
noProblem The code is in general clean and readable. Nearly all methods seen handle only one task, or use function calls to handle other tasks. Naming seems appropriate in all of the files. There are no overly nested blocks.
noProblem The code is well written.
noProblem The code looks clear and understandable
noProblem Commits can be seen throughout the project duration
noProblem I could see a huge number of commits on the github but it is not evenly distributed.
noProblem Submitted changes throughout the project. Committed changes in round 2.
noProblem The team did a good job of making consistent commits throughout the life of the project.
noProblem The team kept committingÂ their changes throughout the project.
noProblem The code frequency is pretty good.
noProblem Mappings are mentioned appropriately
noProblem Team has handled 1 to n and n to n relationship very cleanly. Not only in code, but also the related functionalities are working great except few. Like I can not see realtor associated with any company.
noProblem Handles all relationships.
noProblem I think it does, but I don't feel confident in my answer.
noProblem The relation mapping is well made.
noProblem models show good relation mapping.
noProblem Above listed test cases were handled.
noProblem Handles all edge cases.
noProblem everything explained in readme,Â works great.
noProblem All Meaningful tests
noProblem Yes,Â 1-to-n and n-to-n relationships properly are handled properly. Tables are mapped properly too. I don't find any issue related to DB.
noProblem The corresponding ruby files maintain the belongs_to and has_many relationships to reflect this
noProblem Potential Buyers(Interest) , House and Inquiry Dependencies are not handled properly.
noProblem In the model classes and schema file, each object has good relationship with each other.
noProblem there is 1-to-n realtionship between company and realtors
noProblem The system handles the 1-to-n and n-to-n relationships properly. The real estate company and realtor relationship mapped as 1-to-n.
noProblem All the basic functionalities have been implemented. Team as whole have worked really hard to make common functionality work.
noProblem As a house hunter I am not
noProblem The system performs almost all the functionalities that are described as part of the deliverables. One specific issue that was suggested and resolved was mapping the realtor to a real estate company.
noProblem Corner cases like removing house from interest list have not been tested
noProblem The team has thoroughly tested each model and controller and the tests were performed to check realtor functionality works as described.
noProblem Thoroughly test the admin model
noProblem Well written and able to follow. However, I see no branches created (and hence pull requests merged). All work is pushed direct to master.
noProblem seems alright.
noProblem Yes, the code written was clean and readable
noProblem Code quality is good, linked features are working fine like the one asked in question.
noProblem Good code writing.
noProblem Good coding practices have been followed. Methods are crisp and single responsibility paradigm has been implemented.
noProblem Submitted well within deadline!
noProblem yes they did.
noProblem The team committed their changes throughout the project period consistently.
noProblem Yes, the team has committed code changes in round2
noProblem They added a few changes, could've listed more on Readme.
noProblem Yes, they still commited until yesterday.
noProblem Yes, the team kept committing changes throughout the duration of the project.
noProblem All dependencies are well modeled and designed. Every model has correctly associated relationships and validations. Your team is a pro! Realtor to house and house to company , other relationships are implemented.
noProblem Yes the relationships are handled properly 1 company multiple realtors etc. No mapping table as such the schema handles it
noProblem I did not find any problems in the first phase testing. All basic functionalities work as expected. Bonus points for the UI. One of the best I have seen. The web application is intuitive and guides the user in performing any function. Great job!
noProblem First reviews comments were fixed.
noProblem They still have the problem I found in the first round.
noProblem When the admin tries to delete a real estate company which has some realtors and houses, all the houses and realtors are deleted as well. This is the expected functionality. Good job! All other test cases work as well. If a house hunter is deleted all of his/her inquiries are also deleted.
noProblem I could not login as admin using username password combination provided in readme. So, edge-cases could not be tested.
noProblem The readme document clearly mentions the edge cases when a company is deleted, what happens to the houses and realtors.
noProblem Edge cases like real estate company deletion are handled as deletions which is basically not handling it. Could've done some case like transferring them to other user account or such.
noProblem They did not very well dealing with the edge cases. (1).Nothing happens. (2).Nothing happens. (3).Nothing happens.
noProblem Edge cases are covered. When a company is deleted, the realtors and houses are also deleted along with it. The Readme.md file also details how the edge cases are handled.
noProblem not thoroughly test. Not enough test written for inquiries
noProblem Models and controllers are well tested. All edge cases are covered and tests are comprehensive. The inquiries controller is especially well tested. All assert statements are well thought of.
noProblem Yes. the team has thoroughly tested.
noProblem The test only validates cases with valid attributes
noProblem Most common cases are tested in controllers. They are using fixtures for testing
noProblem Yes, they used Rspect to test the code.
noProblem 108 commits. quite impressive.
noProblem Adopted good coding practices
noProblem Code was very clear and concise. Implemented concepts of cohesion and coupling. Related functionalities were placed together.
noProblem Yes, the code looks good. Code modularization principles are followed(didn't find any major code duplication issues).
noProblem The code is very well written with maximum functionalitiesÂ covered, including adding a house to Interest list as a hunter, and showing that hunter as a potential buyer for that particular house. Well done!
noProblem Yes, timely commits
noProblem Yes. The team kept pushing commits through out the duration of the project. The team even kept pushing commits during round 2. Also all team mates seemed to have contributed equally.
noProblem The team has been using github for almost entire tenure of the project. Yes, the team has made multiple changes during the round 2. The team has been making changes after the code submission as well till today's date.
noProblem 20 commits in round 2
noProblem Team showed great consistency in committing changes. Changes increased in round 2.
noProblem Yes, the commit count has almost doubled.
noProblem 52 commits! The team seems to be quite active throughout.
noProblem Code is pushed, but frequency is very less.
noProblem Yes. Models are maintained properly.
noProblem Yes, the team has handled all theÂ single and multipleÂ associations among all entities quite well. All the relationships can be reviewed under the model of all the entities.
noProblem Database was well designed so as to avoid redundancy.
noProblem Looks good. All types of relationships are handled properly.
noProblem Yes. The mapping of 1 to n for company-realtor and company-houses is correctly done.
noProblem The design is well implemented. Relationships are well defined in models and edge cases are handled in schema itself.
noProblem The system seemed to handle test cases.
noProblem When the admin tries to delete a real estate company which has some realtors and houses, all the houses and realtors are deleted as well. This is the expected functionality. Good job! All other test cases work as well.
noProblem Edge cases are well handled with the appropriate handling of dependencies between companies and users, houses and their creators etc.
noProblem Test cases for the user have been implemented.
noProblem Models and controllers are well tested. All edge cases are covered and tests are comprehensive. The user model is especially well tested.
noProblem Testing was done.
noProblem The code is written in a clean way
noProblem The quality of the code is good, clean and well-readable. Multiple tasks are handled by function calls and a method handles only one task. There is not many nested blocks or long methods. There is no bad naming in this project and is well organised.
noProblem Submitted changes throughout the project. Committed changes in round 2.
noProblem IÂ see 1 big commit with all the files which is the first commit and 19 very small other commits done in round 2.
noProblem There are some commits around 19hrs ago. Most commits are 6-7 days prior.
noProblem Compared to other teams that I have reviewed, there are fewer commits here and some are recently committed on Oct 15.
noProblem relationship looks good in both models and schema.
noProblem Yes all relationships properly defined in the model
noProblem The db is well designed and relationship mappings are proper.
noProblem This application handles 1-n and n-n relationships properly. Company-realtor has 1-n relationship in the mapping table. I could not find any problem related to relationships.
noProblem No schema or relations are implemented.
noProblem All DB relation and validation are correct and complete.Â Good Job!
noProblem The project is implemented incorrectly and is incomplete.
noProblem Only ba
noProblem The tests are the normal ones generated by scaffold.
noProblem tests are written for the controllers.
noProblem The commits were regularlyÂ till round 2.
noProblem I could see commits in round 2 as well.
noProblem yes. 67 commits
noProblem Yes the team kept pushing their updates even in round 2
noProblem Yes there are commits after round 1 review but by review 1 the project wasn't working and hence these commits are probably partially to make it work in the first place.
noProblem The team has contributed to the repo regularly. All the team members have contributed to the project in the second phase. The system has improved a lot as compared to the previous version.
noProblem Yes, lot of code has been checked in post 1st cut
noProblem Since the last time they have improved a lot.Â The basic functionalites are working.
noProblem As mentioned in the read me file the inquiry controller and the admin model have been tested thoroughly
noProblem No model or controller has been tested.
noProblem They've tested one controller thoroughly and one basic feature of admin model is tested
noProblem The user and realtor roles are tested to prevent any abnormal occurrences during the sign-up. Good work on that.
noProblem The code is very well structured and written with good coding practice.
noProblem The code quality is fairly standard.Â The code does followÂ "good Ruby and Rails coding practices". No bad naming. Every file is properly named based on their functionalities. I cannot find issues with coding. One method handles only one task. I could not find any bugs in the system and this works exactly how it is supposed to work.
noProblem Code is written in an efficient, clean and readable manner. Proper use of data structures like hash maps are used wherever necessary. A proper use of names for controllers, migrations and views can be seen. The names given for controllers properly signifies the tasks performed. The Readme file is thorough and provides all the functionalities implemented in the project
noProblem Every method is handling only one task and the code is written in a clean and readable manner. The naming conventions are maintained. The code was also very modular. The overall GUI is user friendly.
noProblem The code is written clearly.
noProblem Commits on the repo show updates of functionalities
noProblem Yes, the commits were very well spread-out throughout the development cycle, which was evident from the quality of the project that was delivered.
noProblem Checking git log, the team kept submitting their changes throughout the project.
noProblem Yes the team kept on submitting changes throughout the project. The commits also includes messages and descriptions about the changes made. The team still committed changes in round 2.
noProblem The team has worked hard on the project which is evident by the fact that I can see commits almost daily, throughout the project period. An excellent job on that end.
noProblem They keep commit code until 10-10.
noProblem All known mappings are present
noProblem The DB was very well designed, and successfully mapped all the required relations effectively.
noProblem This system handles the 1-n and n-n relationships properly. The relationships have been set up properly in the model files as well as the schema.Â They have also implemented the destroy dependency in the model, hence no error pops out when the parent record is deleted.
noProblem The team has done praise-worthy work in handling relationships in the system. The real estate company can add multiple realtors as well as the authorization of a particular realtor changes with the change in company.
noProblem 1-n and n-n relationships are all properly defined between Realtors, Company and Users.
noProblem They added 1-to-n and n-to-n relationship in the model.
noProblem All functionalities working with a great UI.
noProblem Yes, the system worked almost perfectly, and there was a huge improvement from the first round. Almost all the issued pointed out after the first round were successfully resolved, especially the bug fixing part and adding the new features. The User experience was also considerably improved throughout the application.
noProblem The System works without any glitches. The team has been fixing bugs after the review 1 such that it works clean now. I could not find any functionality that is still failing even after trying the edge cases.
noProblem Edge cases handled well.
noProblem All the edge cases pass. Well done!
noProblem (1). The realtors and houses will also be deleted. (2). Nothing will happen. (3). Inquires will also be deleted.
noProblem Every functionality is working
noProblem The application seems to have been well tested. Almost all of the test-cases have been appropriately and effectively written. Couldn't find bugs while testing the application too.
noProblem The team has tested a model where user with email and first name should be valid to sign up or sign in. The following tests are meaningful and have the potential to fail Â 1)when user uses same email to register twice.Â 2)should not save user with password less than 6 chars. 3)should not save user with invalid email 4)should not save user without email
noProblem The code shows that most of the controllers and models were tested.
noProblem Yes, they have tested a model and a controller.
noProblem Excellent code! Very well commented and followed most of the Ruby,s standard code formate. Very well organized.
noProblem Neat code and well arrangement of the views espaciallly the house_style view.
noProblem Code was committed throughout the project and during second round too.
noProblem Yes: committed are constantly updated till today. README file was updated 3 hours ago.
noProblem Basic functionalities working fine.
noProblem All functionalities works and can be successfully implemented.
noProblem Good readme instructions provided. Functionalities working fine.
noProblem 1. deletes 2. changes successfully 3.deletes 4. All cases works.
noProblem Good test cases written.
noProblem User model could have been subdivided into different roles/models such as Realtor and Househunter.
noProblem The code has been written in a very clean and readable way. It is very legible and properly indented. I could not find and issues with the coding. There is no bad naming in this project and is neatly organised with instructions. One method handles only one specific task. There are function calls for multiple tasks. Yes, adding the user to the house's potential buyers is done by a separate method call. On the whole, the code quality is legit and I could not spot any long methods or too many nested blocks.
noProblem This project is very well organized, and the code style is great.
noProblem It's good to have the search logic in the model as opposed to the controller.
noProblem Really good commit record with good comments as to what was changed.
noProblem Yes the number of commits have increased upto 110 commits.
noProblem Yes the team kept on submitting their changes throughout their project. There are a total of 110 commits from the team and they still committed changes in round 2. They have made 28 commits int the week of Oct 7 which is after the first round. They have committed the changes with proper messages also.
noProblem I just see commits done on last few days by most teammates.
noProblem This team kept committing through the end of the project.
noProblem They have actively committed code during the project duration including Round 2.
noProblem Mapping checks out.
noProblem House hunter and Realtor can easily switch accounts.
noProblem All of the relationships are handled properly in the code.
noProblem The entity relationships have been established properly. They have also implemented cascading delete.
noProblem Well done! Most of the functionality I commented on last time has been fixed with very intuitive UI. The only thing I couldn't find still was being able to view all inquiries as an admin. Very good updates overall!
noProblem All of these are well handled and documented in the readme. Good work.
noProblem When a realtor changes real estate companies, they are able to edit houses listed from the new real estate company, but not from their old one. When a user with inquiries gets deleted, so do the inquiries.
noProblem The edge cases are covered. The readme file also details how these cases are handled.
noProblem The user model is tested, as are multiple controllers.
noProblem They have written proper test cases that check both positives and negatives.
noProblem No not properly working.
noProblem The code looks clean and neat. Couldn'tÂ find any bad naming in the project.
noProblem Code is written properly with all DRY principles. Methods are simple and clean. Every methodÂ contains functions specific functionalities. MVC are created where they are needed.
noProblem Yes the code quality seems good. Team has taken care of keeping a good design.
noProblem Naming convention followed, Code is neat. Formatting is done. Function calls are included.
noProblem 1
noProblem Yes, the team has shown proper team collaboration, two members of the team kept submittingÂ the changes throughout the projects. And there are sufficient commits for round 2.
noProblem Yes, model and relationships are well designed and cover most of them.
noProblem Test cases present for user controller.
noProblem Basic functional test cases are written for four controllers.
noProblem The code has been implemented as per the Ruby standards of coding.
noProblem The code is written in a clean and readable way.
noProblem Cthe team has written code in a clean and readable manner. the team has implemented individual functions for handling specific individual tasks. The application uses proper naming convention and follows singular naming convention for all model classes. The team has used singular and plural naming convention as per the standard ruby on rails convention which makes it easier for the reviewer to be able to read and understand the code.
noProblem Proper naming standards and conventions are followed.
noProblem Code seems clean.
noProblem The code is clean and readme file is also present explaining each and every implementation
noProblem One method handle one task and code is neat and understandable
noProblem Well written code, clean and easy to read.
noProblem Checking the git log, the team still committed changes in round 2.
noProblem They committed quite many changes on the day of submission.
noProblem handled perfectly well.
noProblem the code written seems to follow nice
noProblem good coding practice used.
noProblem Commented code in view/controller files
noProblem There were commits with required changes for the second submission. Commits from all team members could be seen showing their contribution.
noProblem yaah frequent commits were done throughout the course of project.
noProblem 157 commits
noProblem 157 commits.
noProblem No couldnt find 1to n relationships.
noProblem The team has a well structured schema. The team have defined the relationships between the tables properly. the models have defined all the relations properly.
noProblem Yes, the team has rectified the errors from the earlier review and has implemented the needed changes. Additional functionalities like the 'not interested' feature were also used.
noProblem yes the problems found in first round were fixed.
noProblem No null checks. I can submit empty form
noProblem The authors did a good job in developing the system. The system is working as it is supposed to work.
noProblem the web application seems to have implemented all the functionalities properly. The team have updated the repository and implemented new features after the initial submission.
noProblem Addressed comment from 1st review.
noProblem Edge cases are not handled
noProblem the following edge cases seem to have been handled and documented: 1.)On deleting a user, the corresponding househunter and realtor accounts are deleted.2.)On deleting a company, corresponding houses are deleted and realtors with that company have their company set to null3.)on deleting a househunter or house, the corresponding entry in interest list is deleted.4.)On deleting househunter or house, corresponding inquiry is deleted
noProblem works great. have mentioned in readme as well.
noProblem no test cases performed.
noProblem tested multiple controllers, but i don't see any models being tested.
noProblem Yes, the team has done pretty well in testing at least one model and one controller.
noProblem The team have implemented basic testing for basic CRUD functionalities for all the controllers and models. These look like the automatically generated tests from scaffold in rails.
noProblem couldn't find rspec file or any other test file.
noProblem Code follows most of the ruby good practices.
noProblem The team seems to have followed proper naming conventions for naming all the classes as well as all the attributes. TheÂ team seems to have written a clean and readable code.
noProblem The team committed throughout the project and during round 2.
noProblem they have 181 commits
noProblem The team has a good history of commits and as can be seen from the github repository the trail of commits is well documented and each new feature added or bug fixed has a documented commit. The team kept pushing commits throughout both the deadlines and were regular.
noProblem Yes: a total of 181 comments and are continuously committed on the repo.
noProblem The database design is solid, with join tables for the n-n relationships.
noProblem The rb files set the has_many and belongs_to relationships correctly
noProblem The team has a well designed schema and has defined all the relationships between the tables properly.
noProblem The system is well designed and all the features have been correctly added and all the functionalities work. The authors have fixed all the problems from the previous submission.
noProblem The system works as it is supposed to. For example the realtor, the admin and the user can login and perform the related functionalities successfully.
noProblem The system was very strong through edge cases and the README.md was very detailed.
noProblem the first edge case wherein a comp[any is being deleted by the admin is handled perfectly and the associated listings and inquiries are deleted accordingly. The house hunter deletion is also handled perfectly so that their inquiry are deleted accordingly. Also the README.mdÂ explains the working and the functionalities of each role properly.
noProblem (1) What will happen if the admin tries to delete a real estate company which has some realtors and houses? It deletes it successfully.Â Â Â (2) What will happen if a realtor changes his/her real estate company? Will (s)he be prohibited to remove the houses (s)he listed in the previous company? No, houses are easily changed and can be deleted by realtors.Â Â (3) What will happen if admin tries to delete a house hunter who has submitted several inquiries? Will the inquiries be automatically d
noProblem The tests looked good.
noProblem The team has tested the app using RSpec and thoroughly tests the user module
noProblem Good job on testing everything with rspec. Tests look concise and crisp.
noProblem The team has implemented rspec testing and have thoroughly tested one model namely the users model with this. Also the team has used minitest to thoroughly test the users controller.
noProblem Test has been written for most of the functionalities and works well. The test folder has the relevant files with well commented code.
noProblem All functionality seems to be there now.
noProblem All deletion cases are taken care of.
noProblem Tests are good.
noProblem Controller Method Testing is incomplete
noProblem There were 26 commits in total. The team pushed some commits for the round 2.
noProblem Did not find such a relationship in the model. Did not find foreign key constraints as well.
noProblem I found RSpec tests written for inquiry and users
noProblem 1. The team has tested parts of different models and controllers partially, but none of the models/controllers is thoroughly tested for complete functional verification.
noProblem Yes, by looking at theirÂ commit history, the team still commit changes in round 2.
noProblem By looking at their model file, they handle the relationship pretty well.
noProblem No bad naming, multiple calls for multiple tasks
noProblem Submitted changes throughout the project. Made commits in round 2.
noProblem The testing was done
noProblem The system has been fully deployed and tests for the models and controllers are performed for the users involved in the system. The team checked for the edge case wherein the admin deleted the real estate company.
noProblem The code is clear and simple, most functions have seperateÂ method calls.
noProblem The code followed the basic practices for clean and effective programming using Ruby and Rails. The methods and function calls were efficient in that they only performed the task it was assigned to do.
noProblem A major portion of the project was completed in the first stage itself. Certain noticeable changes that the team implemented in this stage included setting up admin functionalities to view and destroy the realtor or househunter accounts.
noProblem I think this team nailed the entity relationships with this application. Everything had the right relationships.
noProblem The relationships between various entities is clear.
noProblem The relationships of realtor to real estate company or realtor to house hunter justified proper mapping between them. The system handled the 1-to-n and n-to-n relationships properly.
noProblem The basic functionalities in the system are working properly
noProblem The user interface of the system helps to understand the general flow of the program. It also supports sessions and enables user to navigate based on their tasks.
noProblem 1. Yes, that is taken care of. 2. No bad naming 3. Questionable redirection.
noProblem Code quality looks good. Standard conventions have been used. It is also good to see that the team has used seeds.rb for data generation.
noProblem Group continued to revise and commit changes for the project throughout round two. Commits were clearly stated as to the purpose. You can see the development process of the project through the changes applied.
noProblem Yes, 22 commits in total and they have consistently kept on working on Git throughout.
noProblem 1-to-n and n-to-n relationships are handled correctly. The system utilizes foreign key columns in the database to achieve this. For example, 1-to-n relationship between realtor and real estate company is achieved by adding aÂ company_id field to user table. Same utilized by houses table which are linked to one realtor and one company.
noProblem The system now works as expected. The common functionalities are working
noProblem Most of the functionalities are added and seem to be working. There are some breakages like realtor has a create inquiries option which should not be present, and it breaks on clicking it. Search functionalities based on footage, price location have not been added. Interest list for the user and potential buyers list for the realtor is not added.
noProblem Clean code and readable. 1. Yes 2. No 3. None
noProblem Very well written in the style of writing and the ruby MVC architecture is properly implemented.Â 1. They have suitably defined methods to handle particular tasks following the appropriate MVC architecture and also following the correct session management.Â 2. Nothing is inappropriately named. They have very smartly worked on it.Â 3. Coding style is absolutely conversant with the Ruby on Rails flavor of coding.
noProblem The code is very well written.
noProblem Code is clean and well written. A task is handled by only one method. There are no bad namingÂ in this project and is neatly organised with instructions.Â No issues with the code.
noProblem Yes, the team has been making commits through out the project tenure as well as round 2.
noProblem The commits are visible through out. Yes, commits have occurred in round 2.
noProblem They have worked on the project a lot, 120 commits, each one being descriptive. Good job there!
noProblem Yes they did. 118 commits
noProblem Yes, the changes were mostly evenly spread-out throughout the development cycle. This shows consistent efforts throughout.
noProblem Yes, they have a total of 117 commits which shows the consistency shown by them in working through the project and updating the changes. They have made a lot of vital changes in round 2.
noProblem Yes, there are commits continuously made to the code as latest as 5 hours ago during review.
noProblem Yes the team kept on submitting their changes throughout their project. There are a total of 120 commits from the team and they still committed changes in round 2. They have committed the changes with proper messages also.
noProblem The relationships in the DB table have been carefully defined and they have taken care to relate 1 to n for houses, house hunters, inquiries, and so on.
noProblem This application handles 1-n and n-n relationships properly. Company-realtor has 1-n relationship in the mapping table. I could not find any problem related to relationships.
noProblem By looking at their modelÂ file, they handled the relationship properly.
noProblem Perfectly functional and very well styled with the use of CSS and also the GUI is very user friendly.
noProblem There seems to be a rudimentary test they have implemented as gathered by going through their file 'application_system_test'. This and the test file in the models shows that they have taken sufficient efforts to thoroughly examine their code.
noProblem All feedback has been fixed. No pending issues.
noProblem There are no new variables etc. The code looks fine and logical.
noProblem Extremely small change. No bad naming in question.
noProblem There aren't much big changes. The changes have been crisp and self explanatory.
noProblem 1. Functions are of appropriate length and well structured with respect to the purpose in question.Â 2. All code has been suitably well put into the methods with their intended function and work cutout for them.Â 3. No, the comments have been well placed and self explanatory making it easy to follow.
noProblem The added code is crisp and of required size. There isn't much addition anyway to worry about it violating DRY principles.
noProblem Extremely small change. No problems found.
noProblem All the test have been passed with 100% accuracy
noProblem All tests pass, all descriptions in the Test Plan are just the test cases in the Rspec file, sooooooo yeah I guess they all exist.
noProblem TheirÂ variables, methods, and class names are good
noProblem Rspec tests look just fine and descriptions are intuitive.
noProblem The tests look fine. It's easy to follow what the tests do.
noProblem Every test case that is discussed in the Test plan is implemented in the project.
noProblem In video, the test pass 100% coverage.
noProblem the work takes care of all the edge cases accurately.
noProblem Yes their code works, and some edge cases are also correct.
noProblem I didn't find any such names for variables which areÂ not reasonable
noProblem the writeup is well and easy to read.
noProblem all the names are very descriptive and reasonable
noProblem The writeup clearly explains the problem statement
noProblem They kept working on it and improved a lot.
noProblem the wiki page has showed up what the expertiza is and some examples have show up what the task of the team is.
noProblem All variables named clearly and easy to understand.
noProblem I could understand what the project does. However, there are fewer examples of the test.
noProblem the code has all 5 of the characteristics.
noProblem This is not a fair ask. As far as I can tell, there is no document that says we should create a test plan.
noProblem This was a testing project so most of the code is in the test file with some minor changes to the model file it corresponds with.
noProblem Good.
noProblem The code is not redundant. It follows Ruby style guidelines and the variables names are not confusing.
noProblem The pre-builds are nice and code is neat.
noProblem All test cases are currently passing
noProblem All the cases discussed in test plan have been converted into automated tests.
noProblem Yes all the features work as intended and also considers all the test cases properly. Edge cases have been handled efficiently , for example , the test case related to "able to review" is able to handle the negative test case as well.
noProblem Yes, unit tests Rspec are provided.
noProblem the author's work implements all the functionality described in the assignment with no errors. all the edge cases work as expected.
noProblem This is a testing project and they got over 90% coverage as shown in the video
noProblem Action mirror successfully implemented . Active record is also getting updated properly.
noProblem The test suite reaches 99% code coverage as describedÂ on the wiki page.
noProblem There were some issues initially when i looked at the code. But the professor has already made those suggestions about naming conventions and following the design pattern and to write appropriate methods in the right models or controllers. Looks good now.
noProblem No naming issues found
noProblem The method names, variable names and class names are intuitive and suggestive of the functionality.
noProblem Code looks perfect. Follows standards.
noProblem All ruby looping constructs followed to a good extent . Refactoring the code could be possible
noProblem Follows most he good coding practices. Follows DRY Follows ruby style guide and has no error in code climate as well
noProblem The write up is well documented like, it specifies what files are been modified and in which files which functions are modified giving a proper flow of the test cases. The test cases written are more or less self explanatory.
noProblem the writeup is really good, i can easily understand what the project does.
noProblem The code follows DRY principle. None of the functions is very long. More comments could be added but not required.
noProblem They team does a good job to clearly explainÂ what they did. All test cases explain what they do and they let me know what all their mocked objects are.
noProblem Code is not DRY.
noProblem Clear statement and well layout of the wiki page.
noProblem Yes, the wiki page is very clearly.
noProblem All the features are implemented according to the wiki documentation submitted.
noProblem Edges cases are covered well in the tests
noProblem The wiki page has been nicely written and the task is explained with enough details. It indicated the tests which needed to be implemented as the main goal of the project.
noProblem The features work as intended.
noProblem Fix is working good. Link is up.
noProblem The test has already covered edge cases.
noProblem Clearly mentions implementation details an the problem descriptions
noProblem Documentation is concise and clear
noProblem Writeup is good and easily understandable.
noProblem The Wiki document clearly explains what work is done. One section for each issue. The deadline reminder functionality explains what code is changed but overall what the use-case is and what task needs to be performed could have been explained better.
noProblem Very well written wiki, well explained with all the nitty gritty implementation details.
noProblem The writeup is written very clearly; gives good idea about the project.
noProblem Very detailed. All the implementation details are clearly explained.
noProblem The writeup is written really well. The description about the functionality has been mentioned clearly. Good Job!
noProblem The writeup is clear.
noProblem Very clearly. The authors provide sufficient information about improve the email function(such as when become a participant).
noProblem Test plan is well thought out and thorough.
noProblem Yes the test plan looks complete as the author has mentioned all the details ranging from setting up the environment to what all test cases have been written along with the code snippets. Edge cases have been handled efficiently , for example , the test case related to "able to review" is able to handle the negative test case as well.
noProblem the test plan look complete enough.
