0,Of what code is available in the zip file, most of it is understandable. The devise gem seems unnecessary to their implementation however.
0,Github link is not submitted. I downloaded the repo and It has barely 4 commits with basic scaffolds and schema generated for realtors and houses  
0,The link seems to be a local deployment.
0,All tests in the zip file are scaffold generated.
0,Yes, the house controller has been tested.
0,No testing has been done apart from the auto-generated tests.
0,The zip posted doesn't seem to be updated again later after 1st Oct
0,Yes, the controllers have been properly tested.
0,There are 24 commits done, however all have been made on one day.
0,There are no proper commit messages.
0,No, I just see all commits happened in one day, so I don't think the team has been keeping on pushing their changes.
0, No, there has been only one commit on 10/01.
0,All the changes were pushed on a single day. the last day of submission.
0,Interface is very basic It lacks in many major functionalities that made the navigation through the site difficult. README was not well described to understand the team's work and their functionalities.
0,The ruby coding convention has been followed through out the project.
0,The MVC structure is good, but some details should  be improved.
0, Yeah in a way. The scaffolding generated code follows convention.
0,The code follows the common "Ruby on rails" application structure: Hence, it was easy for me to navigate through other files to see portion of the code. It follows the common MVC structure. However, In some parts of the code, comments were missing which was confusing as I didn't understand the logic for that code. README file was not properly described for other users navigating through app. 
0,The controllers are well-written.
0,The code follows "good Ruby and Rails coding practice" from my point of view.
0,Have used DRY principles. The code has good readability and good naming conventions are followed. Have grouped similar functionalities into classes so that it is modularized. Have used iterators such as each instead of for and while.
0,UI/UX is awesome and intuitive. Read me file is also well described.
0,The user interface is easy to use and the README file is explicit.
0,Great UI. Admin dashboard looks very professional.
0,Yes you have the tests written.
0,The basics test are written. Some application specific tests can be written.
0,Requesting to GIT Link to verify the same
0,It seems that there is only one team member pushing changes.
0,The model and controller are well designed. Each method covers a single functionality! Good job
0,The MVC structure is completed. and basic functions have been finished.
0,the interface is good, clean and very easy to use.
0,They are simple links to pages which does tell you where to go so it's fine.
0,The UI is elementary but intuitive. The links have long descriptive names
0,Yes it is deployed on Heroku.
0,Yes, the team seems to have tested their UsersController completely that handles login, logout and other user signin validations
0,The code was presumable uploaded in the end (pushed from another repo) and hence I could not see any regular commits.
0,In total, there are only 3 commits done!
0,The ruby coding convention has been followed through out the project.
0, Yeah in a way. The scaffolding generated code follows convention.
0,No, not really. The website just has one role to operate, and the readme file is an auto-generated file, which doesn't include any useful information.
0,Yes, the controllers have been properly tested.
0, There are some tests for the controllers, but it looks like just the scaffold generated tests.
0,only the default testcases created by the command are present in the repository.
0,There are 24 commits done, however all have been made on one day.
0, No, there has been only one commit on 10/01.
0,The models, views and controllers have been properly designed and implemented.
0,Most of the practices have been followed
0,The ruby source code appears to follow RoR conventions, and uses a few Rails associations. The directory names and project structure appear to follow good RoR MVC conventions. Source code is organized and uncluttered too.
0,The code is neat and precise with proper structure and comments
0,Very good structure, readable and names are very relevant to the functionality
0,The code is written really well.
0,Good design and easy to use.
0,Controller has been tested  
0,extensive testing was done
0,Yes.
0,Team was active thoughout the process
0,No, the majority of the work was pushed on 09/29. It is an impressive product if they got all of this done in the past week.
0,There are many commits which are divided almost equally between all teammmates
0,yes about 75  commits were done
0,Code commit frequency is good.
0,The code is very well written and arranged to be easily understandable. No extraneous code or unused code visible. DRY principles have been implemented very well.
0,Very clearly code
0,This team has followed the basic structure followed in every ruby on rails application which made my task easier to access files and understand their logic. Properly described README file and also one additional pdf given with application was enough to give me proper understanding of the modules.
0,ReadMe file contains enough information to understand the project implementation basics.
0,Please directly tall users where to sign up.
0,The user interface is very intuitive and easy to use. It is very well explained in the README file. The steps to run the code are described as well.
0,Yes, the user interface is intuitive and easy to use. also, the README file has been perfectly described to give the proper idea of the flow and login credentials of an admin.
0,Basic scaffold generated tests available.
0,Yes, from what I could see, they have done well in testing at least one model and one controller.
0,Team has perfectly implemented major modules and also they have implemented the extra credit portion. I tried to login with invalid credentials or some invalid password-email-phone lengths: but there were validations. Hence, they have perfectly focused on this parts too and tested it.   I believe this has implemented a through test of at least one module and controller.
0,Several linear commits with good explanations available.
0,Tem has properly used Git and only pushed the changes when necessary and also, consistently throughout the project period.
0,Well written code.
0,Not a lot of code to begin with but whatever is there seems by coding practice norms. Most of the code seems to be commented
0,Yes, the code follows good Ruby and Rails coding practices as the models, views and controllers are well defined
0,The interface is preliminary, but is easy to understand.
0,The admin functionality is tested well, however there are some fields like validations of phone number which are yet to be tested or improved upon
0,Functionalities of admins are working.Though many other functionalities are yet to be implemented.
0,I did see updates and commits 15 hours ago.
0,Yes, added the working functionalities timely.
0,The team has been pushing commits in a way that shows they have been making consistent progress on the project.
0,Yes, they have around 21 commits.
0,Most files seem to be following good coding practices.
0,The readme file is well constructed. MVC files are properly made and easy to navigate. DB migrations can be seen easily as well. Overall good job done on this part.
0,Fairly good coding practices followed.
0,The UI is well built as well. Specially the navigation bar at the top is a delight in terms of User experience.
0,Yes. The controller and model for handling inquiries have been thoroughly tested.
0,The team kept on pushing changes throughout the project period, showing timely contributions from each team member. In fact, by looking at the commits, each team member was probably assigned a dedicated module to work on, which always works well to create such a big application.
0,Yes, through the commit record, I can see that this team has been keeping pushing their changes.
0,There are more than 70 commits , and they have been working continously
0,There were regular commits during the course of the project.
0,Fairly frequent commits to GIT.
0,Not much functionality is available. Of what is available, however, the code does follow "good Ruby and Rails coding practices"
0,The code is very neat and easy to read, but i can tell it is the auto generated code from scaffold. 
0,The application is deployed on Heroku, and the user interface is easy to use.
0,No roles implemented. 
0,Basic Tests are present. Not custom tests though
0,Yes. Good effort in case of pushing changes
0,No updates since 6 days ago
0,Only on 2 days all together
0,Well written code.
0,Yes, the code follows good Ruby and Rails coding practices as the models, views and controllers are well defined
0,The interface is preliminary, but is easy to understand.
0,I did see updates and commits 15 hours ago.
0,Yes, added the working functionalities timely.
0,The team has been pushing commits in a way that shows they have been making consistent progress on the project.
0,Yes, they have around 21 commits.
0,Most code seems to be written with good coding practices in mind.
0,The repository looks to be set up well and the app is laid out like a typical Ruby on Rails application. Good README file was present as well.
0,good coding style, names are well selected and good readability.
0,Have used DRY principles. Followed good coding practices.
0,The code follows the right style and in a good format.
0,They had a good amount of tests the UserModel.
0,comprehensively tested for users
0,In the files they provided, I found they provided test for most of controllers and models.
0,Have implemented basic testing. Could add more application specific test cases.
0,Last commit was 3 days ago, so they are not continuous throughout the period.
0,Yes, it looks like all team members contributed and they have 80 commits over the course of several weeks.
0,So many commits! It makes me proud. Starting as early as September 22nd, they make progress up until... today?! Either way, they passed this with flying colors.
0,about 80 commits were done along the timspan
0,According to the record on github, they committed for many times, so they may keep pushing changes.
0,Evenly committed code during the project duration.
0,The team pushed changes frequently.
0,The code is very well written and arranged to be easily understandable. No extraneous code or unused code visible. DRY principles have been implemented very well.
0,The code is very well written and organised. All the framework conventions have been followed such as the naming conventions. Comments have been added at appropriate places which improved the readability.
0,yes. code is written properly. followed dry principle. added comments where possible. followed mvc with rails framework.
0,It does well to follow the "good Ruby and Rails coding practices". It follows the DRY code approach.
0,The Git code included almost everything that follows good coding practices using Ruby and Rails. 
0,yes. User Interface is good and easy to access.
0,Excellent commit history. Contributions from all team members could be seen.
0,Yes I could see many push requests on the github. Hence concluding team is pushing their changes periodically.
0,Yes, the team kept pushing changes throughout the project period
0,There was consistent commits with a spike in between when probably most development happened
0,looking at your commit history, you guys started it on Saturday when the submission was Monday.
0,The website did not seem to work at first. Now I was able to access it. I also noticed some features that were included in the meantime like testing by adding house hunters. Overall, the team did work on updating the site functionalities. 
0,The Git repo shows total of 15 commits. Although majority of the places Ruby Standards have been followed but at some places variables names such as (househunter_url) does not show any relavancy or understandidng to the reader. If the variable is pointing to a function or belongs to, for example it can be house_hunt_xyz. Overall I think good standards are being followed. 
0,Yes we can see many pushes on git. Hence , they have updated code.
0,Timely commits and elaborated readme file.
0,The code is clear and concise, it does follow good Ruby and Rails coding practices.
0,Yes, the code does follow Ruby and Rails practices to an extent, as I can see the use of many helper methods in the code.
0,Most files seem to be following good Ruby and Rails practices.
0,Did a good job using forms to stay dry with the edit and new pages. Some more comments especially in the models would have been helpful to understand why certain validations were chosen. The use of JSON to store and recall in views was clever.
0,yes. It is well written and they managed to follow DRY principle.
0,Code follows the basic CRUD structure given by Rails and neatly explains what is being performed. The notices nicely explains the user what is happening. The db schema is designed to incorporate most of the requirements.
0,Reviewed the Git code for all controller , models and views . standard ruby coding practices have been followed and code is easily readable 
0,Code follows 'good Ruby and Rails coding practices'. Naming conventions are correct, methods in controllers are short and concise and there are no instances of 'spaghetti code'.
0,Yes user interface is easy to use on the first page.
0,Tests are added for most controllers.
0,Multiple commits are present in the repo.
0,All of the commits for this application were made on the same day.
0,There were 4 commits on the day it was due, presumably to get the project up and running for submission and 1 today to upload the development database.
0,I see commits only on a single day .
0,All the changes are pushed at once.
0,They have attached 2 other files saying what all they have implemented.
0,Everything was described properly in the README file.
0,I could see testing done. I could see extra test cases added.
0,Yes 
0,The team all had multiple commits throughout the course of the project.
0,Yes i could see multiple pushes.  
0,The team has been pushing changes since around 12 days ago, and the project structure feels well planned with some changes and testing required.
0,They have 195 commits. Ui is great, everything is running smoothly.
0,The project was continuously updated during the past two weeks.
0,Code commit frequency is fairly good.
0,ReadMe file contains enough information to understand the project implementation basics.
0,Basic scaffold generated tests available.
0,Several linear commits with good explanations available.
0,Very clearly code
0,This team has followed the basic structure followed in every ruby on rails application which made my task easier to access files and understand their logic. Properly described README file and also one additional pdf given with application was enough to give me proper understanding of the modules.
0,Yes, the user interface is intuitive and easy to use. also, the README file has been perfectly described to give the proper idea of the flow and login credentials of an admin.
0,Team has perfectly implemented major modules and also they have implemented the extra credit portion. I tried to login with invalid credentials or some invalid password-email-phone lengths: but there were validations. Hence, they have perfectly focused on this parts too and tested it.   I believe this has implemented a through test of at least one module and controller.
0,Tem has properly used Git and only pushed the changes when necessary and also, consistently throughout the project period.
0,I think it does pretty well to follow the "good Ruby and Rails coding practices". It is elegant and follows the DRY code approach.
0,The user interface is very intuitive and easy to use. It is very well explained in the README file. The steps to run the code are described as well.
0,Yes, from what I could see, they have done well in testing at least one model and one controller.
0,Most code seems to be written with good coding practices in mind.
0,The repository looks to be set up well and the app is laid out like a typical Ruby on Rails application. Good README file was present as well.
0,good coding style, names are well selected and good readability.
0,Have used DRY principles. Followed good coding practices.
0,The code follows the right style and in a good format.
0,Have listed out the functionality which is very intuitive. But some links like 'As realtor' and 'As house hunter' are broken, making a bit of a confusion.
0,deployed on Heroku. Friendly interface, good README file.
0,They had a good amount of tests the UserModel.
0,comprehensively tested for users
0,In the files they provided, I found they provided test for most of controllers and models.
0,Have implemented basic testing. Could add more application specific test cases.
0,Well tested.
0,Yes, it looks like all team members contributed and they have 80 commits over the course of several weeks.
0,So many commits! It makes me proud. Starting as early as September 22nd, they make progress up until... today?! Either way, they passed this with flying colors.
0,about 80 commits were done along the timspan
0,According to the record on github, they committed for many times, so they may keep pushing changes.
0,Evenly committed code during the project duration.
0,The team pushed changes frequently.
0,Well written code following coding practices.
0,Ruby coding convention has been followed almost throughout the project.
0,All practices were followed
0,Code looks good. Use comments wherever necessary.
0,Coding standards are fairly good.
0,Constant changes were being made.
0,Team was proactive in working together.
0,Code commit frequency is fairly good.
0,Code follows general Ruby guidelines and is formatted in a legible manner.
0,The ruby code is precise and the project follows a proper structure with all the required files.
0,Yes, the team has included tests for controller, model, and have also implemented integration tests. 
0,Yes, their commits started from September. They have been working on the project for the entire period.
0,16 commits in last 11 days implies have been pushing code frequently
0, The repo has many commits contributed by the teammates throughout  the project period
0,I found many commits throughout the project period about fixing bugs, add new features and update readme.   
0,User interface is very nice and well-organized.
0,readmd has all important required details.
0,This application is deployed on Heroku, and the user interface is easy to understand and use.
0, The code is neat and concise with required comments and messages for all the changes
0,The controllers are well-written.
0,The code follows "good Ruby and Rails coding practice" from my point of view.
0,Have used DRY principles. The code has good readability and good naming conventions are followed. Have grouped similar functionalities into classes so that it is modularized. Have used iterators such as each instead of for and while.
0,The user interface is easy to use and the README file is explicit.
0,Great UI. Admin dashboard looks very professional.
0,UI/UX is awesome and intuitive. Read me file is also well described.
0,Yes you have the tests written.
0,The code followed best practices for items such as indentation, line separation, and method naming.
0,MVC structures are very nice, and every required functions are finished. 
0,Very nicely written code. DRY principles used nicely. Formatting is also done very nicely.
0,Code looks, as they say, 'hella fresh'. Very clean, from the files I looked over.
0,The team has used excellent Ruby standards coding practice. Controller as well as Model has variable names which are self explanatory. 
0,The code on Git has good readability with proper indentation and naming conventions. Similar functionalities have been combined together into a class like, in the case of PotentialBuyerController. The use of a single User model and role based authentication has certainly DRY'd up the code. One possible alternative to further DRY up the code, is that in many controllers like in the case of users_controller, every method is storing the list of real estate companies in an instance variable @real_estate_companies. So, in this case a callback like before_action can be used to save the real estate companies in @real_estate_companies variable, so that all methods have access to it.  The use of appropriate iterators instead of looping constructs like for and while follows Ruby's good coding practices. Every controller serves a specific purpose and the use of a common welcome_controller and its associated views has again modularised the code for easy extensibility. 
0,Ruby Rails code standards are correctly followed. And code is committed properly.
0,The code followed best practices for items such as indentation, line separation, and method naming.
0,MVC structures are very nice, and every required functions are finished. 
0,Very nicely written code. DRY principles used nicely. Formatting is also done very nicely.
0,Code looks, as they say, 'hella fresh'. Very clean, from the files I looked over.
0,The team has used excellent Ruby standards coding practice. Controller as well as Model has variable names which are self explanatory. 
0,The code on Git has good readability with proper indentation and naming conventions. Similar functionalities have been combined together into a class like, in the case of PotentialBuyerController. The use of a single User model and role based authentication has certainly DRY'd up the code. One possible alternative to further DRY up the code, is that in many controllers like in the case of users_controller, every method is storing the list of real estate companies in an instance variable @real_estate_companies. So, in this case a callback like before_action can be used to save the real estate companies in @real_estate_companies variable, so that all methods have access to it.  The use of appropriate iterators instead of looping constructs like for and while follows Ruby's good coding practices. Every controller serves a specific purpose and the use of a common welcome_controller and its associated views has again modularised the code for easy extensibility. 
0,Ruby Rails code standards are correctly followed. And code is committed properly.
0,UI has modified which is good.
0,the interfce is very good, clean and very easy to use.
0,Very nice UI, great UX. Great use of material design icons and bootstrap. Enjoyed using the website. Great job!
0,In general, UI was great. The site looks really clean, and the buttons did what I expected them to do.
0,User interface is well organized and easy to use.
0,Highly intuitive user interface. Properly states admin as well as new user login. The navebar shows the logged in user as well as log out options. Very easy to user and understandable. 
0,Yes The UI is interactive and easy to use.
0,Modules have test cases.
0,yes, at least one controller and one model have been tested.
0,Two tests have been implemented and working. 
0,Hunters functionalities are working properly.
0,The team used multiple development branches and a master branch along with frequent commits to stay in sync.
0, 
0,yes, the team keep on pushing their changes.
0,Yes, there are periodic commits and the messages are very descriptive.
0,Starting on September 22nd and going up through today! 100+ commits is great.
0,Yes, the team kept pushing changes throughout the project period
0,A total of 105 commits. Consecutive update done on Github. 
0,The team has started to work on the project from Sept 16th and has regularly pushed their commits to the repository. Both the team members have been actively contributing to the project. A total of 58 commits have been made so far and the project is progressing at a very good rate.
0,I could see commits made my team members in timely manner.
0,The user interface is very intuitive. I like the modern look and feel of the UI as well as the icons and images. It's quite professional. Excellent work! The various buttons are in good locations. The button text could be darker, however. The "new user" link could be made into a bigger button, which would make it more prominent. Right now it is hard to see.
0,the interfce is very good, clean and very easy to use.
0,Very nice UI, great UX. Great use of material design icons and bootstrap. Enjoyed using the website. Great job!
0,In general, UI was great. The site looks really clean, and the buttons did what I expected them to do.
0,User interface is well organized and easy to use.
0,Highly intuitive user interface. Properly states admin as well as new user login. The navebar shows the logged in user as well as log out options. Very easy to user and understandable. 
0,The User interface is very appealing. The show view is especially remarkable that makes good use of the attractive classes of CSS and Bootstrap. The navigation links provided in every page are very helpful to explore the website. The switch user capability makes it easy for users to switch between roles without the hassle of logging out and logging in again. One issue that I encountered was that the inquiries controller has not been fully implemented, which lands the website into an error page. 
0,The testing was thorough, although one model and one controller individually did not appear to be tested thoroughly.
0,yes, at least one controller and one model have been tested.
0,Some test cases are missing for complicated flows like Real Estate Company should only be deleted when there are no realtors assigned.
0,The inquiry controller was thoroughly tested, but none of the models appear to have the same amount of testing.
0,Two tests have been implemented and working. 
0,The team has not yet started to test their models (unit test) and controller (functional and integration test). Test driven development (TDD) is a good strategy to test the application features before and during the application development phase. By using TDD, it is possible to anticipate the potential pit falls and corner cases, before starting to address the code to tackle those.
0,The team used multiple development branches and a master branch along with frequent commits to stay in sync.
0,yes, the team keep on pushing their changes.
0,Yes, there are periodic commits and the messages are very descriptive.
0,Starting on September 22nd and going up through today! 100+ commits is great.
0,Yes, the team kept pushing changes throughout the project period
0,A total of 105 commits. Consecutive update done on Github. 
0,The team has started to work on the project from Sept 16th and has regularly pushed their commits to the repository. Both the team members have been actively contributing to the project. A total of 58 commits have been made so far and the project is progressing at a very good rate.
0,I could see commits made my team members in timely manner.
0,Code is written properly and followed ruby framework with MVC architechure. Also added various packages.
0,Basic Practices were followed Reusability of code is maintained and the code is well intended
0,it has a good structure, choice of names of the files is appropriate and readable
0,No
0,Realtor user can perform basic functionalities.
0,Yes. we could see updated git. Hence i can conclude that they are updating code regularly. 
0,Somewhat. Since I can see the commits were made in 2 days only
0,There were 24 commits in 6 days which means that they have been working in last few days and have been doing check-in regularly since they started work.
0, I can see 28 commits , which is descent
0,Code follows general Ruby guidelines and is formatted in a legible manner.
0,The ruby code is precise and the project follows a proper structure with all the required files.
0,Yes, the team has included tests for controller, model, and have also implemented integration tests. 
0,Yes, their commits started from September. They have been working on the project for the entire period.
0,There is no external  link provided to the application
0,16 commits in last 11 days implies have been pushing code frequently
0,very inconvenient for me to review without a deployed version! 
0,The code is as per coding practices. Nice first attempt.
0,Looks good to me. The Ruby DRY code approach is followed throughout.
0,easy to understand.
0,Yes, it is very intuitive and easy to use.
0,test cases are generated through scaffold.
0,only controller tested
0,The team has not implemented a testing module as of yet.
0,Test skeletons are present. Doesn't look like tests are added yet.
0,committed throughout the period to avoid merge conflicts.
0,yes, timely pushing of code and creation of branches to avoid merge conflict
0,The team has a well documented history of commits for the code repository
0,You guys started pretty late. But overall great effort. Great UI.
0,good coding style.
0,Overall the following things can be improved: 1) The primary key for the real estate company should be auto generated. This is done automatically by the rails framework, so maybe you can remove the code from the view which asks for the user to select the primary key while creating a company. 2) Whenever there is a reference to a foreign key in a model, you can validate and use that reference by following the format model_id, where model is the entity of your foreign key. Eg. If house has foreign key of realtor, realtor is the entity of your foreign key, hence you can reference the realtor as realtor_id in your house model. This is because rails follows convention over configuration, and this is the naming convention with respect to foreign keys.
0,Navigation between pages is not defined well. 
0,Deployed on Heroku. Interface is not friendly, but thr README file explained some of it.
0,Decent coding practice
0,The app's indentation, method names, and line separation seem to match solid Ruby style guidelines.
0,From what I see it seems to be following the practice we have been using in class
0, Yes, the source code follows expected RoR style. The directory names and project structure also follow RoR conventions. Good job!
0,Good Rails coding practice has been implemented. In Model as well Controller we can see variables names that shows the relation to overall module and model. 
0,The interface is intuitive. Specially, they have very good form structure for realtor as well as new users, and house hunters. 
0,It appears minimal controller testing has been performed.
0,No testing, but at least they mentioned it in the readme.
0,The team used mutliple branches and many commits throughout the project to increment on the codebase.
0, They have a lot of commits so they were always working on it
0,Yes, it looks like sizable commits were made before the 24th.
0,Yes 95 commits. 
0,The interface is good, and the README provides good documentation.
0,Couldn't find any issues respective to Style Guidelines
0,There were 9 commits overall in the GIT
0,The user interface is quite intuitive to use. I had a very minor suggestion. I found a case where the go back link was missing and thus, I had to click on the dashboard link to go back. Ex. After I click on view companies, there's no go back link.  Overall, I feel you did a really good job. For example, while switching the role, you gave an option to edit the roles as well. As well as a delete account functionality. 
0,Very nice code, and almost every functions that test required are finished.
0,the interface is easy to use and it is wll described in the Readme file.
0,Good set of directions in readme.
0,There were continuous code pushes. 
0,Most files seem to be following good Ruby and Rails practices.
0,yes. It is well written and they managed to follow DRY principle.
0,Code follows the basic CRUD structure given by Rails and neatly explains what is being performed. The notices nicely explains the user what is happening. The db schema is designed to incorporate most of the requirements.
0,Reviewed the Git code for all controller , models and views . standard ruby coding practices have been followed and code is easily readable 
0,Code follows 'good Ruby and Rails coding practices'. Naming conventions are correct, methods in controllers are short and concise and there are no instances of 'spaghetti code'.
0,Yes user interface is easy to use on the first page.
0,Tests are added for most controllers.
0,Multiple commits are present in the repo.
0,Most files seem to be following good Ruby and Rails practices.
0,yes. It is well written and they managed to follow DRY principle.
0,Code follows the basic CRUD structure given by Rails and neatly explains what is being performed. The notices nicely explains the user what is happening. The db schema is designed to incorporate most of the requirements.
0,Reviewed the Git code for all controller , models and views . standard ruby coding practices have been followed and code is easily readable 
0,Not much of coding is done. Only the files automatically created by rails are present.
0,Code follows 'good Ruby and Rails coding practices'. Naming conventions are correct, methods in controllers are short and concise and there are no instances of 'spaghetti code'.
0,Yes user interface is easy to use on the first page.
0,no work has been done. Application throws error as soon i click on sign up button and choose any type of account.
0,Tests are added for most controllers.
0,Multiple commits are present in the repo.
0,I am not able to sign up into the system. Neither i could see any credentials in the readme file. Hence not able to proceed further to check the above mentioned functionalities.
0,All the changes are pushed at once.
0,I looked through their github commits log, and found that their first commit is on Oct 1,2018. Maybe their just began to do the project on Oct 1?
0,Not much functionality is available. Of what is available, however, the code does follow "good Ruby and Rails coding practices"
0,Have used DRY principles. Follows good coding practices.
0,Yes the UI is good and easy for navigation, usage.
0,The UI is good and intuitive. Good use of colors and html features.
0,Yes, tests are done for many models and controllers.
0,Yes there are lot of commits over many days from multiple contributors
0,Yes, there are many commits which added new features and fixed some bugs. 
0,Yeah, they have done the project with even number of commits throughout the duration.
0,Code is written properly and followed ruby framework with MVC architechure. Also added various packages.
0,Basic Practices were followed Reusability of code is maintained and the code is well intended
0,it has a good structure, choice of names of the files is appropriate and readable
0,No
0,Realtor user can perform basic functionalities.
0,Yes. we could see updated git. Hence i can conclude that they are updating code regularly. 
0,Somewhat. Since I can see the commits were made in 2 days only
0,There were 24 commits in 6 days which means that they have been working in last few days and have been doing check-in regularly since they started work.
0, I can see 28 commits , which is descent
0,Well written code following coding practices.
0,Ruby coding convention has been followed almost throughout the project.
0,All practices were followed
0,Code looks good. Use comments wherever necessary.
0,Coding standards are fairly good.
0,A model has been thoroughly tested.
0,Constant changes were being made.
0,Yes, there are 24 commits done over a span of 13 days.
0,Team was proactive in working together.
0,Code commit frequency is fairly good.
0,The code is very neat and easy to read, but i can tell it is the auto generated code from scaffold. 
0,The application is deployed on Heroku, and the user interface is easy to use.
0,No roles implemented. 
0,No, none of the controllers or models have been tested.
0,Actually i did find some auto generated test code for the controllers, but i don't think it is a thoroughly test. And there is no test code for the model.
0,total of 10 commits are visible on got but do not show a linear increment in the work done.
0,Yes. Good effort in case of pushing changes
0,No updates since 6 days ago
0,Only on 2 days all together
0,Total of only 10 commits has been made on 3 days.
0,I looked through their github commits log, and found that their first commit is on Sep 28,2018. Maybe their just began to do the project on Sep 28?
0,The application is deployed on Heroku, and the user interface is easy to use.
0,Basic Tests are present. Not custom tests though
0,total of 10 commits are visible on got but do not show a linear increment in the work done.
0,Yes. Good effort in case of pushing changes
0,No updates since 6 days ago
0,Only on 2 days all together
0,Total of only 10 commits has been made on 3 days.
0,I looked through their github commits log, and found that their first commit is on Sep 28,2018. Maybe their just began to do the project on Sep 28?
0,The code follows mvc architecture and practices in an organized way
0,Even though the codebase is not large, Ruby and Rails standards such as naming conventions, file structure, and the correct usage of MVC pattern are followed.
0,The user interface looks intuitive, as it has options for signing up with different roles
0,They have tested for the models and controllers constructed.
0,Seem to be following standard practices.
0,Yes, the code has the parameters well defined for all the users and has the correct MVC Layout as expected.  For instance, they seem to have created separate MVC architectures for Houses, Inquiries, Interests, Companies and Users. This goes to show that they have a layered approach on access and privileges.  Also, the code is written in a very clean and formatted style with the variable definitions to be self-explanatory of the functionalities they perform. 
0,Good job done here! You have listed the features available to test.
0,The app is deployed very well and is very easy to use.
0,All the basic features implemented for admin,house hunter and realtor is functional.  
0,There are 67 commits made during the tenure of the project by all the team members. The team has worked on git since the start of the project.
0,Yes, 67 commits. It seems they have been pushing changes regularly
0,Yes, the commits were regular. After the project was assigned, there were several commits on a weekly basis, and as the deadline neared, the frequency of the commits kept increasing in an orderly manner. There was no last minute rush, and the development of the project seemed pretty well planned.
0,Yes, as seen from the number of commits on each section of their GitHub profile, not only have they meticulously made a number of changes on Repo, but they have also updated what all changes they made against the files. This is a very neat practice in my opinion and shows that they have put ample effort to structure the code. Moreover, they have updates the GemFile multiple times so as to make it run for the Heroku app which is a must thing to do and a challenge we faced too. 
0,Yes, there are git commits and pushes after initial commit as well.
0,No, not really. No user type has all the functionality in this review's check boxes, much less all the functionality specified in the project description. Manual inspection of the test folder reveals that all the model and controller tests are empty, as are the fixtures.
0,I cannot appraise this because I do not believe they did their development in the linked repo. There is only one commit, where all the functionality was added. I am inclined to say the team was not actively developing over the project period.
0,The model and controller are well designed. Each method covers a single functionality! Good job
0,All users have their own model controllers. The code is following Ruby on Rails standards but there are some debug "puts" that should be removed.
0,Yes it is deployed on Heroku.
0,Most of the practices have been followed
0,The ruby source code appears to follow RoR conventions, and uses a few Rails associations. The directory names and project structure appear to follow good RoR MVC conventions. Source code is organized and uncluttered too.
0,The code is neat and precise with proper structure and comments
0,Very good structure, readable and names are very relevant to the functionality
0,The code is written really well.
0,Controller has been tested  
0,extensive testing was done
0,Yes.
0,Team was active thoughout the process
0,There are many commits which are divided almost equally between all teammmates
0,Code commit frequency is good.
0,The code seems to be following the examples in cookbook app.
0,Yes. Timely commits with comments.
0,The code written was clear and I believe that it follows good Ruby and Rails coding practices to a certain extent.
0,It is done well and I can say it is a indeed a good ruby and rails coding practice
0,Yes
0,I have seen they keep updating the github
0,There were changes pushed to the branch throughout the project period.
0, No, the initial commits were made the Thursday before the 1st submission was do. It is great to see additional commits since the 1st submission!
0,The first commit for the project was made only 4 days before the deadline. since then the team kept continuously pushing their changes.
0,I can see 28 commits with a good distribution over the time span.
0,Yes we can see many pushes on git. Hence , they have updated code.
0,Timely commits and elaborated readme file.
0,The code is clear and concise, it does follow good Ruby and Rails coding practices.
0,Yes, the code does follow Ruby and Rails practices to an extent, as I can see the use of many helper methods in the code.
0,Yes. I am able to login into the system via the link provided.
0,They have attached 2 other files saying what all they have implemented.
0,Everything was described properly in the README file.
0,Yes 
0,All the tests are auto-generated.
0,The team all had multiple commits throughout the course of the project.
0,Yes i could see multiple pushes.  
0,The team has been pushing changes since around 12 days ago, and the project structure feels well planned with some changes and testing required.
0,They have 195 commits. Ui is great, everything is running smoothly.
0,The project was continuously updated during the past two weeks.
0,Git shows too many changes which are not required. One can test thoroughly before submitting the changes.
0,Code commit frequency is fairly good.
0,The code follows common ruby rails guidelines
0,Have used DRY principles. Follows good coding practices.
0,Yes the UI is good and easy for navigation, usage.
0,The UI is good and intuitive. Good use of colors and html features.
0,Yes, there are many commits which added new features and fixed some bugs. 
0,Yes there are lot of commits over many days from multiple contributors
0,Yeah, they have done the project with even number of commits throughout the duration.
0,Yes, tests are done for many models and controllers.
0,The code seems to be following the examples in cookbook app.
0, The source code and project structure seems fine, but most of it still looks scaffold generated. RoR conventions have been maintained.
0,Yes. Timely commits with comments.
0,The code written was clear and I believe that it follows good Ruby and Rails coding practices to a certain extent.
0,It is done well and I can say it is a indeed a good ruby and rails coding practice
0,I dd not find the link. I viewed the code on Github, it seems work. 
0,Yes
0,I have seen they keep updating the github
0,There were changes pushed to the branch throughout the project period.
0, No, the initial commits were made the Thursday before the 1st submission was do. It is great to see additional commits since the 1st submission!
0,The first commit for the project was made only 4 days before the deadline. since then the team kept continuously pushing their changes.
0,I can see 28 commits with a good distribution over the time span.
0,The app's indentation, method names, and line separation seem to match solid Ruby style guidelines.
0,Decent coding practice
0,From what I see it seems to be following the practice we have been using in class
0, Yes, the source code follows expected RoR style. The directory names and project structure also follow RoR conventions. Good job!
0,The code base is very well written and commented. The code has been done with good coding practices. The only point to note would be to update the Readme to be more informative.
0,Good Rails coding practice has been implemented. In Model as well Controller we can see variables names that shows the relation to overall module and model. 
0,The user interface is nice. I suggest you move the search button in the houses screen to the left. Also, "yes" and "no" would probably be more user-friendly than "true" and "false" for the basement condition. The new user window was very intuitive and powerful. Note: I found a bug in this window: changing the admin account with "REALTOR" checked causes an error. The error screen was graceful, however. Also, please use radio buttons for "HUNTER" or "REALTOR", not checkboxes. Please also include the type of the user in the users window.
0, UI is easy to use, but not well described in the README. Please add brief Test Cases to demonstrate expected functionality.
0,The interface is basic and no extra styling is done. But overall the web application is easy and intuitive to use. The Read me  file of the github repo should be updated to make it more   detailed to use.  
0,The interface is intuitive. Specially, they have very good form structure for realtor as well as new users, and house hunters. 
0,No they have not. They said they will for the final submission
0,The team used mutliple branches and many commits throughout the project to increment on the codebase.
0,While the team did push changes to the project, there are 95 commits which are unnecessary. Instead of pushing every change to the final project, the team could have combined a few of the changes and pushed them all at once to make for better record of the changes made.
0,Teams looks fairly active but the project progress does not correspond to the number of commits made in the git repository
0, They have a lot of commits so they were always working on it
0,Yes, it looks like sizable commits were made before the 24th.
0,Yes 95 commits. 
0,The code is very well written and organised. All the framework conventions have been followed such as the naming conventions. Comments have been added at appropriate places which improved the readability.
0,yes. code is written properly. followed dry principle. added comments where possible. followed mvc with rails framework.
0,It does well to follow the "good Ruby and Rails coding practices". It follows the DRY code approach.
0,The Git code included almost everything that follows good coding practices using Ruby and Rails. 
0,yes. User Interface is good and easy to access.
0,Excellent commit history. Contributions from all team members could be seen.
0,Yes, the team kept pushing changes throughout the project period
0,The website did not seem to work at first. Now I was able to access it. I also noticed some features that were included in the meantime like testing by adding house hunters. Overall, the team did work on updating the site functionalities. 
0,The code seems very good. And the code is very clearly.
0,The Git code did follow the good coding practices using Ruby and Rails. 
0,All files they provided are clearly structured, especially for the routes file. They provide clear routes for different conditions.
0,For all user, sign up and log in should at the same place.
0,The UI had good directives between operations, functionalities and was easy to use. The admin profile was available in the README file.
0,Yes, it is.
0,Code seems to follow the Ruby Practices.
0,Code is written in a clean and readable way. There are separete methods for separate tasks.  Good naming convention is followed throughout the project.
0,recompany could have been just company
0,The team seems to have attempted to add to their functionality from the previous round. They have attempted to use the devise gem for allowing multiple user logins. It seems that they created a new git repo and started from the beginning which seems like a fair idea given that they wanted to use devise instead of implementing the user registration/sessions. 
0,Yes, they have keep commit to git as their project been working. 
0,The team submitted their changes towards the end of the project. They committed changes in round 2.
0,Yes, there is a "has_many" relationship in company model, and also realtor is able to create mutliple house in one company.
0,The relationship between house hunter, realtor and companies have been well established.
0,The link submitted is not live. As a result, I could not test if the system is working as it is supposed to.
0,Edge cases are not handled. But most of the logic will automatically handle edge cases.
0,Yes, they have tested a lot. Like admin, house and inquiries.
0,Testing has been done for users controller and model.
0,Yes, the team has tested model and controller.
0,Code is well written and organised. All the functions have been objectively defined and does only what it is supposed to do.
0,Code looks neat. Methods have only one functionality. Well organized.
0,The earliest commit is dated around Oct 4.
0,Yes they have been committing a bit regularly . Although the commits contribution are not equally distributed among the team members.
0,The team was regular in committing changes. The team continued to work in round 2 and made regular progress. All members contributed significantly. Great job! Could have started the project a bit earlier.
0,All commits happened during round 2, but work was done before.
0,Started committing after round 1
0,Yes, the team kept commiting the changes throughout the project and also in round 2.
0,Yes. Feedback has been accepted and changes made in round 2.
0,All the relationships have been properly defined in the models.
0,Yes they have properly defined the associations for every table and haven't missed on anything.
0,All dependencies are well modeled and designed. Every model has correctly associated relationships and validations. Your team is a pro! Realtor to house and house to company , other relationships are implemented. Each company has multiple realtors and each realtor can have multiple houses. Everything good here!
0,By looking at their model files, relationships are handled well.
0,DB mappings are done well. Cascading delete and cascading nullify implemented to handle delete cases.
0,Not many problem detected . working to the expectations.
0,All functionality seems to be present now.
0,Yes, the system works fine and authors have fixed the problems found in the first round. For an instance, Admin functionality and interest functionality were not present in round one but authors have implemented them now. 
0,All feedback has been accepted and changes made to fix them.
0,When the admin tries to delete a real estate company which has some realtors and houses, all the houses and realtors are deleted as well. This is the expected functionality. Good job! All other test cases work as well. If an admin tries to delete a house hunter with multiple inquiries, all of his/her inquiries are deleted as well.
0,All deletion edge cases seem to be accounted for.
0,Yes, all the edge cases are handled very well.
0,Not able to log in as admin. Incorrect credential of admin.
0,The edge cases tested where handled properly with proper messages that shows which other entities will be affected by the change.
0,Models are not tested and controllers are partially tested.
0,No they haven't tested
0,Yes, the team has thoroughly tested and did validations.
0,Tests for controllers look good. Need to include more tests for models.
0,code naming convention done well.
0,The code has been implemented as per the Ruby standards of coding. However, there are few instances of code could be better handled such as the index function in admin controller.  
0,1) Yes 2) No 3) No
0,commits performed during the course.
0,All the code of the project has been pushed to Github on a single day.
0,Only 8 commits were found. The first commit was dated around Oct 6. No changes were committed in round 2.
0,Didn't commit at regular intervals. Yes, committed changes in round 2.
0,The git Repository was created on Oct 6 after the round 1 was completed. The commits were no regular during the complete course of the project. All the commits happened on the day of final submission.
0,handled 1 to n and n to n relationships succesfully.
0,The team has handled all the associations between multiple entities quite well.
0,The relationships are properly defined.
0,Follows the relationships properly.
0,the basic functionalities work successfully.
0,some edg cases are working.
0,Yes
0,Test for model are missing. Basic test cases for controllers are present but the testing is not through.
0,The code follows all design style guidelines for Ruby. Good job! All methods are well designed and serve only one function. Naming and structure is uniform across the project.
0,The code is clean and readable and has been properly modularized.
0,The code is clean and easy to understand.  Code modularization principles are followed(didn't find any major code duplication issues).  
0,Yes code is clean and easy to read. Has followed coding standards, there are separate functional calls for each task.    
0,The team committed changes fairly frequently. There are no commits for the first phase of the project. However the project saw regular contributions after that (during the round 2). Overall good job! Could be more proactive during the first phase.
0,they only had 30 commits which I think is a little low considering there were two phases of submission. In my first phase, my team had at least 30 commits.
0,For the most part, it looks like this group only committed changes in round two. I know there was roughly one commit when I reviewed the first time, and the remainder of the changes were between Oct 6-10.
0,Yes, they did keep pushing updates after round 1.
0,Yes, the commit count has almost doubled from round 1 to round 2.
0, Yes, the team had multiple changes committed through oct 6th through oct 10, in round 2    
0,The team has committed regularly.
0,The relationship realtor has many houses is not represented. However all other edge cases are covered. The DB is well designed with clear relationships and field names. This team is a pro!
0,It looks like all the needed relationships were present in the schema.
0,Cardinal relationships have been defined in appropriate models 
0,1-n and n-n relationships are all properly defined
0,All basic functionalities work as expected. You could have gone for the extra credit functionality such as the Google login or the email part. The email part was pretty easy :| . You've still done a great job with the overall design. The best I've seen thus far!  
0,Authors delivered nearly all the functionality I could think to test. It was a little weird being referred to a totally different page to have to upload images to houses, but not enough to deduct points.
0,Yes, major changes and feature implementations are there after 1st round. All basic functionalities are working properly.
0,(1): Admin can delete real-estate companies with realtors attached to it (2): Realtor is being able to delete any house (3): Admin can delete house-hunter with several enquires.
0,All test cases are covered. The README doesn't cover how edge cases are covered but that's not an issue.
0,1. When the company of a realtor was changed, realtor details got updated with this new company details. But he could still edit/update the houses that he/she had listed for the prev company. They could send replies to inquiries also. 2. A realtor could edit the details of all the houses. 3. What will happen if the admin tries to delete a house hunter who has submitted several inquiries? - cascade delete in working. 4. Other major edge cases are also working.
0,could see default testcases.
0,code naming convention done well.
0,1) Yes 2) No 3) No
0,commits performed during the course.
0,handled 1 to n and n to n relationships succesfully.
0,The team has handled all the associations between multiple entities quite well.
0,The relationships are properly defined.
0,Follows the relationships properly.
0,the basic functionalities work successfully.
0,The code is well written following the right RoR coding practices
0, 
0,Follows good coding practice at most places.
0,Code is written in an efficient, clean and readable manner. All the functions are lucid and defined properly in blocks. A proper use of names for controllers, migrations and views can be seen.
0,yes the coding style was good
0,The committs have been done regularly throughout the development period, even during the round 2.
0, 
0,Code has been submitted frequently.
0,commit were done at a timely manner
0,The 1-n and n-n relationships are properly handled. 
0,Handles most of the relationships properly.   
0, 
0,All the relationships are correct. Also the houses table shows the time at which the house was created, which is impressive. Additionally, the real estate company also shows the number of realtors for each company, good work on that!
0,Yes, even constraints were defined well
0,Relationships are implemented correctly. 
0,There were issues with the admin functionalities in the first round. They have been fixed.
0, 
0,most issues were fixed
0, 
0,I think the code is well written. The function calls are very well done. It is neat and easily readable. Also, there is no bad naming the project. Code very well follows the DRY approach.
0,The code is clean and easily understood. A separate controller for adding the buyers to the potential buyer list is created. Overall the structure and naming of controllers and migration file is clear and the respective functionalities can be identified based on the names. The team has done good work on that
0,Function calls are added. Code is formatted and neat. Naming conventions are followed.
0,Several linear commits visible on the git. Most of the work done in round 2 is fixes and additional functionalities on top of the base that was finished before round 1.
0,The team promptly handled the task by working on it regularly and committing changes frequently.
0,I was unable to judge if this works -there was no way for me to determine that. The admin can not delete companies, can not view, edit or delete realtors or househunters. Also, users cannot delete themselves.  Further, the third party admin gem or module  used does not let me edit or delete users or companies either - it gives an error on heroku.  Thus, I was unable to determine if the edge cases work. Also README does not specify anything.
0,By looking at their github page, I could see they submitted their changes actively and also they continued submitting changes in round 2 as well.
0,The team submitted the changes at equal intervals of time and the last commit was performed a day prior to the deadline which is commendable.
0,This team continued to commit throughout the project.
0,The test for real_estate_companies_controller and real_estate_company model are present.
0,Team has been consistent in pushing code changes
0,They have tested real_estate_company controller and model. 
0, 
0,Yes, there are 60 commits. Well done.
0,Yes they have implemented unit tests as well as functional tests.
0, The team has done an impressive job in handling the tests for messages and real estate companies.
0,yes i can see a variety of edge cases being tested
0,The code looks comprehensive to a good extent with the usage of comments and clear naming. 1. Adding the remove from wish list feature is a plus point. 2. The naming is done well with attention to the singular and plural nouns for models and controllers. 3. No problem with respect to the coding clarity. 
0,The quality of the code is impeccable. Use of helper files and establishing a specific user through "def current_user" function in the application helper allowed the team to use a common user parameter throughout the application development and reduced the amount of effort that would have been needed other wise. 
0, Code is very much readable. There are proper comments before the functions.
0,The code is well written. It is neat and easily readable. The function calls are very well done. Also, there is no bad naming the project. Code very well follows the DRY approach.
0,COde quality seems to be very good. Documentation aloong with instructions are present.
0,Mapping has been properly implemented.
0,The database design is close to perfect. The destroy and delete dependencies have also been well managed to allow deletion in cases where a house hunter gets deleted and all its inquiries are deleted automatically.
0, Yes, the system does handle the relationships and the mappings are clearly defined.
0,I think the system handles the 1-to-n and n-to-n relationships well. The relationships are clearly defined with no problems. 
0,This system handle the 1-to-n and n-to-n relationships
0,The above case is covered.
0,The realtors controller has been very well tested by the team.
0, The test cases are running fine. Clear steps for the same are given in the readme.
0,Excellent use of Rspec.
0,Yes, the team has tested thoroughly at least one model and one controller.
0,There isnt any commit after the first submission.
0,There are several linear commits to show progression of all the functionalities that were added to the project from the beginning. The team had more or less finished their work before round 1 and fixed a few bugs that were not easily discernible, in round 2.
0, There are 136 commits I can see with clear commit messages.
0,By looking at their github page, I could see they submitted their changes actively and also they continued submitting changes in round 2 as well.th
0,67 commits by one whereas 26 by the other two I was expecting an even number of commits
0,Very good commiting by entire team. Project was handled well and not messy.
0,The system has no perceivable issues.
0, Functionalities are working fine. They are well documented in a separate pdf file as well. Even the read me contains clear instructions for setup.
0,Almost every feature is working as it's supposed to.
0,App as a whole works very well. The look and feel of it is also very good. Contributes to a very good overall user experience.
0,The system was able to pass all listed test cases. All the views have been perfectly setup as well and have disabled buttons where needed.
0, There are enough edge cases tested and well documented in the attached pdf file. Could also view the some points to be taken care that are documented in specific cases.
0,1) If the admin tries to delete a real estate company which has some realtors and houses, it would not delete the record, because a dependent realtor exists. 2) The realtor can change his real estate company and he won't be prohibited from removing houses. 3) If admin tries to delete a house hunter who has submitted several inquiries, the inquiries will be deleted and house hunter will be removed from the buyers' list.
0,Code written well with all DRY principles. Methods are simple and clean. Every method contains functions specific functionalities. Methods are simple and clean. Every method contains functions specific functionalities.
0,Looks decent.
0,Coding standards are followed properly 
0,Code is clear and concise with explanatory commits
0,This team continued pushing changes throughout the project.
0,Only one person has committed throughout the project, which looks strange to me. However, there have been regular commits by the person.
0,The readme file is completed and explicit, so great!
0,The mappings are present and clearly defined
0,Yes.
0,The relationships appear to be documented correctly here.
0,The functionalities are working fine. The input fields in the forms have good explanations for some specific cases.
0,Yes, it works perfectly fine
0,Basic functionalities are working fine.
0,Validations are properly provided to handle edge cases
0,Houses and inquiries controller seem to be thoroughly tested, as do house, inquiry, search, and user models.
0,The code is well written following the right RoR coding practices
0,Follows good coding practice at most places.
0,Code is written in an efficient, clean and readable manner. All the functions are lucid and defined properly in blocks. A proper use of names for controllers, migrations and views can be seen.
0,yes the coding style was good
0,The committs have been done regularly throughout the development period, even during the round 2.
0, 
0,The 1-n and n-n relationships are properly handled. 
0,Handles most of the relationships properly.   
0, 
0,All the relationships are correct. Also the houses table shows the time at which the house was created, which is impressive. Additionally, the real estate company also shows the number of realtors for each company, good work on that!
0,Relationships are implemented correctly. 
0,There were issues with the admin functionalities in the first round. They have been fixed.
0, 
0,most issues were fixed
0, 
0,code is compliant to rails coding style
0,Yes they did.
0,No, lot of specified features still missing
0,No idea.
0,The edge cases aren't testable because of the incompleteness of the project
0,some edg cases are working.
0,Yes
0,The code is clean and readable. 
0,Code looks quite readable
0,looks alright.
0,The code is clean and well written. The controllers and models are named accurately and each filename describes the desired functionality. Good work on that!
0,The system properly handles the relationships where a real estate company can have multiple realtors. Also, it supports a realtor to create multiple houses and the house hunters to add multiple houses to their interest list.
0,Yes, 1st cut did not have heroku link, this time apart from additional code + link is present and may of non functional flows seems to be in place
0,code naming convention done well.
0,commits performed during the course.
0,handled 1 to n and n to n relationships succesfully.
0,The team has handled all the associations between multiple entities quite well.
0,The relationships are properly defined.
0,Follows the relationships properly.
0,Yes
0,the basic functionalities work successfully.
0,Different methods for different functionality. No long methods.  Overall good job by the team on the structure of the project.  
0,The code is clearly written and easy to understand. The functionalities are separated and well defined. 
0,Commits aren't exactly spread evenly across the entire duration of the project. But, they have made changes in round 2. There have been significant improvements in the functionality and overall code in the project from my previous review.
0,With 108 commits, te team has continuously pushed changes to git to keep the version control in tact.
0,The team has been constantly submitting changes to the repository, with each team member having considerable commits, which says the work was divided equally among team members.
0,Yes, I think the whole team has been participated in this project and kept on submitting changes throughout the project, and they still keep on submitting changes in round 2, even though the deadline for round 2 has passed. Their last record of commitment is on Oct 16.
0,Good job on the comments and description of the Git commit.  It makes the job of the product owner / Lead software to review your code.
0,The commits were fairly frequent even in round 2.
0,The project mentions the belongs_to and has_many parts of the problem specification in the right ruby files so they are handled correctly
0,Yes, authors have done a great job in this part, and they handle the 1-to-n and n-to-1 relationships properly.
0,Good Job on the DB design. Mappings between model are good.
0,Relationships are properly defined and mapping is correct.
0,Yes, I could not create another account with the same email.  Validations seem to be done on user level, while creating account, signing in, etc
0,Yes, they did put effort on test part. They have done a good job in testing model users.
0,Only basic test cases have been given for any cont
0,Code in the files are auto generated. Every function is implemented in a clean and readable manner and performs only one task. Code on whole follows Ruby on Rails practices.   
0,Code is clean and readable. 1. Yes 2. No 3. No README file is well written and descriptive. 
0,Some files like comment.rb don't suggest what they are used for
0,The code is quite clearly written with all the good coding practices being followed.
0,Although there aren't too many commits, The team does seem to have been updating their git in a continuous manner. 
0,A total of 26 comments and recently updated also. 
0,The team has committed changes in round 2.
0,26 commits overall with about 13 commits for round 2.
0,Yes, 1-to-n and n-to-n relationships are handled correctly. Tables are mapped correctly.
0,Most of the mappings are done correctly.
0,The relationships have been set up properly in the model files as well as the schema. However, a destroy dependency in the model file would be a great addition;  has_many :enquiries, dependent::destroy
0,The code on Github shows the 1 to n relationship between real estate company and realtor. The realtor is also able to create real estate companies of his own.
0,Yes, the mapping is done quite well.
0,Edge cases are handled good and the readme is effective enough to understand the entire code flow.
0,No tests are added for any model or controller
0,No specific testing apart from scaffold generated tests seems to have been implemented by the team.
0,Only default tests are present
0,Code written well with all DRY principles. Methods are simple and clean. Every method contains functions specific functionalities. Methods are simple and clean. Every method contains functions specific functionalities.
0,Code is clear and concise with explanatory commits
0,Looks decent.
0,Coding standards are followed properly 
0,This team continued pushing changes throughout the project.
0,The readme file is completed and explicit, so great!
0,The mappings are present and clearly defined
0,Yes.
0,The relationships appear to be documented correctly here.
0,The functionalities are working fine. The input fields in the forms have good explanations for some specific cases.
0,Yes, it works perfectly fine
0,Basic functionalities are working fine.
0,Could not test most of the edge cases as functionalities have not been implemented.
0,Validations are properly provided to handle edge cases
0,A realtor changing real estate company makes them unable to edit houses they've listed with the previous company.
0,Houses and inquiries controller seem to be thoroughly tested, as do house, inquiry, search, and user models.
0,Not mentioned in readme file and couldnt find any in code.
0, Yes. Code is well structured overall. Interests and Potential Buyers functionality are separated from house hunter model/view. Proper Naming Conventions are followed
0, No issue found. Classes looks very clean and nicely naming.
0,The quality of the code was efficient. It allowed to use the system in an understandable manner. It followed approach for clean coding using Ruby and Rails.
0,The code is clean and easy to read.
0, 
0,30+ commits during the last week 
0,Yes, the commit increased from 8 to 40.
0,The team worked on a lot of things from the first stage. This includes testing for admin and realtor functionalities. Allowing admin user to view and destroy the accounts of realtor and house hunter.
0,40 commit, the last one was on oct 10.
0,Code quality is impressive. Every action has a different function call. The methods are well defined to understand to purpose it serves.
0,The code is clean. Naming conventions are followed.
0,Have followed good ruby coding practices with meaningful variable names. Single responsibility paradigm is well portrayed.
0,The code is clean and solid. Easy to read.
0,Commits in the repo are consistent. Commits show some changes were made to improve the functionalities
0,This team pushed code in a few very bursty times, but they did push commits after the initial review.
0,The team has committed the code continuously. Yes, the team had made commits in round 2 also.
0,They have consistently checked in code during the project duration, even in Phase 2.
0,The last commit is in 10.10
0,Yes, code handles the mapping as mentioned in the given example
0,Yes, the DB design looks to have the proper relationships.
0,There are plenty of relations mentioned in the model files. For the mentioned case as well.
0,There is a search.rb which seems very vague and unused. It has an extensive search logic. It should be a method in the house.rb file instead of a separate file of its own.
0,Enquiries hasnt been tested.
0,Tested for a realtor account. The code handles the lifecycle of the user pretty well. 
0,Yes, they tested the user_controller and model
0,Cant see a rspec folder.
0,Test cases in user model present.
0,Thorough testing has been done for user_test.rb and controllers.
0,They test 7 different controllers and 7 different models. Vert convincing work.
0,Code is well written. All the conventions of the rails framework have been followed. The functions have been properly defined and does only what it is supposed to do.
0,The code follows the general guidelines for quality and concept of clean coding. The models and controller were designed with general practice approach using Ruby and Rails coding methodologies.
0,The code is well written. It is neat and easily readable. The function calls are very well done. Also, there is no bad naming the project. Code very well follows the DRY approach.
0,Code looks neat and clean.
0,The code was committed throughout the project and code was committed in the second round too.
0,This team is keep on submitting their changes throughout the project, and not only one or two members of the team, but all of them are playing a role in this project. Besides, they did commit changes in round 2.
0,By looking at their github page, I could see they submitted their changes actively and also they continued submitting changes in round 2 as well.
0,yes about 83 commits.
0,The team improved upon certain aspects of their code. This included establishing the admin functions and actions as adding new companies and to view various participants involved.
0,Found that company has many users missing House has many inquiries and reply missing.
0,I think the system handles the 1-to-n and n-to-n relationships well. The relationships are clearly defined with no problems.
0,Seeing from the schema file the logic seems fine but unable to test it out.
0,The code procedure and application justified the 1-to-n and n-to-n relationships between the realtor and house hunter model as well as real estate company and realtor relationship mapped as 1-to-n.
0,I think the authors did a good job in developing the system. The system is working as it is supposed to work.
0,Yes, I feel the team has done pretty well in testing at least one model and one controller.
0,The team thoroughly tested the Admin model and controller. The tests for admin performed checks for admin functionality to be able to view the list of houses created by the realtors as well as look up for realtors and house hunters information that are involved in application.
0,yes, the code is written in a clean and readable way. Only one task is handled by each method and in case of multiple tasks, function calls have been implemented perfectly. There is no bad naming in this project. Code in model and controller looks fine. Proper spacing of function and its block is done.
0, 
0,The code looks comprehensive to a good extent with the usage of clear naming. The naming is done well with attention to the singular and plural nouns for models and controllers. No problem with respect to the coding clarity. 
0,Most of the code follows standards.  But I was not able to verify the complex examples like adding house to interest list, email when a reply is given by realtor as it is not working. In replies_controller.rb avoid using class variable and use instance variable.
0,Code is well written.
0,  The code was very easy to read and follow good coding practices.
0,Solid code , easy to read.
0,Commits after the first review by all team members is seen.
0, 
0,Regular commits were not done. Everything was committed in one commit which should be discouraged. Think about working professionally, you should be committing code ASAP and committing with proper commits and description. Commit also should not be all module at once but individual. 
0,Yes there are commits in phase 2 as well.
0,26 commits with about 10 commits after Round 1.
0,26 commits. Last one on 11th Oct
0,This relation is handled well.
0, 
0,The company, house, inquiry, user etc mapping is done well and according to the functionalities.
0,Yes, all the DB relationships are handle properly.
0,First round their login functionality wasnt working, it is working now as expected
0,Few edge cases not working.
0,It seems some destroy function have some issue. 
0,Only auto-generated test cases are present
0,None of the controller or model was tested.
0,No test for any of the models
0,From what I can tell, code quality in this application is good. Functions generally look small and there is good use of rails utilities.
0,Code is written properly. One method is covering only one functionality. Also for more features, team has created new controllers. Hence I can conclude code is neat and readable.   
0,The code is clean.
0,Great code writing habit.
0,Yes they did.
0,Yes.
0, All the mapping looks good. Nice job
0,Yes, the DB design handles these relationships correctly.
0,Team has Mapped house, realtor, company also house hunter, inquiries well in the model.  
0,The Schema is very well defined. Most of the suggestions provide as part of initial review are incorporated. The relationships are defined correctly and use of dependent destroy ensures that child records are deleted before parent record. This ensures there is consistency.
0,Implemented the mappings properly.
0,This system handles all relationships properly by using has_many/belongs_to constructs correctly and addition of relevant foreign key attributes in the appropriate tables.
0,Yes
0,The team has done a great job in testing. Admin controller is tested extensively with relevant concise comments and Rspec is used to test admin model with its validators.
0,Every action has a different definition written. The code is well structured.
0,Code is written properly and followed DRY. Each Function is handling single task. Team understands MVC architecture very well, But i could see controller for every functionality , where in such functionalities could have been handled with mere methods in other main controllers.   
0,No bad naming, handles multiple tasks with multiple function calls.
0,The code is in general clean and readable. Nearly all methods seen handle only one task, or use function calls to handle other tasks. Naming seems appropriate in all of the files. There are no overly nested blocks.
0,The code is well written.
0,The code looks clear and understandable
0,Commits can be seen throughout the project duration
0,I could see a huge number of commits on the github but it is not evenly distributed.
0,Submitted changes throughout the project. Committed changes in round 2.
0,The team did a good job of making consistent commits throughout the life of the project.
0,The team kept committing their changes throughout the project.
0,The code frequency is pretty good. 
0,Mappings are mentioned appropriately
0,Team has handled 1 to n and n to n relationship very cleanly. Not only in code, but also the related functionalities are working great except few. Like I can not see realtor associated with any company.  
0,Handles all relationships.
0,I think it does, but I don't feel confident in my answer.
0,The relation mapping is well made.
0,models show good relation mapping.
0,Above listed test cases were handled.
0,Handles all edge cases.
0,everything explained in readme,  works great.
0,All Meaningful tests
0,Yes, 1-to-n and n-to-n relationships properly are handled properly. Tables are mapped properly too. I don't find any issue related to DB.
0,The corresponding ruby files maintain the belongs_to and has_many relationships to reflect this
0,Potential Buyers(Interest) , House and Inquiry Dependencies are not handled properly.
0, In the model classes and schema file, each object has good relationship with each other. 
0,there is 1-to-n realtionship between company and realtors
0,The system handles the 1-to-n and n-to-n relationships properly. The real estate company and realtor relationship mapped as 1-to-n.
0,All the basic functionalities have been implemented. Team as whole have worked really hard to make common functionality work.
0,As a house hunter I am not 
0,The system performs almost all the functionalities that are described as part of the deliverables. One specific issue that was suggested and resolved was mapping the realtor to a real estate company.
0,Corner cases like removing house from interest list have not been tested
0, 
0,The team has thoroughly tested each model and controller and the tests were performed to check realtor functionality works as described.
0,Thoroughly test the admin model
0,This system handle the 1-to-n and n-to-n relationships
0,The quality of the code is impeccable. Use of helper files and establishing a specific user through "def current_user" function in the application helper allowed the team to use a common user parameter throughout the application development and reduced the amount of effort that would have been needed other wise. 
0,There are several linear commits to show progression of all the functionalities that were added to the project from the beginning. The team had more or less finished their work before round 1 and fixed a few bugs that were not easily discernible, in round 2.
0,The database design is close to perfect. The destroy and delete dependencies have also been well managed to allow deletion in cases where a house hunter gets deleted and all its inquiries are deleted automatically.
0,The system has no perceivable issues.
0,The system was able to pass all listed test cases. All the views have been perfectly setup as well and have disabled buttons where needed.
0,The realtors controller has been very well tested by the team.
0,COde quality seems to be very good. Documentation aloong with instructions are present.
0,Very good commiting by entire team. Project was handled well and not messy.
0,App as a whole works very well. The look and feel of it is also very good. Contributes to a very good overall user experience.
0,The code looks comprehensive to a good extent with the usage of comments and clear naming. 1. Adding the remove from wish list feature is a plus point. 2. The naming is done well with attention to the singular and plural nouns for models and controllers. 3. No problem with respect to the coding clarity. 
0,Mapping has been properly implemented.
0,The above case is covered.
0,Almost every feature is working as it's supposed to.
0,The team has done a good job in submitting changes throughout the project. The team has not committed changes in Round 2.
0,Excellent use of Rspec.
0,The code is well written. It is neat and easily readable. The function calls are very well done. Also, there is no bad naming the project. Code very well follows the DRY approach.
0,By looking at their github page, I could see they submitted their changes actively and also they continued submitting changes in round 2 as well.th
0,I think the system handles the 1-to-n and n-to-n relationships well. The relationships are clearly defined with no problems. 
0,Yes, the team has tested thoroughly at least one model and one controller.
0, Code is very much readable. There are proper comments before the functions.
0, There are 136 commits I can see with clear commit messages.
0, Yes, the system does handle the relationships and the mappings are clearly defined.
0, Functionalities are working fine. They are well documented in a separate pdf file as well. Even the read me contains clear instructions for setup.
0, There are enough edge cases tested and well documented in the attached pdf file. Could also view the some points to be taken care that are documented in specific cases.
0, The test cases are running fine. Clear steps for the same are given in the readme.
0,Well written and able to follow. However, I see no branches created (and hence pull requests merged). All work is pushed direct to master.
0,seems alright.
0,Yes, the code written was clean and readable
0,Code quality is good, linked features are working fine like the one asked in question.
0,Good code writing. 
0,Good coding practices have been followed. Methods are crisp and single responsibility paradigm has been implemented.
0,Submitted well within deadline!
0,yes they did.
0,The team was regular in committing changes. The team continued to work in round 2 and made regular progress. All members contributed significantly. Great job! Could have started the project a bit earlier.
0,The team committed their changes throughout the project period consistently.
0,Yes, the team has committed code changes in round2 
0,They added a few changes, could've listed more on Readme.
0,Yes, they still commited until yesterday.
0,Yes, the team kept committing changes throughout the duration of the project.
0,All dependencies are well modeled and designed. Every model has correctly associated relationships and validations. Your team is a pro! Realtor to house and house to company , other relationships are implemented.
0,Yes the relationships are handled properly 1 company multiple realtors etc. No mapping table as such the schema handles it
0,I did not find any problems in the first phase testing. All basic functionalities work as expected. Bonus points for the UI. One of the best I have seen. The web application is intuitive and guides the user in performing any function. Great job!
0,First reviews comments were fixed.  
0,They still have the problem I found in the first round.
0,When the admin tries to delete a real estate company which has some realtors and houses, all the houses and realtors are deleted as well. This is the expected functionality. Good job! All other test cases work as well. If a house hunter is deleted all of his/her inquiries are also deleted.
0,I could not login as admin using username password combination provided in readme. So, edge-cases could not be tested.
0,The readme document clearly mentions the edge cases when a company is deleted, what happens to the houses and realtors.
0,Edge cases like real estate company deletion are handled as deletions which is basically not handling it. Could've done some case like transferring them to other user account or such.
0,They did not very well dealing with the edge cases. (1).Nothing happens. (2).Nothing happens. (3).Nothing happens.
0,Edge cases are covered. When a company is deleted, the realtors and houses are also deleted along with it. The Readme.md file also details how the edge cases are handled.
0,not thoroughly test. Not enough test written for inquiries
0,Models and controllers are well tested. All edge cases are covered and tests are comprehensive. The inquiries controller is especially well tested. All assert statements are well thought of.
0,Yes. the team has thoroughly tested.
0,The test only validates cases with valid attributes
0,Most common cases are tested in controllers. They are using fixtures for testing 
0,Yes, they used Rspect to test the code.
0,Code quality is impressive. Every action has a different function call. The methods are well defined to understand to purpose it serves.
0,The code is clean. Naming conventions are followed.
0,Have followed good ruby coding practices with meaningful variable names. Single responsibility paradigm is well portrayed.
0,The code is clean and solid. Easy to read.
0,Commits in the repo are consistent. Commits show some changes were made to improve the functionalities
0,The team has committed the code continuously. Yes, the team had made commits in round 2 also.
0,108 commits. quite impressive.
0,They have consistently checked in code during the project duration, even in Phase 2.
0,The last commit is in 10.10
0,Yes, code handles the mapping as mentioned in the given example
0,Yes, the DB design looks to have the proper relationships.
0,There are plenty of relations mentioned in the model files. For the mentioned case as well.
0,Tested for a realtor account. The code handles the lifecycle of the user pretty well. 
0,Yes, they tested the user_controller and model
0,Test cases in user model present.
0,Thorough testing has been done for user_test.rb and controllers.
0,They test 7 different controllers and 7 different models. Vert convincing work.
0,Code written well with all DRY principles. Methods are simple and clean. Every method contains functions specific functionalities. Methods are simple and clean. Every method contains functions specific functionalities.
0,Adopted good coding practices
0,Code was very clear and concise. Implemented concepts of cohesion and coupling. Related functionalities were placed together.
0,Yes, the code looks good. Code modularization principles are followed(didn't find any major code duplication issues).
0,The code is very well written with maximum functionalities covered, including adding a house to Interest list as a hunter, and showing that hunter as a potential buyer for that particular house. Well done!
0,Yes, timely commits
0,Yes. The team kept pushing commits through out the duration of the project. The team even kept pushing commits during round 2. Also all team mates seemed to have contributed equally.
0,The team has been using github for almost entire tenure of the project. Yes, the team has made multiple changes during the round 2. The team has been making changes after the code submission as well till today's date.  
0,The team was regular in committing changes. The team continued to work in round 2 and made regular progress. All members contributed significantly. Great job! Could have started the project a bit earlier.
0,20 commits in round 2
0,Team showed great consistency in committing changes. Changes increased in round 2.
0,Yes, the commit count has almost doubled.
0,52 commits! The team seems to be quite active throughout.
0,Code is pushed, but frequency is very less.
0,Yes. Models are maintained properly.
0,All dependencies are well modeled and designed. Every model has correctly associated relationships and validations. Your team is a pro! Realtor to house and house to company , other relationships are implemented.
0,Yes, the team has handled all the single and multiple associations among all entities quite well. All the relationships can be reviewed under the model of all the entities.  
0,Database was well designed so as to avoid redundancy.
0,Looks good. All types of relationships are handled properly.
0,Yes. The mapping of 1 to n for company-realtor and company-houses is correctly done.
0,The design is well implemented. Relationships are well defined in models and edge cases are handled in schema itself. 
0,The system seemed to handle test cases.
0,When the admin tries to delete a real estate company which has some realtors and houses, all the houses and realtors are deleted as well. This is the expected functionality. Good job! All other test cases work as well.
0,Edge cases are well handled with the appropriate handling of dependencies between companies and users, houses and their creators etc.
0,Test cases for the user have been implemented.
0,Models and controllers are well tested. All edge cases are covered and tests are comprehensive. The user model is especially well tested.
0,Testing was done.
0,The code is written in a clean way
0, The quality of the code is good, clean and well-readable. Multiple tasks are handled by function calls and a method handles only one task. There is not many nested blocks or long methods. There is no bad naming in this project and is well organised.  
0,Submitted changes throughout the project. Committed changes in round 2.
0,Yes, timely commits
0,I see 1 big commit with all the files which is the first commit and 19 very small other commits done in round 2. 
0,There are some commits around 19hrs ago. Most commits are 6-7 days prior.
0,Compared to other teams that I have reviewed, there are fewer commits here and some are recently committed on Oct 15. 
0, relationship looks good in both models and schema.
0,Yes all relationships properly defined in the model
0,The db is well designed and relationship mappings are proper.
0,This application handles 1-n and n-n relationships properly. Company-realtor has 1-n relationship in the mapping table. I could not find any problem related to relationships. 
0,No schema or relations are implemented.
0,All DB relation and validation are correct and complete.  Good Job!
0,The project is implemented incorrectly and is incomplete. 
0,Only ba
0,The tests are the normal ones generated by scaffold.
0,tests are written for the controllers.
0,The code is clean and readable. 
0,Code looks quite readable
0,looks alright.
0,The code is clean and well written. The controllers and models are named accurately and each filename describes the desired functionality. Good work on that!
0,The commits were regularly till round 2.
0,I could see commits in round 2 as well.
0,yes. 67 commits
0,Yes the team kept pushing their updates even in round 2
0,Yes there are commits after round 1 review but by review 1 the project wasn't working and hence these commits are probably partially to make it work in the first place.
0,The team has contributed to the repo regularly. All the team members have contributed to the project in the second phase. The system has improved a lot as compared to the previous version.
0,Yes, lot of code has been checked in post 1st cut
0,Since the last time they have improved a lot. The basic functionalites are working.
0,Yes, 1st cut did not have heroku link, this time apart from additional code + link is present and may of non functional flows seems to be in place
0,As mentioned in the read me file the inquiry controller and the admin model have been tested thoroughly
0,No model or controller has been tested.
0,They've tested one controller thoroughly and one basic feature of admin model is tested 
0,The user and realtor roles are tested to prevent any abnormal occurrences during the sign-up. Good work on that.
0,The code is very well structured and written with good coding practice.
0,The code quality is fairly standard. The code does follow "good Ruby and Rails coding practices". No bad naming. Every file is properly named based on their functionalities. I cannot find issues with coding. One method handles only one task. I could not find any bugs in the system and this works exactly how it is supposed to work.
0,Code is written in an efficient, clean and readable manner. Proper use of data structures like hash maps are used wherever necessary. A proper use of names for controllers, migrations and views can be seen. The names given for controllers properly signifies the tasks performed. The Readme file is thorough and provides all the functionalities implemented in the project
0,Every method is handling only one task and the code is written in a clean and readable manner. The naming conventions are maintained. The code was also very modular. The overall GUI is user friendly.
0,The code is written clearly.
0,Commits on the repo show updates of functionalities
0,Yes, the commits were very well spread-out throughout the development cycle, which was evident from the quality of the project that was delivered.
0,Checking git log, the team kept submitting their changes throughout the project.
0,Yes the team kept on submitting changes throughout the project. The commits also includes messages and descriptions about the changes made. The team still committed changes in round 2.
0,The team has worked hard on the project which is evident by the fact that I can see commits almost daily, throughout the project period. An excellent job on that end.
0,They keep commit code until 10-10.
0,All known mappings are present
0,The DB was very well designed, and successfully mapped all the required relations effectively.
0,By looking at their model files, relationships are handled well.
0,This system handles the 1-n and n-n relationships properly. The relationships have been set up properly in the model files as well as the schema.  They have also implemented the destroy dependency in the model, hence no error pops out when the parent record is deleted. 
0,The team has done praise-worthy work in handling relationships in the system. The real estate company can add multiple realtors as well as the authorization of a particular realtor changes with the change in company.
0,1-n and n-n relationships are all properly defined between Realtors, Company and Users. 
0,They added 1-to-n and n-to-n relationship in the model.
0,All functionalities working with a great UI.
0,Yes, the system worked almost perfectly, and there was a huge improvement from the first round. Almost all the issued pointed out after the first round were successfully resolved, especially the bug fixing part and adding the new features. The User experience was also considerably improved throughout the application.
0,The System works without any glitches. The team has been fixing bugs after the review 1 such that it works clean now. I could not find any functionality that is still failing even after trying the edge cases. 
0,Edge cases handled well.
0,All the edge cases pass. Well done!
0,(1). The realtors and houses will also be deleted. (2). Nothing will happen. (3). Inquires will also be deleted.
0,Every functionality is working
0,The application seems to have been well tested. Almost all of the test-cases have been appropriately and effectively written. Couldn't find bugs while testing the application too.
0,The team has tested a model where user with email and first name should be valid to sign up or sign in. The following tests are meaningful and have the potential to fail  1)when user uses same email to register twice.  2)should not save user with password less than 6 chars. 3)should not save user with invalid email 4)should not save user without email  
0,The code shows that most of the controllers and models were tested.
0,Yes, they have tested a model and a controller. 
0,Yes
0,Code is well written and organised. All the functions have been objectively defined and does only what it is supposed to do.
0,Code looks neat. Methods have only one functionality. Well organized.
0,The earliest commit is dated around Oct 4.
0,All commits happened during round 2, but work was done before.
0,Yes, the team kept commiting the changes throughout the project and also in round 2.
0,Yes. Feedback has been accepted and changes made in round 2.
0,All the relationships have been properly defined in the models.
0,Yes they have properly defined the associations for every table and haven't missed on anything.
0,All dependencies are well modeled and designed. Every model has correctly associated relationships and validations. Your team is a pro! Realtor to house and house to company , other relationships are implemented. Each company has multiple realtors and each realtor can have multiple houses. Everything good here!
0,By looking at their model files, relationships are handled well.
0,DB mappings are done well. Cascading delete and cascading nullify implemented to handle delete cases.
0,Not many problem detected . working to the expectations.
0,All functionality seems to be present now.
0,Excellent code! Very well commented and followed most of the Ruby,s standard code formate. Very well organized. 
0,Neat code and well arrangement of the views espaciallly the house_style view.
0,Code was committed throughout the project and during second round too.  
0,All feedback has been accepted and changes made to fix them.
0,Yes: committed are constantly updated till today. README file was updated 3 hours ago. 
0,When the admin tries to delete a real estate company which has some realtors and houses, all the houses and realtors are deleted as well. This is the expected functionality. Good job! All other test cases work as well. If an admin tries to delete a house hunter with multiple inquiries, all of his/her inquiries are deleted as well.
0,All deletion edge cases seem to be accounted for.
0,Yes
0,Yes, all the edge cases are handled very well.
0,Basic functionalities working fine.
0,All functionalities works and can be successfully implemented. 
0,Good readme instructions provided. Functionalities working fine.
0,1. deletes 2. changes successfully 3.deletes 4. All cases works. 
0,Good test cases written.
0,The edge cases tested where handled properly with proper messages that shows which other entities will be affected by the change.
0,Yes, the team has thoroughly tested and did validations.
0,Code written well with all DRY principles. Methods are simple and clean. Every method contains functions specific functionalities. Methods are simple and clean. Every method contains functions specific functionalities.
0,Code was committed throughout the project and during second round too.  
0,Yes: committed are constantly updated till today. README file was updated 3 hours ago. 
0,Although the relationships have been properly handled, I see in places with a belongs_to relationship optional:true option is present which allows violation of the relationship and is a bad idea.
0,The schema.rb file should be in the repo. From the models and the migrations, the relationships appeared to be correct.
0,DB relationships looked fine. New model was created for house style which could have been a parameter in house model itself.
0,can't login as admin in the REDAME flie.
0,User model could have been subdivided into different roles/models such as Realtor and Househunter. 
0,The admin credentials provided don't work and hence no admin functionality can be tested.
0,An exception occurred when replying to an inquiry. An inquiry could not be deleted by a house hunter.
0,Basic functionalities working fine.
0,The code has been written in a very clean and readable way. It is very legible and properly indented. I could not find and issues with the coding. There is no bad naming in this project and is neatly organised with instructions. One method handles only one specific task. There are function calls for multiple tasks. Yes, adding the user to the house's potential buyers is done by a separate method call. On the whole, the code quality is legit and I could not spot any long methods or too many nested blocks.
0,All functionalities works and can be successfully implemented. 
0,This project is very well organized, and the code style is great.
0,can not login as an admin
0,It's good to have the search logic in the model as opposed to the controller.
0,(1) What will happen if the admin tries to delete a real estate company which has some realtors and houses? Can't be tested. (2) What will happen if a realtor changes his/her real estate company? Will (s)he be prohibited to remove the houses (s)he listed in the previous company? No realtor is still allowed to delete houses. (3) What will happen if admin tries to delete a house hunter who has submitted several inquiries? Will the inquiries be automatically deleted? If this house hunter is a potential buyer of a house, will (s)he be removed from the corresponding potential buyers list? Cannot be tested (4)  Delete a house in a House Hunter's interest list and see if it still appears there? Works as expected
0,Yes. The team kept pushing commits through out the duration of the project. The team even kept pushing commits during round 2. Also all team mates seemed to have contributed equally.
0, Really good commit record with good comments as to what was changed.
0,2) The realtor could only remove the houses he or she created, regardless of his or her company. The README.md was not very specific on how to handle edge cases.
0,Yes the number of commits have increased upto 110 commits.
0,Good readme instructions provided. Functionalities working fine.
0,Yes the team kept on submitting their changes throughout their project. There are a total of 110 commits from the team and they still committed changes in round 2. They have made 28 commits int the week of Oct 7 which is after the first round. They have committed the changes with proper messages also.
0,1. deletes 2. changes successfully 3.deletes 4. All cases works. 
0,I just see commits done on last few days by most teammates.
0,This team kept committing through the end of the project.
0,They have actively committed code during the project duration including Round 2.
0,The tests for the controllers and models were basic scaffold tests with not much meaning.
0,Good test cases written.
0,Foreign key integration is been done in DB, but as there are no separate active records for user types(hunter, realtor,admin) hence the 1-1,1-many relations are absent.
0, Mapping checks out.
0,This application handles 1-n and n-n relationships properly. Company-realtor has 1-n relationship in the mapping table. I could not find any problem related to relationships. 
0,House hunter and Realtor can easily switch accounts.
0,All of the relationships are handled properly in the code.
0,The entity relationships have been established properly. They have also implemented cascading delete.
0,Well done! Most of the functionality I commented on last time has been fixed with very intuitive UI. The only thing I couldn't find still was being able to view all inquiries as an admin. Very good updates overall!
0,All of these are well handled and documented in the readme. Good work.
0,When a realtor changes real estate companies, they are able to edit houses listed from the new real estate company, but not from their old one. When a user with inquiries gets deleted, so do the inquiries.
0,The edge cases are covered. The readme file also details how these cases are handled. 
0,Test cases for the user have been implemented.
0,The user model is tested, as are multiple controllers.
0,They have written proper test cases that check both positives and negatives.
0,The code looks clean and neat. Couldn't find any bad naming in the project.
0,Code is written properly with all DRY principles. Methods are simple and clean. Every method contains functions specific functionalities. MVC are created where they are needed.  
0,Yes the code quality seems good. Team has taken care of keeping a good design.
0,Naming convention followed, Code is neat. Formatting is done. Function calls are included.
0,1
0,Yes
0,Yes, the team has shown proper team collaboration, two members of the team kept submitting the changes throughout the projects. And there are sufficient commits for round 2.  
0,Yes, model and relationships are well designed and cover most of them. 
0,Test cases present for user controller.
0,Basic functional test cases are written for four controllers. 
0,Code written well with all DRY principles. Methods are simple and clean. Every method contains functions specific functionalities. Methods are simple and clean. Every method contains functions specific functionalities.
0,The code has been implemented as per the Ruby standards of coding. 
0,The code is written in a clean and readable way.
0,Cthe team has written code in a clean and readable manner. the team has implemented individual functions for handling specific individual tasks. The application uses proper naming convention and follows singular naming convention for all model classes. The team has used singular and plural naming convention as per the standard ruby on rails convention which makes it easier for the reviewer to be able to read and understand the code. 
0,Proper naming standards and conventions are followed.
0,Code seems clean.
0,The code is clean and readme file is also present explaining each and every implementation
0,One method handle one task and code is neat and understandable
0,The code looks clean and neat. Couldn't find any bad naming in the project.
0,Code is written properly with all DRY principles. Methods are simple and clean. Every method contains functions specific functionalities. MVC are created where they are needed.  
0,Yes the code quality seems good. Team has taken care of keeping a good design.
0,Naming convention followed, Code is neat. Formatting is done. Function calls are included.
0,1
0,The code was committed throughout the project. The code was committed in the second round too.
0,Team continuously pushing changes into github. I could not see distribution of work done equally. I could see 46 commits with a neat and easy to understand README file.
0,Yes
0,Yes, the team has shown proper team collaboration, two members of the team kept submitting the changes throughout the projects. And there are sufficient commits for round 2.  
0,Yes, model and relationships are well designed and cover most of them. 
0,Test cases present for user controller.
0,Basic functional test cases are written for four controllers. 
0,The code is clean and readable. 
0,Code looks quite readable
0,looks alright.
0,The code generally is simple and understandable. Blocks are simple but maybe its because few features are missing.
0,The code is clean and well written. The controllers and models are named accurately and each filename describes the desired functionality. Good work on that!
0,The commits were regularly till round 2.
0,I could see commits in round 2 as well.
0,yes. 67 commits
0,Yes the team kept pushing their updates even in round 2
0,Yes there are commits after round 1 review but by review 1 the project wasn't working and hence these commits are probably partially to make it work in the first place.
0,Fewer commits compared to other teams that I have reviewed.
0,The team has contributed to the repo regularly. All the team members have contributed to the project in the second phase. The system has improved a lot as compared to the previous version.
0,Yes, lot of code has been checked in post 1st cut
0,The system properly handles the relationships where a real estate company can have multiple realtors. Also, it supports a realtor to create multiple houses and the house hunters to add multiple houses to their interest list.
0,Since the last time they have improved a lot. The basic functionalites are working.
0,admin requires a separate url to  login.
0,Yes, 1st cut did not have heroku link, this time apart from additional code + link is present and may of non functional flows seems to be in place
0,The basic test cases mentioned in the read me work fine. It does not cover the edge cases as mentioned above, but some of the validations I tried seem to have worked.
0,As mentioned in the read me file the inquiry controller and the admin model have been tested thoroughly
0,They've tested one controller thoroughly and one basic feature of admin model is tested 
0,The user and realtor roles are tested to prevent any abnormal occurrences during the sign-up. Good work on that.
0,Well written code, clean and easy to read.
0,Checking the git log, the team still committed changes in round 2.
0,They committed quite many changes on the day of submission.
0,handled perfectly well.
0,The code is well written. It is neat and easily readable. The function calls are very well done. Also, there is no bad naming the project. Code very well follows the DRY approach.
0,the code written seems to follow nice
0,good coding practice used.
0,Commented code in view/controller files
0,There were commits with required changes for the second submission. Commits from all team members could be seen showing their contribution.
0,yaah frequent commits were done throughout the course of project.
0,157 commits
0,By looking at their github page, I could see they submitted their changes actively and also they continued submitting changes in round 2 as well.
0,157 commits.
0,Mapping has been properly implemented.
0,No couldnt find 1to n relationships.
0,I think the system handles the 1-to-n and n-to-n relationships well. The relationships are clearly defined with no problems. 
0,The team has a well structured schema. The team have defined the relationships between the tables properly. the models have defined all the relations properly.  
0,Yes, the team has rectified the errors from the earlier review and has implemented the needed changes. Additional functionalities like the 'not interested' feature were also used.
0,yes the problems found in first round were fixed.
0,No null checks. I can submit empty form
0,The authors did a good job in developing the system. The system is working as it is supposed to work.
0, the web application seems to have implemented all the functionalities properly. The team have updated the repository and implemented new features after the initial submission.
0,Addressed comment from 1st review.  
0,Edge cases are not handled
0,the following edge cases seem to have been handled and documented: 1.)On deleting a user, the corresponding househunter and realtor accounts are deleted.2.)On deleting a company, corresponding houses are deleted and realtors with that company have their company set to null3.)on deleting a househunter or house, the corresponding entry in interest list is deleted.4.)On deleting househunter or house, corresponding inquiry is deleted
0,works great. have mentioned in readme as well.
0,The above case is covered.
0,no test cases performed.
0,tested multiple controllers, but i don't see any models being tested.
0,Yes, the team has done pretty well in testing at least one model and one controller.
0,The team have implemented basic testing for basic CRUD functionalities for all the controllers and models. These look like the automatically generated tests from scaffold in rails.
0,couldn't find rspec file or any other test file.
0,Code follows most of the ruby good practices.
0,The team seems to have followed proper naming conventions for naming all the classes as well as all the attributes. The  team seems to have written a clean and readable code.
0,The team committed throughout the project and during round 2.
0,they have 181 commits
0,The team has a good history of commits and as can be seen from the github repository the trail of commits is well documented and each new feature added or bug fixed has a documented commit. The team kept pushing commits throughout both the deadlines and were regular.
0,Yes: a total of 181 comments and are continuously committed on the repo. 
0,The database design is solid, with join tables for the n-n relationships.
0,The rb files set the has_many and belongs_to relationships correctly
0,The team has a well designed schema and has defined all the relationships between the tables properly.
0,The system is well designed and all the features have been correctly added and all the functionalities work. The authors have fixed all the problems from the previous submission.
0,The system works as it is supposed to. For example the realtor, the admin and the user can login and perform the related functionalities successfully. 
0,The system was very strong through edge cases and the README.md was very detailed.
0,the first edge case wherein a comp[any is being deleted by the admin is handled perfectly and the associated listings and inquiries are deleted accordingly. The house hunter deletion is also handled perfectly so that their inquiry are deleted accordingly. Also the README.md  explains the working and the functionalities of each role properly.
0,(1) What will happen if the admin tries to delete a real estate company which has some realtors and houses? It deletes it successfully.     (2) What will happen if a realtor changes his/her real estate company? Will (s)he be prohibited to remove the houses (s)he listed in the previous company? No, houses are easily changed and can be deleted by realtors.    (3) What will happen if admin tries to delete a house hunter who has submitted several inquiries? Will the inquiries be automatically deleted? If this house hunter is a potential buyer of a house, will (s)he be removed from the corresponding potential buyers list?  It cannot be removed if inquiries are pending.    4) You can come up with more edge-cases. If the system fails in some edge-cases, explain with enough details Most of the functionalities I checked, such as creating a house, putting inquiries, removing various users, looking back in different accounts if it removes such as inquiries if user has still submitted or pending inquiries. All works fine. 
0,The tests looked good.
0,The team has tested the app using RSpec and thoroughly tests the user module
0,Good job on testing everything with rspec. Tests look concise and crisp.
0,The team has implemented rspec testing and have thoroughly tested one model namely the users model with this. Also the team has used minitest to thoroughly test the users controller.
0,Test has been written for most of the functionalities and works well. The test folder has the relevant files with well commented code. 
0,All functionality seems to be there now.
0,All deletion cases are taken care of. 
0,Tests are good.
0,Controller Method Testing is incomplete
0,There were 26 commits in total. The team pushed some commits for the round 2.
0,Did not find such a relationship in the model. Did not find foreign key constraints as well.
0,I found RSpec tests written for inquiry and users
0,1. The team has tested parts of different models and controllers partially, but none of the models/controllers is thoroughly tested for complete functional verification.
0,Yes, by looking at their commit history, the team still commit changes in round 2. 
0,By looking at their model file, they handle the relationship pretty well. 
0,No bad naming, multiple calls for multiple tasks
0,Submitted changes throughout the project. Made commits in round 2.
0,From what I can tell, code quality in this application is good. Functions generally look small and there is good use of rails utilities.
0,Code is written properly. One method is covering only one functionality. Also for more features, team has created new controllers. Hence I can conclude code is neat and readable.   
0,The code is clean.
0,Great code writing habit.
0,Yes they did.
0,Yes.
0, All the mapping looks good. Nice job
0,Yes, the DB design handles these relationships correctly.
0,Team has Mapped house, realtor, company also house hunter, inquiries well in the model.  
0,The Schema is very well defined. Most of the suggestions provide as part of initial review are incorporated. The relationships are defined correctly and use of dependent destroy ensures that child records are deleted before parent record. This ensures there is consistency.
0,Implemented the mappings properly.
0,Yes
0,The team has done a great job in testing. Admin controller is tested extensively with relevant concise comments and Rspec is used to test admin model with its validators.
0,From what I can tell, code quality in this application is good. Functions generally look small and there is good use of rails utilities.
0,Code is written properly. One method is covering only one functionality. Also for more features, team has created new controllers. Hence I can conclude code is neat and readable.   
0,Looks good. There are some files which are misleading like Realtors folder has edit_company file which is blank. Also the readme.md file is missing the Admin Login Details.
0,The code is clean.
0,Great code writing habit.
0,There are new commits, however the quality of commit messsages is terrible. Commit message should have a short description of what was changed not just be random words like foo1, foo2 or hasdfsdsd.
0,Yes they did.
0,Yes.
0, All the mapping looks good. Nice job
0,Yes, the DB design handles these relationships correctly.
0,Yes
0,This system handles all relationships properly by using has_many/belongs_to constructs correctly and addition of relevant foreign key attributes in the appropriate tables.
0,Implemented the mappings properly.
0,The Schema is very well defined. Most of the suggestions provide as part of initial review are incorporated. The relationships are defined correctly and use of dependent destroy ensures that child records are deleted before parent record. This ensures there is consistency.
0,Team has Mapped house, realtor, company also house hunter, inquiries well in the model.  
0,The team has done a great job in testing. Admin controller is tested extensively with relevant concise comments and Rspec is used to test admin model with its validators.
0,seems alright.
0,Yes, the code written was clean and readable
0,Code quality is good, linked features are working fine like the one asked in question.
0,Good code writing. 
0,Good coding practices have been followed. Methods are crisp and single responsibility paradigm has been implemented.
0,Submitted well within deadline!
0,yes they did.
0,The team was regular in committing changes. The team continued to work in round 2 and made regular progress. All members contributed significantly. Great job! Could have started the project a bit earlier.
0,The team committed their changes throughout the project period consistently.
0,Yes, the team has committed code changes in round2 
0,Yes, they still commited until yesterday.
0,Yes, the team kept committing changes throughout the duration of the project.
0,All dependencies are well modeled and designed. Every model has correctly associated relationships and validations. Your team is a pro! Realtor to house and house to company , other relationships are implemented.
0,I did not find any problems in the first phase testing. All basic functionalities work as expected. Bonus points for the UI. One of the best I have seen. The web application is intuitive and guides the user in performing any function. Great job!
0,First reviews comments were fixed.  
0,The readme document clearly mentions the edge cases when a company is deleted, what happens to the houses and realtors.
0,Edge cases are covered. When a company is deleted, the realtors and houses are also deleted along with it. The Readme.md file also details how the edge cases are handled.
0,Able to create two users with same email. And if I try to login with that particular email, error screen appears.
0,Models and controllers are well tested. All edge cases are covered and tests are comprehensive. The inquiries controller is especially well tested. All assert statements are well thought of.
0,Yes. the team has thoroughly tested.
0,Most common cases are tested in controllers. They are using fixtures for testing 
0,Yes, they used Rspect to test the code.
0,The code looks clean and neat. Couldn't find any bad naming in the project.
0,Yes the code quality seems good. Team has taken care of keeping a good design.
0,1
0,Naming convention followed, Code is neat. Formatting is done. Function calls are included.
0,The code was committed throughout the project. The code was committed in the second round too.
0,Team continuously pushing changes into github. I could not see distribution of work done equally. I could see 46 commits with a neat and easy to understand README file.
0,Yes
0,Yes, the team has shown proper team collaboration, two members of the team kept submitting the changes throughout the projects. And there are sufficient commits for round 2.  
0,Code is written properly with all DRY principles. Methods are simple and clean. Every method contains functions specific functionalities. MVC are created where they are needed.  
0,Yes, model and relationships are well designed and cover most of them. 
0,Readme does not talk about edge cases but it covers how to to access the website. Good thing is that most of the errors pointed out in the prior review have been taken care of.  Search is missing     
0,Test cases present for user controller.
0,Basic functional test cases are written for four controllers. 
0,Code written well with all DRY principles. Methods are simple and clean. Every method contains functions specific functionalities. Methods are simple and clean. Every method contains functions specific functionalities.
0,Adopted good coding practices
0,Code was very clear and concise. Implemented concepts of cohesion and coupling. Related functionalities were placed together.
0,Yes, the code looks good. Code modularization principles are followed(didn't find any major code duplication issues).
0,The code is very well written with maximum functionalities covered, including adding a house to Interest list as a hunter, and showing that hunter as a potential buyer for that particular house. Well done!
0,Yes. The team kept pushing commits through out the duration of the project. The team even kept pushing commits during round 2. Also all team mates seemed to have contributed equally.
0,The team was regular in committing changes. The team continued to work in round 2 and made regular progress. All members contributed significantly. Great job! Could have started the project a bit earlier.
0,Yes, timely commits
0,20 commits in round 2
0,Team showed great consistency in committing changes. Changes increased in round 2.
0,Yes, the commit count has almost doubled.
0,52 commits! The team seems to be quite active throughout.
0,Code is pushed, but frequency is very less.
0,Yes, the team has handled all the single and multiple associations among all entities quite well. All the relationships can be reviewed under the model of all the entities.  
0,Yes. Models are maintained properly.
0,Database was well designed so as to avoid redundancy.
0,Looks good. All types of relationships are handled properly.
0,Yes. The mapping of 1 to n for company-realtor and company-houses is correctly done.
0,The design is well implemented. Relationships are well defined in models and edge cases are handled in schema itself. 
0,Code in the files are auto generated. Every function is implemented in a clean and readable manner and performs only one task. Code on whole follows Ruby on Rails practices.   
0,Code is clean and readable. 1. Yes 2. No 3. No README file is well written and descriptive. 
0,The code is quite clearly written with all the good coding practices being followed.
0,Yes, team kept on submitting their changes throughout the project. Only Readme.md file was updated in round 2.
0,The commits are many and have been done in round 2 as well. The commits weren't evenly spaced through the development cycle.  
0,Although there aren't too many commits, The team does seem to have been updating their git in a continuous manner. 
0,All commits on same day before submission
0,A total of 26 comments and recently updated also. 
0,Can see the commits in a single shot on few particular days. Yes the team has committed changes in round 2
0,The team has committed changes in round 2.
0,26 commits overall with about 13 commits for round 2.
0,Yes, 1-to-n and n-to-n relationships are handled correctly. Tables are mapped correctly.
0,Most of the mappings are done correctly.
0,The code on Github shows the 1 to n relationship between real estate company and realtor. The realtor is also able to create real estate companies of his own.
0,Yes, the mapping is done quite well.
0,Edge cases are handled good and the readme is effective enough to understand the entire code flow.
0,Only default tests are present
0,Code in the files are auto generated. Every function is implemented in a clean and readable manner and performs only one task. Code on whole follows Ruby on Rails practices.   
0,Code is clean and readable. 1. Yes 2. No 3. No README file is well written and descriptive. 
0,The code is quite clearly written with all the good coding practices being followed.
0,A total of 26 comments and recently updated also. 
0,The team has committed changes in round 2.
0,26 commits overall with about 13 commits for round 2.
0,Yes, 1-to-n and n-to-n relationships are handled correctly. Tables are mapped correctly.
0,Most of the mappings are done correctly.
0,The code on Github shows the 1 to n relationship between real estate company and realtor. The realtor is also able to create real estate companies of his own.
0,Yes, the mapping is done quite well.
0,Edge cases are handled good and the readme is effective enough to understand the entire code flow.
0,The testing was done
0,The system has been fully deployed and tests for the models and controllers are performed for the users involved in the system. The team checked for the edge case wherein the admin deleted the real estate company.
0,The code is clear and simple, most functions have seperate method calls.
0,The code followed the basic practices for clean and effective programming using Ruby and Rails. The methods and function calls were efficient in that they only performed the task it was assigned to do.
0,A major portion of the project was completed in the first stage itself. Certain noticeable changes that the team implemented in this stage included setting up admin functionalities to view and destroy the realtor or househunter accounts.
0,I think this team nailed the entity relationships with this application. Everything had the right relationships.
0,The relationships between various entities is clear.
0,The relationships of realtor to real estate company or realtor to house hunter justified proper mapping between them. The system handled the 1-to-n and n-to-n relationships properly.
0,The basic functionalities in the system are working properly 
0,The user interface of the system helps to understand the general flow of the program. It also supports sessions and enables user to navigate based on their tasks.
0,1. Yes, that is taken care of. 2. No bad naming 3. Questionable redirection. 
0,Code quality looks good. Standard conventions have been used. It is also good to see that the team has used seeds.rb for data generation.   
0,Group continued to revise and commit changes for the project throughout round two. Commits were clearly stated as to the purpose. You can see the development process of the project through the changes applied.
0,Yes, 22 commits in total and they have consistently kept on working on Git throughout.
0,1-to-n and n-to-n relationships are handled correctly. The system utilizes foreign key columns in the database to achieve this. For example, 1-to-n relationship between realtor and real estate company is achieved by adding a company_id field to user table. Same utilized by houses table which are linked to one realtor and one company.
0,The system now works as expected. The common functionalities are working
0,Most of the functionalities are added and seem to be working. There are some breakages like realtor has a create inquiries option which should not be present, and it breaks on clicking it. Search functionalities based on footage, price location have not been added. Interest list for the user and potential buyers list for the realtor is not added.
0,Well written code, clean and easy to read.
0,Clean code and readable. 1. Yes 2. No 3. None
0,Very well written in the style of writing and the ruby MVC architecture is properly implemented.  1. They have suitably defined methods to handle particular tasks following the appropriate MVC architecture and also following the correct session management.  2. Nothing is inappropriately named. They have very smartly worked on it.  3. Coding style is absolutely conversant with the Ruby on Rails flavor of coding. 
0,The code is very well written.
0,Code is clean and well written. A task is handled by only one method. There are no bad naming in this project and is neatly organised with instructions. No issues with the code.  
0, The code is written in a clean and readable way.
0,Yes, the team has been making commits through out the project tenure as well as round 2.
0,The commits are visible through out. Yes, commits have occurred in round 2.
0,They have worked on the project a lot, 120 commits, each one being descriptive. Good job there!
0,Yes they did. 118 commits
0,Yes, the changes were mostly evenly spread-out throughout the development cycle. This shows consistent efforts throughout.
0,Yes, they have a total of 117 commits which shows the consistency shown by them in working through the project and updating the changes. They have made a lot of vital changes in round 2. 
0,Yes, there are commits continuously made to the code as latest as 5 hours ago during review.
0,Yes the team kept on submitting their changes throughout their project. There are a total of 120 commits from the team and they still committed changes in round 2. They have committed the changes with proper messages also.
0,The relationships in the DB table have been carefully defined and they have taken care to relate 1 to n for houses, house hunters, inquiries, and so on. 
0,This application handles 1-n and n-n relationships properly. Company-realtor has 1-n relationship in the mapping table. I could not find any problem related to relationships. 
0, By looking at their model file, they handled the relationship properly. 
0,Perfectly functional and very well styled with the use of CSS and also the GUI is very user friendly. 
0,There seems to be a rudimentary test they have implemented as gathered by going through their file 'application_system_test'. This and the test file in the models shows that they have taken sufficient efforts to thoroughly examine their code. 
0,Of the functionality the team have tried to to implement, the code quality is not poor. However, the arrangement of code is difficult to understand given that not all functionalities seem to have been implemented. The "def after_sign_in_path_for" function in the applications controller used by the devise gem, only takes realtor as a resource, I would advise using an if or case condition within the function to allow other users to login. Also, I was unable to find any implementation for making sure that only the inquiries specific to a real estate company be visible to a realtor, and similarly only the inquiries posted by a house hunter themselves be visible to the house hunter on that specific house. I would again suggest using some If or case statements in the show function of the inquiries controller to establish identity of current_user. 
0,Yes, it is.
0,Changes to application continued throughout the second round of project submissions. Many of the commits deal with the adding additional functionality to the company controller, as well as, additions to the ReadMe. I can see that good work was made toward implementing missing functionality from the first round of submission.
0,Code seems to follow the Ruby Practices.
0,Code is written in a clean and readable way. There are separete methods for separate tasks.  Good naming convention is followed throughout the project.
0,recompany could have been just company
0,The team seems to have attempted to add to their functionality from the previous round. They have attempted to use the devise gem for allowing multiple user logins. It seems that they created a new git repo and started from the beginning which seems like a fair idea given that they wanted to use devise instead of implementing the user registration/sessions. 
0,Yes, they have keep commit to git as their project been working. 
0,Fewer commits on the project, More towards the deadline date.
0,Most of the commits are within the last 2 days before submission of project. Yes, commits for round 2 are provided properly.
0,The team submitted their changes towards the end of the project. They committed changes in round 2.
0,Checking the git log, the team still committed changes in round 2.
0,Though the commits started late in the project's life, there were commits frequently and also after round 1. The commit messages could have been a little more descriptive to fully comprehend the commit changes. 
0,Yes, there is a "has_many" relationship in company model, and also realtor is able to create mutliple house in one company.
0,From the Code DB Design looks fine. They have handled most of the relationships properly. Although I believe having different tables for admins/realtors/hunters/users/roles and role maps is un-necessary and just increases the complexity of the system. 
0,The relationship between house hunter, realtor and companies have been well established.
0,They committed quite many changes on the day of submission.
0,I cannot access the link provided by the team. Since this is hosted on AWS, I believe they have not opened the Ip to public by mistake (I have worked with AWS before and this happens). Maybe they worked from Library or their house, and when you spawn an instance in AWS it adds the IP from where the instance is spawned to the access list, which is why I am not able to access this from my IP. This can also be a problem with the proxy server setup in the instance and since you guys are maybe doing ssh into the server to deploy your code, the default HTTP request will go to port 80 and wont be forwarded to 8080 unless explicitly specified in apache/nginx and will block the requests. Easier way would be to host the app on heroku which handles all this automatically and provides you with a DNS entry
0,The link submitted is not live. As a result, I could not test if the system is working as it is supposed to.
0,The given link does not work and gives the following error: This site cant be reached 18.224.197.227 refused to connect. Hence, cannot comment on the functionalities.
0,The APP URL provided didn't work
0,Cannot Access App
0,Edge cases are not handled. But most of the logic will automatically handle edge cases.
0,The given link does not work and gives the following error: This site cant be reached 18.224.197.227 refused to connect. Hence, cannot comment on the edge cases.
0,The APP URL provided didn't work
0,There is no link to login as an admin. The site went down, so could not test further - This site cant be reached 18.224.197.227 refused to connect.   Search Google for 224 197 227 8080 house hunters sign   ERR_CONNECTION_REFUSED    
0,No model tests have been implemented. Basic controller tests generated by scaffold and devise are available.
0,Yes, they have tested a lot. Like admin, house and inquiries.
0,Testing has been done for users controller and model.
0,Yes, the team has tested model and controller.
0,Some controllers are tested. Models are not tested thoroughly.
0,The test scripts have been written, however the scripts could have been written in a more elaborate way to include all the test cases and not just the high level tests. For example, the system accepts an Invalid phone number which is less than 10 digits of length. All these test cases could have been written and tested 
0,In general the code seemed to look fine. There were some really long methods like in the users_controller class, so I docked a star. There was a separate method for adding to interest list.
0,It looks like all the needed relationships were present in the schema.
0,Authors delivered nearly all the functionality I could think to test. It was a little weird being referred to a totally different page to have to upload images to houses, but not enough to deduct points.
0,The code follows all design style guidelines for Ruby. Good job! All methods are well designed and serve only one function. Naming and structure is uniform across the project.
0,All basic functionalities work as expected. You could have gone for the extra credit functionality such as the Google login or the email part. The email part was pretty easy :| . You've still done a great job with the overall design. The best I've seen thus far!  
0,1.If admin deletes a company which has realtors and houses, the realtor associated with it get deleted. 2. Realtor can change her company and she can delete the ad posts previously posted by her. 3.Admin can delete the house hunter who has several queries and inquiries get deleted automatically.    
0,Yes, the commit count has almost doubled from round 1 to round 2.
0,1-n and n-n relationships are all properly defined
0,Code written well with all DRY principles. Methods are simple and clean. Every method contains functions specific functionalities. Methods are simple and clean. Every method contains functions specific functionalities.
0,The code has been written in a very clean and readable way. It is very legible and properly indented. I could not find and issues with the coding. There is no bad naming in this project and is neatly organised with instructions. One method handles only one specific task. There are function calls for multiple tasks. Yes, adding the user to the house's potential buyers is done by a separate method call. On the whole, the code quality is legit and I could not spot any long methods or too many nested blocks.
0,This project is very well organized, and the code style is great.
0,It's good to have the search logic in the model as opposed to the controller.
0,Yes. The team kept pushing commits through out the duration of the project. The team even kept pushing commits during round 2. Also all team mates seemed to have contributed equally.
0, Really good commit record with good comments as to what was changed.
0,Yes the number of commits have increased upto 110 commits.
0,Yes the team kept on submitting their changes throughout their project. There are a total of 110 commits from the team and they still committed changes in round 2. They have made 28 commits int the week of Oct 7 which is after the first round. They have committed the changes with proper messages also.
0,This team kept committing through the end of the project.
0,They have actively committed code during the project duration including Round 2.
0, Mapping checks out.
0,This application handles 1-n and n-n relationships properly. Company-realtor has 1-n relationship in the mapping table. I could not find any problem related to relationships. 
0,House hunter and Realtor can easily switch accounts.
0,All of the relationships are handled properly in the code.
0,The entity relationships have been established properly. They have also implemented cascading delete.
0,The search properties and addition of potential buyers needed to be improved and fixed after the first round. The authors fixed all of it for round 2. The system works exactly how it is supposed to work. I could not find any functionalities that are still failing. They have added additional features like signing up with google and sending replies to enquiries via email. 
0,All feedback has been fixed. No pending issues.
0,All of these are well handled and documented in the readme. Good work.
0,1) If the admin deletes a company, all the related properties will be deleted and will remove the company name assigned to any realtor. 2) If the realtor changed his or her company, the realtor cannot make changes to old posts which they have posted for the previous company they worked for. So they will not be able to edit,add or remove the houses listed in previous company. 3) If the house hunter is deleted by the admin, all the inquiries by the house hunter will be deleted and their names in the potential buyers list is removed. The README.md covers how the system handles all these edge cases.
0,When a realtor changes real estate companies, they are able to edit houses listed from the new real estate company, but not from their old one. When a user with inquiries gets deleted, so do the inquiries.
0,The edge cases are covered. The readme file also details how these cases are handled. 
0,Test cases for the user have been implemented.
0,Still have lots of tests across all of the models and controllers but nothing super extensive that attempts to cover all possible cases.
0,The team has tested both a model and controller. The system can handle the following cases 1)when user uses same email to register twice.  2)should not save user with password less than 6 chars. 3)should not save user with invalid email 4)should not save user without email
0,The user model is tested, as are multiple controllers.
0,They have written proper test cases that check both positives and negatives.
0,Good coding practices have been followed. Methods are crisp and single responsibility paradigm has been implemented.
0,Good code writing. 
0,Code quality is good, linked features are working fine like the one asked in question.
0,Yes, the code written was clean and readable
0,Well written and able to follow. However, I see no branches created (and hence pull requests merged). All work is pushed direct to master.
0,seems alright.
0,Submitted well within deadline!
0,yes they did.
0,The team was regular in committing changes. The team continued to work in round 2 and made regular progress. All members contributed significantly. Great job! Could have started the project a bit earlier.
0,The team committed their changes throughout the project period consistently.
0,Yes, the team has committed code changes in round2 
0,Yes, they still commited until yesterday.
0,Yes, the team kept committing changes throughout the duration of the project.
0,All dependencies are well modeled and designed. Every model has correctly associated relationships and validations. Your team is a pro! Realtor to house and house to company , other relationships are implemented.
0,Yes the relationships are handled properly 1 company multiple realtors etc. No mapping table as such the schema handles it
0,I did not find any problems in the first phase testing. All basic functionalities work as expected. Bonus points for the UI. One of the best I have seen. The web application is intuitive and guides the user in performing any function. Great job!
0,First reviews comments were fixed.  
0,Yes, they used Rspect to test the code.
0,Most common cases are tested in controllers. They are using fixtures for testing 
0,Yes. the team has thoroughly tested.
0,Models and controllers are well tested. All edge cases are covered and tests are comprehensive. The inquiries controller is especially well tested. All assert statements are well thought of.
0,When the admin tries to delete a real estate company which has some realtors and houses, all the houses and realtors are deleted as well. This is the expected functionality. Good job! All other test cases work as well. If a house hunter is deleted all of his/her inquiries are also deleted.
0,The readme document clearly mentions the edge cases when a company is deleted, what happens to the houses and realtors.
0,Edge cases are covered. When a company is deleted, the realtors and houses are also deleted along with it. The Readme.md file also details how the edge cases are handled.
0,1) readable code 2) separation of tasks
0,good coding standard
0,The code is pretty clean.
0,Yes, this team did a lot of work after the initial set of reviews. 
0,1) Yes,timely commits on github
0,Yes, the team kept committing changes in round 2.
0,lot of commits and branches
0,1) All  relationships are mentioned in the model
0,most of the relations holds good
0,User level vaildations seem to do be correctly. Also, I could not create an account with the same email id again.
0,1) readable code 2) separation of tasks
0,good coding standard
0,The code is pretty clean.
0,The team has committed changes during round 2, though the changes haven't been spaced evenly. Most of them are close to the deadline. Also, the changes haven't even spaced evenly. The names of the commits were descriptive.
0,Yes, this team did a lot of work after the initial set of reviews. 
0,1) Yes,timely commits on github
0,Yes, the team kept committing changes in round 2.
0,lot of commits and branches
0,1) All  relationships are mentioned in the model
0,most of the relations holds good
0,User level vaildations seem to do be correctly. Also, I could not create an account with the same email id again.
0,Code follows most of the ruby good practices.
0,The team seems to have followed proper naming conventions for naming all the classes as well as all the attributes. The  team seems to have written a clean and readable code.
0,The team committed throughout the project and during round 2.
0,There are quite a lot of commits meaning that the team could have grouped some of the changes together into one commit instead of commiting every small modification to make them more meaningful
0,they have 181 commits
0,The team has a good history of commits and as can be seen from the github repository the trail of commits is well documented and each new feature added or bug fixed has a documented commit. The team kept pushing commits throughout both the deadlines and were regular.
0,Yes: a total of 181 comments and are continuously committed on the repo. 
0,The database design is solid, with join tables for the n-n relationships.
0,The rb files set the has_many and belongs_to relationships correctly
0,The team has a well designed schema and has defined all the relationships between the tables properly.
0,The system is well designed and all the features have been correctly added and all the functionalities work. The authors have fixed all the problems from the previous submission.
0,The system works as it is supposed to. For example the realtor, the admin and the user can login and perform the related functionalities successfully. 
0,The system was very strong through edge cases and the README.md was very detailed.
0,the first edge case wherein a comp[any is being deleted by the admin is handled perfectly and the associated listings and inquiries are deleted accordingly. The house hunter deletion is also handled perfectly so that their inquiry are deleted accordingly. Also the README.md  explains the working and the functionalities of each role properly.
0,The tests looked good.
0,The team has tested the app using RSpec and thoroughly tests the user module
0,Good job on testing everything with rspec. Tests look concise and crisp.
0,The team has implemented rspec testing and have thoroughly tested one model namely the users model with this. Also the team has used minitest to thoroughly test the users controller.
0,Test has been written for most of the functionalities and works well. The test folder has the relevant files with well commented code. 
0,Code is well written. All the conventions of the rails framework have been followed. The functions have been properly defined and does only what it is supposed to do.
0,Code looks neat and clean.
0,The code is well written. It is neat and easily readable. The function calls are very well done. Also, there is no bad naming the project. Code very well follows the DRY approach.
0,Code is clean and easy to understand. Some unused/unimplemented empty function definitions are there in the files.
0,The code follows the general guidelines for quality and concept of clean coding. The models and controller were designed with general practice approach using Ruby and Rails coding methodologies.
0,The code was committed throughout the project and code was committed in the second round too.
0,This team is keep on submitting their changes throughout the project, and not only one or two members of the team, but all of them are playing a role in this project. Besides, they did commit changes in round 2.
0,By looking at their github page, I could see they submitted their changes actively and also they continued submitting changes in round 2 as well.
0,yes about 83 commits.
0,The team improved upon certain aspects of their code. This included establishing the admin functions and actions as adding new companies and to view various participants involved.
0,I think the system handles the 1-to-n and n-to-n relationships well. The relationships are clearly defined with no problems.
0,The code procedure and application justified the 1-to-n and n-to-n relationships between the realtor and house hunter model as well as real estate company and realtor relationship mapped as 1-to-n.
0,I think the authors did a good job in developing the system. The system is working as it is supposed to work.
0,Yes, I feel the team has done pretty well in testing at least one model and one controller.
0,The team thoroughly tested the Admin model and controller. The tests for admin performed checks for admin functionality to be able to view the list of houses created by the realtors as well as look up for realtors and house hunters information that are involved in application.
0,There are no new variables etc. The code looks fine and logical.
0,Extremely small change. No bad naming in question.
0,There aren't much big changes. The changes have been crisp and self explanatory.
0,1. Functions are of appropriate length and well structured with respect to the purpose in question.  2. All code has been suitably well put into the methods with their intended function and work cutout for them.  3. No, the comments have been well placed and self explanatory making it easy to follow.  4. The code does follow the ruby style guidelines and is thorough in that regard.  5. Nope, all code is consistent and to the point. 
0,The added code is crisp and of required size. There isn't much addition anyway to worry about it violating DRY principles.
0,Extremely small change. No problems found.
0,All tests pass, all descriptions in the Test Plan are just the test cases in the Rspec file, sooooooo yeah I guess they all exist.
0,Their variables, methods, and class names are good 
0,Rspec tests look just fine and descriptions are intuitive.
0,The tests look fine. It's easy to follow what the tests do.
0,Code is well written.
0,the work takes care of all the edge cases accurately.
0,Yes their code works, and some edge cases are also correct.
0,The writeup clearly explains the problem statement
0,the wiki page has showed up what the expertiza is and some examples have show up what the task of the team is.
0,I could understand what the project does. However, there are fewer examples of the test.
0,This is not a fair ask. As far as I can tell, there is no document that says we should create a test plan.
0,All test cases are currently passing
0,All the cases discussed in test plan have been converted into automated tests.
0,Yes, unit tests Rspec are provided.
0,Action mirror successfully implemented . Active record is also getting updated properly.
0,There were some issues initially when i looked at the code. But the professor has already made those suggestions about naming conventions and following the design pattern and to write appropriate methods in the right models or controllers. Looks good now.
0,    No naming issues found
0,The method names, variable names and class names are intuitive and suggestive of the functionality.
0,Code looks perfect. Follows standards.
0,All ruby looping constructs followed to a good extent . Refactoring the code could be possible
0,Follows most he good coding practices. Follows DRY Follows ruby style guide and has no error in code climate as well
0,The code follows DRY principle. None of the functions is very long. More comments could be added but not required.
0,Code is not DRY. 
0,Clear statement and well layout of the wiki page.
0,All the features are implemented according to the wiki documentation submitted.
0,Edges cases are covered well in the tests
0,The features work as intended.
0,Fix is working good. Link is up.
0,The features work as intended.
0,The test has already covered edge cases.
0,Clearly mentions implementation details an the problem descriptions
0,Documentation is concise and clear
0,The Wiki document clearly explains what work is done. One section for each issue. The deadline reminder functionality explains what code is changed but overall what the use-case is and what task needs to be performed could have been explained better.
0,Very well written wiki, well explained with all the nitty gritty implementation details.
0,The writeup is written very clearly; gives good idea about the project.
0,Very detailed. All the implementation details are clearly explained.
0,The writeup is written really well. The description about the functionality has been mentioned clearly. Good Job!
0,The writeup is clear.
0,Very clearly. The authors provide sufficient information about improve the email function(such as when become a participant).
0,Test plan is well thought out and thorough.
0,Yes conditions are tested well.
0,Maybe add the code to wiki.
0,They do have clear testing section, but not said as test plan.
0,The report mentions all the required details like the problem statement , the old version of the code and the improved version of the code and how well it is improved and implemented , thus the report is also very well articulated
0,Yes each topic description starts with what the current issue is, what are the changes made and how is it impacted and what is the end result. Nicely Articulated
0,The implementation strategy is clearly discussed in the writeup which is easy to follow.
0,Yes, the bug to fix flow is very well explained. Comprehensive and easy to understand.
0,The writeup explains the implementation approach for every functionality that they implemented. 
0,Yes
0,Yes, all the have done are shown in the github link.
0,Seems all variables and methods follow certain naming rules.
0,The variable , method and class names all seem to be reasonable and well written.
0,The code seems DRY and follows good design principles avoiding redundancy.
0,Can not run servo as I dont have the needed environment.
0,The writeup was well written and explained what the Mozilla project was about. It also mentioned the purpose of the project along with the technology used to implement the same.
0,The document is really well written specifying clearly the functionalities worked on.
0,Not any clue.
0,The writeup details the work done by the authors and mentions how they approached implementing the OffScreenCanvas API.
0,No, they did write the test plan.
0,All tests pass, all descriptions in the Test Plan are just the test cases in the Rspec file, sooooooo yeah I guess they all exist.
0,Their variables, methods, and class names are good 
0,Rspec tests look just fine and descriptions are intuitive.
0,Some of the functions are too long such as #delete function.
0,The tests look fine. It's easy to follow what the tests do.
0,Code is well written.
0,the work takes care of all the edge cases accurately.
0,Yes their code works, and some edge cases are also correct.
0,The writeup clearly explains the problem statement
0,the wiki page has showed up what the expertiza is and some examples have show up what the task of the team is.
0,There's basically no documentation outside the source code itself.
0,This is semi-passable. The wiki is hosted on Wikipedia, so they clearly didn't read the directions. I mean, I get it, though. I wrote tests, and was also unclear about what exactly the Wiki should contain.
0,I can not find the test plan.
0,They don not have a test plan.
0,No, this writeup doesn't have a test plan section.
0,Test Plan is missing
0,The test plan is not added as the part of writeup
0,the team does not show up any design patterms. in the wiki page, the authors did not explain how and why they did, and what I can see is just the final code for some perticular exmples.
0,All the cases discussed in the test plan have been implemented. Well done in achieving 100% test coverage and passing all the tests.
0,over 9000! I mean 90%! Great job testing Participant y'all!
0, 
0,YES.
0,several methods are missing in the document and the rspec file like review_response_report, import. 
0,Yes and it all passes too.
0,Every test case that is provided on the wiki page is part of the automated test suite. There are no cases of failing tests.
0,yes they have automated test and all of them pass
0,Names for variables, classes, and method are properly named and make sense.
0, 
0,They kept working on it and did really impressive.
0,It looks great. Everything is followed.
0,Yes there is no unreasonable function names and all method name are suggestive and apt
0,This was a testing project and the mocked objects were appropriate. The code is DRY. There is no redundancy in the code.
0,So fresh and so clean, clean! This code is too neat to even be dry. Too hot to touch. I'm just still super impressed by the wiki and the video.
0, 
0,All the code is in a single file as it tests a single model and it seems to cover it extensively. It also looks like there's no DRY issues.
0,Code seems to be concise and well written.
0,The features work as intended, they cover the test cases and edge cases as well.
0,After working through several edge case side effects, by hand, up hill, both ways, it looks like all of their bases are covered and edge cases satisfied.
0, 
0,The features work as intended
0,Since coverage is 100% and the code looks good to me, I am assuming it works fine.
0,Running the code manually resulted in the 100% coverage of the object under test.
0,This wiki is very detailed and explains what is done for every tested method. It also contains links to all resources one may require to understand the functionalities of the project. Great Job guys !!!
0, This is easily the most clear of any testing write-up that I have seen to-date. It is organized into meaningful sections that follow their test plan, and show of their deliverables.  
0,The wiki page provides clear details about the work, and very easy to understand. 
0,The writeup is clear and easy to understand.
0,Yes, it is easy understand that it is a testing project and how it is done.
0,looks like edge cases and invalid inputs are handled.
0,The test plan look complete enough.
0,The plan looks good and it covers a lot of cases.
0,the write up doesn't has a test plan but looking at the code it seems they have check every edge case. Also since there coverage is coming to to be 100% , everything should work.
0,The test plan is comprehensive and fully covers all the methods and cases that are part of the object under test. Running the test suite yields 100% overall coverage.
0,Yes they have come up with all possible inputs, edge cases and wrong data entries to check the system behaviour is not faulty
0,For every tested method, they explain what they did and why they did it.
0, They even wrote down their plan to accomplish the project! I love it.
0,It is a testing task, I assume there is not any design needed.
0,Yes.
0,It explains clearly what tests are missing and how the coverage is increased.
0,Yes they have explained everything.
0,They team has thought through efficiently to use design options that avoid test reruns and to dry out some mocks settings
0,All the variables and function names used are appropriate. 
0,The variables, names are well assigned.
0,Functions and variables are named aptly
0,The features work as intended. Edge cases are properly executed.  
0,The code works.
0,The write up addresses details of all the three problem statements along with the code changes done in every file and the files added. The team has also added screenshots of the manual testing and the video demonstrating the functionality they added.
0,The write up covers all the issues and is well organized, including the code blocks and the screenshots.
0,The Documentation is well written and indicated clearly what was the problem tackled and how it was approached and solved
0,Yes, the team has clearly stated the problem statement and the changes they have done to provide solutions to the problem. They have been given 3 problems to which they have clearly provided the names of the files and the part of the code which is changed. The video explains the problem and the implemented solution perfectly without any ambiguity.
0,The write up clearly explains about the modifications made in Expertiza.  It indicates the functionality of their work which is topic management and the problem statement is clearly elaborated. It provides the files changed and also the code snippets in which the changes are made. The write up also provides visual representations of the changes made. 
0,writeup is very well written, contains enough screenshots and explanations of the code.
0,The team has explained the issue and the solution they chose with enough details to understand to way of implementation.
0,Yes all  the 17 test cases are automated. They have reached the goal of 90% coverage . 
0,Test cases are present. 
0,Yes all 17 test cases are automated
0,Everything in the wiki was a test.
0,It seems you have cover 94% of the participant.rb. However, all checks have failed in the pull request test.
0,Yes, the admin has included the Test Plan cases in the automated tests.
0,The authors have implemented every test case that is discussed in the test plan. Detailed explanations and code itself is provided in the project's wiki page.
0, All variables, methods and class names look reasonable.
0,it follows the standard ruby practices . All the variables , methods and class name look reasonable. The added tests looks very clean
0,Naming conventions are followed. Test coverage has increased.
0,Coverage has increased by 7 percent overall
0,The added tests look very clean.
0,Pull request build passes well and there are no issues.
0,FuncyFunctionalare of correct length.
0,Does not apply as its a testing project with most testcases written in a single Rspec file to test the functionality
0,Well, the code looks good and very much follows the Ruby Style Guide. The code also is DRY. It looks well written and does not any changes.
0,Video covers how to run the test cases which are clear and understandable.
0,Tests work
0,Yes, after testing the work manually, I could see that their features are working as intended.
0,The write is very descriptive and included code from both the model and the spec file.
0,The writeup explains how the tests relate to their respective methods.
0,very clearly writeup.
0,It is well written, quite understandable. It clearly and adequately indicates the working functionality. I can understand what the project is about.
0,Yes the test appears complete as they have mentioned all from setting up the expertiza environment to the tests that they have implemented along with the plan of the they executed their project
0,Yes, the Test Plan looks complete and includes all the test cases and the actions.
0,Yes the have mentioned all of the required work and its related explanation. they have reasoned out their exact methods and the issues to be considered while testing in the problem statement. 
0,Functionalities have been tested properly.
0,Yes, the writeup explains explains how the authors did their work and they have mentioned the steps behind each functionality. They have put a video explanation of the same.
0,Yes, it looks they have converted all the cases into the Test Plan.
0,Good work on including test cases. The app works fine after testing.
0,Yes most of them but they have not added any automated integration tests. Unit testing has been done and is great to see such detailed tests
0,All the test plan is converted to automated testing.
0,The variable and method names are apt.
0,Yes. the variables have been very keenly named. Especially in the file, _rubric.html.erb, the variables are very accurately and effectively named, as there could have been much confusion otherwise. Kudos for that.
0,The variables, methods and class names are aptly named. I could not find names which are not suggestive of functionality.
0,The code follows standards. 
0,The code follows the DRY principle.
0,3
0,Great work. Clearly Understandable. Functions are of appropriate length, Codes are in appropriate methods, Code is very well commented, Code follows ruby style guide. Good naming.  
0,They do work as intended.
0,All of the features mentioned by the author works successfully in the demonstration as well as in the manual tests performed by me.
0,Could not detect any flaws. Works exactly as it has been been in the wiki. Good guidance. 
0,Tested in the links given, the changes are working correct. The server is up and I was able to reflect the steps mentioned. 
0,I can find where is the bookmarks page, but according to their screenshots I think their features work well.
0,The write-up is very clear and directs user to the main issue very well. The flow is very structured, in the sense that first it gives a high level view of what expertiza is, it then tells about the book-mark functionality, and then tells the problem and how they came up with the solution. One of the most professional wiki I've reviewed.
0,The writeup is clear. It is easy to understand what the project does.   
0,The write-up was splendid. All instructions were written thoroughly. I did not face any problem in understanding. Also, screenshots guided well
0,They have included a test model video in which all the test are passing. It looks complete
0,Yes. The test plan is present in the writeup. Also, the links to youtube videos for the demonstration was particularly helpful too.
0,The authors considered different pre-conditions, edge cases, invalid input values, and other possibilities and i clearly well written. Test Plan looks complete
0,Yes, I followed the youtube link to check the tests and they have tested the controllers. 
0,Testplen looks exhaustive and is explained well.
0,They don't have Test Plan section, but they added some screenshots of the test result, I can see they have pretty good path coverage. But I can not know if they test edge cases or invalid input values without seeing their Test Plan.
0,Yes, the problem statement was explained thoroughly. Also, the team very aptly described why the issue needs to be fixed. great work !
0,The write-up was splendid. All instructions were written thoroughly. I did not face any problem in understanding. Also, screenshots guided well
0,Yes, the problem statement was explained thoroughly. Also, the team very aptly described why the issue needs to be fixed. great work !
0,Yes, I followed the youtube link to check the tests and they have tested the controllers. 
0,The code follows standards. 
0,There was no test plan. Also all the test cases don't seem to have been written which is evident since the code coverage 46 percent.
0,They have added Rspec and Unit tests
0,Edge cases are covered as well.
0,Edge cases are covered as well.
0,Yes, the admin has included the Test Plan cases in the automated tests. They have solved all the issues they were tasked with.
0,Yes, the admin has included the Test Plan cases in the automated tests. They have solved all the issues they were tasked with.
0,There was no test plan. Also all the test cases don't seem to have been written which is evident since the code coverage 46 percent.
0,They have added Rspec and Unit tests
0,The build is passing the test coverage and the bullet points mentioned in the issues section have been properly implemented to achieve the desired result. All the issues have been implemented as discussed. 
0,All the cases in Test plan are included in the automated tests.
0,Test not passed
0,The build is passing the test coverage and the bullet points mentioned in the issues section have been properly implemented to achieve the desired result. All the issues have been implemented as discussed. 
0,The chnages made by the author seemed to follow most of the guidelines that a professional prgrammer should follow. The variable names were unambiguous and clearly stated what they stood for. Also the functions and classes did what they stated.
0,Pull request build passes well and there are no issues.
0,Test not passed
0,The chnages made by the author seemed to follow most of the guidelines that a professional prgrammer should follow. The variable names were unambiguous and clearly stated what they stood for. Also the functions and classes did what they stated.
0,Pull request build passes well and there are no issues.
0,The names are very intuitive and one can easily understand the reason for each of the variables from their names. In addition the test coverage has increased however it is not very good.
0,All the names suggest the functions well.
0,The code for the export_file controller and models for question_advice are tested adequately with the questionnaires_controller sepc model file. The variables, methods and class names follow the general standard Ruby practices. 
0,Well, the code looks good and very much follows the Ruby Style Guide. The code also is DRY. It looks well written and does not any changes.
0,The code overall seems dry. The functions are to the point and the code follows Ruby Style Guide.
0,The code for the export_file controller and models for question_advice are tested adequately with the questionnaires_controller sepc model file. The variables, methods and class names follow the general standard Ruby practices. 
0,All the names suggest the functions well.
0,Yes, after testing the work manually, I could see that their features are working as intended.
0,The features do work as expected. The authors have implemented all that they claimed that they would do.
0,Well, the code looks good and very much follows the Ruby Style Guide. The code also is DRY. It looks well written and does not any changes.
0,The link for the work can not be accessed, but according to the video they provided, the features works well.
0,The test cases written work as specified. The features are working as intended and the functionality is getting implemented with minimal errors. 
0,Yes, after testing the work manually, I could see that their features are working as intended.
0,The features do work as expected. The authors have implemented all that they claimed that they would do.
0,I think it is well written, quite understandable. It clearly and adequately indicates the working functionality. I can understand what the project is about.
0,The wiki document provides the necessary details about the project and the tasks performed by the team. It gives a general overview of the project implementations, the functionality carried out by the team. 
0,The test cases written work as specified. The features are working as intended and the functionality is getting implemented with minimal errors. 
0,The document clearly explains not only the problem statement but also what Expertiza actually is. It proceeds to explain how they solved the problem of the rubric criteria.
0,The documentation is well done and gives a comprehensive overview of the project
0,The documentation is well done and gives a comprehensive overview of the project
0,I think it is well written, quite understandable. It clearly and adequately indicates the working functionality. I can understand what the project is about.
0,The document clearly explains not only the problem statement but also what Expertiza actually is. It proceeds to explain how they solved the problem of the rubric criteria.
0,Yes, the author did include test plans and test cases. Also the test cases seem sufficiently exhaustive to cover most of the edge cases.
0,Test plan is nicely written and implemented
0,The wiki document provides the necessary details about the project and the tasks performed by the team. It gives a general overview of the project implementations, the functionality carried out by the team. 
0,The Test Plan along with the existing issues and its solution is given.
0,No test plan, even though they did have the task of testing the questionnaire controller
0,Yes, the author did include test plans and test cases. Also the test cases seem sufficiently exhaustive to cover most of the edge cases.
0,Test plan is nicely written and implemented
0,The Test Plan along with the existing issues and its solution is given.
0,No test plan, even though they did have the task of testing the questionnaire controller
0,The plan gives enough roles for the first issue to test if the code works well.
0,The plan gives enough roles for the first issue to test if the code works well.
0,Yes, as mentioned earlier, this part was very aptly implemented by the author.
0,Explained Clearly
0,Explained Clearly
0,The document explains the different files which they had to change along with why the previous version was not up to par. Then they show their implementation of the file
0,The document explains the different files which they had to change along with why the previous version was not up to par. Then they show their implementation of the file
0,The writeup describes the problem statements, solutions and the 'why' and 'how' of the problem. The screenshots were clear.
0,The writeup enlists a thorough report from the environment setup to the project build. It includes a proper check on the problem at hand, the approach to achieve the goals and the solution implemented. 
0,this is refractoring project , doesn't involve new test cases . 
0,All the cases discussed in Test Plan have been converted into automated tests.
0,The team has separated the existing methods of a class in 2 sub classes. They have used meaningful names for same. The team has not added any new functions as per the wiki description.
0,Variable and method names seems to be appropriate.
0,The variable/method names and class names are intuitive and follow Ruby standards.
0,Code adheres to the Ruby coding standard. The team has also implemented strategy design pattern.
0,The code is more about the changes in the database and it does follow the standards.
0,The code follows Ruby Style Guide.
0,refactoring is done really well. there were no violation of DRY principle
0,The code follows DRY principle. None of the methods needs to be broken down into separate components.
0,Code is concise as mentioned  Methods are extracted into separate methods Comments are sufficient I could understand it The code is as per Ruby guide Most of them are DRY code
0,The features are working as per intended plan of work.
0,Couldn't test the features as no information regarding logging in credentials were provided anywhere.
0,Most of the edge cases cover 
0,The write up addresses the problem statement and explains about the background of the functionality.
0,writeup is clear and easy to understand . it covers all the work
0,Very well written. 
0,The writeup gives us enough clarity to understand what the project is about.
0,The report is detailed enough to explain the approach taken to refactor the code.  
0,Very well written. The purpose was clear!
0,Yes the write up is concise 
0,Yes, it does explain the previous functionality and their changes will take affect. The explanation is done with diagram as well as the query.
0,Yes, explains well.
0,clearly explained about the implementation and usage of the strategy pattern 
0,The authors clearly explain how they refactored the code.  
0,They explained how they used Strategy Pattern and why they used it. Loved the walkthrough!
0,I could see a clear description of the changes and good naming conventions 
0,Yes, it looks they have converted all the cases into the Test Plan.
0,Good work on including test cases. The app works fine after testing.
0,All the test plan is converted to automated testing.
0,The variable and method names are apt.
0,Yes. the variables have been very keenly named. Especially in the file, _rubric.html.erb, the variables are very accurately and effectively named, as there could have been much confusion otherwise. Kudos for that.
0,The variables, methods and class names are aptly named. I could not find names which are not suggestive of functionality.
0,The code follows standards. 
0,Everything seems to be working fine
0,Existing test cases have been fixed for review feedback by a team instead of a team member.
0,Naming of classes and variables are apt.
0,All method names are suggestive of the functionality they provide.
0,The team has properly used the naming conventions for variables and functions. The functionality could be easily interpreted by reading the name
0,The code follows the DRY principle.
0,3
0,Basic test cases are covered in the test plan
0,Team has taken care of test plan with automated test cases. As mention by team, they have implemented capybara testing and has good understanding of it.
0,All tests added pass.
0,Great work. Clearly Understandable. Functions are of appropriate length, Codes are in appropriate methods, Code is very well commented, Code follows ruby style guide. Good naming.  
0,Yes, the admin has included the Test Plan cases in the automated tests.
0,Include test cases for negative scenarios as well.
0,Up to standards with ruby coding practices
0,The code is well modularized and separate methods have been created to provide different functionality. eg: added get_feedback_assessment method to add feedback for a team.
0,Methods, variables and class names are well defined as per the standards. 
0,The code has all 5 of the following characteristics: (i) is DRY (ii) follows Ruby style guide (iii) is commented (iv) does not contain long methods (v) variables and functions are properly named.
0,They do work as intended.
0,The team has done a good job of maintaining the code DRY and as neat as possible. No suggestions to improve.
0,All of the features mentioned by the author works successfully in the demonstration as well as in the manual tests performed by me.
0,Could not detect any flaws. Works exactly as it has been been in the wiki. Good guidance. 
0,Variables, methods and class names are given professionally with reasonable meaning. The names very well indicate the functionality to be performed by the name/variable.  
0,The code added in the project uses intuitive naming conventions. Good job guys !!
0,Pull request build passe well and there are no issues.
0,Yes.  I suggestion, since they deployed the code and video, it would have been good if they put a view of the UI usage similar to what they have put as screen shots in the code.   
0,Tested in the links given, the changes are working correct. The server is up and I was able to reflect the steps mentioned. 
0,features are working as intended.
0,Function names seemed to be clear enough and satisfactory.
0,Names are clearly used and defined as given. def remove_administrator redirect_to action: 'list_administrators def remove_instructor  
0,I can find where is the bookmarks page, but according to their screenshots I think their features work well.
0,Functions are not long but are sufficient enough to understand what changes are made and how they are implemented
0,1. Function written are simple, crisp and clear. No long functions or dead lines of codes 2. Team has taken care of modularization. No part of code needs to be added as separate  method 3. Code and names given to variable do help to understand the flow of the code. 4. Code follows Ruby style guide. 5. DRY principle is followed very well within the two functions changed.
0,Well, the code looks good and very much follows the Ruby Style Guide. The code also is DRY. It looks well written and does not any changes.
0,The code seemed fine and follows the ruby guide style. I could understand the flow of the code and what different functions did.
0,They have explained about how they are using DRY principles in wiki. Refactoring a new method like,  def self.destroy_helper(params, position) in (users_controller.rb) clearly explains the DRY method being used 
0,The write-up is very clear and directs user to the main issue very well. The flow is very structured, in the sense that first it gives a high level view of what expertiza is, it then tells about the book-mark functionality, and then tells the problem and how they came up with the solution. One of the most professional wiki I've reviewed.
0,I have manually tested the changed functionalities and issues are taken care very well. Team has given justice to problem statement assigned to them, but with in the scope of issue assigned. Also taken care of edge cases. 
0,Yes, after testing the work manually, I could see that their features are working as intended.
0,Code works.
0,I could get things working.
0,Manually tested the functionality of teammate review. Working as expected.
0,The features are working as expected in this project. The views have changed to fit the new implementation.
0,the write-up provides adequate information along with before and after code which helps in better understanding of the issues and changes made
0,Team has written a professional and understandable writeup. Formatting is good. With good explanation of the approach taken to solve the issue. Creative way of writing before and after of the code snippet. Team could have added pictures to make it more relatable for users new with Expertiza.
0,The writeup is clearly and adequately defined. It shows what the project is about, what all changes the team have made, all assumptions they have made and edge cases which they have ignored as they were out of the scope of the project.
0,It is well written, quite understandable. It clearly and adequately indicates the working functionality. I can understand what the project is about.
0,Well explained. Add screenshot of the changes which can help understand the change visually.
0,Please add a guide in the wiki where to test if the features work or not. Initially found it difficult in the expertiza page where it has been modified.  The software works as expected in most cases. Was able to check the following participant feedback displays author feedback view to whole team checking feedback assessment give feedback and edit feedback functionalities in the review view
0,The writeup was written well enough to how and what the project does. The only suggestion is to include screenshots. That would make the write up even more easy to understand.
0,Couldn't log in to test the code as no credentials were provided anywhere.
0,The writeup is clear. It is easy to understand what the project does.   
0,It works fine for the cases tested.
0,The write-up was splendid. All instructions were written thoroughly. I did not face any problem in understanding. Also, screenshots guided well
0,Yes, test plan is complete enough also team has explained the test plan technology to used to achieve it. Good knowledge of Capybara testing. Team could have added test scenarios for each issue step by step rather than single lines.
0,Include the code snippet in the write up as well.
0,Test plan seems complete enough.
0,They have included a test model video in which all the test are passing. It looks complete
0,Yes. The test plan is present in the writeup. Also, the links to youtube videos for the demonstration was particularly helpful too.
0,Written very well explained approach taken to solve the issue.. Along with what was the actual problem existed previously in the system and how team has given a thought process the fix the issue. No type of design pattern is involved.  
0,The authors concisely explain the work they did. As a suggestion, I would ask them to include the tests written in the wikipedia page as well. The idea is for any reader to understand 100% what all happened in the project, without looking at the code.
0,The authors considered different pre-conditions, edge cases, invalid input values, and other possibilities and i clearly well written. Test Plan looks complete
0,Yes, the writeup explains explains how the authors did their work and they have mentioned the steps behind each functionality. They have made an UML diagram as well.
0,Write clearly explains the changes done.
0,  The team does explain how and what they did.
0,The writeup includes their thinking methodology and why they arrived at that solution. 'Changes' under 'User Deletion' clearly explains what went wrong in the existing code and what should be added. One suggestion would be, instead of showing 'Before' and 'After', they could have leveraged Git s UI version of + , - in red and green to have shown the differences. But 'before after ' way worked too !
0,Yes, I followed the youtube link to check the tests and they have tested the controllers. 
0,Testplen looks exhaustive and is explained well.
0,They don't have Test Plan section, but they added some screenshots of the test result, I can see they have pretty good path coverage. But I can not know if they test edge cases or invalid input values without seeing their Test Plan.
0,The writeup is well written. But I feel there are some missing details about the project. The team could elaborate on the issues in the project and the solution that they have implemented. This way it would better in understanding how and why the authors did the work that they did.
0,The write-up only tells what is to be done and how it is done. The rational behind choosing the approach is not mentioned, neither are any of the principles mentioned. It has comparisons between the previous and new versions and why they made they made the necessary modifications.
0,Yes, the problem statement was explained thoroughly. Also, the team very aptly described why the issue needs to be fixed. great work !
0,Nicely written Wiki with screenshots describing some of the changes made.
0,Yes, the purpose of the project is clearly explained.
0,Most of the edge cases seem to be covered.
0,Unfortunately, the write-up does not include a test plan. The team has included the following line in the "Testing" section: "Fixed the existing test cases for the review feedback by a team instead of a team member." The team could improve this by adding the test cases to maybe to check whether the "get_feedback_assessment" method returns the proper assessment using teamid or not or check whether the summary reports navigation redirects the user to the correct page or not.
0,All of the cases discussed in the Test Plan have been included in the test file. And all of them are also passing. Very good!!
0,The tests have been properly converted into automated tests.
0,The test cases are covered in the coded.
0,They kept working on this test and improved it.
0,The names are very intuitive. The build doesn't seem to have been passed because of the indentation errors and failure to follow certain design guidelines.
0,the code follows correct name structure for variables, methods and class.
0,All the names are used properly.
0,Code contribution of all team members. The code doesn not smell dry
0,The code looks good. It seems well ordered, structured, and 'DRY'.
0,the function definition is of perfect size. the code follows the Ruby Style Guide.
0,Yes.
0,No idea how to manually test the authors file.
0,The tests all pass successfully.
0,Clearly.
0,The wiki document was very clear with respect to the responsibilities of the group. it also detailed their approach to writing the tests as well as explained the functionalities that the tests were written on. Well done!
0,The write up is perfectly written.It clearly describes what functionality the work is related to. It gives information for each aspect of the project.
0,Test plan is well-rounded.
0,test cases are thorough
0,The test plan is accurate and checks for different pre conditions , edge cases , invalid input values. I could not find any missed scenarios.
0,For the methods that include different conditions, they provided tests fo different kinds of conditions. Also, for each method, the team test various aspects of the method.
0,Well explained information about the Design and the results.
0,The write up is enough for me to understand.
0,The document explained well the work and the approach to doing the work.
0,The write up is clear with its goal. It nicely explains how and why did the author work in a particular way.  
0,Pull request build passes well and there are no issues.
0,The naming conventions are followed as per standards
0,Follows ruby standard codes. Already implemented functions are changed and have stayed away from adding too many functionalities. 
0,Everything works fine according to me.
0,Yes, the features which have been done till now work well.
0,Very precise write-up with nice details on how the fixes were applied.
0,It is well written, quite understandable. It clearly and adequately indicates the working functionality. I can understand what the project is about.
0,The write up is detailed. All details are mentioned including files involved, solution as well as test plan and how they have done or implemented the solution. The code snippets also gives good idea of the project work. The first part gives detailed background of the project. 
0,Enough details has been provided.
0,I think the test-plan is complete and most of the edge cases are covered.
0,Test plan is manual. 
0,They have included test plan but few examples and screenshot of their work would have been a plus point.
0,Testing is done manually and there is mention of automated tests in the wiki but no files are seen. It's better to provide all links like github code, testing videos and wiki while submitting on expertiza.  
0,I understood the write-up pretty well. I also liked to way the fix was implemented
0,Yes, the writeup explains explains how the authors did their work and they have mentioned the steps behind each functionality. They have not used any design principles or patterns. 
0,Yes, team has explained why they worked in certain way.
0,It explains their approach and issues they encountered like latin format, storing html tags and how they fixed it.
0,All the cases discussed in the test plan have been implemented.
0,they have done all the 29 test case and test them throughly.
0,The team has tested all the methods of the corresponding model file.
0,Well done in achieving 100% test coverage and passing all the tests.
0,Yes they have converted them.
0,work as intended to be 
0,Code style seems to be good.
0,Not find any improper variable names or method names.  
0,Names for variables, classes, and method are properly named and make sense
0,The code is DRY enough, and the functions seem to be compact.
0,This was a testing project and the mocked objects were appropriate
0,The code is DRY. There is no redundancy in the code.
0,All the codes are of perfect length. That is actually one of the best thing about the code. It follows basic ruby style guide.
0,Code climate issues that were reported have been fixed.
0,For every tested method, they explain why they created certain objects or did what they did
0,The writeup explains well the plan of work of the authors and the way in which they approached the task at hand.
0,Appropriate explanations are provided for the tests.
0,Yes the Test Plan part is pretty through, they list all 29 test case they have done for the assignment_team.rb.
0,The Test Plan is detailed and comprehensive. Good job!
0,no miss
0,This wiki is very detailed and explains what is done for every tested method
0,The write up is descriptive and very well written. I could easily understand everything about this project. Good job! 
0,From the document I could understand the functionality on which the tests were written.
0,The writeup describes briefly and clearly what the AssignmentTeam class does in the expertiza project. It has also given the details on the test plan, test cases and explained the use of RSpec testing framework and factories. I would suggest to add a link to their video that shows the tests running in the wiki page. All in all good work!
0,The tests are very well written. They clearly indicate what functionality they are checking for.  The tests follow a language that is easy to follow.
0,The writeup matches up very well with tests written and also describes in details what scenarios are tested.
0,yes, very clear
0,The features work as intended, they cover the test cases and edge cases as well.
0,All tests works fine. 
0,It's a testing project and the video provided show that all test pass and they have at least 90% coverage
0,As mentioned above, and also stated in the video and the pull request itself, the author has covered up everything.
0, 
0,hey variables follow all the stanard conventions that it needs to.
0,Yes the tests are automated, also the command to run the test is given in the wiki.
0,The test cases given by the team work as described. The features are implemented accordingly. The edge cases are considered while designing the mocks. In general, all the code for test cases works as specified.
0,Video seems fine, covers all the cases with 100% coverage.
0,the code follows Ruby style guide. the code does not contain long methods. the variables and functions are properly named.
0,They have covered all cases which they mentioned in the Test Plan
0,the writeup just simply explanin what is expertiza and the requirement for this program.
0, It has all the details about the testing for review_response_map class.
0,Since it is a test project, their variables, methods and class names are reasonable and easily understand.
0,All the variables and function names used are appropriate. 
0,Regarding the writeup,  I told the changes which I felt needed above. The code looks comparatively neat. A clear video showing the test cases running will be appreciated.
0,Write-up provides all the necessary information needed to understand the project but a brief explanation about certain methods would have been better. 
0,The unit test cases were completely fine, and covered almost all of the code.
0, It divides testing codes into parts, and described purpose of each chunk of code. 
0,Briefly covered all the possibilities.
0,As mentioned above, it lacks some depth in this.
0, For testing I don't think there are any design related thing.
0,No team could have given some info on that
0,The variables, names are well assigned.
0, The coding syle is good well versed
0,The code is written neatly and follows the suggested guidelines.
0,The code is well written. DRY concepts are used.
0, Test cases are effective, with minimal statements there is maximum coverage 
0,All the variables are defined with respect to the functionality like - max_team_size, get_participants_without_team.
0,The code looks good.
0,The code works fine for the listed functionalities. All the cases along with the edge cases are considered.  
0,the basic test cases are test well.
0,Functions and variables are named aptly
0, The test cases work as expected and handles edge cases as well
0,The code works in the edge cases also for delete an other tests mentioned.
0,def create function in assignments controller seems to be long and could have been refactored. Considering that they used most of the legacy code and most of their work was on UI, their part on ruby changes werent much 
0,Yes, the code has all the possible test cases. Many of the edge cases are covered and listed in the wiki.
0,I could not run it locally and hence I am not sure about the edge cases. Code looks clean and should not break in most of the cases
0,The youtube screenshare clearly shows the changes made and works perfectly. Since the edge cases arent defined, not sure about the functionalities of edge cases in this case as it involves UI most of the time
0,The features work as intended. Edge cases are properly executed.  
0,The code works.
0,the writeup does bot explain how and why the authors did the work the way they did.
0,The write up addresses details of all the three problem statements along with the code changes done in every file and the files added. The team has also added screenshots of the manual testing and the video demonstrating the functionality they added.
0,The write up covers all the issues and is well organized, including the code blocks and the screenshots.
0,The Documentation is well written and indicated clearly what was the problem tackled and how it was approached and solved
0,Yes, the team has clearly stated the problem statement and the changes they have done to provide solutions to the problem. They have been given 3 problems to which they have clearly provided the names of the files and the part of the code which is changed. The video explains the problem and the implemented solution perfectly without any ambiguity.
0,The write up clearly explains about the modifications made in Expertiza.  It indicates the functionality of their work which is topic management and the problem statement is clearly elaborated. It provides the files changed and also the code snippets in which the changes are made. The write up also provides visual representations of the changes made. 
0,writeup is very well written, contains enough screenshots and explanations of the code.
0,There is no explicit test plan section, but all the scenarios are covered with appropriate images.
0,The team has explained the issue and the solution they chose with enough details to understand to way of implementation.
0,The wiki for this project contains tons of useful information about testing and rspec. I am not sure that some of it needs to be explained to the current extent (example: what unit testing and TDD is or the environment set up). They are nice to include but maybe less as the purpose of the project is not to educate on those topics. Overall, this wiki did an outstanding job of describing the purpose of the project.
0,They have clearly state what the platform is and what they have tested.
0,This wiki is the most comprehensive one I've come across. Right from the basics of Expertiza to unit testing to developing and explaining the test cases, everything has been done to perfection. Also, the result and the explaination for choosing the test case is provided, which is very much appreciated. 
0,I think this team has done a nice job on the writeup of unit test, which contains every functionality of their work and is easy to understand.
0, The writeup Problem Statement section is very clear about what their work related to.
0,The wiki document coherently specifies the overall procedure adopted by the team for the project. From the page, it is seen that the team have given a general overview of the project scope and additional functionality and references used towards the working of the project. 
0,wonderful job with 100% coverage
0,All the tests passes with 100% test coverage. Great work!
0,The team has worked well on changing magic numbers to reasonable variables. For example, 1 to item.  
0, All variables, methods and class names look reasonable. 
0,From the pull request, it is clear that the team wrote test cases for the menu model and achieved a 100% coverage that checks for most of the edge cases. The variables included the mock instance have been adequately used for testing the methods.
0,good job
0,The code is "dry" enough with some "before" statement to prevent duplicate codes.
0,code style is perfect
0,The code properly provides test cases for both the Menu class and the Node class(in the Message class). The code follows the DRY principle such that all the test cases use the variables and scenarios appropriately.
0, All the test passed.
0,Tested in the links given, the changes are working correct. The server is up and I was able to reflect the steps mentioned. 
0,The write-up is very clear and directs user to the main issue very well. The flow is very structured, in the sense that first it gives a high level view of what expertiza is, it then tells about the book-mark functionality, and then tells the problem and how they came up with the solution. One of the most professional wiki I've reviewed.
0,Yes. The test plan is present in the writeup. Also, the links to youtube videos for the demonstration was particularly helpful too.
0,Yes. the variables have been very keenly named. Especially in the file, _rubric.html.erb, the variables are very accurately and effectively named, as there could have been much confusion otherwise. Kudos for that.
0,All of the features mentioned by the author works successfully in the demonstration as well as in the manual tests performed by me.
0,The writeup is clear. It is easy to understand what the project does.   
0,The write-up only tells what is to be done and how it is done. The rational behind choosing the approach is not mentioned, neither are any of the principles mentioned. It has comparisons between the previous and new versions and why they made they made the necessary modifications.
0,The authors considered different pre-conditions, edge cases, invalid input values, and other possibilities and i clearly well written. Test Plan looks complete
0,The variables, methods and class names are aptly named. I could not find names which are not suggestive of functionality.
0,Great work. Clearly Understandable. Functions are of appropriate length, Codes are in appropriate methods, Code is very well commented, Code follows ruby style guide. Good naming.  
0,Good work on including test cases. The app works fine after testing.
0,Could not detect any flaws. Works exactly as it has been been in the wiki. Good guidance. 
0,Testplen looks exhaustive and is explained well.
0,All the test plan is converted to automated testing.
0,They have included a test model video in which all the test are passing. It looks complete
0,Yes, it looks they have converted all the cases into the Test Plan.
0,The variable and method names are apt.
0,The code follows the DRY principle.
0,They do work as intended.
0,All the cases are covered.
0,Testing isn't applicable to this assignment. 
0,The authors have not converted test cases into automated tests. However manual testing has been shown in the vedio link attached
0,All provided variables are well assigned.
0,Good thing would be to increase the test coverage.
0,Variables and methods seemed intuitive enough
0,The functions added are not too long. This is the minimal amount of code that had to be added to implement the changes.
0,The commits show contribution by only 1 author. The code does not smell DRY.
0,As mentioned above, and also stated in the video and the pull request itself, the author has covered up everything.
0, 
0,hey variables follow all the stanard conventions that it needs to.
0,Not possible to test work manually.
0,I cannot find the code
0,The test cases given by the team work as described. The features are implemented accordingly. The edge cases are considered while designing the mocks. In general, all the code for test cases works as specified.
0,The code is DRY however, certain sections of the code could be shortened further.
0,Video seems fine, covers all the cases with 100% coverage.
0,More comments are needed.
0, It has all the details about the testing for review_response_map class.
0,The unit test cases were completely fine, and covered almost all of the code.
0, It divides testing codes into parts, and described purpose of each chunk of code. 
0,everything seems to be working fine.
0,Briefly covered all the possibilities.
0,Since the code is not deployed, manually testing cannot be performed. But, the screencast shows that all the manual testing is passed.
0,From the video it seems it should work fine with the edge cases as well.
0,Manual testing could not be performed as the link to the deployed application was not available however the vedio link attached sufficiently demonstrates how the features work.
0,all the scenarios including the corner cases are working fine. No issues or problems were found with the functionality. The only issue is related to the CI built which is failing at the moment. The team needs to analyse the root cause related to the build failure and fix it. Other than that it was a great team effort!  
0,The write up seems quite understandable. 
0,The write up is well written and explain how and what is done in the project regarding all the issues.  Just one suggestion- it would have been great if the screenshots were uploaded corresponding to the changes made. But, otherwise the writeup is understandable. 
0,Yes, the project is to do 2 things : 1. Stop teams from dropping assignments very late / close to deadline 2. Have different deadlines when assignments are done at different periods. The wiki should be created on expertiza page and not on wikipedia site.
0,The write-up is clear and clearly explains the issues corrected.
0,The wiki is well written and contains all required information regarding the project. The screenshots can be included in the wiki and the code pasted in the documentation could be formatted. The team also need to inlcude the test plan section in the wiki. Apart from this , the team did a great work.   
0,Good, but lacks readability. The code is directly copy-pasted in the approach section. You could have used the pseudo code with proper explanations. The structure and formatting should be improved.
0,No test plan is included but it seems that team have covered all the scenarios properly.
0,The write up does not have a test plan.
0,I found the test cases to be sufficient. No suggestion needed.
0,I don't think there's any testing involved in this assignment.
0,Writeup doesn't has a test plan but in the video they have tested a lot. Also please add audio as well in your video explaining what you are doing and why so that its easy for the user to understand, otherwise watching 23 minutes silent videos is just to much.
0,No proper test plan has been mentioned yet in the write-up. But a link to demo vedio is available which includes the manual testing case.
0,Test plan section is missing.
0,Writeup clearly explains why the team followed the particular approach and additionally mentions all the steps followed,thus defining the approach clearly.
0,The writeup does talk about the changes and why the authors did it that way.   Rather than pasting the code (without any indentation) in the wiki page, the authors could have pasted screenshots of the code! This might have made it easier to comprehend.    
0,The readme was sufficient to explain details about the idea and also both the videos explain stepwise how this is achieved and demonstrates it. Also the bugs are fixed and droptopicdeadline has been integrated into the code of this assignment.
0,It's hard to understand the code you have changed from writeup. I saw the changes in your pull request it looks good to me.
0,Not very comprehensive.
0,Yes the tests are automated, also the command to run the test is given in the wiki.
0,the code follows Ruby style guide. the code does not contain long methods. the variables and functions are properly named.
0,They have covered all cases which they mentioned in the Test Plan
0,Since it is a test project, their variables, methods and class names are reasonable and easily understand.
0, The coding syle is good well versed
0,the code does follow the ruby style guide.
0,The code is written neatly and follows the suggested guidelines.
0,The code is well written. DRY concepts are used.
0, Test cases are effective, with minimal statements there is maximum coverage 
0,The code looks good.
0,The code works fine for the listed functionalities. All the cases along with the edge cases are considered.  
0,the basic test cases are test well.
0,The code works in the edge cases also for delete an other tests mentioned.
0, The test cases work as expected and handles edge cases as well
0,Yes, the code has all the possible test cases. Many of the edge cases are covered and listed in the wiki.
0,There are no changes to any files in the spec directory so there are no new tests.
0,No tests were added.
0,New method names and variables are fine, however this team did not add a lot of new classes, methods, etc.
0,2 failed and 1 accepted. 
0,Their code changes are little, though they have handled naming conventions in a good way, as illustrated below. def self.handle_duplicate  
0,The work done is successfully implementing the required changes
0,all the code looks well written and dry to me.
0,The handle_duplicates function has a lot of white space and print statements left in it. It could've been chopped up into tiny sub-functions too, hypothetically.
0,1. Functions are of appropriate length and well structured with respect to the purpose in question.  2. All code has been suitably well put into the methods with their intended function and work cutout for them.  3. No, the comments have been well placed and self explanatory making it easy to follow.  4. The code does follow the ruby style guidelines and is thorough in that regard.  5. Nope, all code is consistent and to the point. 
0,The code contribution is significant. The function such as import_team_members shows good coding practice and following Ruby code standards. 
0,Their code changes as per the pull request is less.  They have done justice to the little code they changed.
0,The code is well written following the concepts
0,Worked as documented
0,Minimal changes were made to the test suite and new tests were not written for the new code.
0,No test plan. Don't know why this question is even asked.
0,Methods, names etc are used according to the functionality. As mentioned earlier half the code changes are explained.
0,Code is good enough.
0,The variables, methods and class names are aptly named. I could not find names which are not suggestive of functionality.
0,The names seem to be appropriate to their functionality.
0,Well written
0,1. Functions are of appropriate length 2. Codes are in appropriate methods 3. Code is very well commented. Overall, great work. Clearly Understandable.
0,Basic functionalities working 
0,Workflows worked properly when I tried.
0,the writeup is understandable.
0,The write up is well made!
0,Wiki page is clearly and neatly written. I could understand what the project does. Writeup also has code snippets which has been modified.
0,The writeup is good and it clearly meantions the issues to be fixed in the problem statement and the code modified is also displayed.
0,Write up is easy to understand and follow.
0,No test plan required I suppose.
0,Yes the writeup mentions why the authors did the work the way they did it by clearly posting screenshots of the code modifications done by them.
0,Yes, the team has efficiently detailed all the details about the projects and the need for their changes to providing code of their changes. They have also attached coverage and test run screen shots for references.
0,They team has thought through efficiently to use design options that avoid test reruns and to dry out some mocks settings
0,Yes they have come up with all possible inputs, edge cases and wrong data entries to check the system behaviour is not faulty
0,Yes there is no unreasonable function names and all method name are suggestive and apt
0,yes they have automated test and all of them pass
0,The wiki clearly defines the primary objective of the project and justifies the reasoning behind introduction of additional helper constructs like participant factory. The authors complement the descriptions of each test case with associated block of code and elaborate on the details of their inner workings. I would suggest removing parts like high level descriptions of Expertiza and Unit Tests (http://wiki.expertiza.ncsu.edu/index.php/OSS_E1852.rb#Unit_Test_Description) because they are redundant in this context.
0,The test plan is comprehensive and fully covers all the methods and cases that are part of the object under test. Running the test suite yields 100% overall coverage.
0,Every test case that is provided on the wiki page is part of the automated test suite. There are no cases of failing tests.
0,Running the code manually resulted in the 100% coverage of the object under test.
0,Yes, it is easy understand that it is a testing project and how it is done.
0,It explains clearly what tests are missing and how the coverage is increased.
0,The plan looks good and it covers a lot of cases.
0,All the code is in a single file as it tests a single model and it seems to cover it extensively. It also looks like there's no DRY issues.
0,Yes and it all passes too.
0,Yes they have explained everything.
0,It looks great. Everything is followed.
0,Code seems to be concise and well written.
0,Since coverage is 100% and the code looks good to me, I am assuming it works fine.
0,The writeup is clear and easy to understand.
0,Yes.
0,The test plan look complete enough.
0,They kept working on it and did really impressive.
0,YES.
0,The features work as intended
0,The wiki page provides clear details about the work, and very easy to understand. 
0,It is a testing task, I assume there is not any design needed.
0,looks like edge cases and invalid inputs are handled.
0, 
0, 
0, 
0, 
0,For every tested method, they explain what they did and why they did it.
0,Names for variables, classes, and method are properly named and make sense.
0,This was a testing project and the mocked objects were appropriate. The code is DRY. There is no redundancy in the code.
0,All the cases discussed in the test plan have been implemented. Well done in achieving 100% test coverage and passing all the tests.
0,The features work as intended, they cover the test cases and edge cases as well.
0, They even wrote down their plan to accomplish the project! I love it.
0,Magic. How did they know they needed a Test Plan?!? They did a great job laying out how they created an environment to unit test Participant with their design choice, and chosen variables and factories.
0,So fresh and so clean, clean! This code is too neat to even be dry. Too hot to touch. I'm just still super impressed by the wiki and the video.
0,over 9000! I mean 90%! Great job testing Participant y'all!
0,After working through several edge case side effects, by hand, up hill, both ways, it looks like all of their bases are covered and edge cases satisfied.
0,Not many functions defined. Only database changes made and inbuilt function used.
0,Pull request build passes well and there are no issues.
0,The naming conventions are followed as per standards
0,I think the code looks good and very much follows the Ruby Style Guide. The code also is DRY. It looks well written and does not any changes.
0,Follows ruby standard codes. Already implemented functions are changed and have stayed away from adding too many functionalities. 
0,Everything works fine according to me.
0,Very precise write-up with nice details on how the fixes were applied.
0,The written explanation is good. Add few screenshots of the change to be able to understand the changes done visually.
0,The write up is detailed. All details are mentioned including files involved, solution as well as test plan and how they have done or implemented the solution. The code snippets also gives good idea of the project work. The first part gives detailed background of the project. 
0,Enough details has been provided.
0,Yes it explains with clarity the issue at hand, UTF-8 only support & how that causes trouble. Also improper formatting of HTML tags.
0,I think the test-plan is complete and most of the edge cases are covered.
0,Testing was not part of the requirements. Team did manual testing.
0,They have included test plan but few examples and screenshot of their work would have been a plus point.
0,I understood the write-up pretty well. I also liked to way the fix was implemented
0,Yes, the writeup explains explains how the authors did their work and they have mentioned the steps behind each functionality. They have not used any design principles or patterns. 
0,Yes, team has explained why they worked in certain way.
0,It explains their approach and issues they encountered like latin format, storing html tags and how they fixed it.
0,There is no Test Plan section at this time. However, the authors did include some discussion of edge cases and the fact that the initialize function required testing of known success case and potential failure. I think that this is sufficient without the inclusion of a Test Plan section. I would suggest that since this rubric calls for the section to just rearrange the content of your current page. Also, include the additional edge cases that you have already tested for in the other functions possibly with some specific examples. This will allow for a more thorough Test Plan section.
0,Variable names and test cases are name appropriately. Test cases context, describe, and it statements are clear as to the division and purpose.
0,The code is written very neat and follows suggest guidelines. Authors have done a great job with the DRY principle and bringing out statements that would have been otherwise repetitive in the test cases.
0,The authors seem to have considered most edge cases and pre-conditions. The section isn't explicitly named 'Test Plan', but the necessary content is there.
0,Everything is described clearly and the functionality added is easy to understand.
0,All code is formatted well and neatly, with clear functionality.
0,All tests designed were to be automated.
0,Nothing to manually test. 
0,The write-up is descriptive and shows code from the _spec file paired with explanation.
0,The pseudo-code test plan does a good job of explaining the functionality of the tests without being clogged up by implementation details. I do suggest putting it closer to the top of the wiki page though.
0,All tests pass, and 100% coverage was attained.
0,Very nicely written document with test-plan which explains each test case , why it is written and what it tests n simple English language.
0,very nicely articulated description of all 29  testcases.
0,Rspec code looks good.Proper comments and good variable name usage are 2 things i will suggest to improve. Very good work overall.
0,Yes , all 29 test cases have been automated. The youtube video describes it perfectly
0,The tests run successfully even when cloned and run in development environment on VCL.
0,Tried to cover maximum test cases and explained well in the document with the coverage and video
0,The write-up explains the tasks adequately enough for a user to understand the expected outcome. 
0,They have explained the tests that needed to be implemented to verify the working of the functionality. 
0,The test plan looks complete enough, they have covered most of the cases. The test coverage has increased a little bit.
0,The write up is very clear, methods and test case are explained in a neat way
0, The procedure and intention for writing the test cases is clearly mentioned
0, All the scenarios are covered. Even the branch cases
0,All of the above 5 criteria are met.
0,Yes most of the edge cases is checked.
0,The writeup has documented all the changes they have done, but could have been more elaborative on the exact functionality of menu.rb. 
0,No, all method names and describe provided are apt and to the point
0,yes and all cases pass
0,Their tests are very straight-forward and can be extended to test few edge cases
0,Authors explain the test destination vividly.
0,Yes.
0,All variable names are reasonable and easy to understand.
0,Neat code and well established form of the test.
0,Yes.
0,Test plan looks very generic.
0,Test plan is given a appreciable thought and team has also implemented test scenarios mainly in student_task_controller_spec.rb Would suggest team to try and increase test coverage.
0,Good work on including test cases.
0,The code changes are well organized and nothing is out of place.
0,I could see commit performed by only single team member. 1. Functions are not too long or repeatative. 2. No code needs to be extracted as a new function. 3. Yes team need to add more comments. 4. Team does follow Ruby style guide. 5. Team understood rails and followed DRY principle well.  
0,I feel some comments can be added before every function for the code to be understood better.
0,1. Functions are of appropriate length 2. Codes are in approriate methods 3. Code is very well commented. Overall, great work.
0,the features added seem to be running good .
0,The code works as it should.
0,The wiki documentation has been updated. All the information has been documented in a neat and logical manner. The write up adequately provides what functionality the work is related to. The project changes to the code have been described in paragraphs which could have been better if they could have updated with code snippets and screen shots of the tasks at hand.
0,Wiki has been well written, with enough clarity and description
0,It is clear what the project does and why it does it.
0,The writeup is clear. It is easy to understand what the project does. It would be better if you can put in more code details and major pieces that do the important logic.
0,The writeup is pretty clear.
0,The test plan section is present, and it is covering all the scenarios.
0,They seem to have included a testing plan have mentioned it in their report. They seem to have considered edge cases and other possibilities.
0,Not much has been explained about the test plan. The authors have, however, explained how they will be going about the testing in general. An overview is provided which is clear to understand.
0,More details are expected in the Test Plan like edge cases, normal cases.
0,The writeup explains everything regarding why and how the steps were carried out.
0,Wiki has been well written, with enough clarity and description
0,They have explained how they have implemented each task by adding/editing files.
0,Yes, the writeup explains what the authors did.
0,The team has created a new spec file to test all the issues of the PR.
0,Yes, the cases discussed have been converted into appropriate tests. 
0,Adequate testing was performed using RSpec tests for both the issues.
0,They have converted the test cases mentioned in the test plan into automated tests. The tests have been implemented as mentioned in the write-up.  
0,The team has made minimal changes in the code to fix the issues. No new class, function or variable has been added.
0,All tests pass.
0,Yes.
0,No automated tests. But the fix seems to be working fine as per the test plan provided.
0,No issues found.
0,The newly added code adheres to ruby programming standards.
0,The names used seem appropriate to their intended functionality.
0,The variables, methods and class names are named appropriately. The variables used in the program suggest the functionality.
0,There are no additions in terms of methods or any new implementation. There are minuscule changes done so it still follows the existing standard. 
0,There were not many big changes. All the changes are crisp and to the point.
0,The team has done well not to over complicate the issues and have resolved them with relatively few additions.
0,The code follows Ruby style Guidelines and is DRY.
0,The code resolves all the issues as per the problem statement and the features work correctly.
0,It works as expected.
0,Seems to be working.
0,The features for the issues fixed work as intended.
0,The team has explained the problem statement as well as the approach they has chosen with lot of details. It makes it very easy for end user to understand details of the project.  
0,Write up is clearly understandable. Systematic approach taken to fix the issue.
0,Write up is quite impressive. I was able to understand the project through write up.
0,The write-up is good and clearly mentions the issues to be corrected.
0,The problem is explained clearly and the implementation plan is also described elaborately. The explanation helps in understanding the project very well.  
0,The team has included test plan as well as the screenshot of the manual testing.
0,Write up has test plan with clear steps and screenshots.
0,They have covered few edge cases. Just a suggestion to include result before and after fixing the issue. May be juxtapose it.
0,Yes, the project deals with an issue related to names, such as not allowing whitespaces , etc. The test verify that the issues are now solved.
0,The test plan looks good. It includes both manual testing and automated testing by writing Rspec tests.
0,Yes the team has done great job in the write up It is properly indexed and addresses details about each issue and its solution.
0,Write up explains about the problem and how it needs to be fixed which seemed logical
0,They standardized the team name generation and fixed the username without space. For design patterns I think they didn't used it may be it wasn't needed
0,No write-up available rn
0,The write-up clearly mentions the issues to be fixed and the code changed to fix each issue.
0,The write-up explains the approach used and the code used for implementation very clearly. The test plan is also defined extensively. Screenshots help in understanding the implementation more. They did not use any design patterns. 
0,All test cases seem to be passed.
0,Ruby coding practice seem to be fine. Class and variable names are apt.
0,method names and variables are used aptly which helps in easy understanding
0,The newly added variable, methods, class names are written properly. The names indicates the functionality implemented by respective names.   
0,Function and variable names seemed to be appropriate enough. The names suggested the functionality. No suggestion is needed.
0,All the names are intuitive and reasonable. Good job following naming conventions!
0,The naming conventions are properly followed. In case of Ruby, snake case has been properly used and in case of JavaScript code, camel case is used. 
0,3
0,Methods are not too long and each function is performed in the appropriate method
0,1. Functions and logic are written properly without long functions and dead or messy code. 2. No . Team has provide good modularization. No need to extract code further into more functions. 3. Code was understandable and easy to understand. 4. Code does follow ruby style guidelines. 5. Code and packages follow DRY principle. 
0,Code seemed to follow the ruby style guide
0,none of the functions are too long   could find changes where DRY principle was violated   the code follows ruby convention and guidelines   comments were included wherever necessary. the code is easy to follow.   Good Job!
0,The code is well written. The function length is also well within the required bounds. Comments adequately convey the info about the functionality that is implemented. 
0,They have not provided a link for the deployed so cannot test anything but they have provided a video and according to that everything seems to be working
0,Not deployed but the video provided which includes the demonstration of the fix.
0,The manual testing done in the screencast seems fine. The features work correctly
0,Everything is explained in detail
0,Issues explained properly and change as well. The modifications are demonstrated using screenshots which helps in better understanding.
0,The test plan seems to be complete enough. No additional pre-conditions and edge cases are required.
0,Issue 1 under solutions tab is actually the third point discussed in the Fixes Required.It could be discussed as Issue 3 rather Issue 1 for better clarity. Only the solution for one issue is discussed. (?) The discussed solution is again well-defined with adequate screenshots.
0,One test case visible. 
0,yes the functionality still holds good.
0,Decreased to 12%. 
0,The test coverage on the contrary decreased
0,The names are intuitive.
0,The variable names look fine, methods names are also meaningful.
0,1. Some Functions are of huge length and adequately structured with respect to the purpose in question, but I am assuming the complexity of the question requires so.  2. All code has been suitably well put into the methods with their intended function and work cutout for them.  3. No, the comments have been well placed and but are very strange and vague at some places suggesting an amateur approach.  4. The code does follow the ruby style guidelines and is thorough in that regard.  5. Nope, all code is somewhat consistent and vaguely to the point. 
0,Not really clear. Lines have been changed. No specific functions. But it shows good coding skills.
0,The project's purpose is to refactor the code. Hence the code has been separated into different files for better understanding.
0,I can see a file changed and the code in it looks to follow the concepts which needs to be followed
0,The code follows Ruby standards and DRY principle.
0,The code seemed ok to me.
0,The functionality does work. Some errors are visible as shown by Git. 
0,Cant really know what exactly is completed.
0, Some of the common edge cases work as per expected
0,They were not required to write automated tests as far as I know
0,The newly added code does adhere common HTML standards. The only other change is to the db schema.
0,Variable, methods and class names seems as per coding standards and variable  names are making it easy to understand the logic code. Hence names used are reasonable. 
0,The only change this team had to do was add color codes for the various types of links that come up while reviewing. This would be hard to mess up.  And the team has not messed it up. Good Job guys.
0,The added code is easy to understand and not complex.
0,The code added is extremely easy to read, follow and understand.
0,repeated style tags
0,Looks good.
0,The code follows Ruby guidelines. However, since the project involved just adding colour to certain links there was no point of the code being DRY. In fact, reviewing this project doesn't make sense since the project was literally just changing 3 lines of code, NOT THAT IT IS THE FAULT OF THE TEAM.
0, The code is complete and does what it was intended to do.
0,The implemented solutions work in the deployment
0,There are just the changes in the button colours required which are working as expected.
0,Yes. Team has resolve the issue very well and also taken care of edge cases.
0,The changes in this project were simple enough to work for all edge cases.
0,Looks great.
0,Yes. The team clearly indicates in the wiki, what this project is related to and how they went about to complete the given task at hand. I'm not sure about this, but maybe the heading for the wiki is incorrect. This project is listed as E1828 in the list of OSS projects. But the team have named it as E1785. This may be a mistake on the team's part, if so, I would suggest them to correct it.
0,The document is well described with details on Expertiza, its purpose. It also details the files related to their assignment.
0,Explained very well.
0,There is no scope of a test plan with changes made to the view.
0,There is no explicit test plan mentioned in the wiki. But for this project I don't believe one was needed.
0,The writeup doesn't has a test plan, but the work they have done is on UI i.e. colouring the links. So there won't be any edge cases as such to fail in this project.
0,They have explained the changes they have done and why they have done them. 
0,The project was to change the colour of certain links to depict certain statuses. Since the complexity of the project was not high there was no scope to use any design principles or patterns.
0, The write up explains each and every thing which they implemented
0,The code change seems simple enough that does not require any design principle or patterns. Whatever the code changes are, explained properly and coding principles with required output.
0,The write up does intend to capture the changes that have been made, there isn't much for them to explain and thus the writeup seems short. There isn't much scope for the team to have used design patterns in a project which involved making cosmetic changes to the views.
0,The authors have implemented every test case that is discussed in the test plan. Detailed explanations and code itself is provided in the project's wiki page.
0,The write is very descriptive and included code from both the model and the spec file.
0,The writeup explains how the tests relate to their respective methods.
0,The added tests look very clean.
0,Everything in the wiki was a test.
0, Looks good. Explains what work is done and what is the corresponding output
0,Coverage has increased by 7 percent overall
0,Does not apply as its a testing project with most testcases written in a single Rspec file to test the functionality
0,Yes all 17 test cases are automated
0,Tests work
0,very clearly writeup.
0,Functionalities have been tested properly.
0,Naming conventions are followed. Test coverage has increased.
0,FuncyFunctionalare of correct length.
0,Test cases are present. 
0,Video covers how to run the test cases which are clear and understandable.
0, All variables, methods and class names look reasonable.
0,the document contains the whole information including the test plans and the the expertiza environment setup. It is neatly documented as well which makes it more readable
0,Yes the have mentioned all of the required work and its related explanation. they have reasoned out their exact methods and the issues to be considered while testing in the problem statement. 
0,Yes the test appears complete as they have mentioned all from setting up the expertiza environment to the tests that they have implemented along with the plan of the they executed their project
0,it follows the standard ruby practices . All the variables , methods and class name look reasonable. The added tests looks very clean
0,Yes all  the 17 test cases are automated. They have reached the goal of 90% coverage . 
0,It is well written, quite understandable. It clearly and adequately indicates the working functionality. I can understand what the project is about.
0,Yes, the writeup explains explains how the authors did their work and they have mentioned the steps behind each functionality. They have put a video explanation of the same.
0,Yes, the Test Plan looks complete and includes all the test cases and the actions.
0,Pull request build passes well and there are no issues.
0,Well, the code looks good and very much follows the Ruby Style Guide. The code also is DRY. It looks well written and does not any changes.
0,Yes, the admin has included the Test Plan cases in the automated tests.
0,Yes, after testing the work manually, I could see that their features are working as intended.
0,Again, since their entire project is on RSpec testing, so this aspect has been well taken care of. 
0,As mentioned by the team, more code needs to be added for 90% coverage.
0,The tests are included
0,The variable names seems good
0,It follows the DRY principle
0,Difficult to understand what are the changes .
0,Code written follows the Ruby Style Guide.
0,1. Functions are of appropriate length and well structured with respect to the purpose in question.  2. All code has been suitably well put into the methods with their intended function and work cutout for them.  3. No, the comments have been well placed and self explanatory making it easy to follow.  4. The code does follow the ruby style guidelines and is thorough in that regard.  5. Nope, all code is consistent and to the point. 
0,Very well written, clean and concise.
0,It seems to work well.
0,Manually Tested the Test Code and 97% covered(validated via Coverage.index file)
0,All the tests pass successfully.
0,Yes. I can understand the intention of the test. Nicely done
0,Feel a pretty good job has been done.
0,Since, their entire problem relies on the RSpec testing framework itself, they have implemented it in a good and a concise manner. 
0,Yes, testing is thorough 
0,The writeup does a good job in explaining how the authors did the work they did. 
0,Yes.
0,Basic test missing.
0,Seems like some tests have failed.
0,Yes, converted Test Plan into automated tests.
0,The authors have converted all the cases discussed in Test Plan into automated tests
0,The names of variables and methods are aptly chosen and clearly understandable.
0,All the method names/variable names and class names are intuitive and according to Ruby standards.
0,All the names are intuitive and reasonable. Good job following naming conventions!
0,No long functions No separate methods required. Follows Ruby Style Guide.
0,The code does follow "good Ruby and Rails coding practices". No bad naming. Every file is properly named based on their functionalities. I cannot find issues with coding. One method handles only one task. I could not find any bugs in the system and this works exactly how it is supposed to work.
0,The code is concise with 3 functions in the controller. Sufficient comments are used to explain the logic. The code follows the DRY principle, as there is no repetition seen in the code. 
0,The code follows Ruby Style Guise and follows DRY principle. None of the functions is too long.
0,none of the functions are too long could find changes where DRY principle was violated the code follows ruby convention and guidelines comments were included wherever necessary. the code is easy to follow. Good Job!
0,Yes, works properly.
0,Test case implementation is not done.
0,No bugs found. Works as intended. The System works without any glitches. 
0,The features perfectly work as intended.
0,Explained clearly in the wiki!
0,Explains well. Consists of all sub topics.
0,The wiki has been written in a very clean and readable way. It is very legible and I could understand what the project does and how the project does what it does.
0,The writeup is very nicely written. By reading the background section, anyone can understand the functionality the project is related to.
0,The wiki is well written and contains all required information regarding the project. The screenshots included in the wiki could be more specific with the details of what would the student view and default view. Apart from this , the team did a great work. 
0,Yes, considers all test cases.
0,The test plan looks complete.
0,The team did a great work in creating automated scripts for the cases related to the scenario. The scripts are also included in the automated test plan.  
0,Write up is explained in detail.
0,Explained well.
0,Yes, explains correctly.
0,Yes, the team has clearly explained, the code which is written to avoid the confusion due to the presence of two "Assignment " tabs in the Instructor view. Appropriate comments are provided to understand the logic behind the methods.
0,Nicely written write-up explaining details about various issues, fixes, and tests.
0,seems like test cases cover the edge cases.
0,Nicely written code
0,Everything seems to be working fine for me
0,Yes, the writeup is pretty clear.
0,The code looks good.
0,Yes lot of new tests added and the addition of the tests has 92% code coverage. Great job
0,Pretty good at this part, they list almost every testing case in the wiki, talking about what condition it is and give the code.
0,All of the codes seems "dry" enough, have some "each" statement to prevent duplicate codes. 
0,They did all of them.
0,All the test case works.
0,The writeup clearly explains what the team has implemented. It is very clear and can easily be understood. test case for each and every step is clearly explained.
0,string passed in "it" clearly explains what the test case is going to do. as it is a unit test, there are not much variable that are named. already assignd variables are used.
0,none of the functions/cases implemented are too long. they are short which are easy to figure out what is actually being implemented. The code is easy to understanf so there is not much need of comments but some should be added
0,Excellent write up. Includes all important details. It is one of the most intuitive write up so far I have reviewed. 
0,Few new names were added, and they look fine.
0,2 failed and 1 accepted. 
0,The work done is successfully implementing the required changes
0,There are many places where "puts" statements are used where a logger statement should be used. There is also a set of if/else blocks that check to see if a variable is of a certain type, which could have been abstracted with an appropriate design pattern.
0,1. Functions are of appropriate length and well structured with respect to the purpose in question.  2. All code has been suitably well put into the methods with their intended function and work cutout for them.  3. No, the comments have been well placed and self explanatory making it easy to follow.  4. The code does follow the ruby style guidelines and is thorough in that regard.  5. Nope, all code is consistent and to the point. 
0,The code contribution is significant. The function such as import_team_members shows good coding practice and following Ruby code standards. 
0,Their code changes as per the pull request is less.  They have done justice to the little code they changed.
0,The code is well written following the concepts
0,The menu which they emphasized on, seems complete and running
0,1. Functions are of appropriate length and well structured with respect to the purpose in question.  2. All code has been suitably well put into the methods with their intended function and work cutout for them.  3. No, the comments have been well placed and self explanatory making it easy to follow.  4. The code does follow the ruby style guidelines and is thorough in that regard.  5. Nope, all code is consistent and to the point. 
0,The writeup is extremely clear. I understand each issue they address.
0,this is refractoring project , doesn't involve new test cases . 
0,All the cases discussed in Test Plan have been converted into automated tests.
0,Variable and method names seems to be appropriate.
0,The variable/method names and class names are intuitive and follow Ruby standards.
0,Code adheres to the Ruby coding standard. The team has also implemented strategy design pattern.
0,The code is more about the changes in the database and it does follow the standards.
0,The code follows Ruby Style Guide.
0,refactoring is done really well. there were no violation of DRY principle
0,The code follows DRY principle. None of the methods needs to be broken down into separate components.
0,Code is concise as mentioned  Methods are extracted into separate methods Comments are sufficient I could understand it The code is as per Ruby guide Most of them are DRY code
0,The features are working as per intended plan of work.
0,Most of the edge cases cover 
0,The write up addresses the problem statement and explains about the background of the functionality.
0,writeup is clear and easy to understand . it covers all the work
0,Very well written. 
0,The writeup gives us enough clarity to understand what the project is about.
0,The report is detailed enough to explain the approach taken to refactor the code.  
0,Very well written. The purpose was clear!
0,Yes the write up is concise 
0,Authors have converted test plan into an appropriate test case. Suggestion:   The authors can improve the writeup if they elaborate more on the testing approach used for the newly added code.
0,Yes, it does explain the previous functionality and their changes will take affect. The explanation is done with diagram as well as the query.
0,Yes, explains well.
0,clearly explained about the implementation and usage of the strategy pattern 
0,The authors clearly explain how they refactored the code.  
0,They explained how they used Strategy Pattern and why they used it. Loved the walkthrough!
0,I could see a clear description of the changes and good naming conventions 
0,Test plan is given a appreciable thought and team has also implemented test scenarios mainly in student_task_controller_spec.rb Would suggest team to try and increase test coverage.
0,Good work on including test cases.
0,The variables, methods, and class names do seem to follow proper convention and are suggestive of the functionality they are being used for. In some cases they could have used a liitle more desciptive names for variables for example inside app/helpers/student_task_helper.rb  they could have used background_colour instead of rtn as a variable name in the due_date_color() method. It will become more readable for the reviewers to understand the functionalities.
0,The variables, methods and classnames are aptly named. I could not find names which are not suggestive of functionaliy.
0,The code changes are well organized and nothing is out of place.
0,In due_date_color switch case would have been a better approach then if else if block. Lots of code that is done in view can be moved to the controller. Follow MVC architecture. 
0, The functions seem to be implemented in a good manner and the code seems to be DRY.. In some cases though the authors could have improved as in the i app/helpers/student_task_helper.rb  file. In side the due_date_color method they could have used case expressions in Ruby instead of the if else logic implemented as that would be a more Ruby on Rails way of doing it. As it will reduce the lines of code as well as being a more elegant way of handling it.
0,1. Functions are of appropriate length 2. Codes are in approriate methods 3. Code is very well commented. Overall, great work.
0,the features added seem to be running good .
0,The code works as it should.
0,Writeup is readable and written properly. Team could have added code snippet and pictures of changed or improved functionality. Also team could work upon formatting and could also add links and references.
0,Please include the code snippet that was changed and also a screenshot of the view before and after the change.  Also, Please provide the link to the pull request and not the repo created. Good written explanation of the changes done in WIKI.
0,The wiki documentation has been updated. All the information has been documented in a neat and logical manner. The write up adequately provides what functionality the work is related to. The project changes to the code have been described in paragraphs which could have been better if they could have updated with code snippets and screen shots of the tasks at hand.
0,Wiki has been well written, with enough clarity and description
0,It is clear what the project does and why it does it.
0,The writeup is clear. It is easy to understand what the project does. It would be better if you can put in more code details and major pieces that do the important logic.
0,The writeup is pretty clear.
0,The test plan section is present, and it is covering all the scenarios.
0,They seem to have included a testing plan have mentioned it in their report. They seem to have considered edge cases and other possibilities.
0,Not much has been explained about the test plan. The authors have, however, explained how they will be going about the testing in general. An overview is provided which is clear to understand.
0,The writeup explains everything regarding why and how the steps were carried out.
0,Wiki has been well written, with enough clarity and description
0,They have explained how they have implemented each task by adding/editing files.
0,It is better to state the change of the feature or added feature with diagram to show the difference, to state what remains the same and what is added or update understand certain circumstances. 
0,Yes, the writeup explains what the authors did.
0,The team has created a new spec file to test all the issues of the PR.
0,All tests pass.
0,Yes.
0,Yes, the cases discussed have been converted into appropriate tests. 
0,Adequate testing was performed using RSpec tests for both the issues.
0,They have converted the test cases mentioned in the test plan into automated tests. The tests have been implemented as mentioned in the write-up.  
0,The team has made minimal changes in the code to fix the issues. No new class, function or variable has been added.
0,No issues found.
0,The newly added code adheres to ruby programming standards.
0,The names used seem appropriate to their intended functionality.
0,The variables, methods and class names are named appropriately. The variables used in the program suggest the functionality.
0,The code resolves all the issues as per the problem statement and the features work correctly.
0,Seems to be working.
0,The features for the issues fixed work as intended.
0,The team has explained the problem statement as well as the approach they has chosen with lot of details. It makes it very easy for end user to understand details of the project.  
0,Write up is clearly understandable. Systematic approach taken to fix the issue.
0,Write up is quite impressive. I was able to understand the project through write up.
0,The write-up is good and clearly mentions the issues to be corrected.
0,The problem is explained clearly and the implementation plan is also described elaborately. The explanation helps in understanding the project very well.  
0,There are no additions in terms of methods or any new implementation. There are minuscule changes done so it still follows the existing standard. 
0,There were not many big changes. All the changes are crisp and to the point.
0,The team has done well not to over complicate the issues and have resolved them with relatively few additions.
0,Functions are named properly.
0,The code follows Ruby style Guidelines and is DRY.
0,The team has included test plan as well as the screenshot of the manual testing.
0,Write up has test plan with clear steps and screenshots.
0,They have covered few edge cases. Just a suggestion to include result before and after fixing the issue. May be juxtapose it.
0,Yes, the project deals with an issue related to names, such as not allowing whitespaces , etc. The test verify that the issues are now solved.
0,The test plan looks good. It includes both manual testing and automated testing by writing Rspec tests.
0,The write-up explains the approach used and the code used for implementation very clearly. The test plan is also defined extensively. Screenshots help in understanding the implementation more. They did not use any design patterns. 
0,The write-up clearly mentions the issues to be fixed and the code changed to fix each issue.
0,They standardized the team name generation and fixed the username without space. For design patterns I think they didn't used it may be it wasn't needed
0,Write up explains about the problem and how it needs to be fixed which seemed logical
0,Yes the team has done great job in the write up It is properly indexed and addresses details about each issue and its solution.
0,All of the cases discussed in the Test Plan have been included in the test file. And all of them are also passing. Very good!!
0,The tests have been properly converted into automated tests.
0,The test cases are covered in the coded.
0,They kept working on this test and improved it.
0,The names are very intuitive. The build doesn't seem to have been passed because of the indentation errors and failure to follow certain design guidelines.
0,the code follows correct name structure for variables, methods and class.
0,All the names are used properly.
0,Code contribution of all team members. The code doesn not smell dry
0,The code looks good. It seems well ordered, structured, and 'DRY'.
0,the function definition is of perfect size. the code follows the Ruby Style Guide.
0,Yes.
0,No idea how to manually test the authors file.
0,The tests all pass successfully.
0,Clearly.
0,The wiki document was very clear with respect to the responsibilities of the group. it also detailed their approach to writing the tests as well as explained the functionalities that the tests were written on. Well done!
0,The write up is perfectly written.It clearly describes what functionality the work is related to. It gives information for each aspect of the project.
0,Test plan is well-rounded.
0,The test plan is accurate and checks for different pre conditions , edge cases , invalid input values. I could not find any missed scenarios.
0,test cases are thorough
0,For the methods that include different conditions, they provided tests fo different kinds of conditions. Also, for each method, the team test various aspects of the method.
0,Well explained information about the Design and the results.
0,The write up is enough for me to understand.
0,The document explained well the work and the approach to doing the work.
0,The write up is clear with its goal. It nicely explains how and why did the author work in a particular way.  
0,All the cases are covered.
0,Testing isn't applicable to this assignment. 
0,All the tests have been added as per the test plan and have been run successfully.
0,All provided variables are well assigned.
0,Variables and methods seemed intuitive enough
0,The functions added are not too long. This is the minimal amount of code that had to be added to implement the changes.
0,No rspec tests are written to test the changes.
0,More comments are needed.
0,everything seems to be working fine.
0,From the video it seems it should work fine with the edge cases as well.
0,The write up seems quite understandable. 
0,The write up is well written and explain how and what is done in the project regarding all the issues.  Just one suggestion- it would have been great if the screenshots were uploaded corresponding to the changes made. But, otherwise the writeup is understandable. 
0,The code added in the pull request is reasonable.
0,All the names are intuitive and reasonable. Good job following naming conventions!  
0,The write-up is clear and clearly explains the issues corrected.
0,Variable names methods and class names look fine to me.
0,No test plan is included but it seems that team have covered all the scenarios properly.
0,I found the test cases to be sufficient. No suggestion needed.
0,I don't think there's any testing involved in this assignment.
0,The functions are small and well defined. 
0,The code added appears to be dry.
0,Writeup clearly explains why the team followed the particular approach and additionally mentions all the steps followed,thus defining the approach clearly.
0,none of the functions are too long could find changes where DRY principle was violated the code follows ruby convention and guidelines Although the code is easy to follow, the comments should be included for the created methods/changes. apart from that Good Job!
0,The readme was sufficient to explain details about the idea and also both the videos explain stepwise how this is achieved and demonstrates it. Also the bugs are fixed and droptopicdeadline has been integrated into the code of this assignment.
0,The functions are not too long and the code does not need to be extracted to separate methods. COmments could have been added for a better understanding of the code. The code follows Ruby lines and the lines are compressed. for eg : Unless and if statements are compressed
0,The feature works as it is supposed to. Don't see any issues.
0,Could not do manual testing as the project was not deployed but screencasts shows the testing so can conclude that it passed all the manual test.
0,The features have been implemented correctly and work well on all the edge cases.
0,They did not provide the link for me to test, only a video is provided, according to the video their features work pretty well.  
0,The write up clearly captures the functionality that the work is related to.
0,Very clear.
0,well explained in the video file
0,The write up is good as I was able to understand the issue to be fixed and the implemented approach.  I would like to suggest the team to standardize the size of their screenshots though.
0, The wiki documentation has been updated and is thorough. All the information has been documented in a neat and logical manner. The write up adequately provides what functionality the work is related to. The project changes have been well documented with code snippets. They have added screenshots of working functionalities that they have fixed which seems a good idea to convey the working functionality properly.
0,The writeup is good and clearly mentions the issues to be solved.
0,The writeup clearly explains the issues and the approach used to achieve the desired results. Suggestion: The authors should try to include the rspec test documentation, for the newly fixed issues.
0,They wrote clear and adequate description and I can clearly understand what their project does.
0,The test plan looks good enough for the fix they have provided.
0,The authors have included a thorough test plan and they seem to have considered a lot of test cases. The tests convey they entire flow properly and show that the bugs have been fixed.
0,Yes, the test plan looks complete enough and all the edge cases have been tested. The document also includes the screenshots of the manual testing.
0,The test plan is very good and there is also a video file which clearly shows the manual testing being done.
0,all the scenarios are explained in detailed. The only edge cases which is missing from the documentations is: the scenario where the TA is assigned to a instructor , what will happen to the instructors impersonated students when the TA of the constructor login to the application The team should this scenarios and include the same as the part of the documentation and automated script in the test plan.
0,They wrote many test cases I think they are enough, but I didn't find edge cases or invalid input tests. 
0,Authors have clearly explained what needs to be done to fix the issue, how it is done and why it is done.
0,No design patterns were used. The write up explains the implementation and screenshots of code explains the flow better.
0,There's not really a rationale for why these particular tests are sufficient.
0,Rspec tests look just fine and descriptions are intuitive.
0,The tests look fine. It's easy to follow what the tests do.
0,All tests pass, all descriptions in the Test Plan are just the test cases in the Rspec file, sooooooo yeah I guess they all exist.
0,Code is well written.
0,the wiki page has showed up what the expertiza is and some examples have show up what the task of the team is.
0,the work takes care of all the edge cases accurately.
0,The writeup clearly explains the problem statement
0,The test plan is not added as the part of writeup
0,This is not a fair ask. As far as I can tell, there is no document that says we should create a test plan.
0,Their variables, methods, and class names are good 
0,Yes their code works, and some edge cases are also correct.
0,All the variables and function names used are appropriate. 
0,The variables, names are well assigned.
0,All the variables are defined with respect to the functionality like - max_team_size, get_participants_without_team.
0,Functions and variables are named aptly
0,This team used migrations effectively, and generally had DRY code, but it still felt very ad-hoc. I couldn't find any patterns that drove the changes they made.
0,The code is well structured. Could have added more comments for easy understanding of the code. The functions are not long.
0,Functions are of appropriate length and code is in proper methods. However, no comments are provided what so ever.  
0,I have not been supplied with a link to manually use an instance with their changes and I have not been able to find a link in their PR or write-up.
0,I could not run it locally and hence I am not sure about the edge cases. Code looks clean and should not break in most of the cases
0,The youtube screenshare clearly shows the changes made and works perfectly. Since the edge cases arent defined, not sure about the functionalities of edge cases in this case as it involves UI most of the time
0,The features work as intended. Edge cases are properly executed.  
0,The code works.
0,No deployment is provided, so couldn't test manually. 
0,The write up addresses details of all the three problem statements along with the code changes done in every file and the files added. The team has also added screenshots of the manual testing and the video demonstrating the functionality they added.
0,The write up covers all the issues and is well organized, including the code blocks and the screenshots.
0,The Documentation is well written and indicated clearly what was the problem tackled and how it was approached and solved
0,Yes, the team has clearly stated the problem statement and the changes they have done to provide solutions to the problem. They have been given 3 problems to which they have clearly provided the names of the files and the part of the code which is changed. The video explains the problem and the implemented solution perfectly without any ambiguity.
0,The write up clearly explains about the modifications made in Expertiza.  It indicates the functionality of their work which is topic management and the problem statement is clearly elaborated. It provides the files changed and also the code snippets in which the changes are made. The write up also provides visual representations of the changes made. 
0,writeup is very well written, contains enough screenshots and explanations of the code.
0,The write-up is well explained but could have described more on the methods whey implemented and why did it implement in a certain way.
0,The team has explained the issue and the solution they chose with enough details to understand to way of implementation.
0,They explained it well, but there were no larger design patterns they seemed to be following. I did think that they used AJAX in the appropriate way, but it could be improved in the future.
0,Their solutions are well explained. The way they have explained, attaching a screenshot of a code snippet and telling, this is where we made this change, and this is how it works, gives a better understanding of their project. It could have been better if they could have compare and contrasted the previous codes, where the features where not there. That way, the background of the why this feature could have been clear.
0,Writeup explains what was to be done and how they did it, but does not give rationale behind the way they coded, and any alternative approaches.
0,Code snippets are given but need explanation. 
0,All the cases discussed in the test plan have been implemented.
0,they have done all the 29 test case and test them throughly.
0,The team has tested all the methods of the corresponding model file.
0,Well done in achieving 100% test coverage and passing all the tests.
0,Yes they have converted them.
0,work as intended to be 
0,Code style seems to be good.
0,Not find any improper variable names or method names.  
0,Names for variables, classes, and method are properly named and make sense
0,The test coverage has increased significantly from like one test to 100%. Kudos to the team!! The team's pull request hasn't passed due to inconsistencies in following Ruby styling guidelines.
0,The code is DRY enough, and the functions seem to be compact.
0,This was a testing project and the mocked objects were appropriate
0,The code is DRY. There is no redundancy in the code.
0,All the codes are of perfect length. That is actually one of the best thing about the code. It follows basic ruby style guide.
0,Code climate issues that were reported have been fixed.
0,The features work as intended, they cover the test cases and edge cases as well.
0,All tests works fine. 
0,It's a testing project and the video provided show that all test pass and they have at least 90% coverage
0,This wiki is very detailed and explains what is done for every tested method
0,The write up is descriptive and very well written. I could easily understand everything about this project. Good job! 
0,From the document I could understand the functionality on which the tests were written.
0,The writeup describes briefly and clearly what the AssignmentTeam class does in the expertiza project. It has also given the details on the test plan, test cases and explained the use of RSpec testing framework and factories. I would suggest to add a link to their video that shows the tests running in the wiki page. All in all good work!
0,The tests are very well written. They clearly indicate what functionality they are checking for.  The tests follow a language that is easy to follow.
0,The writeup matches up very well with tests written and also describes in details what scenarios are tested.
0,yes, very clear
0,Yes the Test Plan part is pretty through, they list all 29 test case they have done for the assignment_team.rb.
0,The Test Plan is detailed and comprehensive. Good job!
0,no miss
0,For every tested method, they explain why they created certain objects or did what they did
0,The writeup explains well the plan of work of the authors and the way in which they approached the task at hand.
0,Appropriate explanations are provided for the tests.
0,There were no testcases and since they provided a screenshot of the desired work. I suppose it fulfills the requirement
0,Few new names were added, and they look fine.
0,Yes, on manual testing, it leads to realization that the code has been suitably written as required by the functionalities and also the doc they have provided is the results that I get on following the procedure. Although, I would suggest that they look more into the test case 3 because how to go about testing it hasn't been explained by them. 
0,The functionality works as explained in the design document. 
0,The menu which they emphasized on, seems complete and running
0,The writeup is extremely clear. I understand each issue they address.
0,The write up is written with enough explanation. The headings shows clearly what the project is about and what kind of solution they have proposed. The solution is shown with code snippets and functionality changes, this gives further information to understand the proposed solution. 
0,They have neatly organised the solution by the each problem, the solution they provided and the screenshots of output which is useful in testing. They have highlighted the changes and explained where exactly the change has been proposed(down to the granularity level of each function call and each line) which gives a clear idea of the code. I can clearly see what the problem is and functionality the work is related to.
0,Great writup which contains all cases the task required, and it's easy to understand since there are lots of screenshots to explain their task clearly.
0,No test plan included but I feel that wasnt needed.
0,The code is simple and easy to understand. There are a lot of code climate suggested changes which needs to be completed before the code will be ready to merge  
0,Yes, the work is explained mentioning all the details
0,Of course, they lay all various details and highlight them using orange-box which is easier to understand.
0,Yes, very well done on adding tests. 
0,The variable and method names are apt.
0,The write up is well formed and structured. The entire flow is explained along with files changed/methods implemented in each stage. Could have described the approach a bit more.
0,The code follows the DRY principle.
0,They do work as intended.
0,Did not find any problematic edge cases.
0,The team have done a good job in explaining their work.
0,the related functionality is mentioned.
0,The wiki as well as a design document has been created for the write up which explains the refactoring requirements. The team has explained the technical aspects in a very detailed manner. However, it would be helpful for users if the team could add more details about the functional aspects so that a end user can test the impact on the existing functionality due to the changes done.
0,Perfectly explained write up along with the design document to get the better understanding of the issues and flow.
0,Write is clear and well written, a trivial formatting mistake ( new implementation bullets ) but that is fine.  Problem statement is well define and the existing solution too. Problem statement does not need to state that RSpec tests have been added.    
0,The team has leveraged the existing test cases to align with the changes implemented. It would have been more helpful to include the test cases in the write up as well.
0,Existing tests have been modified to changed to pass for the new implementation.  News tests could have been added 
0,writeup explains in  brief how and why the functionality of sidekiq was implemented.
0,The wiki has been documented with a lot of details explaining the problem statement as well as the approach.
0,Yes the authors explain the existing solution and explain the drawbacks for in them.  I would have liked to see a point wise comparison on how their solution overcomes the existing drawbacks.  I would suggest not to hard code the mail text/subject in the code and use a config file instead. This will be easy to modify in future. I would have liked if the authors added why they took sidekiq and not rabbitmq or celery  
0,Good work on including test cases.
0,The variables, methods and classnames are aptly named. I could not find names which are not suggestive of functionaliy.
0,The code changes are well organized and nothing is out of place.
0,1. Functions are of appropriate length 2. Codes are in approriate methods 3. Code is very well commented. Overall, great work.
0,the features added seem to be running good .
0,The code works as it should.
0,The wiki documentation has been updated. All the information has been documented in a neat and logical manner. The write up adequately provides what functionality the work is related to. The project changes to the code have been described in paragraphs which could have been better if they could have updated with code snippets and screen shots of the tasks at hand.
0,Wiki has been well written, with enough clarity and description
0,It is clear what the project does and why it does it.
0,The writeup is pretty clear.
0,The test plan section is present, and it is covering all the scenarios.
0,They seem to have included a testing plan have mentioned it in their report. They seem to have considered edge cases and other possibilities.
0,Wiki has been well written, with enough clarity and description
0,They have explained how they have implemented each task by adding/editing files.
0,Yes, the writeup explains what the authors did.
0,Mostly looks good. Can change names like this is_selfreview_enabled to is_self_review_enabled and assignment_form_assignment_num_metareviews_allowed to assignment_form_assignment_num_meta_reviews_allowed. selfreview shouldn't be a single string.
0,The code seems to have been well written with the reasonable variable names.
0, Their code is clear and reasonable.
0,The code changes are majorly html changes and not Ruby changes
0,The names suggest the functions properly.
0, Maybe some more comments will be helpful.
0,Its nicely written and follows dry principle. They have used existing functions where required.
0,The code changes are majorly html changes and not Ruby changes The DRY principle explained in the document is clear and talks about DRY being handled
0,The code is well written and follows DRY principle.
0,The features seem to work well
0,They haven't deployed it but have shown in the video and documentation the edge cases, so i think it might just work.
0,The features are working good as shown in the screencast
0,The codes work well as the team described in wiki.
0,The project has been explained in great detail. Just feel instead of using issue numbers, if the team had explained the issue in brief before elaborating on it, that would have been great.
0,The review is clear and explanatory. They have discussed all the essential topics needed - Test plans, MVC, DRY principles. 
0,They have explained every aspect of the project really well. Plus the video also show the changes they have done. One thing you can add is audio in your screencast videos, telling what is being done so that its easy for the user to understand.
0, They explained the problem very well.
0,The test plan seems to be good as they've included test plan for every issue.
0,Good detail covering how you test different issues in the code.
0,The test plan has covered various cases and completely explainable in simple terms Small suggestion, The first paragraph could have been itemized for easier understanding.
0,Yes they have explained everything in detail.
0, They showed their work with screenshots which contain some edge cases.
0,The team has a good understanding of the code and issues, they found there are two issues fill in the same category and gives good explanation of what jobs the code they have added do.
0,Yes, The authors have done a great job in explaining their work with code snippets.
0,Good job explaining your work and talking about staying dry.
0,They have discussed everything. The way they have split the features and explained it one by one with the code is good.
0,They have explained everything nicely. I don't think any specific design pattern needs to be followed here and they have mentioned as well that they are not following any as such.
0,The overall structure of the code looks good and all the coding standards have been followed.
0,Most code changes were on UI, and written perfectly. No commits after first deadline, so same as first review.  
0, I think their code is well written.
0,No new code was committed during the second round. This could be due to the fact that the team finished their code at the end of the first round itself.
0,No new commits.
0,No, but all the functionalities are working fine from 1st review itself.
0, There are no new commits.
0,In the first round the team had only created the two Web IDL  files namely OffScreenCanvas.webidl and OffScreenCanvasRenderingContext2D.webidl; which are the interface files which define the implementation in the corresponding files offscreencanvas.rs and offscreenrenderingcontext2d.rs. In this round the team has implemented the functionalities described in the two Web IDL files in offscreencanvas.rs and offscreenrenderingcontext2d.rs. The offscreencanvas.rs interacts with the javascript and hence has the constructor with attributes height and width; a method getContext() to return the reference to OffscreenCanvasRenderingContext2d; and a reflector object for garbage collection. The offscreenrenderingcontext2d.rs file does not interact directly with Javascript and does not have a constructor or reflector object. It has the code to build the offscreencanvas object.  On inspection, the variable and method names used in the code are intuitive. But the main issue is that the name of the webidl file OffScreenCanvasRenderingContext2D.webidl and corresponding Rust file offscreenrenderingcontext2d.rs don't match. The team could have formatted the code appropriately for readable indentation. There are not many comments that give a high level description of the code. Instead there are some instances of unnecessary code that has been commented. The code is indeed DRY.
0,No new commits made during the second round, as the functionality seems completed in the first round itself.
0,There is no new commits during the 2nd round.
0,The code seems to be good. It follows the principle of good design. Even though I do not know RUST, the use of variable names was very intuitive.
0,The code doesn't make sense to me, someone who isn't familiar with this project, but it does seem to be formatted well.
0,There are only minor modifications and they are well written. I don't think there is any other way it could be done. 
0,The code changes are majorly on html files. Capybara could have been used to test the functionalities The code coverage has increased overall.
0, There is no new test and the coverage did not increase.
0,Yes, there is 
0,Tests have been thoroughly and very well performed. Also, well documented. 
0,The code seems to be written well. The Ruby style guide is followed.
0,Team added elaborate Test plans and implementation for their test cases.
0,Some commits were made to rectify old errors and get an approved pull request
0, Everything works like expected.
0,Yes it works as intended. From the video, it seems everything is working fine.
0,Yes, new code has been committed in the 2nd round. The team has essentially implemented the offscreencanvas.rs and offscreenrenderingcontext2d.rs. offscreencanvas.rs is respondible for implementing the OffscreenCanvas.webidl. This interacts directly with javascript and when a new instance of offscreencanvas is created, it calls the constructor with arguments height and width which in turn calls the new method defined in this file. It also contains the reflector object that tells the Javascript garbage collector to ignore the canvas object while clearing memory. Additionally, it has the implementation of the getContext() method that returns a weak reference to OffscreenCanvasRenderingContext2d, which is responsible for doing background rendering task. offscreenrenderingcontext2d.rs has the implementation of OffscreenCanvasRenderingContext2D. It does not interact directly with JavaScript, so it does not have the Constructor or reflector. The functionality to build an offscreencanvas object has been implemented in this file.  
0,Yes there new commits in round 2.
0,The writeup has been pretty well written by the team. Introduction to the problem statement, the implementation details, and the test plans have been stated.  
0,The writeup is accurate and sufficient, the team gives clear explanations for the whole project and the process to realize it. For the point that is not easy to understand, they provided some examples and use mathematics method to support the explantation, which makes the read easily.
0,Several new commits were added during the second round.
0,The writeup is elaborate, well written, with proper description of the test cases with screenshots and steps for each issue.
0, Overall, I think the write up is good and clear. 
0,Well documented and explained with good amount of screenshots. Also the video length has been reduced to only whatever needs to be shown, which is great.
0,The authors have improved the writeup based on the suggestions from first review.  It is more precise and self explanatory. The background is lot clear after the first review.
0,The team has made a great improvement with respect to the previous submission. The code is brief and easy to understand.
0,I do feel the code can be deployed to the production server once a few test cases have been implemented by the team.
0,Test cases are yet to be added
0,The changes can be deployed to production server.
0,Yes, it works as intended and code follows the ruby guidelines, the documentation is well explanatory.
0, I think this code is ready to be deployed onto the server.
0,The team have done a great job and passed all their tests.
0,The team has suggested 2 methods to test. The first and the recommended method is using the existing automated tests for OffScreenCanvas feature. A new offscreen-canvas directory was added to tests and a new .ini file enables the new preference. The second approach is writing own test cases and a sample HTML file can be used to test if the OffscreenCanvas is rendered.
0,Travis CI has passed.
0,Every thing has passed, there is no conflict or build fail.
0,No test cases as this wasn't a testing project.
0, Yes, the build pass in Travis CI. 
0,The build passed with no conflicts in Travis CI.
0,The build passes
0,In the test plan section and on Git also I found no test cases written. There is testing done, however it is not what was desired.
0,The code was well written even in the first round.
0,The present test cases appear to be written fine.
0,No, the authors didn't improve the code.
0,To test the system operation the project has to be built and run. The Sample HTML file was used to render a Test Canvas as given in the Wiki
0,When tested the project does what was desired to be done.
0,The authors made a solid attempt at improving the writeup. However, there are still some issues. DOM was left undefined and the code was separated from the descriptions.
0,Write up is good, with code flow diagram and test plan (pull request).
0, No new code was committed during the 2nd round of resubmission.
0,The Wiki is pretty much strong with plenty of info.
0,Yes since it was a unit test assignment, tests have been added and overall coverage has increased
0,Coverage went up by 8.4%, according to coveralls.
0,The write-up is lucid and has now incorporated the changes that were made in the round 2. It starts off by introducing Servo, Rust, OffScreenCanvas, web worker, Web IDL. The authors then describe the code flow using a flow chart which was really appealing. I especially liked the Under the hood section, which elucidated the files (OffscreenCanvas.webidl, OffscreenCanvasRenderingContext2D.webidl, offscreencanvas.rs and offscreenrenderingcontext2d.rs) that they modified/created in this project and their functionalities concisely. The write up then includes the code from the above four files and finally ends with the test plan with 2 approaches, links to pull request and references.
0,The write-up is good. I liked the use of the flow-chart to explain the flow of their code and explain the functionality. I think that this was the first write-up that used a flowchart.
0, They added all the test cases! There is so much coverage now!
0,Overall coverage was increased by 8+ percentage. 
0,The writeup is the best part about the project. It describes clearly what and how the work is done. One can clearly understand their working strategy from the writeup.
0,The tests cover all the scenarios. Given that the problem statement is pretty open-ended, the changes fulfil the purpose.
0,Yes, It works .
0,I think it covers all of the scenarios, but don't quote me. I don't have a great understanding of review response map.
0,Since it is a unit test project with well-written tests, I don't see any issues why it can't be deployed to production
0,the test examples they showed are good. 
0,The build is passing successfully
0,Yes, I feel the code is written in a good format. I checked the changes made by the authors and didn't find any bad naming or anything else.
0,The code was well-written in the first round itself. The method names, variabble names and class names are intuitive and suggestive of the functionality.
0,The code is well written. No issues with naming conventions/coding style.
0,Impressed by the coding and the way the solution was implemented. They implemented a complex feature in simple lines of code. Coding standard has been followed, naming conventions are followed and code is formatted. 
0,The code is written really well. The professor frequently advised the team to improve the naming conventions as seen from the comments in the Pull Request. Suggestions: I still feel that the function review_reminder_email is a bit longer. 
0,yes new code was committed during the second round
0,There are 2 commits
0,Two commits were done during the 2nd round.
0,2 new commits - to add additional features.
0,No new commits as fix was delivered in first round.
0,No commits were found. The last commit was 15 days back.  Suggestion: I feel that there should have been some commits as the pull request shows merge issues. The Travis CI build fails and the code climate is also not able to analyse the code. There should have been commits related to resolving these things. 
0,There is code committed during 2nd round.
0,They have added the test cases with context as "when participant is added to the assignment using CSV" and the test case covers the required functionality that was intended to be  implemented
0,Team has added tests for assignment_participant model which they have changed. As the requirement was just testing one component, this is sufficient, however testing the controller would have been a more through Integration test.
0,yes, team has added the test cases and they cover the portion tp check whether the email has been sent to or not.
0,The team has added test cases. The test coverage has increased.
0,Yes.
0,Yes everything is working as intended
0,Yes, this does work properly
0,The system operation works well as intended.
0,Yes, it looks fine to me.
0,The functionality works fine. Good job team! No suggestions.
0,The write up is well documented and covers all the needed information covering problem statement , a detailed explanation of how the functionality is implemented with what changes have been made to the different files and test case that they have added.
0,The write-up is clear , concise and explains the work done properly. Some screen shots would have been handy though
0,The writeup was written very nicely in the first round itself. 
0,Very detailed. Great job.
0,Yes , I think that the code can be deployed
0,Yes, it works perfectly 
0,The test plan is added and Rspec test has been added.Overall testing seems good,
0,No there were no conflicts and do not need to be resolved.
0,I couldn't test manually, but the videos show proper operation.
0,As per their screencast(shared on the gdrive link), the feature seems to be working locally. There is no Heroku deployment or a link to the VCL present.
0,The code is almost completed. Only a few final touches will make it ready to be deployed onto the production server. Maybe the future team can also work on it to achieve some more enhanced features.
0,This is not an Expertiza project.
0,The UI and system operation works as intended. The video provided clearly shows the issues that the team has handled.
0,According to their video, their code works well. 
0,The write up has seen significant improvement. Flow diagram has been made and screen casts have been added to show the flow. Screen casts have been added for both bugs and functionality. Very good job
0,Extremely well written Wiki Page, thorough and to the point with enough technical content and relevant screenshots pertaining to the before and after scenarios of the problem statements. Moreover, its a considerable improvement from the last submission where in they had nothing of the sort. 
0,The write-up is comprehensive and clearly mentions the filenames where the changes have been made. Moreover the team has explained the logic behind the code in the video provided which is really helpful. The team has done a good job with respect to that. They have added an flowchart image explaining the logic behind checkbox. This adds up to the readability of the project
0,The writeup is detailed and the authors have done a nice job. It covers issue, their solution, explanation of the solution and test plan.
0,Yes, there are only minor modifications and they are well justified.
0,The code seemed to be well written in the first round. But I dont see changes done in round 2. The github link provided shows last commit for Oct 21. Though I see that there are change made in the wiki which were required and are done well.
0,The code was well written even in the first round.
0,I don not think their code is good, because they did not solve the problems existing in the first round.
0,The present test cases appear to be written fine.
0,No, the authors didn't improve the code.
0,Seems at par with the coding standards
0,Did not find problems in the code in the first round. Follows ruby style guide, commented and good naming. Very well written.
0,No new commits have been made in the 2nd round
0,the latest commit is on 2nd of Nov.
0,No, they did not commit new code.
0,No new commits in the second round.
0, No new code was committed during the 2nd round of resubmission.
0,Yes since it was a unit test assignment, tests have been added and overall coverage has increased
0,I cannot find any new test cases.
0,Last commit seems to be 11 days ago
0,No new commits have been made. All changes are in the documentation only.
0,No, they did not add new test case
0,I don't see any new commits for round 2, mostly nothing was needed
0,No new code was committed during the second round.
0,No new commits.
0,Unfortunately, there was no new commit added. The latest commit is 10 days ago
0,Coverage went up by 8.4%, according to coveralls.
0,No new test were added but earlier tests are working.
0, No the team did not add any new test cases. Coverage is low.
0, They added all the test cases! There is so much coverage now!
0,Overall coverage was increased by 8+ percentage. 
0,The tests cover all the scenarios. Given that the problem statement is pretty open-ended, the changes fulfil the purpose.
0,Yes, It works .
0,The code was well written, DRY was not violated.
0,The code seems to be dry, and I had no issues with it in the 1st round.
0,It looks as good as round 1.
0,Naming looks good, they had already added comment to the code in the first review.
0,Don't see any DRY issues. Well Written Test code
0,The code is well written.  No suggestions.
0,The team has added test cases: 1. To check that if there is no rejoinder for the review then it redirects to new author feedback page. 2. To check that the other teammate is able to edit. 3. To check if the page is redirecting back to review. 4. To check if the rejoinder by a participant of a team is saved properly.  The overall coverage decreased from 48% to 47.601%. It decreased by 0.04%
0,No there had been no bad names or wrong conventions used even in round 1. so no change there. The team has made few modifications to beautify the code by using ternary conditions which did make the code elegant. No new comments added.
0, No, changes made from last review.
0,Commits for Code Climate changes were pushed in.
0,I think it covers all of the scenarios, but don't quote me. I don't have a great understanding of review response map.
0,The team added new commits in the second round as well to improve their code style, improve codeclimate issues and changes other reviewer's suggested. Very few teams have done this. Great work.
0,Several commits were made to decrease the code climate warnings.
0,Yes. They are updating code to fix code climate issues.
0,Yes, there are new codes committed during the 2nd round.
0,The number of commits since the 1st round is impressive.  Significant improvements have been done pertaining to naming, indentation and overall Code Climate issues.
0,No new commits with respect to code or functionality. Just few indentations,  comment changes and code beautifications done
0,The system operation from UI works as expected by the project. I was able to verify that the rejoinder is given by the team instead of team member. The rejoinder is also made easily available to the user, by providing easy navigation options to give feedback to reviewers, hence making the UI more user friendly. The Author feedback section contains the team's collective feedback to reviewers of particular assignments. Most of the task is to refactor code so that it complies with the new requirement of team rejoinders, and the features work as expected.
0,The projects works as intended. Some of the issues in the problem statement covers refactoring which has been properly handled by the team.
0,Test cases were added. Overall increase in the coverage range observed.
0,Yes, the team added relevant test cases which increased the overall coverage.
0,No unit tests were added during the resubmission, but they had an initially high coverage.
0,They achieve 100% during first round, so I don't think there are any new test need to be added. 
0,Yes, they coverage is 100%.
0,Yes the project was about testing and coverage has increased.
0,Nicely written wiki. 
0,The coverall showed that the Overall coverage increased (+3.2%) to 39.999% The coverage of the participant.rb file is 100%. So great job team! No suggestions.
0,The write up is simple and understandable. It starts off by describing about Expertiza, motivation behind the project, the tasks to do, list of classes that are modified and impacted by the change. I like how the authors have screenshots of both the existing code that is removed and the new code that is added in the pull request, which juxtaposes them and highlights the tasks in the problem statement and goals of the project. The write up then ends with the test plan which lists the test cases handled.
0,The code coverage was 100% in the 1st round.
0,YEs the project was a test project and the team has managed to achieve 100% coverage of the model. There was no increase in coverage from Round 1 to Round 2
0,The project works as intended. Test cases are showing a positive impact on the results.
0,Yes, the tests cover all the scenarios one should check for. Great work !!!
0,Everything is good here!
0,Edge cases are tested, and all scenarios for each method are tested. 
0,Yes, they coverage is 100%.
0,Yes a lot of cases concerning a participant has been added.
0,yes, 100% coverage has been achieved as shown in the video.
0,Y'all did the least possible work, AND put it on wikipedia instead of the expertiza wiki.
0,The tests specified in the participant.rb file run perfectly well . The same has been demonstrated in the video mentioned above. No suggestions.
0,The code coverage is 100%. Every test case passes after a manual check.
0,The writeup was significantly well written. Almost all the changes were covered.
0,The team has written their wiki page in a very detailed manner. They even added the video links which were missing in the first round as suggested. Thank you and good job :)
0,Easily one of the most clearly documented projects I have reviewed in this class so far. I liked their organization of the Test Plan within the write-up.
0,The wiki page provides clear details about the work, and very easy to understand. Just like round 1. 
0,It is crisp and to the point, there are no clarity issues either.
0,Well explained, all the test cases have been explained and are self explanatory as well.
0,Well Written
0,The writeup is really well written and has covered all the desired aspects along with the test plan. No suggestions.
0,The writeup clearly defines the primary objective of the project and justifies the reasoning behind introduction of additional helper constructs like participant factory. The authors complement the descriptions of each test case with associated block of code and elaborate on the details of their inner workings.
0,The write-up and screen cast were both very explanatory. It included detailed code, the need for the test of partipant.rb and the use of the model. There was no change required from the initial write up.
0,The code is well organized and written & ready to be merged into the production server.
0,No test plan
0,Since it is a unit test project with well-written tests, I don't see any issues why it can't be deployed to production
0,the test examples they showed are good. 
0,The tests are good and it can be merged to the main line.
0,Still 25 issues, checked by codeclimate, to fix
0, The build does not pass. Also, the coverage is very low. Not many testcases.
0,The biggest concern are the simple code climate issues.
0,The build is passing successfully
0,Commits were made in second round 
0,The write was good and well-written. However, it would have been better if some screenshots were also present in the writeup. May be juxtaposing the screenshots of 'before and after' of fixing the issues. That would have made the write-up easier to understand.
0,The code has been written as per the coding standard. The code written by the team adheres to dry principle.
0,the code was well written, following the principles.
0,Yes, code is well written
0,The code is well written and follows all the DRY problems.  The team has changed the files based on previous reviews and to make it more DRY comments before the methods that they created gave a better understanding what each code does. // function for showing warning when number of slots is set as zero   Changing the names that suited the functionality more, is appreciated. addCreateTopicSection() appendCreateTopicSection()  
0,There does not seem any issues with the code. The team has properly used the naming convention and has provided comments wherever necessary
0,Few new commits are made
0,There has been 2 commits made in second round. One for adding comments and another one for fixing Issue #926 the sorting of topics by topic number in assignments.
0,3 New commits
0,Properly done in round 2 also
0,The team has done few commits. One was on few sort fixes, while they other was on refactoring.
0,The team has added some new commits which are about the added comments. The team has picked up the suggestion from the previous review to add comments for better readability, which is commendable.
0,A commit was done in second round addressing issues from reviews.
0,Tests have been thoroughly and very well performed. Also, well documented. 
0,Yes the features work as described in the problem statement. The team has done good job and has fixed all the below issues: Issue #971 Change create topic UI into AJAX. Issue #926 We need a way to sort topics by topic number in assignment#edit page. Issue #718 We should allow instructors to give feedback when accepting or rejecting topic suggestions.
0,The code works as required.
0,The new features work as expected.
0,The working is perfect, everything works as intended. The team has explained this in a brief manner in their youtube video.
0,System works as expected and this is evidenced by tests and videos.
0,The write-up is informative and provides all necessary details of the changes made.
0,The write up is impressive and very detailed. It has been documented well which helps to understand about the project and the code implementation. It also provides detailed test plan which makes it easier for end user to do UI testing.
0,The writeup is well organized and well documented.
0,Writeup is very detailed and well written. It is supplemented by enough code pieces and reasoning and good amount of pictures and videos to explain what the team has done in detail.
0,Yes, the code can be deployed to production.
0,The code is well written, tested and documented and hence I think it should be ready to be deployed. 
0,Yes the Travis CI build is passing successfully.  
0,No conflicts and Build Passes
0,Yes no conflicts at all which needs to be resolved
0,Yes, the Travis CI has passed.
0,The build has passed in Travis CI and no conflicts have occured.
0,The code follows Ruby style guide.
0,The code is very well written and follows good coding practice
0,Project was on implementing test cases. The test cases are well written and the code coverage has increased.
0,The code is both succinct and very carefully. i have not done the code check in the first round. but for this time, there's no bad names, functions are standardly-named, good alignment and commenting.
0,Code makes good use of rspec's describe and context options, and manages to achieve ~95% code coverage.
0,Well, the code looks good and very much follows the Ruby Style Guide. The code also is DRY. It looks well written and does not any changes.
0,Yes code was committed to follow clean code practices based on first review.
0,Code was cleaned up 5 days ago.
0,Yes, new code was committed in the 2nd round.
0,Test coverage remains the same at 94%. Hence, my suggestion/opinion is same as the previous review.
0,Yes they have added test case and it has increased the coverage by 3% and has increased the coverage to 39.721%
0,Project was writing unit test cases and the newly written test cases has increased the test cases.
0,Test coverage for assignment_participant model increased to 94 percent.
0,Coverage increased by 3%.
0,Yes, the team has added test cases and the team has covered every functionality.
0,I'm afraid no test cases were added in round 2.
0,Yes the test case covers all the required test cases along with the edge cases .
0,Project was on writing test cases and the newly written test cases has increased the coverage.
0,Since it's unit test, it seems there's hardly a way to veirify with UI
0,All the test cases pass. Majority of test scenarios described in document is covered and automated
0,Video demonstrates working and passing tests.
0,The code coverage is ~94% which passes the required threshold.
0,The writeup seems to be well written. It is concise and to the point.
0,The write up is very well documented as it explains the test plans and also what changes have been made along with the reference to the files which have been modified
0,Very clearly writeup
0,It is well written, quite understandable. It clearly and adequately indicates the working functionality. I can understand what the project is about.
0,The writeup is comprehensive and fully covers given functionality. There were no significant issues that needed to be fixed from the first round. 
0,The writeup is complete and well organized. And it also mentions the corresponding change in origin code.
0,Yes as the test  case increase the test coverage and the build pass is 100% , thus the code is ready to be merged
0,Yes, it is a good code.
0,After resolving the issues with Travis tests and adding comments to the code, it is ready to be merged with Master branch. Production deployment in not applicable.
0,Travis Cl build failed
0,Yes, the Travis CI build was passed. The conflicts could be seen resolved.
0,The overall structure of the code looks good and all the coding standards have been followed.
0,Yes,coding practices seem upto standards
0,The code is well written and well commented and follows ruby style guide.
0,They don't have code problem for the first round.
0,No the new code was not committed during the second round. This could be due to the fact that the team finished their code at the end of the first round itself.
0,Doesn't seem to have new commits in round 2. last commit was on 2nd November
0,The last commits were 12 days earlier, hence no new commits were made during the second round.
0,No new code was committed in the second round.
0,No new code was added, nor was any necessary.
0,Yes, they were made.
0,No new commits. Last commit was on Nov 2nd before the first review.
0,Yes 1 checkin was done on nov 2nd   
0,The code was already delivered in the first round. Hence, no commits this round. The author has regularly pushed commits. 
0,No new commits. 
0,No new commit during second round.
0,Yes, the team did add test cases to test their changes and their overall test coverage has increased.
0,The code seems to same as before. nothing new has been added.
0,The team has added test cases and they cover all the required functionality. The code coverage has increased by a small amount.
0,Many test cases were added, with overall test coverage increasing for the project.
0,Overall coverage increased (+0.3%) to 37.074% Good work on including test cases. The app works fine after testing. The newly added tests cover the scope of this project very well.
0,Team has added many tests. Coverage has increased from 1 to 38%, which is impressive. 
0,The testing has been implemented and looks well implemented.
0,Yes, they add test cases, and the coverage is the same as the first round.
0,Yes everything does seem to work properly. 
0,Yes, the project did work as intended. The video demonstration and manual testing were enough to prove this fact.
0,The system works well. All the functionality has been implemented. I ran the project and it worked as intended. The back button issue in UI has been fixed.
0,Yes, it works as intended.
0,yes 
0,Yes, as mentioned in the problem statement, the solution is delivered. It works fine. 
0,The functionality works and is evidenced by the video.
0,Yes, everything works.
0,The writeup written well. The team could have included snippets of their code instead of screenshots.
0,The write-up was very good, in the sense that it mentioned the high level view of the tasks first, and then dug deeper under the hood. But, it only showed what files they changed, and what it produced as a result. They could have also shown what is that they changed, or provided a link in the wiki. Yes, one can deduce that from the pull request too, but having a link or the content itself on the wiki is a big boon.
0,The writeup is well written and self explanatory. 
0,The writeup is great, in first round they did not have a test plan part. But they added it in the second part.
0,The code looks good.
0,No, its not as the coverage is increases by small amount.
0,The build did not pass in Travis CI. There were no conflicts that needed to be resolved.
0,Travis test has failed, I can see it in pull request page. Conflict has not been resolved. 
0,Well, the code looks good and very much follows the Ruby Style Guide. The code also is DRY. It looks well written and does not any changes.
0,Code looks good. Well formatted and naming conventions are followed. 
0,The code was well written and implemented the functionalities needed. It made good use of naming conventions and the team worked on improving the code layout by following the Ruby style guide and DRY principles.
0,All the names are used properly and the team adds some comments after last round.
0,No, no new committed were added during the second round. The last commit was around 13 days back, and no new code has been pushed since then.
0,Some New commits, improves the code a bit
0,Yes, 2 commits were done in the second round.
0,No new commits
0,No, no new committed were added during the second round. The last commit was around 13 days back, and no new code has been pushed since then.
0,There were a good number if commits in 2nd round.
0,Some New commits, improves the code a bit
0,Commits were done long ago and commits are regular. No new commits as changes were fixed in earlier round. Commit titles are well written and not ambiguous.
0,There were a good number if commits in 2nd round.
0,The team did not make any commits from their first round. They had successfully fixed the issues in the first round stage itself.
0,No new commits
0,The team add some comments and test cases during the 2nd round.
0,Yes, 2 commits were done in the second round.
0,Yes, the team has indeed added test case and made a test plan for both the issues that they have resolved. 
0,Commits were done long ago and commits are regular. No new commits as changes were fixed in earlier round. Commit titles are well written and not ambiguous.
0,11% Coverage Increased. Good Job!
0,Yes, the team has added adequate test cases.
0,The team did not make any commits from their first round. They had successfully fixed the issues in the first round stage itself.
0,yes the coverage has increased
0,The team add some comments and test cases during the 2nd round.
0,Yes, the team has indeed added test case and made a test plan for both the issues that they have resolved. 
0,11% Coverage Increased. Good Job!
0,The team did not add any test cases and the coverage remained the same.
0,Yes, the team has added adequate test cases.
0,The team added test cases for test_case.rb and the coverage has increased. which makes the overall coverage increases relatively a large extent.
0,yes the coverage has increased
0,They have added test cases but very limited. The code coverage was just 14 percent.
0,Yes the team has added tests. I am not sure of the increase in coverage as it is not mentioned in the doc. however, the team has very well explained how the tests were done and what areas they have tested.
0,The team did not add any test cases and the coverage remained the same.
0,The feature implementation was good. The TA can't edit the rubric of the instructor. But the test cases are very limited.
0,The team added test cases for test_case.rb and the coverage has increased. which makes the overall coverage increases relatively a large extent.
0,Following the steps, I can see the changes implemented.
0,Yes, everything that the project required to do works. There were a few things which caused issues in the pull request, but none of it related to the functionality of the product to be tested, but rather related to the code complexity. Even the video demonstration clearly shows the changes implemented.
0,I think it is well written, quite understandable. It clearly and adequately indicates the working functionality. I can understand what the project is about.
0,The team vastly improved on the writeup from the first stage by giving a general overview of the tasks taken up and the list of issues present and resolved during the project. 
0,The team didn't no provide the link for the deployment, but according to the video they provided, the features worked well.
0,The code seems ready for merge
0,Yes, it is ready.
0,If it works just like in the video then definitely yes.
0,The feature implementation was good. The TA can't edit the rubric of the instructor. But the test cases are very limited.
0,Since, the changes are reflecting, it looks good to be merged.
0,The test cases covers the required test scenarios and the system operates as intended. The video file submitted though seems to crash. A link could have helped.
0,Yes, the code can be deployed on the production server as it passes the needed build of Travis CI. The project would work as required to.
0,I think it is well written, quite understandable. It clearly and adequately indicates the working functionality. I can understand what the project is about.
0,Travis-CI Passes
0,Yes, the build request has been passed.
0,I could not find Travis CI
0,Travis tests have passed. There were some initial failures but the team has fixed it. There are no lingering failures.
0,the build passes
0,The code is almost perfect, apart from the code complexity issues, which in my view isn't very tough to fix. The project need not be done from scratch, and it is certainly a good starting place for future teams to pick up.
0,The code seems ready for merge
0,The team gave fixtures for the issues exist, but to make deployment, it is better to add more tests to make sure the function work properly.
0,Yes, the code can be deployed on the production server as it passes the needed build of Travis CI. The project would work as required to.
0,Since, the changes are reflecting, it looks good to be merged.
0,Excellent work but the codeclimate build has failed
0,If it works just like in the video then definitely yes.
0,Yes, it is ready.
0,Travis-CI Passes
0,Yes, the build request has been passed.
0,I could not find Travis CI
0,The code has been written as per the coding standard. The code written by the team adheres to dry principle.
0,The code follows DRY principles
0,there was no complicated functions , code strictly followed DRY principle
0,No Changes in the code from the last time. Code is written properly.
0,Code was well written, DRY, and intuitively done. Easy to follow the functionality implemented.
0,No new commits have been made in round 2.
0,All the commits were completed by Oct 31
0,No commits were done in 2nd round.
0,the last commit I see is from Oct 31st.I'm assuming they did not have to change much in the 2nd round
0,No Commit,
0,A small amount of new code was committed in the second round.
0,No new commits were made during the second round.
0,No new commits have been made since the last round. However, there is nothing significant as just codeclimate fixes are remaining.
0,I couldn't any new  commits in the second submission, though the functionality seemed to be fulfilled in the first round itself.
0,Yes, the coverage has increased and has almost reached to 50%.
0,This project is refactoring and there were not much of functionality changes, I see that teams have changed the existing tests make sure there is no coverage miss
0,The test coverage seems to have increased slightly. Since this is a refactoring project, I wouldn't expect testing to be the focus, so that's pretty good even though the added test case most likely doesn't cover all the work done here.
0,The team had added a test case in the last round, which I think was sufficient to test basic functionality.  There have been no additions to test cases in the second round.
0,Team added several test cases, and the coverage was seen to increase
0,Yes the code addresses all issues.
0,Yes, refactoring did not impact on the existing operation at all.
0,The system operation works as intended.
0,Yes, this is a refactoring project and the UI works as it is supposed to, after their code changes. All the functionalities seem to be intact. Good job there!
0,The system operation works as intended from the link provided.
0,The team has explained the issue and the solution they chose with enough   details to understand to way of implementation.
0,overall it is well written, they can add reference section where they can put the link to the project etc.
0,The write-up is to the point and explains their approach neatly. The team has made efforts to update the write-up with the provided suggestions and it has improved the write-up.
0,The writeup was elaborate, and fully elucidated the test added and the removed methods and SQL lines and their scope. 
0,I strongly believe that this code is ready for production server
0,Changes are working perfectly.
0,I think this code is ready to go, because it is better organized and structured than it used to be.
0,I think that it is a neatly written code and once the integration issues have been resolved, it should be ready to be deployed on th production server.  The code being readable, can be easily picked up by the future team.
0,build is passing on Travis CI. there are no pending conflicts
0,Ignoring this question since it is an OSS project.
0,Though there were several build fails during the first round which seem to have been triggered on bundle exec, the final build passes in Travis CI
0,The code is not altered much but it follows the standards and not changed in the second round
0,Code is written well with simplified approach. Naming conventions are standard without long functions. DRY principle is followed.
0,Well, the code looks good and very much follows the Ruby Style Guide. The code also is DRY. It looks well written and does not any changes.
0,New code commit was not made in second round
0,Could not see any commits after the last submission as functionalities were working fine, but team could have worked upon improving test coverage.
0,No, no new code was committed during 2nd round.
0,No Commits
0,No new code was committed during the 2nd round.
0,Team s last commit was on Oct 31st , which was the first deadline.
0,Good Job on the test cases.
0,Yes, test cases were written for admin_controller and roles_controller. The test cases increased the coverage as well. Every method in these files are tested and covers a good range of this project.
0,When open from the UI, working fine and as expected. No refactoring required.  
0,Yes, the system operation works well. All the functionalities mentioned work properly.
0,Code works.
0,Yes, the system works fine and as intended. The features work as they are supposed to.
0,They had to create a superuser who has a right to delete other users . When checked these functionalities were working upto 80% expectation. The tests written do cover the portion assigned to them and the tests are thorough.
0,It is well written, quite understandable. It clearly and adequately indicates the working functionality. I can understand what the project is about.
0,Very well written.
0,The write-up is well organized but it would have been better if some screenshots were uploaded along with the steps. That would have made the document easier to understand.
0,The writeup is short and precise - has everything that is needed for testing and understanding and kept the writeup small for better understanding. They have mentioned about their DRY principle within "Changes" itself. Mentioning it as a separate sub topic will give more visibility is what I felt. Other than that everything is self explanatory.
0,The writeup is well written. It covers almost all the work done. However, one suggestion would be to include more details about hoe the tests were done. I just one small portion dedicated to explanation of RSpec and not the work implemented.
0,No it should go through more edge cases testing
0,As mentioned above, the functionalities work well. So, yeah this can deployed on the production server.
0,After fixing the issues suggested by code climate, the code can be deployed.
0,Pull request build passed well and there are no issues.
0,The pull request has passed the Travis CI
0,The overall structure of the code looks good and all the coding standards have been followed.
0,Yes,coding practices seem upto standards
0,Yes , it can be deployed and is a good starting point for teams in the future.
0,I think the code can be merged. All the test cases seem to cover the edge cases and my testing shows that the things function as expected.
0,The code is well written and well commented and follows ruby style guide.
0,Yes it is ready to be deployed.
0,Code looks okay, Suggestions for improvements not done.  build still fails   
0,They don't have code problem for the first round.
0,No the new code was not committed during the second round. This could be due to the fact that the team finished their code at the end of the first round itself.
0,Doesn't seem to have new commits in round 2. last commit was on 2nd November
0,The last commits were 12 days earlier, hence no new commits were made during the second round.
0,No new code was committed in the second round.
0,No new code was added, nor was any necessary.
0,Yes, they were made.
0,No new commits. Last commit was on Nov 2nd before the first review.
0,Yes 1 checkin was done on nov 2nd   
0,The code was already delivered in the first round. Hence, no commits this round. The author has regularly pushed commits. 
0,No new commits. 
0,Travis CI says tests have failed but these don't include the tests written by the team.
0,No new commit during second round.
0,The Travis CI build passed , the code does not have any conflicts with the master. Initially (stage 1) a lot of changes were made so that the Travis CI build would pass. Kudos for effort!
0,Yes, the team did add test cases to test their changes and their overall test coverage has increased.
0,The code seems to same as before. nothing new has been added.
0,The code has passed the Travis CI build has passed. The danger build has also passed with one warning because of more that 500 Lines of Code. On the other hand the codeclimate build has failed with 7 issues to fix.  1. There is a method get_feedback_assessments_for which has a Cognitive Complexity of 9 (which exceeds 5) and must be refactored. 2. The model class Team contains 21 methods (which is more than the 20 allowed) and hence has to be refactored. 3. The method view_heatgrid has 28 Lines of code that exceeds the allowed 20 and hence has to be refactored. 4. The method set_content has a Cognitive Complexity of 6 (which exceeds the allowed 5) and hence has to be refactored 5. Presence of an unescaped model attribute in the file app/views/response/view.html.erb 6. Assignment Branch condition size for get_feedback_assessments_for is too high 7. Indentation issues in app/models/assignment_participant.rb There are no conflicts with the base branch.
0,Yes, the team did add test cases and the coverage increased too. But the team didn't put any efforts after the initial review round, since the failed tests are still failed, and there are no new commits since 12 days.
0,The build has passed and there have not been any conflicts.
0,The team has added test cases and they cover all the required functionality. The code coverage has increased by a small amount.
0,The CI build has passed and there are no conflicts.
0,Many test cases were added, with overall test coverage increasing for the project.
0,They did add the test-cases but the coverage only increased by .3 %
0,Overall coverage increased (+0.3%) to 37.074% Good work on including test cases. The app works fine after testing. The newly added tests cover the scope of this project very well.
0,Team has added many tests. Coverage has increased from 1 to 38%, which is impressive. 
0,The testing has been implemented and looks well implemented.
0,Yes, they add test cases, and the coverage is the same as the first round.
0,Yes everything does seem to work properly. 
0,Seems to be working as intended. But all the features have not been implemented. The documentation mentions future work but no new code has been added.
0,Yes, the project did work as intended. The video demonstration and manual testing were enough to prove this fact.
0,The system works well. All the functionality has been implemented. I ran the project and it worked as intended. The back button issue in UI has been fixed.
0,Yes, it works as intended.
0,yes 
0,Yes, as mentioned in the problem statement, the solution is delivered. It works fine. 
0,Yes, everything works.
0,The functionality works and is evidenced by the video.
0,A lot of outdated approaches were used. Refactoring was needed.
0,The code was written pretty well.
0,No commits needed after first review.
0,No new commits. No new bug fixed.
0, The last commit was 12 days ago. I believe that this team had finished their work well before round 1 itself. I think they had planned the work well in advance and followed that plan as well.
0,There were really few commits in the 2nd round. The only commit I could see was on 30th October. The only suggestion I would give is to continuously update their work on git. 
0,There is no new commit during the 2nd round.
0,No new test cases added, but the existing ones had a good coverage too.
0,Overall test coverage  was decreased by 35%.
0,No need for adding new test cases as the previous submission already achieved 100% coverage. I apologize for not being certain how to accurately answer this question.
0,They didn't add test cases, but the test coverage is always above 90%.
0,There are no new tests and that is because the team had already completed their work before deadline 1 and the coverage was 100% on the deadline one itself so there is basically no scope for improvement for this team.
0,The team did add test cases. They achieved a little more than the desired coverage even , that means they have done a great work.
0,The team added test cases for menu.rb and the coverage increases but the overall coverage seems decrease due to that.
0,From the video, the functionality works well.
0,N/A. This is a unit test project.
0,Yes, the tests cover all the scenarios.
0,The tests cover most of the scenarios as is evident from their mutant killing capabilities.
0,The team was asked to write test cases and get a coverage of around 90%. The team did a really good job in writing test cases for all the methods present in the assigned files.
0,The project has a good coverage of the codes 
0,The writeup is well documented
0,The write up is very informative and clearly shows the impact and result of the project tests. It would have been a great addition to have included more discussion on the design choices of your testcases and how it was implemented. Overall a great wiki.
0,The writeup is pretty good and easy to follow.
0,I loved the write-up. Write from the beginning to explaining Expertiza to explaining their task and the test plan which was very detailed and methodical. I also like that they had included a screen shot of the Mutant test which shows the thoroughness of their tests. Overall an impressive job by the authors.
0,The writeup is well written and clearly tells the flow and method of working. It shows clearly what all work is done and how it is done. It mentions specifically the explanation of each functionality and how it is checked.
0,The writeup gives an easy-understanding introduction of the two classes the team needed to test. Also, there is detailed test plan is provided. The wiki also shows how the test cases are designed and the results. However, for the motivation part, it is a little bit general, which needs to add more things specific for this project.
0,a Lot of refactoring is required before the code goes on to production server.
0,The team gives a good guidelines for how to test and what to test for the two classes.
0,Travis CI failed.
0,The travis CI build failed.
0,I think the code looks good and very much follows the Ruby Style Guide. The code also is DRY. It looks well written and does not any changes.
0, The code is extremly well-written.
0,Videos and code explained very well.
0,Yes some of the issues were fixed.
0,The code was written clearly, DRY, and intuitive to follow the intended functionality.
0,Yes rspec and few changes were committed
0,Yes, a lot of commits were made mostly to fix the issues pointed out by the CI tools
0,Yes, there were many parts of the code committed during round 2.
0,5 new commits were made during second round
0,Yes
0,The team has a really good job of committing their code on a regular basis. There has been some code commits even in the 2nd round. 
0,Yes, there were few new commits
0,Yes, the team actively committed to the project during the second round.
0,The team seems to have thoroughly tested the use case and the coverage has increased.
0,Yes, the team has added test cases and it covers all the functionalities and issues.
0,Video showing test cases passed. Good Job!
0,YEs, the team has included the relevant test cases to test their changes and the overall coverage has increased by 0.04% which I think covers the scope of this project.
0,Coverage increased by 0.04%
0,Yes the team did add test cases that increased coverage. They are appropriate for the scope of the project.
0,My testing shows things seem to be working as expected and documented.
0,The deployment link hasn't been provided. Though they have put videos for the same
0,It works as intended.
0,Yes code works.
0,From the video links that have been shared, it is very clear that the features are working as they were supposed to. Even the test cases are passing. I see no issues with this part.
0,Looking from videos all the intended features work
0,Yes the code works has expected. it accepts the utf-8 codes now and also parses HTML tags in reviews like expected
0,The write-up is well written explaining all the steps undertaken to make desired changes and displaying how the system works after the changes have been made (with screenshots). They have also added Test plans in the wiki page
0,Pretty nicely written Wiki. Test Plan also describes how various tests were performed.
0,It is well written, quite understandable. It clearly and adequately indicates the working functionality. I can understand what the project is about.
0,Yes the write up is good, if they were able to host it'd have been better for checking the work. 
0,The write up is well written, elaborate, and clearly elucidates both the manual test cases considered as well as the automated tests implemented. Screenshots of both cases were also included as well. Steps for manual testing were clearly written.
0,The team has considerably improved the write-up. The write-up was very inefficient and dint provide details of the code-base also the video was encoded and impossible to view in Round 1. The team has rectified all these issues with round 2. they have documented their fixed more clearly with screen shots and code this time. 
0,It can be deployed but first, it should be tested thoroughly. 
0,I think the changes are tested nicely and seem to cover all the necessary cases. This can be merged into the master branch and is ready for production use
0,Its ready to be merged.
0,In my opinion, this team has done pretty good work and the code looks like ready to be deployed on the production server.
0,Yes, just fix the few issues present and that should be fine for it to be merged into main line as the feature seems to work and there isn't any major code issue.
0,Pull request build passes well and there are issues.
0,The build has successfully passed the Travis CI test and there are no merge conflicts present in the pull request. However, there were a few code climate issues which I think can be easily fixed.
0,The travis ci test passes.
0,The build passed in Travis CI with no conflicts.
0,The write up is good, contains lots of pictures to show the added functionality. I found the test steps a bit confusing and it made validation hard.
0,The writeup is well written and self explanatory. 
0,Documentation mentions the steps, problem statement, solutions and screenshots. The description are detailed. However, I feel there is no need to give screenshots for tests written. 
0,The writeup is great, in first round they did not have a test plan part. But they added it in the second part.
0,The code looks good.
0,No, its not as the coverage is increases by small amount.
0,build fails that needs to be investigated , once that is done i dont see why the project cannot be merged with the mail branch. Loot of good work has been done and merge with the main branch would bring the work to fruition.  
0,Code is short, variables and functions are well-named.
0,the code is very well written. there are no bad names, long functions or any lack of comments. The code written by the team is self-explanatory.
0,The code follows the DRY principles correctly
0,The variables, methods and class names are aptly named. I could not find names which are not suggestive of functionality. (i) The writeup is well written and easy to read and well commented (ii) It is adequately descriptive of the work done. (iii) Explanation of reasons for the style of code and problem solving approach is lacking.
0,The code is concise and easy to understand. The team has provided comments to explain the logic of the new function created which really helps.
0,The code was well-written in the first round itself and followed good coding standards.
0,The code was already well-written . No changes were suggested in the first round. The team did a great work in following coding best practices. 
0,A few bug fixes were made after the first round of submissions
0,There were only 2 commits made during the second round. However, the team had mostly implemented most of the functionality during the first round, maybe due to which there are less commits in the second round
0,The Ui and system operations works well as intended. They newly added features works perfectly as they are supposed to do.
0,Everything works as expected except for the case mentioned above.
0,Some of the functionalities have been implemented but the pull request is yet to be merged with the master branch
0,The write-up clearly mentions how to check/test the work done by the team. it includes almost everything the team has changed during their project.  It clearly mentions the filenames where the changes have been made. All the references are also included in the write-up  
0,The team has provided an excellent write-up with proper explanation of the problem statement and the solutions they have provided. The team has also included  a video which make things really easy to understand. The team has shown navigation structure of the expertiza menu, which makes the workflow clear.
0,Nice work!
0,All passed.
0,Yes, they have passed the Travis CI.
0,very nice code, easy to read and understand.
0,The code written by the team satisfies the basic functionality expected. The team followed the comments from previous round of using good naming conventions for certain variables.
0,yes, new code committed during the 2nd round.
0,Yes new commit is done for second review,
0,Yes, the team covered 100% of the code they had to test. Also, the video given in the link was very informative and helped to understand the implications of the work done by the team to a far greater extent.
0,The coverage is 100% since the first round. It seems there's no newly added tests.
0,100 percent coverage.
0,Coverage was already at 100%.
0,They reached 100% at first round.
0,Yes, the team covered all the scenarios I could have come up with. I specially appreciate the work that they've put into the import functionality. They have come with with more scenarios than I could have even thought of, and tested it pretty thoroughly. 
0,The project successfully covered all the scenarios.
0,nil test were added, all scenarios are covered. 
0,very nice writeup.
0,The write-up is well written in my thought, it is clear and understandable. 
0,The team has presented a working deployment to be possible. It passes most of the builds and can be deployed on the production server. 
0,Yes, the Travis CI is passed. No conflict that are remain do be resolved.
0,the build passed in Travis CI.
0,Travis build : passed.
0,The code looks good with the standards followed. The changes are explained in the wiki for the same. Also, the video has been uploaded but doesnt seem to have the audio with it.
0,The code is perfect right now.
0,Yes, through their commit record, I have seen some improvement.
0,Well written code.
0,Yes, they have improved after the last review
0,Yes, the code is perfectly fine, and is a great start for the team which would come in the future to follow-up with the work on this.
0,I dont seem many commits for round 2, but yes the video has been added for explanation. Also, the wiki is pretty well explained with the code.
0,Yes, there's new commits.
0,yes, new code committed during the second round.
0,Yes, if must be, they must need more test cases ot cover some edge cases.
0,Yes, according to the commit record, they have commit new code during the 2nd round.
0,Yes
0,The code has been written as per the coding standard. The code written by the team adheres to dry principle.
0,The second commit is perfect. it got perfect coverage. But it seems that the 100% coverage was so since the first round. But the new commited code as better code style and no more indentation issue
0,100 percent coverage.
0,the code was well written, following the principles.
0,Yes, they have added some test cases, and coverage increased.
0,100 % coverage achieved. Great work!
0,The team did a great job in increasing the test coverage to 100%.
0,The code coverage is 100%. Every test case passes after a manual check.
0,Yes, code is well written
0,Yes, it works as intended. 
0,This is a testing project. The tests have covered all the scenarios possible.
0,The code is well written and follows all the DRY problems.  The team has changed the files based on previous reviews and to make it more DRY comments before the methods that they created gave a better understanding what each code does. // function for showing warning when number of slots is set as zero   Changing the names that suited the functionality more, is appreciated. addCreateTopicSection() appendCreateTopicSection()  
0,great writeup.
0,The document is well written with all the required details.
0,meaningful test
0,There does not seem any issues with the code. The team has properly used the naming convention and has provided comments wherever necessary
0,The build can be definitely deployed once the Travis CI issue has been fixed. Suggestion- Rectify the Travis CI issue.
0,Few new commits are made
0,There has been 2 commits made in second round. One for adding comments and another one for fixing Issue #926 the sorting of topics by topic number in assignments.
0,Fantastic wiki! Extremely informative about your project. 
0,3 New commits
0,Properly done in round 2 also
0,The team has done few commits. One was on few sort fixes, while they other was on refactoring.
0,The team has added some new commits which are about the added comments. The team has picked up the suggestion from the previous review to add comments for better readability, which is commendable.
0,A commit was done in second round addressing issues from reviews.
0,Yes, for production code itself is perfect.
0,The overall coverage decreased, but not significantly. It reduced by 0.01%/
0,The writeup is complete and comprehensive in that it fully covers the given functionality. It clearly and adequately indicates the working functionality.
0,No new tests were written for this functionality. 
0,No New Tests
0,The writeup is written in a verbose manner. The test plan is also mentioned.  No suggestions. 
0,Yes, team has added the test case
0,written up is also a brilliant work!
0,As mentioned above, the team did a really good job at this. The writeup talks in detail what all tests did the team implement, and from the pull request, we can make out that the team was pretty consistent with their efforts. 
0,Yes, it works as intended
0,Unfortunately, I could not see any code written by the team for testing. However, the team has provided a description on how some of the edge cases have been handled. According to coveralls, the overall test has decreased by 0.01%. This could be one of the major topics for improvements with regards to this issue
0,Tests have been thoroughly and very well performed. Also, well documented. 
0,Yes the features work as described in the problem statement. The team has done good job and has fixed all the below issues: Issue #971 Change create topic UI into AJAX. Issue #926 We need a way to sort topics by topic number in assignment#edit page. Issue #718 We should allow instructors to give feedback when accepting or rejecting topic suggestions.
0,The code works as required.
0,The new features work as expected.
0,As explained in the video, the build seems to work fine.
0,Yes, it passed all the pull requests.
0,The working is perfect, everything works as intended. The team has explained this in a brief manner in their youtube video.
0,System works as expected and this is evidenced by tests and videos.
0,The build successfully passes Travis CI.
0,The write-up is informative and provides all necessary details of the changes made.
0,Yes, everything works. Well done!
0,All scenarios mentioned in the writeup are properly covered.
0, They covered all the scenarios.
0,The write up is impressive and very detailed. It has been documented well which helps to understand about the project and the code implementation. It also provides detailed test plan which makes it easier for end user to do UI testing.
0,The code coverage of 100% satisfies the minimum criteria. It works as intended which can be seen in the video. The tests covers all the scenarios for passing them. 
0,The tests execute perfectly well and this has been demonstrated by the video. No suggestions.
0,cover all!
0,The writeup is well organized and well documented.
0,This team already had full coverage. I am not sure how to answer this question as new tests were not needed. 
0,Yes, the team did added test cases, which have been clearly mentioned in the write-up. Although the results image isn't clearly visible, but it is still enough to figure out the team passed 100% of the test cases.
0,Yes they have add some test cases, and the coverage increased.
0,The commits show equal contribution by all team members.
0,The team's project is unit testing the menu.rb model file. Hence they added Rspec test code in spec/models/menu_spec.rb. The pull request indicates that the overall coverage increased by a significant 5.5%. The report tells cites that 5779 lines have been covered and 13673 lines are relevant.
0,Well written with understandable content
0,The code was very well-written and up to to servo standards.
0,Writeup is very detailed and well written. It is supplemented by enough code pieces and reasoning and good amount of pictures and videos to explain what the team has done in detail.
0,This code seems to be well structured and written
0, I think with proper testing, this code is ready to be deployed onto the production server.
0,Commits were made in second round 
0,Yes, It was committed and the changes were merged
0,Yes new code was added and committed during the 2nd round that implements oscillator node example to exercise different oscillator types and generate triangle waveform.
0,The code has passed the travis test and has addressed  all the issues of the Change Request. The code should be production ready after adding few more edge test case scenarios.  
0,Yes, new commits were made during the second round.
0,No new test cases were added
0,Yes, the code can be deployed to production.
0,I don't see any tests in this project.
0,The team's test plan includes running the oscillator binary file using the command ./oscillator. This will run the oscillator.rs where various oscillator nodes corresponding to sine, square, sawtooth and triangle waveforms are generated. Hence, the user will be able to listen to these waves after a definite interval.
0,It's working.
0,Apart from some code-climate change, the code seems to be ready to merged
0,I'm not really sure how to categorize this project, but it seems to be structured and implemented properly.
0,The writeup was really well explained.
0,Writeup is good and understandable. Test plan is written well indicating the steps clearly in what needs to be done to test.
0,Well-written and self explanatory.
0,The writeup starts off by introducing Servo- Mozilla's experimental high performance browser engine and Rust- which is a systems programming language with memory safety and concurrency used to build Servo. It then moves over to Web Audio API for handling audio operations inside audio context and allow modular routing, and a workflow for implementing Web Audio was clearly listed. It then flows into the scope of the project and the implementation. The graphical and mathematical representation of the sine, square, sawtooth and triangle waveform gave a solid conceptual foundation. The code snippet of the changes done in oscillator_node.rs and the new file oscillator.rs (created by the team) has also been included. The section Build that explains the procedure to install dependencies (Rust), step by step procedure for building and running the build was very useful to explore the project. The team had included the build instructions for Windows and Debian-based Linux. They could have augmented the build instructions for Mac OS X, which might save Mac Users from reading verbose instructions on the official documentation and instead refer to a single source (the wiki). The authors end the wiki by providing the test plan with examples of generated sine, square, sawtooth and triangle waveforms as audio files; pull request and references.
0,no new added tests but the team had managed to get 100% test coverage in first round.
0,Yes the Travis CI build is passing successfully.  
0,The commits show equal contribution by all team members.
0,Well written with understandable content
0,The code was very well-written and up to to servo standards.
0,The writeup is very detailed and gave me a good idea of what was going on with this project.
0,This code seems to be well structured and written
0,Commits were made in second round 
0,Yes, It was committed and the changes were merged
0,Yes new code was added and committed during the 2nd round that implements oscillator node example to exercise different oscillator types and generate triangle waveform.
0,Yes, new commits were made during the second round.
0,No conflicts and Build Passes
0, They add test cases for the first round and the coverage increases, however, they did not add more in second round. 
0,It is already deployed on the production server
0,No test cases present but test plan covers it.
0,The project is in great shape and has already been merged to the servo repository on Github which means that it is production ready. The team has fixed the few formatting issues pointed by a servo team member.  The approach taken up by the team is in line with what is expected of them and it is a good start to advance the Webaudio API of the servo browser engine in the future.
0,Yes no conflicts at all which needs to be resolved
0,I believe this code is ready to be deployed, and if it isn't, it can definitely be picked up in the future.
0,The team did not add or improve any team cases from the first round. The full path coverage of 100% was already achieved in the first stage.
0,Yes, the Travis CI has passed.
0,The build has passed in Travis CI and no conflicts have occured.
0,The build passes and there are only minor warnings and issues which can safely be ignored.
0,Coveralls shows the following : Overall coverage increased (+5.5%) to 42.266% The coverage of menu.rb has increased to 100%. Great job team! No suggestions.
0,The team's test plan includes running the oscillator binary file using the command ./oscillator. This will run the oscillator.rs where various oscillator nodes corresponding to sine, square, sawtooth and triangle waveforms are generated. Hence, the user will be able to listen to these waves after a definite interval.
0,It's working.
0,100% coverage
0,This project doesn't involve the UI. It focusses on audio processing by fixing the missing audio nodes in Servo's WebAudio standard. Precisely it generates the sine, square, sawtooth and triangle waveforms. The code that was modified and included from scratch works as intended. 
0,2 Commit during 2nd round.
0,I'm not really sure how to categorize this project, but it seems to be structured and implemented properly.
0,As mentioned earlier, no new commits were added by the author.
0,Yes, this team has been keeping push new commits during the 2nd round.
0,There was a commit during the 2nd round. This was made after the user codeclimate pointed out a few issues with respect to the indentation and lengthy code. 
0,Yes, new commits were added in the second round to fix the code climate issue
0,Yes, the code climate issues were resolved.
0,No new commits were found. But this was because the project was already done and did not need any changes.  No suggestions.
0,The writeup is very detailed and gave me a good idea of what was going on with this project.
0,modify some to make it drier.
0,There are some new commits in the 2nd round.
0,Their code is pretty good, and they solved most of the problems.
0,well done! 100% cover. 
0,The writeup was really well explained.
0,The code is well written. No suggestions.
0,The code follows the Ruby style guide and makes good use of the Better specs documentation for writing Rspec test. The team has also made an extensive use of the describe and construct contexts which helps to understand the code written.
0,  They do not have these problems in the first round.          
0,Writeup is good and understandable. Test plan is written well indicating the steps clearly in what needs to be done to test.
0,Well-written and self explanatory.
0,I believe this code is ready to be deployed, and if it isn't, it can definitely be picked up in the future.
0,The project is in great shape and has already been merged to the servo repository on Github which means that it is production ready. The team has fixed the few formatting issues pointed by a servo team member.  The approach taken up by the team is in line with what is expected of them and it is a good start to advance the Webaudio API of the servo browser engine in the future.
0,It is already deployed on the production server
0,This is not an expertiza project, but the pull request does pass.
0,Not an expertiza project.
0,The code was not much changed after the first round. They added a few more sanitation check and rspec. Functions are not long enough and understandable.
0,I think the code looks good and very much follows the Ruby Style Guide. The code also is DRY. It looks well written and does not any changes.
0, The code is extremly well-written.
0,Videos and code explained very well.
0,Yes some of the issues were fixed.
0,The code was written clearly, DRY, and intuitive to follow the intended functionality.
0,Yes rspec and few changes were committed
0,Yes, a lot of commits were made mostly to fix the issues pointed out by the CI tools
0,Yes, there were many parts of the code committed during round 2.
0,5 new commits were made during second round
0,Yes
0,The team has a really good job of committing their code on a regular basis. There has been some code commits even in the 2nd round. 
0,Yes, there were few new commits
0,Yes there were some commits fixing the travis and code climate issues.
0,Yes, the team actively committed to the project during the second round.
0,The team seems to have thoroughly tested the use case and the coverage has increased.
0,Yes, the team has added test cases and it covers all the functionalities and issues.
0,No new test cases were added
0,Video showing test cases passed. Good Job!
0,YEs, the team has included the relevant test cases to test their changes and the overall coverage has increased by 0.04% which I think covers the scope of this project.
0,Coverage increased by 0.04%
0,Automated and manual tests have been added and coverage has increased by a very tiny amount.
0,Yes the team did add test cases that increased coverage. They are appropriate for the scope of the project.
0,Yes the team has added test for the UTF encoding acceptance. the coverage is not 100% and not tested with varied inputs but i believe would suffice for sanity check. Although the description of test in rspec file is ambiguous not clearly mentioning what exactly the test is expected to do. There is no test available for the issue 2 documented
0,Videos provided and the project is not deployed so cannot test from UI. But the issues are fixed and the system is working as expected. 
0,My testing shows things seem to be working as expected and documented.
0,The deployment link hasn't been provided. Though they have put videos for the same
0,It works as intended.
0,Yes code works.
0,From the video links that have been shared, it is very clear that the features are working as they were supposed to. Even the test cases are passing. I see no issues with this part.
0,Looking from videos all the intended features work
0,Yes the code works has expected. it accepts the utf-8 codes now and also parses HTML tags in reviews like expected
0,The write-up is well written explaining all the steps undertaken to make desired changes and displaying how the system works after the changes have been made (with screenshots). They have also added Test plans in the wiki page
0,Pretty nicely written Wiki. Test Plan also describes how various tests were performed.
0,It is well written, quite understandable. It clearly and adequately indicates the working functionality. I can understand what the project is about.
0,Properly explained write up, with old and new changes.
0,The writeup I must say has been one of the best I have seen so far. It clearly mentions all the issues that they were facing and were asked to tackle. The solutions are well documented as well. The screenshots help in understanding the problems that they fixed.
0,Yes the write up is good, if they were able to host it'd have been better for checking the work. 
0,The write up is well written, elaborate, and clearly elucidates both the manual test cases considered as well as the automated tests implemented. Screenshots of both cases were also included as well. Steps for manual testing were clearly written.
0,The team has considerably improved the write-up. The write-up was very inefficient and dint provide details of the code-base also the video was encoded and impossible to view in Round 1. The team has rectified all these issues with round 2. they have documented their fixed more clearly with screen shots and code this time. 
0,It can be deployed but first, it should be tested thoroughly. 
0,I think the changes are tested nicely and seem to cover all the necessary cases. This can be merged into the master branch and is ready for production use
0,Watching the videos, I feel it is ready but no deployment link.
0,As It did not pass the test, it is not ready. For a future team, end of this project should be a good starting place.
0,Its ready to be merged.
0,In my opinion, this team has done pretty good work and the code looks like ready to be deployed on the production server.
0,According to write up, it's good to go but since there is no deployed link I couldn't manually check.
0,Yes, just fix the few issues present and that should be fine for it to be merged into main line as the feature seems to work and there isn't any major code issue.
0,I believe this change that affects the system as a whole, needs more test to be performed in all affected tables and functions to be sure, no other part of the system is broken.My opinion is that, once all parts of the system test is done, corresponding to this centralized db change the code can be deployed to production.
0,Build did pass successfully. Could have written version specific code to avoid errors
0,Pull request build passes well and there are issues.
0,No, It did not pass travis ci and there are many conflicts that must be resolved.
0,Few minor issues with the build which can be ignored.
0,The travis ci test passes.
0,The build passed in Travis CI with no conflicts.
0,Not all changes has been verified successfully. few code climates rejects has happened as well. 
0,The code was already delivered in the first round. Hence, no commits this round. The author has regularly pushed commits. 
0,Team has added many tests. Coverage has increased from 1 to 38%, which is impressive. 
0,Yes, as mentioned in the problem statement, the solution is delivered. It works fine. 
0,The last commits were 12 days earlier, hence no new commits were made during the second round.
0,Yes, the team did add test cases and the coverage increased too. But the team didn't put any efforts after the initial review round, since the failed tests are still failed, and there are no new commits since 12 days.
0,Yes, the project did work as intended. The video demonstration and manual testing were enough to prove this fact.
0,The code is well written and well commented and follows ruby style guide.
0,Very good guidance. Works as intended. This project is about enhancing Juniper bookmarks. The features work as they are supposed to. Automated RSpec tests were added. Could have described the automated tests in the wiki.
0,No issues codewise. Can add test cases and after thorough testing It can be deployed. Yes other team can take up and fix the minor issues and build pass.
0,The write-up is very detailed with comparisons between previous and new versions, as to what features have been implemented but lacks on explaining how they are implemented. It can be improved by adding how the features have been implemented, why they chose this logic to implement the features.
0,They don't have code problem for the first round.
0,No new commit during second round.
0,Yes, everything works.
0,The writeup is great, in first round they did not have a test plan part. But they added it in the second part.
0,No new commits. 
0,The testing has been implemented and looks well implemented.
0,The functionality works and is evidenced by the video.
0,No. I do not think the code is ready to be deployed. I found the code change hard to understand, there are no comments and neither has the logic or rationale behind the new/changed code been given in the wiki. Besides, the build fails and there are a host of issues that need to be fixed.  Although all this might only be trivial issues and can be fixed rather easily, the code as of now, is not deployment-ready according to me. 
0,Yes 1 checkin was done on nov 2nd   
0,yes 
0,No new code was committed in the second round.
0,The writeup needs significant improvement. "No clear explanation is given as to which files are edited for which reason. Only file names are stated along with changes made. Why the changes were made and what do those changes correct is not given." - This review was given by me last time,and no improvement has been made in this regard.
0,Yes,coding practices seem upto standards
0,Doesn't seem to have new commits in round 2. last commit was on 2nd November
0,Seems to be working as intended. But all the features have not been implemented. The documentation mentions future work but no new code has been added.
0,No, all the features have not been implemented e.g 1. A reviewer can be recognized or credited if he added useful bookmarks i.e if the author has made use of the bookmark. 2. A function to add badges automatically if a participant had submitted more than threshold number of useful bookmarks. plus build did not pass as well
0,Overall the quality of code is great. There some variable which does not follow naming convection.
0,Yes, they were made.
0,Yes there is one conflict that must be resolved to go ahead reported by TRAVIS CI.
0,They did add the test-cases but the coverage only increased by .3 %
0,Yes, it works as intended.
0,The writeup is well written and self explanatory. 
0,No, its not as the coverage is increases by small amount.
0,Yes everything does seem to work properly. 
0,Since the Travis test has failed, merging the code would not be a good idea. The project doesn't need to be redone from scratch, some modifications to the existing work could make the project ready for deployment.
0,There are a few issues regarding code repetition and extra white space (especially in the controller rspec file).
0,No new code was added, nor was any necessary.
0,Many test cases were added, with overall test coverage increasing for the project.
0,It seems that everything works, though it was hard/confusing to find everything as per the instructions on the write-up.
0,The code looks good.
0,very nice code, easy to read and understand.
0,The code written by the team satisfies the basic functionality expected. The team followed the comments from previous round of using good naming conventions for certain variables.
0,Travis build : passed.
0,the build passed in Travis CI.
0,Yes, the Travis CI is passed. No conflict that are remain do be resolved.
0,The team has presented a working deployment to be possible. It passes most of the builds and can be deployed on the production server. 
0,Yes, apart from the 7 issues of minor severity from codeclimate, the code is perfectly well to integrate with the project. No, the project need not be planned and executed from scratch, it is implemented well enough.
0,The team has worked on improving the wiki document. The writeup now includes the Test plan section  that was suggested in the first round specifying the how the team setup an expertiza environment, the model functions used and the mock instance built for testing the model file. 
0,The write-up is well written in my thought, it is clear and understandable. 
0,very nice writeup.
0,The system operation is verified and works as intended as demonstrated from the video. Also, all the test scenarios are covered.
0,nil test were added, all scenarios are covered. 
0,The project successfully covered all the scenarios.
0,Yes, the team covered all the scenarios I could have come up with. I specially appreciate the work that they've put into the import functionality. They have come with with more scenarios than I could have even thought of, and tested it pretty thoroughly. 
0,Build says the overall coverage decreased but the coverage of the  Test has increased.
0,The team did not add any test cases since they had achieved a 100% coverage in the first round itself. However, certain changes made to the test cases included using proper naming conventions for attributes and following the DRY principle effectively throughout the model file.
0,They reached 100% at first round.
0,Coverage was already at 100%.
0,100 percent coverage.
0,The coverage is 100% since the first round. It seems there's no newly added tests.
0,Yes, the team covered 100% of the code they had to test. Also, the video given in the link was very informative and helped to understand the implications of the work done by the team to a far greater extent.
0,Yes new commit is done for second review,
0,Involves fixing code climate issues. 
0,yes, new code committed during the 2nd round.
0,There's no upload for the local folder. It seems that no new pull requests has been committed during the 2nd round, so I would guess no new code being committed for the 2nd round.
0,yes, the authors have improved the code. the team has worked on the issue which I mentioned in the previous review. The code doesn't seems to be confusing now but it still needs proper commenting to be done. 
0,They haven't made any change since round 1 review. Haven't changed the naming as well eg topic_id1 doesn't seem right to me. But other than 1 or 2 names, everything else looks clean. Also you haven't added comments to you code. YOu should add comments when working in a open source project.
0,A few comments could be included in code to make it more clear.
0,Suggested changes related to naming convention are not included in the 2nd round.  variable names : rop_topic_deadline1 , topic_id1 Puts statements are not removed : p topic_id1   Other than this the code is properly written following coding best practices.  
0,The code is well written. I did not see any bad naming conventions or bad coding style.  
0,there is only one commit made during the entire project. there is no new code added during the 2nd round.
0,There has been only one commit for the entire project.
0,Commits were made in second round 
0,No. There was a single commit throughout the project period and that was during the 1st round.
0,No commits were done in round 2.
0,Nothing changed since round 1. Haven't added a shorter video or a video with sound. Haven't made naming changes.
0,No, the code was last committed on Oct 31st.
0,There were no new commits in the 2nd round.
0,I don't see any code changes after the first round.
0,No need for test cases. (+1 for mentioning it in the Wiki!)
0,No test cases present but test plan covers it.
0,No, the team did not add any test cases and the coverage did not increase. The overall decrease was -13.6% to 34.007%
0,No new tests were added and coverage has also reduced. Some UI testing could've been done.
0,They have mentioned that its UI change and has been discussed that testing isn't required in there documentation. But i think you should still have mentioned something there. Steps to follow to check how your changes work. 
0,Not required
0,Test cases were not required for this project.
0,The test cases were required as the chnages were related to UI. The team mentioned the same in the wiki.
0,yes, the ui operations works as intended.the features fixed now works as intended.
0,It's working.
0,Since the project was deployed hence manual testing could not be done but the screenshots show that the project works as intended.
0,The feature works as per the video shown.
0,Fro video it seems to work as intended.
0,The link to the deployed application was not available. So testing could not be performed.
0,the video explains the new functionality and the functionality is working as expected. Good job!
0,Yes, it works as expected.
0,Writeup has been improved after the first review. The codes now look more comprehensive.
0,Writeup is good and understandable. Test plan is written well indicating the steps clearly in what needs to be done to test.
0,The write was good and well-written. However, it would have been better if some screenshots were also present in the writeup. May be juxtaposing the screenshots of 'before and after' of fixing the issues. That would have made the write-up easier to understand.
0,The deployed link application again goes to video only, if deployment isn't done they could've removed the link.
0,Write up isn't good. They have just added there code in the write up without explaining anything. Plus no comments in code. Code snippets in writeup are going off the page.
0,The writeup is good and clearly explains the issues faced. However instead of putting in the code changed, I feel it would be better to have screenshots of git commit history where we can see both the previous code and new code to get a good idea of what actually was changed.
0,The write-up is well written and organised. Everything looks fine. The team should have mentioned about the approach taken to solve the mentioned problem statement which will make the implementation easier to understand. Also the team could have included few screen shots in the write-up.  
0,some improvements are required to deployed the code onto the production server. The code should included proper commenting so that if the future team picks up from this project, they could know what exactly the code is doing.
0,It might be good to move the long function to smaller functions. But the code looks clean and understandable.
0,In my opinion, the project is ready to be deployed and does not need to adopt a different approach.
0,The feature seems ok but it can't be deployed yet with all pending issues.
0,Since the code coverage has decreased and the video demonstrates a proper working
0,The deployed application was not available, so it cannot be accurately predicted if the code functions as intended. However the vedio links in the google drive show that the issues have been resolved through existing code. 
0,ll the checks are failing currently. The changes have a lot of robocop issues as well which should be fixed. Also the CI build is failing at the moment. Some of the tests are failing because of the change. 
0,Code looks fine, but build issue has to be fixed.
0,the build is still failing and there are issues which needs the team's attention. there is one warning and 1 error which needs to be fixed by the issue. according to the error, team should remove the debug code from the pull request.
0,Travis CI build is not passed. Though this was a bit common even for the second review, the 'codeclimate' issues are still showing.
0,No, the build did not pass in Travis CI. Several checks had failed but there was no conflict.
0,None of the tests - travis ci, code climate have passed
0,Everything is failing. Code climate has 56 issues. Build is failing. Haven't made a change since round 1.
0,The Travis test has failed and overall coverage has also decreased. There were many errors in the build log of travis.
0,All the checks including the CI build is failing.
0,Build is failing in Travis CI
0,The code is perfect right now.
0,Yes, through their commit record, I have seen some improvement.
0,Well written code.
0,Yes, there's new commits.
0,yes, new code committed during the second round.
0,Yes, according to the commit record, they have commit new code during the 2nd round.
0,Yes
0,The second commit is perfect. it got perfect coverage. But it seems that the 100% coverage was so since the first round. But the new commited code as better code style and no more indentation issue
0,100 percent coverage.
0,Yes, they have added some test cases, and coverage increased.
0,100 % coverage achieved. Great work!
0,The team did a great job in increasing the test coverage to 100%.
0,This is a testing project. The tests have covered all the scenarios possible.
0,Yes, it works as intended. 
0,The code coverage is 100%. Every test case passes after a manual check.
0,great writeup.
0,The document is well written with all the required details.
0,Yes, for production code itself is perfect.
0,As explained in the video, the build seems to work fine.
0,Yes, it passed all the pull requests.
0,The build successfully passes Travis CI.
0,The code seems to be good. It follows the principle of good design. Even though I do not know RUST, the use of variable names was very intuitive.
0,The code doesn't make sense to me, someone who isn't familiar with this project, but it does seem to be formatted well.
0,Some commits were made to rectify old errors and get an approved pull request
0,Yes, there is 
0,Yes there new commits in round 2.
0,Several new commits were added during the second round.
0,I don't see any tests added by this team, although they do mention that their code additions were not particularly testable except with the existing automatic tests, which they enabled.
0,This is not an Expertiza project.
0,To test the system operation the project has to be built and run. The Sample HTML file was used to render a Test Canvas as given in the Wiki
0,When tested the project does what was desired to be done.
0,This system doesn't have a UI I can view as it seems to be a browser add on.
0,Write up is good, with code flow diagram and test plan (pull request).
0,The Wiki is pretty much strong with plenty of info.
0,The write-up is lucid and has now incorporated the changes that were made in the round 2. It starts off by introducing Servo, Rust, OffScreenCanvas, web worker, Web IDL. The authors then describe the code flow using a flow chart which was really appealing. I especially liked the Under the hood section, which elucidated the files (OffscreenCanvas.webidl, OffscreenCanvasRenderingContext2D.webidl, offscreencanvas.rs and offscreenrenderingcontext2d.rs) that they modified/created in this project and their functionalities concisely. The write up then includes the code from the above four files and finally ends with the test plan with 2 approaches, links to pull request and references.
0,The write-up is good. I liked the use of the flow-chart to explain the flow of their code and explain the functionality. I think that this was the first write-up that used a flowchart.
0,The writeup is the best part about the project. It describes clearly what and how the work is done. One can clearly understand their working strategy from the writeup.
0,I'm unable to get a really good idea of exactly what was done here for this project other than that it can be used as a display and rendering port and that it improves fail-safeness of browsers.
0,The code implementation is correct , so with more edge test cases and after resolving the warnings in the travis test, the code would be production ready.
0,The code is well modularized and appropriate names are used for methods.  
0,The code is very well written and comments are properly given. Also the variables are descriptive and ruby guidelines are followed.
0,First review comment weren't addressed.
0,new code was comitted.
0,Few commits can be seen during 2nd phase. Mostly are for test plans.
0,yes new commits were added during the second round.
0,No. The last commit was on oct 21st.
0,The code was committed frequently during the second round. 
0,Yes lot of code has been checked in most oct 31. Good work 
0,The team added many tests. They seem like they would have high coverage, but, with the failing build, this cannot be confirmed easily.
0,sufficient test cases added.  
0,Not able to get coverage from the log: https://coveralls.io/jobs/41685719
0,ui works as intended.
0,The project is about improving email notifications. Yes, it works as intended. Screenshots of the code and changes made have been clearly described. The tests cover all the scenarios.   
0,The features work as intended and the emails are sent to the concerned party.
0,The write-up is good and it clearly explains what each portion of the changed code is intended for.
0,it is good starting place for future team to pickup.
0,The code is ready to be deployed onto the production server and in fact, the project was even partially merged.
0,No new test cases were added from the previous submit. Test cases already had full coverage so there was no need for additional testing. I was unsure how to answer this question as the rubric says any new test cases added.
0,All code is good, a variable name was even improved during the second round.
0,A small change was made, but there wasn't a need for drastic additions. 
0,All necessary code is passing the build.
0,The video makes it clear that the tests work and are covering all aspects necessary. 
0,The write up is still good.
0,The code is quite good.
0,The coverage was already at 100%, but they did update it to pass the build.
0,Yes. Variable name changes suggestion was incorporated.
0,Travis tests have failed. No conflicts. The overall test coverage has improved.
0,It is a testing project. The overall test coverage has improved. The tests thoroughly test the menu-bar and the sub-tress of menu bar(sub-menu options) as per the requirements.
0,No UI or functional changes are applicable. All the 29 tests run successfully
0,It is very well documented. No changes were required even during the first review.
0,It improves the test coverage, So once the Travis tests pass, It is ready to be merged with the Master branch. However no production deployment is applicable for test coverage improvement.
0,nicely written test cases
0,Did not pass Travis CI
0,Not deployed
0,There is one new commit in round 2.
0,Yes the coverage is 100% already.
0,The code written follows the ruby on rails best practices. 
0,Yes, the team has made one commit during the second round. They updated an ambiguous variable name.
0,No, the pull request didn't pass the Travis CI build, but it doesn't have any conflicts with the base branch. 
0,Yes, the team has added plenty of tests. The test coverage increased to 100% whereas the overall coverage has increased by 11.4% 
0,Yes, the test covers all the scenarios, including testing values of variables in the menu node and null case scenarios.
0,The team has corrected a single bad name used in the tests. There has been no change done to DRY the code yet. there test as mentioned earlier has few segments repeated throughout each test. For ex, the instantiation of Menu object. There has been no comments added for the code yet.
0,Yes, there has been one commit in round 2, rectifying the bad name used
0,The code is well written, the way the list function was split into multiple modular functions is appreciable. A great amount of effort has gone into fixing the issues.
0,New code added is written well with DRY and no long or complicated functions. I could see file updated has changes on line such as tab and space. Team could work upon indentation. 
0,The code is well written. No issues with naming conventions or coding style.
0,The code is very well written and comments are properly given. Also the variables are descriptive and ruby guidelines are followed.
0,The code is clean.
0,overall only 3 commits are made during the entire project. no new code was committed during the second round
0,The last commit is on 10/31.
0,No new commits in the second round.
0,No New commits.
0,Could not see any new commits after last change. Also commits distribution is not equal.
0,No changes were committed in round 2.
0,Yes.
0,No new test cases are written.
0,Test Plan could be described better.
0,Team could have added test plan in wiki along with test covered and test description. Also could have worked upon increasing test coverage.
0,Test are written 
0,The team has added testcases but lacks coverage. The overall coverage decreased by 10.6% to 37.063%.
0,No test cases are added by the team and overall coverage of the project is decreased by 10.6%.
0,The operations work as intended but need to have automated test cases.
0,I could not get a deployment link or watch a video that demonstrates the work done. So, I'm unable to test.
0,I could neither test it manually nor there were any videos to check the functionality.
0,Write-up is explained pretty well.
0,I think the code need some amount of refactoring before it can be merged with the expertiza master and pushed to production. Some of the functions implemented by the team seem quite long and they should try and restrict the functionality implemented in each function to just one.
0,The code seems very well written and approach seems correct. If they improve the documentation and add test cases after thorough testing, it should be good to be deployed. As it stands, another team in future can pickup the code and implement these improvements.
0,Yes, the code has been written aptly and to the point. The intention is clear.
0,The Travis CI build has failed.
0,Pull request is not passed as well as Travis CI is also failed.  
0,Travis CI build is failing. Other things are fine.
0,The code has been written as per the coding standard. The code written by the team adheres to dry principle.
0,The code added during this project adheres DRY principles. 
0,The code was written at it's best
0,Yes, the code is well written.
0,Yes, code is well written
0,The team has followed rails best practices while writing the code. 
0,All coding principles are followed. //Add more comments.
0,No new changes were committed during the second round.
0,No new commits were made during the second round.
0,No. They were no commits during round 2.
0,No new commits
0,Yes, there are few commits after round 1
0,No, the team hasn't committed any changes during the second round. The last commit was on 31st October 2018.
0,No there were no commits made after Oct 31st.
0,The team did add test cases covering the functionality. The overall coverage increased by 0.004% to 47.652%.
0,Yes, they did add the test cases and the coverage increased to 80%
0,coverage is same 
0,Yes, it increases the coverage too
0,Changes are covered with new test cases.
0,I followed the steps as mentioned in the wiki and it works as expected.
0,Yes Everything works perfectly fine.
0,Works properly
0,Yes, the UI changes according to the specified conditions. After logging in as a student, we can see the team name being displayed at the top of the page.
0,The features for the issues fixed work as intended.
0,Everything looks fine to me.
0,The writeup is great. I was able to understand the issue and do manual testing.
0,It was very well-written and self explanatory.
0,The wiki page has been written concisely. The team has used screenshots which ease the understanding of the work they've done. 
0,The write-up clearly explains the issues faced and the code fixes used to solve them.
0,Comprehensive.
0,Yes, the code changes are simple and to the point. I don't see any other way it could be done. 
0,The user name issue seems to not have been resolved when tested manually. The code may be deployable and would not cause a problem since there are not many complicated changes.
0,Yes, the changes have passed all the checks and can be deployed in production. 
0,Excellent work
0,In good state.
0,Yes, the build passes Travis CI
0,The travis builds on both pull request have passed.
0,No. The test failed.
0,There are no conflicts
0,Yes, the pull request has passed the Travis CI build test and does not contain any conflict with the base branch.
0,Yes, the Travis build is passing.
0,The code is well written and understandable. 
0,The code is well written and has proper functions to handle each action. Not too long functions and names are aptly defined
0,The code seemed to be well-written and properly commented. Comments made it very easy to understand the code.
0,Overall the code is written really well. Snake casing has been thoroughly followed and in case of JavaScript, the camel casing is followed.  No additional suggestions.
0,Yes, code has been committed in round 2.
0,Last commit was on Nov 6
0,Few commits made in 2nd round 
0,No link provided but the videos shows that everything is working well.
0,2 Issues are resolved and when checked from UI, features are working as expected. Seems like no code refactoring is required. 
0,Manual testing could not be performed due to lack of project deployment. But, the screencasts show that everything works fine.
0,The UI seems to work as it should, at least from the writeup. 
0,The writeup is great and descriptive. I could find all the info I needed.
0,The writeup is very explanatory with all the screenshots attached which helps in better understanding
0,The write up is well written and explain the features that the team has implemented in a verbose manner.  The writeup mentions solution description which gives a walk through about what steps were taken to implement the functionality.  No suggestions.
0,The team has definitely resolved one issue. This could be a starting point for future teams.
0,Yes, the code is written aptly and to the point. I don't see any issues.
0,Yes just a few test plans needed and the code can be deployed on production server. 
0,This code can be deployed after solving the issues generated by Travis CI.
0,The approach seems to be correct and the writeup ready to be deployed.
0,This is a code and project that has been honed into perfection. The team has shown due diligence and taken care of long and complicated functions and somewhat shaky coding style from the last submission. They have refactored the code to perfection thus fulfilling all their objectives. 
0,The overall structure of the code looks good and all the coding standards have been followed. I feel like there could have been more comments to support the large amounts of changes that have been made.
0,The code follows the general guidelines for standard RSpec practices and also keeps the DRY principle in check. It makes a good use of names to specify what each attribute is assigned for.
0,No new commits were committed for the second round. It was cleaned up 13 days ago.
0,No new commits were made during the second round. The latest commit was on October 31st.
0,There was a substantial amount of commits done in the first phase of the project but I don't see any commits in the second phase. This could very possibly be because the team might have completed the requirement in the first phase itself.
0,Yes, an excellent job in that regard. They have first explained their test plans, then even provided links to their RSPEC tests which I checked. Then they have run and shown their screenshots of the Rspec tests going through successfully. 
0,According to the screenshots uploaded by the authors, the features work as they are supposed to. New questionnaires have been successfully created.
0,Yes, the code has been refactored to cover all the intended scenarios and the tests have been very well document along with testing the edge cases. As per their approach the first segregated the tests for questionnaires_controller into two test files, questionnaires_controller_spec and quiz_questionnaires_controller_spec and separated the tests for CRUD operations of quiz_questionnaires_controller into the quiz_questionnaires_controller_spec, renaming them from view_quiz, create_quiz and the like to view and create. This in my opinion is a thorough enough test. 
0,The system works as intended. The project required to make the features work such as removing hardcoded parameters as save_choice method, replacing switch statements with subclass methods and creating models for the subclasses. 
0,Extremely well written Wiki Page, thorough and to the point with enough technical content and relevant screenshots pertaining to the before and after scenarios of the problem statements. 
0,The writeup has been pretty well written by the team. Introduction to the problem statement, the implementation details, and the test plans have been stated.  
0,The writeup gives a gist of the work carried out by team throughout the project. The team added the Test Plan section describing the testing procedures carried out. It is also structured nicely allowing the reader to understand the project in it's entirety.
0,Surely, once the code is sufficiently tested by the TAs, then it is can surely be implemented as a change. Even so, the Travis CI and the overall Coverage should be verified first. Going by their page, it is a finished project and hence no use giving it to the next semester as a project. 
0,The code has been working fine, and once the integration conflict is solved, seems ready to be deployed. The future team will be able to pick up from where the current team has left.
0,There is significant improvement in the write up after the first round. It gives good idea of the project.
0,The code changes seem to be fine. I do not see any problems regarding the code as it is pretty well explained in the wiki as well.
0,Overall, the code was well written. As mentioned earlier, the only change the team had to make was add color codes. Hence, no mistake was made in the first round itself. Good Job.
0,Everything seems good.
0,CSS snippets are still written inline. No changes were made after round 1
0,Code looks good, there weren't many changes and mostly are HTML changes so no commenting is required as such as well. 
0,The code was very well written. However, that should be a given considering the complexity of the project which wasn't a whole lot.
0,Code is still using DRY principles
0,No new commits were made during round 2.
0,The last commit was made 9 days ago as per the given link. There were not many changes required, so seems fine.
0,I can not see any new commits in second submission as the functionality was working properly in first submission itself.
0,New commits were not added in the 2nd round. In my opinion they were not required as well as the team completed their task in the first round itself.
0,No new content was necessary during the second round.
0,No there were no new commits due to the fact that were no changes to be made
0,Yes
0,No new Commits
0,No test cases were added. No real scope for the test cases to be added to test changes made to HTML code.
0,The test cases are added with good explanation. It does increase the code coverage. The thing I liked that the screenshots itself speak for the test cases.
0,As mentioned in wiki page by team, color change does not affect button functionality, hence no test plan is required. Hence giving full points here.
0,Um, somehow your commits increase the overall coverage of the project (and as mentioned in the write-up, test cases aren't possible). 
0,It's UI project, testing isn't required as such. They have still mentioned in there documentation.
0,There are no test cases as it is an UI specific project
0,No tests were added as part of the project. just minimal UI changes
0,The code consists of small methods that mostly test one thing. This results in high readability. The team has made an extensive use of 'context' constructs which further enhance the code documentation. Moreover, the team has improved the .sort_by_name method making it cleaner and easier to follow. This was complemented by the fix of bad names that were present in the first round (e.g. stu1, p1 etc.). One suggestion pertaining to the '#scores' block would be to use specific assertions of fields instead of testing the object via inspect method and comparing it to the string value.
0,The code coverage is ~94% which passes the required threshold.
0,The writeup is comprehensive and fully covers given functionality. There were no significant issues that needed to be fixed from the first round. 
0,Code was cleaned up 5 days ago.
0,Code makes good use of rspec's describe and context options, and manages to achieve ~95% code coverage.
0,Coverage increased by 3%.
0,Video demonstrates working and passing tests.
0,Well Written
0,Documentation is well-written, instructions is given. Problem statement and solutions are provided. Screenshots are given.
0,Yes, new commits were done in the 2nd round.
0,There are minor fixes related to code style.
0,The team makes several commits during the 2nd round to make improvement.
0,Yes the team added test cases and the overall test coverage has increased.The team has added a lot of tests and I do feel it does cover the range of this project.
0,It is a testing project so test cases are added. The coverage has increased to 97.5 percent for Vm-Question Response Model.
0,Yes, the coverage has increased and test cases have been added. Coverage is more than 50%.
0,Coverage has increased from 11 to 97%. It is impressive. Great Job! The team has achieved what they were looking for.
0,The team added new test cases and make the coverage increase also the overall coverage for the whole system has increased
0,There wasn't any link provided to check if the UI was working fine. But there was a YouTube video showing the tests successfully running. And also the tests did seem to cover almost all the scenarios.
0,Yes almost all scenarios for vm_question_response model is covered. Good work.
0,This testing project covers all the scenario as required.
0,Since these are unit tests, no UI test needed.
0,The write-up explains what functionality is tested and why. The coverage is also mentioned along with code snippets which is good.
0,Writeup is well written and gives explanation for all the requirements.
0,The code is well written, the way the list function was split into multiple modular functions is appreciable. A great amount of effort has gone into fixing the issues.
0,Code is written very well, comments are detailed and functions and variables are named appropriately. (would just like to point out, in student_task_helper.rb#due_date_color , the variable "rtn" could've been named better!)
0,New code added is written well with DRY and no long or complicated functions. I could see file updated has changes on line such as tab and space. Team could work upon indentation. 
0,The code is well written. No issues with naming conventions or coding style.
0,The code is very well written and comments are properly given. Also the variables are descriptive and ruby guidelines are followed.
0,The code is clean.
0,The last commit is on 10/31.
0,Test are written 
0,the team has implemented there testing plan and have been very thorough with there test cases. They seem to have considered a lot of cases and have implemented them in rspec. The only thing that they should do is use different commits for adding test cases.
0,Well, the code looks good and very much follows the Ruby Style Guide. The code also is DRY. It looks well written and does not any changes.
0,It is given in wiki that most of your test cases depend on checking the output. However, like I mentioned in my last review, several test cases like the ones mentioned below can be automated. This is especially true as TDD is explicitly mentioned in your problem statement: "Write the required tests before implementing/refactoring the methods in the above-mentioned classes". Add past due assignments to the students task list (on Student View). Check for correction in due dates of assignments (when an assignments due date is edited, it should be appropriately moved from the Past assignments list to the Current Assignments list if needed) On Student Task page, separate the list of 'teamed with' students from the current tasks box. 
0,Yes.
0,The code is both succinct and very carefully. i have not done the code check in the first round. but for this time, there's no bad names, functions are standardly-named, good alignment and commenting.
0,Project was on implementing test cases. The test cases are well written and the code coverage has increased.
0,The code is very well written and follows good coding practice
0,The code follows Ruby style guide.
0,Yes, it works as intended. It would be better if you could add a video recording of the flow/screenshots of the flow in the test plan. 
0,Yes, new code was committed in the 2nd round.
0,Yes code was committed to follow clean code practices based on first review.
0,Write-up is explained pretty well.
0,The wiki documentation has been updated. All the information has been documented in a neat and logical manner. The write up adequately provides what functionality the work is related to. They havent updated any part of the wiki documentation but overall their documentation is concise and to the point.
0,before deploying the project onto the production server, this projects asks  for some attention. new test cases should be added to the project. I can't say much on that.
0,Yes, the code has been written aptly and to the point. The intention is clear.
0,Test coverage remains the same at 94%. Hence, my suggestion/opinion is same as the previous review.
0,Yes they have added test case and it has increased the coverage by 3% and has increased the coverage to 39.721%
0,Project was writing unit test cases and the newly written test cases has increased the test cases.
0,Test coverage for assignment_participant model increased to 94 percent.
0,Yes, the team has added test cases and the team has covered every functionality.
0,The code seems very well written and approach seems correct. If they improve the documentation and add test cases after thorough testing, it should be good to be deployed. As it stands, another team in future can pickup the code and implement these improvements.
0,Yes the test case covers all the required test cases along with the edge cases .
0,Project was on writing test cases and the newly written test cases has increased the coverage.
0,All the test cases pass. Majority of test scenarios described in document is covered and automated
0,The writeup seems to be well written. It is concise and to the point.
0,The write up is very well documented as it explains the test plans and also what changes have been made along with the reference to the files which have been modified
0,Very clearly writeup
0,It is well written, quite understandable. It clearly and adequately indicates the working functionality. I can understand what the project is about.
0,The writeup is complete and well organized. And it also mentions the corresponding change in origin code.
0,Yes as the test  case increase the test coverage and the build pass is 100% , thus the code is ready to be merged
0,Yes, it is a good code.
0,Yes, the Travis CI build was passed. The conflicts could be seen resolved.
0,Yes, no conflict that's not resolved.
0,the code is very well written. there are no bad names, long functions or any lack of comments. The code written by the team is self-explanatory.
0,Code is short, variables and functions are well-named.
0,The code follows the DRY principles correctly
0,Yes, improved the code.
0,The code is concise and easy to understand. The team has provided comments to explain the logic of the new function created which really helps.
0,The code was well-written in the first round itself and followed good coding standards.
0,The code was already well-written . No changes were suggested in the first round. The team did a great work in following coding best practices. 
0,yes,  2 commits were made in round 2.
0,A few bug fixes were made after the first round of submissions
0,Yes, new commits were done.
0,yes
0,Yes. Twice during the second round.
0,There were only 2 commits made during the second round. However, the team had mostly implemented most of the functionality during the first round, maybe due to which there are less commits in the second round
0,There are no new commits during second round.
0,The team did change the project as there are 2 new commits. The CI build is still failing .
0,yes, the team had added 2 test cases and the coverage increase is there as well. Newly added tests are enough to cover the range of project.
0,This feature doesn't say the view is of which student. Looking at student_task/list page is confusing since I don't know who am I (which student).
0,The team has added test cases but the coverage did not increase by much
0,Coverage has increased.
0,Coverage increased by a good margin
0,No new test cases are written. From the previous review, The authors have converted all the cases discussed in Test Plan into automated tests. Overall coverage increased (+6.3%) to 43.07%
0,The team has added test cases and increased the test coverage.
0,The team has added new testcases in the new submission. The code coverage has also increased. Good work with the testcases.
0,The Ui and system operations works well as intended. They newly added features works perfectly as they are supposed to do.
0,Everything works as expected except for the case mentioned above.
0,No credential provided for login. Hence, couldn't check.
0,Works as intended. Features work as they are supposed to. Tests cover all scenarios.  
0,The system works perfectly as intended.
0,The system works as intended.
0,The video explains the new functionality and the functionality is working as expected. all the scenarios are covered in the rspec test as well. Good job!
0,The write-up clearly mentions how to check/test the work done by the team. it includes almost everything the team has changed during their project.  It clearly mentions the filenames where the changes have been made. All the references are also included in the write-up  
0,Overall, it is well written.
0,The writeup has adequate screenshots to help understand the problem statement
0,Contains all the required explanation.
0,Very good. I go by what I said in the first review. It is very legible and I could understand what the project does and how the project does what it does.
0,yes, the code is ready to be deployed onto the server. this is a good starting place for future team to pick up.
0,Looks fine. My biggest concern however is, which student's view opens here?  Add the feature of impersonation to this, and we get two identical views of student_task/list page: one with this particular feature, and the other, with impersonation feature. What is the difference between these views
0,The code has mast elements ready but there can be more test cases generated with better test coverage. The code need not be rewritten from scratch, it just needs to include some more of the expected functionality
0,According to write-up and video yes but since I couldn't manually check I would say no.
0,the build fails and there is one warning and one error which needs to be fixed.
0,There were some build issues raised by Travis CI which have not been handled yet. However, there are no merge conflicts with the master branch.
0,No pull request link is provided 
0,Travis failed
0,The color scheme added during this project is working when tested through the UI.
0,With the link provided, operation from UI are working as expected. No refactoring is required for the code change made.
0,Yes, as per the scope of the project, all works beautifully well. Great job team.
0,Works as intended.
0,Yes the color change is as per project. No new tests or re-factoring done as part of the project
0,The writeup is extremely well written. In the earlier round, I gave the team a suggestion to add the steps needed to check out their changes. They have added this part into the wiki now. Thank you and well done :)
0,Write up is written a neat and understandable with system screenshots and steps to test system manually.
0,The writing is good and completely covers the scope of the project.
0,Writeup is good. Explains everything they have done and how they have implemented.
0,No significant change from last round. But the writeup was good. Elaborative with screenshot of code and UI. It clearly mentioned the need for the change. But no approach mention but to be fair, the scope of the project doesnt call for it
0,Yes. The changes made are very basic and should not affect the functionality of the application in any away apart from the cosmetic changes made during the project.
0,Yes . Code seems ready to deploy. Also the approach taken is simple and very much acceptable.
0,I have no concerns regarding merging this into production.
0,Since, there are UI changes, they seem pretty improved
0,I believe the code is the best that it can ever be and should be merged with the expertiza.
0,The build request passed.
0,Well the build technically failed, but seeing as how that's practically impossible for this project, I'll give it a pass.
0,The build has passed and the changes are also well explained in the wiki. As expected, the screenshots of the test cases are also displayed.
0,The team has changed a model and a html page. But there are no new test cases attached to the changes.
0,Coverage increased by a good margin
0,No new test cases are written. From the previous review, The authors have converted all the cases discussed in Test Plan into automated tests. Overall coverage increased (+6.3%) to 43.07%
0,The coverage has increased by 6.3%. The team has added new tests that check whether Assignments is absent in the menu in default view and there is an option to Open Student View. The tests also check whether there is a close button present when the instructor is in the students view, also it checks whether the Assignment is present by default in the student view or not. 
0,The team has added test cases and increased the test coverage.
0,The team has added new testcases in the new submission. The code coverage has also increased. Good work with the testcases.
0,Very good. I go by what I said in the first review. It is very legible and I could understand what the project does and how the project does what it does.
0,The code has been written as per the coding standard. The code written by the team adheres to dry principle.
0,The code follows DRY principles
0,Bad names like "review_num" have been used.
0,there was no complicated functions , code strictly followed DRY principle
0,No Changes in the code from the last time. Code is written properly.
0,The code is well-written and follows good programming style, has good naming and is DRY. The team has not implemented any suggested changes since there has been no commit after first round.
0,Code was well written, DRY, and intuitively done. Easy to follow the functionality implemented.
0,No new commits have been made in round 2.
0,The last commit I see was 23 days ago, which seems that there wernt many changes done in the seond round. The wiki mentions the suggestions at the end, so it would have been good to have the code changes and tests for the same.
0,All the commits were completed by Oct 31
0,No commits were done in 2nd round.
0,the last commit I see is from Oct 31st.I'm assuming they did not have to change much in the 2nd round
0,No Commit,
0,A small amount of new code was committed in the second round.
0,No new commits were made during the second round.
0,No new commits have been made since the last round. However, there is nothing significant as just codeclimate fixes are remaining.
0,I couldn't any new  commits in the second submission, though the functionality seemed to be fulfilled in the first round itself.
0,Yes the team has added test cases.
0,Yes, the coverage has increased and has almost reached to 50%.
0,This project is refactoring and there were not much of functionality changes, I see that teams have changed the existing tests make sure there is no coverage miss
0,The test coverage seems to have increased slightly. Since this is a refactoring project, I wouldn't expect testing to be the focus, so that's pretty good even though the added test case most likely doesn't cover all the work done here.
0,The team had added a test case in the last round, which I think was sufficient to test basic functionality.  There have been no additions to test cases in the second round.
0,Team added several test cases, and the coverage was seen to increase
0,Yes the code addresses all issues.
0,Most of the functionalities that were required have been implemented but the final changes haven't been merged due to some build issues on Travis CI. The tests are quite comprehensive
0,Yes, refactoring did not impact on the existing operation at all.
0,The system operation works as intended.
0,Yes, this is a refactoring project and the UI works as it is supposed to, after their code changes. All the functionalities seem to be intact. Good job there!
0,The system operation works as intended from the link provided.
0,The team has explained the issue and the solution they chose with enough   details to understand to way of implementation.
0,The authors should have added screenshots for the changes made in the code. Otherwise, the purpose and work done has been explained well.
0,overall it is well written, they can add reference section where they can put the link to the project etc.
0,The write-up is to the point and explains their approach neatly. The team has made efforts to update the write-up with the provided suggestions and it has improved the write-up.
0,The writeup was elaborate, and fully elucidated the test added and the removed methods and SQL lines and their scope. 
0,Yes  I think with additional testing it can be deployed.
0,I feel there are more number of test cases that need to be covered before deploying this in PROD.
0,I strongly believe that this code is ready for production server
0,Changes are working perfectly.
0,I think this code is ready to go, because it is better organized and structured than it used to be.
0,I think that it is a neatly written code and once the integration issues have been resolved, it should be ready to be deployed on th production server.  The code being readable, can be easily picked up by the future team.
0,Travis CI test has been failed on Github.
0,build is passing on Travis CI. there are no pending conflicts
0,Few issues with the build but I feel they are trivial.
0,The pull request did not pass the automatic build requirements. It seems as though this team worked very hard to try to fix the build errors.
0,Ignoring this question since it is an OSS project.
0,Though there were several build fails during the first round which seem to have been triggered on bundle exec, the final build passes in Travis CI
0,The code was well written, DRY was not violated.
0,The code seems to be dry, and I had no issues with it in the 1st round.
0,It looks as good as round 1.
0,Naming looks good, they had already added comment to the code in the first review.
0,Don't see any DRY issues. Well Written Test code
0,The code is well written.  No suggestions.
0,No there had been no bad names or wrong conventions used even in round 1. so no change there. The team has made few modifications to beautify the code by using ternary conditions which did make the code elegant. No new comments added.
0,Commits for Code Climate changes were pushed in.
0,The team added new commits in the second round as well to improve their code style, improve codeclimate issues and changes other reviewer's suggested. Very few teams have done this. Great work.
0,Several commits were made to decrease the code climate warnings.
0,Yes. They are updating code to fix code climate issues.
0,Yes, there are new codes committed during the 2nd round.
0,Yes commits are done to fix the code climate issues.
0,I found many commits related to the code climate fixes.  No suggestions.
0,The number of commits since the 1st round is impressive.  Significant improvements have been done pertaining to naming, indentation and overall Code Climate issues.
0,Test cases were added. Overall increase in the coverage range observed.
0,Yes, the team added relevant test cases which increased the overall coverage.
0,They achieve 100% during first round, so I don't think there are any new test need to be added. 
0,Yes, they coverage is 100%.
0,Yes the project was about testing and coverage has increased.
0,100% coverage is achieved.
0,The coverall showed that the Overall coverage increased (+3.2%) to 39.999% The coverage of the participant.rb file is 100%. So great job team! No suggestions.
0,The code coverage was 100% in the 1st round.
0,YEs the project was a test project and the team has managed to achieve 100% coverage of the model. There was no increase in coverage from Round 1 to Round 2
0,The project works as intended. Test cases are showing a positive impact on the results.
0,Yes, the tests cover all the scenarios one should check for. Great work !!!
0,Edge cases are tested, and all scenarios for each method are tested. 
0,Yes, they coverage is 100%.
0,Yes a lot of cases concerning a participant has been added.
0,yes, 100% coverage has been achieved as shown in the video.
0,The tests specified in the participant.rb file run perfectly well . The same has been demonstrated in the video mentioned above. No suggestions.
0,The code coverage is 100%. Every test case passes after a manual check.
0,The writeup was significantly well written. Almost all the changes were covered.
0,The team has written their wiki page in a very detailed manner. They even added the video links which were missing in the first round as suggested. Thank you and good job :)
0,Easily one of the most clearly documented projects I have reviewed in this class so far. I liked their organization of the Test Plan within the write-up.
0,The wiki page provides clear details about the work, and very easy to understand. Just like round 1. 
0,It is crisp and to the point, there are no clarity issues either.
0,Well explained, all the test cases have been explained and are self explanatory as well.
0,Well Written
0,The writeup is really well written and has covered all the desired aspects along with the test plan. No suggestions.
0,The writeup clearly defines the primary objective of the project and justifies the reasoning behind introduction of additional helper constructs like participant factory. The authors complement the descriptions of each test case with associated block of code and elaborate on the details of their inner workings.
0,The write-up and screen cast were both very explanatory. It included detailed code, the need for the test of partipant.rb and the use of the model. There was no change required from the initial write up.
0,The code is well organized and written & ready to be merged into the production server.
0,The tests are good and it can be merged to the main line.
0,Did not find problems in the code in the first round. Follows ruby style guide, commented and good naming. Very well written.
0,The last commit was 21 days ago, so I fear that that there are no commits being made in round 2. Could have done a commit in round two just to confirm that there were no changes required in round 2, so that the reviewer may be certain about it.
0,I don't see any new commits for round 2, mostly nothing was needed
0,No new commits.
0,The team has added test cases: 1. To check that if there is no rejoinder for the review then it redirects to new author feedback page. 2. To check that the other teammate is able to edit. 3. To check if the page is redirecting back to review. 4. To check if the rejoinder by a participant of a team is saved properly.  The overall coverage decreased from 48% to 47.601%. It decreased by 0.04%
0,The coverage has decreased by 0.04%. The team has added some tests which were not present in the initial submission. 44.9% of the changed lines are covered
0,Everything is working
0,The team has not provided steps for manual testing even though this was requested during round 1 review.
0,Nicely written wiki. 
0,I think the code can be merged. All the test cases seem to cover the edge cases and my testing shows that the things function as expected.
0,Yes it is ready to be deployed.
0,Travis CI says tests have failed but these don't include the tests written by the team.
0,Build passed. codeclimate - 7 issues to fix. 2/3 checks were passed. Issues seem trivial.
0,The CI build has passed and there are no conflicts.
0,Yes, the Travis build is passing.
0,Yes, the pull request has passed the Travis CI build test and does not contain any conflict with the base branch.
0,There are no conflicts
0,The travis builds on both pull request have passed.
0,Yes, the build passes Travis CI
0,Yes, the code changes are simple and to the point. I don't see any other way it could be done. 
0,Yes, the changes have passed all the checks and can be deployed in production. 
0,Excellent work
0,In good state.
0,The writeup is great. I was able to understand the issue and do manual testing.
0,It was very well-written and self explanatory.
0,The wiki page has been written concisely. The team has used screenshots which ease the understanding of the work they've done. 
0,The write-up clearly explains the issues faced and the code fixes used to solve them.
0,Comprehensive.
0,I followed the steps as mentioned in the wiki and it works as expected.
0,Yes Everything works perfectly fine.
0,Works properly
0,Yes, the UI changes according to the specified conditions. After logging in as a student, we can see the team name being displayed at the top of the page.
0,The features for the issues fixed work as intended.
0,Everything looks fine to me.
0,The team did add test cases covering the functionality. The overall coverage increased by 0.004% to 47.652%.
0,The team have added adequate tests.
0,Yes, they did add the test cases and the coverage increased to 80%
0,coverage is same 
0,Yes, it increases the coverage too
0,Changes are covered with new test cases.
0,No new commits
0,Yes, there are few commits after round 1
0,No there were no commits made after Oct 31st.
0,The code has been written as per the coding standard. The code written by the team adheres to dry principle.
0,The code added during this project adheres DRY principles. 
0,The code was written at it's best
0,Yes, the code is well written.
0,Yes, code is well written
0,The team has followed rails best practices while writing the code. 
0,The code was written pretty well.
0,No commits needed after first review.
0,The last commit was listed as 12 days prior to this review. But the code looks to be in great shape so there was no need for new additions.
0,No new commits. No new bug fixed.
0, The last commit was 12 days ago. I believe that this team had finished their work well before round 1 itself. I think they had planned the work well in advance and followed that plan as well.
0,There were really few commits in the 2nd round. The only commit I could see was on 30th October. The only suggestion I would give is to continuously update their work on git. 
0,There is no new commit during the 2nd round.
0,No need for adding new test cases as the previous submission already achieved 100% coverage. I apologize for not being certain how to accurately answer this question.
0,They didn't add test cases, but the test coverage is always above 90%.
0,There are no new tests and that is because the team had already completed their work before deadline 1 and the coverage was 100% on the deadline one itself so there is basically no scope for improvement for this team.
0,The team did add test cases. They achieved a little more than the desired coverage even , that means they have done a great work.
0,From the video, the functionality works well.
0,N/A. This is a unit test project.
0,Yes, the tests cover all the scenarios.
0,The tests cover most of the scenarios as is evident from their mutant killing capabilities.
0,The team was asked to write test cases and get a coverage of around 90%. The team did a really good job in writing test cases for all the methods present in the assigned files.
0,The project has a good coverage of the codes 
0,The writeup is well documented
0,The write up is very informative and clearly shows the impact and result of the project tests. It would have been a great addition to have included more discussion on the design choices of your testcases and how it was implemented. Overall a great wiki.
0,The writeup is pretty good and easy to follow.
0,I loved the write-up. Write from the beginning to explaining Expertiza to explaining their task and the test plan which was very detailed and methodical. I also like that they had included a screen shot of the Mutant test which shows the thoroughness of their tests. Overall an impressive job by the authors.
0,The writeup is well written and clearly tells the flow and method of working. It shows clearly what all work is done and how it is done. It mentions specifically the explanation of each functionality and how it is checked.
0,As mentioned above, they can make it better by fixing some issues.
0,The project is almost on the stage that it can be deployed on the production server. However, there are few test cases that are failing as shown on the git. If these minor flaws are fixed then the code is good to go.
0,The team gives a good guidelines for how to test and what to test for the two classes.
0,The code is well written. I did not see any bad naming conventions or bad coding style.  
0,No need for test cases. (+1 for mentioning it in the Wiki!)
0,No test cases present but test plan covers it.
0,Not required
0,Test cases were not required for this project.
0,The test cases were required as the chnages were related to UI. The team mentioned the same in the wiki.
0,yes, the ui operations works as intended.the features fixed now works as intended.
0,It's working.
0,The feature works as per the video shown.
0,Fro video it seems to work as intended.
0,the video explains the new functionality and the functionality is working as expected. Good job!
0,Yes, it works as expected.
0,Writeup has been improved after the first review. The codes now look more comprehensive.
0,Writeup is good and understandable. Test plan is written well indicating the steps clearly in what needs to be done to test.
0,In my opinion, the project is ready to be deployed and does not need to adopt a different approach.
0,The number of commits since the 1st round is impressive.  Significant improvements have been done pertaining to naming, indentation and overall Code Climate issues.
0,The code coverage was 100% in the 1st round.
0,The writeup clearly defines the primary objective of the project and justifies the reasoning behind introduction of additional helper constructs like participant factory. The authors complement the descriptions of each test case with associated block of code and elaborate on the details of their inner workings.
0,Yes commits are done to fix the code climate issues.
0,Yes the project was about testing and coverage has increased.
0,Yes a lot of cases concerning a participant has been added.
0,It is crisp and to the point, there are no clarity issues either.
0,The tests are good and it can be merged to the main line.
0,Don't see any DRY issues. Well Written Test code
0,The code is well written. The variable and method names look clean and concise. The functions are small and well defined
0,Well Written
0,The code is well commented, I did not see any bad naming conventions or bad coding style
0,Yes, the  code seems well written and there was no issue with the naming or functions used. However, a few comments could be added to impersonating_as_admin.
0,Naming looks good, they had already added comment to the code in the first review.
0,The code was already well-written . No changes were suggested in the first round. The team did a great work in following coding best practices.
0,Code has no problem.
0,100% coverage is achieved.
0,yes, 100% coverage has been achieved as shown in the video.
0,Well explained, all the test cases have been explained and are self explanatory as well.
0,There doesn't seem to be any new code added in the github. But overall has a good history of commits which is documented well through commit messages.
0,Yes, there are new codes committed during the 2nd round.
0,Yes, they coverage is 100%.
0,Yes, they coverage is 100%.
0,The code was well written, DRY was not violated.
0,Commits for Code Climate changes were pushed in.
0,Test cases were added. Overall increase in the coverage range observed.
0,The project works as intended. Test cases are showing a positive impact on the results.
0,The writeup was significantly well written. Almost all the changes were covered.
0,The code is well organized and written & ready to be merged into the production server.
0,It looks as good as round 1.
0,Yes. They are updating code to fix code climate issues.
0,They achieve 100% during first round, so I don't think there are any new test need to be added. 
0,Edge cases are tested, and all scenarios for each method are tested. 
0,The wiki page provides clear details about the work, and very easy to understand. Just like round 1. 
0,The team added new commits in the second round as well to improve their code style, improve codeclimate issues and changes other reviewer's suggested. Very few teams have done this. Great work.
0,Yes, the team added relevant test cases which increased the overall coverage.
0,The team has written their wiki page in a very detailed manner. They even added the video links which were missing in the first round as suggested. Thank you and good job :)
0,There were no such commits during round 1. All are done in round 2
0,There have been no new commits since the last round of review. The integration with master branch still has conflicts to be fixed.
0,As I explained in my first review, the test plan is well written and all of these are tested manually there are no separate automated cases written.
0,The team did add test cases covering the functionality. The overall coverage increased  by +6.6% to 43.356%.
0,Yes, team has written test cases in a proper manner which increases the coverage also
0,The code seems to be dry, and I had no issues with it in the 1st round.
0,The team did not add an automated test plan. But manual testing was clearly demonstrated using screenshots.
0,Several commits were made to decrease the code climate warnings.
0,No, there have been no new additions to the test cases since last round of review. The code coverage still remains the same as before, with an increase of 6.6%.
0,No unit tests were added during the resubmission, but they had an initially high coverage.
0,Everything is good here!
0,Easily one of the most clearly documented projects I have reviewed in this class so far. I liked their organization of the Test Plan within the write-up.
0,The code is well written.  No suggestions.
0,I found many commits related to the code climate fixes.  No suggestions.
0,The coverall showed that the Overall coverage increased (+3.2%) to 39.999% The coverage of the participant.rb file is 100%. So great job team! No suggestions.
0,The tests specified in the participant.rb file run perfectly well . The same has been demonstrated in the video mentioned above. No suggestions.
0,The writeup is really well written and has covered all the desired aspects along with the test plan. No suggestions.
0,The present test cases appear to be written fine.
0,Passed Travis but had many lingering CodeClimate failures.
0,Coverage went up by 8.4%, according to coveralls.
0,the latest commit is on 2nd of Nov.
0,the test examples they showed are good. 
0,The build is passing successfully
0,Yes since it was a unit test assignment, tests have been added and overall coverage has increased
0,The tests cover all the scenarios. Given that the problem statement is pretty open-ended, the changes fulfil the purpose.
0,Overall coverage was increased by 8+ percentage. 
0, They added all the test cases! There is so much coverage now!
0,I think it covers all of the scenarios, but don't quote me. I don't have a great understanding of review response map.
0,Yes, It works .
0,The code was well written even in the first round.
0,UI is working correctly there are no features broken 
0,Yes, It works perfectly fine. Also, the screencast they uploaded, makes it more easy and convenient for me to understand the portion of changes implemented.
0,The video explains the new functionality and the functionality is working as expected. Good job!
0,The write up clearly captures the functionality that the work is related to.
0,well written document my suggestion is put the cropped version of images or even links to images is also fine. 
0,The write up is well written and self explanatory.  It would have been better if the screenshots were of standard size but that is not a problem since the purpose of the document is just to explain the project.
0,The authors have documented the steps they did to solve the issues in a clean manner. Although they haven't mentioned any particular design principles or design thinking that went on in solving the issues. They have explained all the functionalities of each file they have modified and stated why they have modified the particular file. One thing they could have added were class diagrams and dependency maps. Or some pictorial representation of the flow of each task which will help the reviewers and instructors to quickly catch up on their idea. It doesn't seem like the authors have updated their writeups since the last submission.
0,Very well written and elaborated.
0,The write-up is well written and organised. Everything looks fine. Great work with the write up!  
0,The write-up has been improvised by the authors and they have added the reasoning for the approach they chose. This increases the understanding of their solution.  They have also modified their test plan steps.
0,Since the code coverage has decreased, I don't think this code should be deployed on production. However, it is a good starting place for a new team to pickup.
0,this code is ready for server
0,Yes, I think the project is ready to be deployed at the production server since all the required functionalities are implemented.
0,I think the authors have done a good job in fixing the issues but they should have added tests to check if their code does handle all the possible edge cases and does not break any other code functionalities. I think this is a good starting place for a future team to pick up this project and implement some testing specs regarding the functionalities that the authors have fixed.
0,Yes, I believe this code is ready to be deployed as it seems perfeclty fin  
0,The link to the deployed application was not available, so the project could not be tested.
0,Travis CI is passed there is no issues with the build
0,NO I don't find any conflicts in the work which needs to be resolved.
0,the code was well written, following the principles.
0,Yes, code is well written
0,Few new commits are made
0,There has been 2 commits made in second round. One for adding comments and another one for fixing Issue #926 the sorting of topics by topic number in assignments.
0,3 New commits
0,Properly done in round 2 also
0,The team has done few commits. One was on few sort fixes, while they other was on refactoring.
0,A commit was done in second round addressing issues from reviews.
0,The coverage is actually decreased.
0,No new tests were written for this functionality. 
0,Yes, team has added the test case
0,Tests have been thoroughly and very well performed. Also, well documented. 
0,No deployment provided so can't be verified.
0,The code works as required.
0,The working is perfect, everything works as intended. The team has explained this in a brief manner in their youtube video.
0,System works as expected and this is evidenced by tests and videos.
0,The write-up is informative and provides all necessary details of the changes made.
0,The write up is impressive and very detailed. It has been documented well which helps to understand about the project and the code implementation. It also provides detailed test plan which makes it easier for end user to do UI testing.
0,The writeup is well organized and well documented.
0,Writeup is very detailed and well written. It is supplemented by enough code pieces and reasoning and good amount of pictures and videos to explain what the team has done in detail.
0, I think with proper testing, this code is ready to be deployed onto the production server.
0,Yes, the code can be deployed to production.
0,The code is well written, tested and documented and hence I think it should be ready to be deployed. 
0,Yes the Travis CI build is passing successfully.  
0,The build has passed. The are only 2 syntactical issues due to version difference.
0,No conflicts and Build Passes
0,Yes no conflicts at all which needs to be resolved
0,Yes, the Travis CI has passed.
0,The build has passed in Travis CI and no conflicts have occured.
0,Code style is good and Ruby Style guidelines are followed.
0,It was unit tests code.
0,Rspec code looks good. Descriptive context and it statements and good variable name usage. Very good work overall.
0,The coding style is good. The test cases have been written properly. Also I have seen from the code that the team has covered different cases and not stuck to the common one.
0,There were no commits in second round, but this is due to the fact that they achieved a 100% coverage in round 1 itself.
0,Nope, but they already did pretty well.
0,There were quite a few commits in the second round. The team worked hard to improve the existing test cases as well as add new ones. Even the mentor Zhewei approved of their work.
0,The last commit was on October 30. However, the team had already achieved 100% test coverage.
0,I can see no latest commits . The last commit was on 31st October.
0,Project was already completed in round 1
0,yes
0,The coverage is 100% already.
0,100% coverage by the tests.
0,For a testing project, increasing the coverage is important. Doesnt seem like the coverage was increased to a good extant. 
0,Yes the team had added the test cases and this did increase the coverage of the corresponding model file.
0,The team has not added any test cases but they had already achieved 100% test coverage in the first round.
0,Yes the team has added test cases. The coverage is however only 48%. 
0,improved
0,The tests cover all the scenarios, hence they also possess 100% coverage.
0,They did unit tests
0,As stated above the tests cover most of the scenarios.
0,yes, the test covers all the scenarios. 
0,cover all
0,The test cases are well written and do test many of the methods and functionalities. It is able to achieve around 60% of the task assigned to them.
0,Extremely well-written and verbose. 
0,Very detailed
0,The documentation is detailed covering all the test cases.
0,The doc is very descriptive and well written. Good job!
0,I would describe the write as being: 1. Very meaningful. 2. Concise. 3. Precise Te authors do explain the assignment.rb file as well as their test plan in veryyyy much a detailed way.
0,The writeup has a brief explanation on the role of the AssignmentTeam in the expertiza project. They have given the details on the test plan and test cases. I think it is a good writeup.
0,The writeup is perfectly written clearly indicating the work done. It nicely shows how the work was done and what approach as followed.
0,There are no errors in the build, the Travis CI build has passed and 100% coverage. You are good to go! :)
0,The code is easy to read. As one places the model file along side the test code, it very much makes sense as to why they wrote each line.
0,The team has successfully managed to pass all test cases with 100% test coverage.
0,Good job done here! You are the only team among the ones I reviewed for whom the Travis build has passed.
0,All passed.
0,it was unit tests
0,No issues! Good job resolving all the issues.
0,There were just 3 conflicts with respect to codeclimate that needed to be resolved but the mentor seeing their good work had decided to dismiss those.
0,All checks have passed without any conflicts. Well done!
0,passed
0,No New Commits
0,The pull request was not updated. (In fact, I can't see any of the changes in the linked repo.)
0,Nope, the last commit still shows from 12 days ago which is the time period even before the first submission. Overall, the branch is 3 commits ahead and 20 commits behind the Expertiza master. Even so, conclusively going by their git hub their last commit was before the first submission and hence, no commits in the second submission.
0,The commits were done before the first deadline but unfortunately I don't see any commits during the second round or the pull request might not have been updated.
0,No new commits after the first submission.
0,No new Test cases
0,I don't think that writing the test cases was in the scope of this project. Three files were changes overall, which two were .rb files and one was db file.
0,The team has changed a model and a html page. But there are no new test cases attached to the changes.
0,Works
0,As said above no visible testing scenarios have been implemented or even covered in their doc that they have given. Moreover, no changes have even been made since the last submission. So, answer to all the above questions is no. 
0,The writeup is good; I can clearly understand the problems and the fixes.
0,The write-up is very well written and documented. It is aided well with the the help of screenshots and proper labelling. The only small thing that I would like to suggest is the steps to reproduce or something similar so that the person not familiar with the expertiza can also reach to the desired place.
0,Yeah, the build has passed the Travis CI test and there were no conflicts found on the pull request.
0,The Travis CI has passed.
0,Yeah the UI and everything else looks as it is supposed to and the functionalities work as well.
0,Code looks good. Well formatted and naming conventions are followed. 
0,The code was well written and implemented the functionalities needed. It made good use of naming conventions and the team worked on improving the code layout by following the Ruby style guide and DRY principles.
0,Overall the write up was not bad. Here were some of the things I believe that could be improved: Problem Statement;Seems to be wrong. I believe it should be included in the background as it merely describes the files that they are supposed to work on.
0,Travis tests have passed. There were some initial failures but the team has fixed it. There are no lingering failures.
0,The code passes for the Travis build as well as Danger Bot. However, it fails for code climate with 3 issues yet to be fixed. In totality, the pull request does satisfy the need to pass the required builds.
0,the build passes
0,The overall structure of the code looks good and all the coding standards have been followed. I feel like there could have been more comments to support the large amounts of changes that have been made.
0,The project follows most of the DRY principles
0,Yes the code has been well written and very ruby like. The usage of existing gems is good. Functions have were good. I did not find many issues with the first review. So authors have kept it the same. very well done.  I wanted few more comment in code but thats okay. 
0,no new commits.
0,No the new code was not committed during the second round. This could be due to the fact that the team finished their code at the end of the first round itself.
0,The team has not made any new commits in round 2 because they did the code implementation in round 1.
0,The last commit was made on Oct 31
0,No new code or improvements have been done in round 2. Only documentation has been edited. The code could have been improved a little after the suggestions were given.
0,No new code was necessary.
0,No new commits in 2nd phase
0,No new commits during the second round.
0,test cases were added to increase the coverage.
0,The team has added 2 test cases in the sidekiq_mail_worker_spec. More test cases could be added to fully test the functionality. 
0,Coverage is present, slightly increases the overall project coverage.
0,Yes the team added the test cases. 45/69 new lines have been covered in the  tests. good work. but I feel that they could have added additional -ve test cases. 
0,Yes everything does seem to work properly. Since this was a refactoring project every feature worked as it was supposed to.
0,Features work as expected.
0,This project is based on emails which cannot be tested in test environment.
0,The team has implemented most of the required functionalities
0,The features work as they are supposed to, only problem is with the code using excessive if-else like structure. Code is brittle in this sense. Could have made functions and passed parameters to make it more flexible.
0,Functionality seems correct.
0,yes 
0,The refactored mailer with the use of Sidekiq works as intended.
0,The writeup has been pretty well written by the team. Introduction to the problem statement, the implementation details, and the test plans have been stated.  
0,The write up addresses details of all the three problem statements along with the code changes done in every file and the files added. The team has also added screenshots of the manual testing.
0,The writeup is comprehensive and includes code that was added so it is easy to understand.
0,Lots of improvement over the last phase. Many recommendations have been implemented. The write up is well formed and structured. The entire flow is explained along with files changed/methods implemented in each stage. Some formatting issues so -1
0,The test section has been improved with more detail.
0,authors have added a new doc in addition to wiki. i think that is not required, they could have simply added that in the wiki.  as in review 1 would have liked a. link to the issue in problem statement  2.  more details in why this sidekiq was used and not other message queue
0,Write up is elaborate, and elucidates the test cases and tests well.
0,The code is ready to be deployed in my opinion to the production server. The team could improve the quality of their code by visiting the code climate tests.
0,code can be deployed on production server as necessary test cases and implementation has been carried out succesfully.
0,The code implementation is correct , so with more edge test cases and after resolving the warnings in the travis test, the code would be production ready.
0,The code is written well but there are some small build issues as pointed out by Travis CI which need to be rectified for it to be deployed
0,Code is ready to be deployed in production if it is refactored and broken down into smaller chunks. Maintenance might me tough on this one. Functionality wise, works great!
0,There's a lot of changes made to the project to incorporate Sidekiq, but assuming that's fine, the project is ready for merge.
0,The code has been merged in a good way and there have been no merge conflicts. The build did pass the Travis CI. The code climate test failed but those were small issues which can easily fixed by just revisiting the code. Also the team have added a debug code which will need to be removed.
0,The build has passed and has no conflicts with the base branch.
0,Travis CI runs smoothly and no errors occurred. No conflicts occurred.
0,Everything checks out.
0,yes build passed but there are many code climate warnings that can be easily cleaned up such as tips for refactoring and unassigned variables. A more careful look at the tool warnings was required.
0,Code build passed the Travis CI build with some warnings thrown by the other tests.
0,Yes, improved the code.
0,yes,  2 commits were made in round 2.
0,Yes, new commits were done.
0,yes
0,Yes. Twice during the second round.
0,Coverage has increased.
0,Works as intended. Features work as they are supposed to. Tests cover all scenarios.  
0,The system works perfectly as intended.
0,The system works as intended.
0,The video explains the new functionality and the functionality is working as expected. all the scenarios are covered in the rspec test as well. Good job!
0,The writeup has adequate screenshots to help understand the problem statement
0,Overall, it is well written.
0,Contains all the required explanation.
0,The code is well written, the way the list function was split into multiple modular functions is appreciable. A great amount of effort has gone into fixing the issues.
0,Code is written very well, comments are detailed and functions and variables are named appropriately. (would just like to point out, in student_task_helper.rb#due_date_color , the variable "rtn" could've been named better!)
0,The code is well written. No issues with naming conventions or coding style.
0,The code is very well written and comments are properly given. Also the variables are descriptive and ruby guidelines are followed.
0,The code is clean.
0,Test are written 
0,Yes.
0,Write-up is explained pretty well.
0,Yes, the code has been written aptly and to the point. The intention is clear.
0,Codewise no issues. Build issue has to be fixed.
0,The code seems very well written and approach seems correct. If they improve the documentation and add test cases after thorough testing, it should be good to be deployed. As it stands, another team in future can pickup the code and implement these improvements.
0,Code is well written, DRY.
0,The names and the structures of the functions are all used properly. Besides, the team gave comments on the codes, which makes it is easier to understand.
0,The document is well written in properly segmented sections.
0,Very well written doc with all the necessary details.
0,The plan is very well documented. I see a lot of brain storming happening
0,The team's design includes all the models required for incorporating the functionalities. The have depicted a high level design in diagram as well. 
0,The design section of the writeup gives a very high level view of the design the team has planned to implement. So, not much can be deduced until the teams drills down further regarding the same.
0,The design plan seems to encompass everything required by the project.
0,yes it does 
0,Yes, they have everything that a good doc requires except the empty sections of implementation, design and testing. These in my opinion should be a part of a very important focus.   
0,Yes, the team seems to have incorporated all the functionality needed.  
0,the team did a great work in understanding the requirements and have included the design for all the requirement mentioned in the requirement document.
0,Yes they talk about all the functionality to be implemented
0,The authors has discussed the functionality implementation in detail. It justifies the approach they would be using.
0,The explaiantions were the best part of the writeup. The author has kept in mind that the reviewer might not be familiar with the basics of expertiza, and hence gives a very lucid explaianation.
0,The proposed changes look good.
0,team suggested that usage of decorator pattern is the key solution to the improvement, also approach on DRYness will be handled later
0,Explanations are given adequately. 
0,I liked the idea of putting the important files for reference. This is extremely useful and makes it really easy to understand what is being done.
0,the team has explained the implementation design/strategy in detail. the design was explained with all the required details and was very easy to understand.
0,Amazing documentation with diagrams and proper explanation!
0,The design proposed by the author of reusing LotteryController just like in topic bidding seems reasonable to address the bidding implementation in peer review.
0,i feel new design will not add any additional overhead in response
0,Good application workflow and analysis. Appears to be sound.
0,The authors are aware of the principles and are yet to figure out a way to reuse the methods to implement the functionalities. No new methods were proposed in the documentation. The idea of implementation looks fine and the new design seems seems to follow the already written code structure and design patterns. The design doesn't pose any threat to time complexity.
0,Not much has been talked about the methods or classes the changes will be done to. But they are clear with their job.  
0,Diagrams on peer review assignment have been included in the design by the team.
0,The current umls are great. Make sure to include more of these visual aids in the implementation section of your document. It will be a wonderful writeup.
0,Excellent use of class diagrams!
0,design doc has diagram explanation for working process 
0,Proper visual aids and UML like diagrams are provided in the document for better understanding of the implementation
0,well represented.
0,The design document is well done with proper visual aids and explains the problem being tackled and the proposed solution very well.
0,Yes. Very easy to follow just by looking once!
0,The design doc looks complete with all of the necessary details being covered.
0, They showed all the details which were asked for
0,Brilliantly written code document consisting of background, problem statement and the implementation plan. 
0,The authors have dine a good job of detailing the issues at hand and their proposed solution. UML diagrams like a flowchart could have been used to further clarify the working of the proposed design.
0,The design incorporates all the functionalities that needs to be implemented. No suggestions are required.   
0,The suggested fix would address all the functionalities which is required to be implemented for the problem statement.
0, Yes the design include all the required functionalities as their design plan. the problem statement specifies 3 task one is related to the admin panel , and two are related to the instructor panel . in their plan they have specified their approach and which all files need modification
0,The document outlines all the required functionalities along with the design and implementation plan stated   
0,All the requirements have been covered
0,Yes, most of the functionality are included. Besides, they also got detailed explanations.
0,Yes. It incorporates all the functionality required by this project.
0,Yes the design doc covers all of the required functionalities.
0,It seems that the design incorporates all of the necessary functionality. It also mentions details of how the team is going to implement said functionality.
0, Some more specific details could be added
0,Yes, functionalities mentioned are covered in the doc
0,Yes, it covers everything.
0,Yes.
0,Yes, the authors have a great job of including all the needed functionality. 
0,The team has provided enough explanation about how they are going to work on this project. Overall quality of explanation is good.  Suggestion: Include the purpose of implementing these functions/changes.
0,The team has proposed reasonable changes to address the problem statement in detail. The explanation justifies every change they have suggested.
0, The changes that the author has proposed is quite inclined with the task that are expected to be completed. the author explains the the changes properly by mentioning the files that needs to updated along with the screenshots of the flow.
0,The explanation is clear to follow but it could also include some more of the abstract design like UML diagrams, explanation of the use cases etc. 
0,Looks like the team spent some time looking at the code and coming up with the solution. Good Job
0,Their explanation is adequate and easy to understand.
0,The authors have given adequate explanation in terms of the following what is existing currently, what needs to be changed. The have also explained with a diagram the exact place where they would be adding elements to the UI. Also the files required to be changed are also mentioned. 
0, The suggested changes seem to be appropriate. Explanation was also easy to follow.
0,The overall quality of explanations is very detailed and good. I might even take few ideas from here to improve my own design doc.
0, They have explained adequately
0,Yes very well done in explanation of changes and what needs to be done. Screen shots are helpful. good work 
0,Comprehensive.
0,Detailed implementation plan provided, including which files they expect to change and what the output should look like
0,The authors have done a pretty good job with explaining the proposed design. They have used wire frames to show us exactly where the changes are to be made. Adding a flow chart would make things much clearer.
0,The design seems to be precise. The description of the changes are provided in detail. Team has clearly mentioned about the approach that they will use. Enough efforts have been taken by the team to convey what is to be done and how the team will do it. 
0, As the project is more of adding features to the user interface of the website , the design plan is covering all the necessary steps that needs to be implemented
0,The code design appears to be sound. The UI implementation as shown on the screenshot looks intuitive. However, the final implementation is necessary to say definitively that the code is not smelly 
0,Design is good, there might be some changes when they start implementing it but its a good starting point.
0,The design appear to be good. Specific gems are also mentioned eg: paginate that would divide the document into discrete pages.
0,The design changes as described seem sound.
0,I don't see any trace of smells or redundancy in the proposed solution.
0,The design seems to be sound. I would like more details on the database of the Bacui projects seeing as most of us don't know what they look like given that most of us have worked on Expertiza projects. So, a short description of the different tables the project is going to interact with along with any and all modifications would really help understand IF there will be any possibility that the design would turn out to be non-DRY or smelly.I think the team is good on what gems are to be used.
0,No potential smells or problems found.
0,Screenshot explains the functionality of project very well.It is really easier to understand how the end product will look like. Suggestion: the team should include a flowchart depicting the flow of the functionality. 
0,They have added a screenshot for each of the problem they plan to tackle.
0,They show their design page as their visual aids, and their are helpful for readers to understand what their designs look like.
0,UML diagrams are not mentioned but since these are UI changes, the changes are sufficiently explained with the help of representation of UI in terms of images.
0,The whole document is easy to understand and well-written. Suggestion: It would be better to include what tools and technologies would be used in the project.
0,There were ample of visual aids to explain and walk through the proposed solution. I liked it.
0,Good that you have used screenshots to explain the approach. Include Use case and activity/flow diagrams also.
0,UI enhancements are provided here.
0,They authors have used visual aids to their benefit. Even though they could have added a flow diagram, the wire frames and other screenshots they have used serve the purpose and add to the clarity of the explanation.
0, This was excellently specific and succinct. Very nice work
0, Its fine. I have the gist of it, but most of the text in the document is cut and pasted from the Project Description. The uml is a nice touch, albeit super bare.
0,Well structured i think everything is covered
0,The document explains well how the team is planning to approach the refactoring.
0,The team has incorporated all of the functionality required for segregation including the exact reports and functions to be removed out of review_mapping_controller.rb along with the design pattern to be followed(strategy  in this case).
0, In a way, yes, because it copied the project description, and illuminated which models they wanted to create in the refactor.
0, The design document includes all the functionality the team is hoping to achieve. they have explained clearly what they plan to work and modify.
0,It has most of the functional features available.
0, As the project is on refactoring, not many functionalities to considered. Given the problem statement, it clearly indicates the design should be able to incorporate the requested changes 
0,Yes, the design incorporates all of the functionality required.
0,All the functionality is given for review_mapping_controller.rb along with the design pattern. 
0,The explanation is easy to follow. I am able to get a complete idea of what changes the team intend to make.
0,Expectations look attainable. The changes proposed are concise and crisp. Team should be able to do a good job with this implementation.
0, Again, its fine. I don't understand the changes too well, but I also don't understand MVC and Expertiza very well either, but maybe they could have tried harder. I do feel there is a strong need to refactor and improve the code quality of Expertiza.
0,The explanation is decent and comprehensible 
0,I don't see any of the above mentioned problems happening since the design matches perfectly with the objective. The topic itself is to move unnecessary code out of review_mapping_controller and hence according to the design the code will actually become cleaner and better.
0,The proposed design seems reasonable. Before proceeding with the project, team should also look at other references to those functions and do it accordingly.
0,The implementation planned by the team seems to follow all ruby on rails guidelines and does seem to follow the DRY principle.  
0,No problem I could observe 
0,The UML class diagram helps to understand the reports involved, their attributes and functionalities. It provides a general overview about the interrelation of the seven different reports.
0,The authors provide a UML diagram to explain the relationship between the classes and a screenshot to show where they are going to add a button, which are really helpful.
0, This was excellently specific and succinct. Very nice work
0,Well structured i think everything is covered
0,The team has incorporated all of the functionality required for segregation including the exact reports and functions to be removed out of review_mapping_controller.rb along with the design pattern to be followed(strategy  in this case).
0,The document explains well how the team is planning to approach the refactoring.
0, In a way, yes, because it copied the project description, and illuminated which models they wanted to create in the refactor.
0, The design document includes all the functionality the team is hoping to achieve. they have explained clearly what they plan to work and modify.
0,It has most of the functional features available.
0, As the project is on refactoring, not many functionalities to considered. Given the problem statement, it clearly indicates the design should be able to incorporate the requested changes 
0,Yes, the design incorporates all of the functionality required.
0,All the functionality is given for review_mapping_controller.rb along with the design pattern. 
0,The explanation is easy to follow. I am able to get a complete idea of what changes the team intend to make.
0,Expectations look attainable. The changes proposed are concise and crisp. Team should be able to do a good job with this implementation.
0,The explanation is decent and comprehensible 
0,I don't see any of the above mentioned problems happening since the design matches perfectly with the objective. The topic itself is to move unnecessary code out of review_mapping_controller and hence according to the design the code will actually become cleaner and better.
0, Not enough implementation description to provide adequate feedback on this question.
0,The implementation planned by the team seems to follow all ruby on rails guidelines and does seem to follow the DRY principle.  
0,The design proposed by the team specifies an addition of a new button to the buttons tray from the existing UI. The button when clicked must bring a menu of additional reports. This functionality should consider the mapping to the review_mapping controller file that will implement the given features.
0,No problem I could observe 
0,The team has done a good job with the UML diagram. However, in my opinion, it would be better if they can add details for all the classes in the diagram.
0,The UML diagram shows the various subclasses clearly. It would have been better if it had also explained a few attributes/ methods.
0,The UML diagram is having the correct contents but needs the rough names of class methods
0,The UML class diagram helps to understand the reports involved, their attributes and functionalities. It provides a general overview about the interrelation of the seven different reports.
0,The authors provide a UML diagram to explain the relationship between the classes and a screenshot to show where they are going to add a button, which are really helpful.
0,A brief description for the class level implementation would be better.
0,Everything has been described well and in details.
0,at current state, the design doc has project problem, project solution, and design diagram, and each section has detailed description of the project. 
0,The document is well structured and provides all required information. 
0,The document explains what was asked for
0,Yes everything is incorporated.
0,All functions required are stated in the design document, which include search for user, assignment, questionnaire, and reviews. 
0,Yes.
0,Yes, they've included all functionalities.
0,The design document covers all the possible cases and should be fine.
0,Yes it does. They have explained the propose solution as well for each issue.
0,The design incorporates all the basic functionality.
0,Yes, almost all types of search functionalities are covered.
0,The design implements all the defined functionality elaborately.
0,Yes, the design incorporates all of the functionality required and also gives the possible solutions.
0,The quality of explanation is good and adequate.
0,The proposed search features are good. If all of them are implemented it should more than suffice.
0,The changes proposed are good and clearly meet the objectives of the project.
0,Good explanations. Easy to follow.
0,Overall, the design proposed seems good.
0,Yes, the changes are completely feasible
0,The authors have added the methods in the right classes. The new design is properly refactored and the gems are relevantly used. The new design might potentially increase the response time of the system because of advanced search option.
0,Yes they have provided an UML diagram which follows convention and explains their approach
0,The team has added sufficient diagrams for the reader
0,The diagrams are succinct and well-understood.
0,The ER Diagram is very well done. It encompasses all the classes and their attributes. Also the use of different shapes like diamond, square etc is great. 
0,Not required for this project
0,The E-R diagram seems to deliver the task
0,There is an ER diagram which defines the relationships in the system.
0,Wrtie up clearly explains the project purpose, what changes needs to be made, however including a mock test plan would have been better.
0,Most of parts are included, but they should include more details in their doc.
0,Design document has all the necessary information like project design, test plan. The team has gone through their topic deeply and can be seen by their illustration of their implementation. Also, they have included code snippets which show thoroughness of their approach 
0,The design doc contains project purpose, project design and testing plan in the wiki. The wiki contains mock visualizations which make it easy to understand the project proposal and how are they planning to do. The design flow as a flow chart adds to the ease of understanding. The test plan explains about the technologies that they are planning to use for testing. Suggestion:  The test plan could say what should be done in testing than just the technologies to be used for a particular part of code. For ed, we plan to have a dummy small data and see if the graphs output the visualizations correctly, if the sum id being counted to 100% of the class participation etc... the stacked version could also have been represented for better understanding.
0,The document shows the flow of work really well.However, I would like to suggest to put more of test planning and the tools and technologies that will be used. This will enhance the quality of the document to a great extent.
0,The design doc is good and provides a clear picture about the objective of the project. However,It would also be nice to know what features would be tested in the test plan.
0,All necessary sections are present.
0,Yes the design incorporates all of the functionalities
0,Incorporates intended functionality.
0,Yes, their design has all of the functionality that are required.
0,The design document has included all the functionality that is required by the project description.
0,Yes
0,The design incorporates and clearly explains flow of diagram for class performance, but not much is included for Integration of review performance. suggestion : The topic of Integration of review performance can be talked about in brief .
0,The design has a good design flow diagram which is clear and concise.
0,The design follows the basic functionality expected by proposing a bar graph solution for the select criteria. It could incorporate the rubrics that the team are planning to target. The flow in general does help to understand the project.
0,The design document incorporated all the functionalities that the project is supposed to be implementing.  No suggestions. 
0,Yes
0,The explanation is quite well documented such as including the flow chart , kind of bar graphs they would prefer and the files that they will update. Adding of screenshots of the flow of the website would make it more easy to understand for a leyman.
0,Changes suggested look good.
0,The overall quality of the explanations are good, but they should include more details about their design, which may not be easy to understand.
0,the team has mentioned all the files that will be changed and have also written a paragraph stating what are the proposed changes. The team could also document the changes that are being made to individual code files stating the changes done using code snippets and the reason why the changes are being made. Also they can talk about what design patterns principle are being used to incorporate the functionality that is being proposed. The team could also use CRC cards to depict the proposed code changes. This will not only help readers understand the report better but also help the team in dividing work between the team members and fast tracking the completion of project.
0,The changes proposed for the Class performance is adequate and explains the files to be changed, what changes from the controller perspective and views perspective. no particular suggestions proposed
0,The team proposed to add a bar graph to give a pictorial view of the scores and indicate the performance of students.
0,The changes proposed by the team include implementing a bar chart, stacked or single. Based upon the project description, it is advised that the team look for other alternatives like pie chart that would help to span the results with a minimal look.       
0,A simple enough explanation has been provided for the functionality.  No suggestions.
0,For Now the design proposed looks perfect.
0,Design flow looks good.
0,The authors seem to have studied the code well and have thought of a good plan to implement the project. They also seem to follow DRY principles while adding and changing code. Also the new design flow is quite simple and easy to understand which can be implemented without any high degree of convoluted code.
0,The design changes as described are sound, they are mostly on Javascript for the visualization and dont potentially make the code "smelly"
0,The team has given a design flow that underlines the basic way in which they are planning to target the issue at hand. It can make use by giving an example as to how the output might look and the document must also describe the tools that would be used for achieving the task.
0,The design looks good enough. It mostly deals with html.erb files to accommodate the graph and some database filtering in the controllers.I do not think that the design will increase the responses time of the system. Suggestion: If the details regarding how the graph will be implemented or any gem will be used should have been given. I did not find any details regarding about any methods that will be used to implement the functionality. That too would have been useful. 
0,The UML diagram included here is a flow chart diagram , which explains the process of how the instructor will be able to see the visualization and is easy to understand the flow
0,Design flow diagram is included indicating the flow which is good.
0,The UML diagrams is great, which is clear and easy to understand.
0,The have included a detailed design flow representation and have also included the visualizations. The could have added Lo-Fi UI cards to depict changes to views which will help them visualize the changes and also help instructors in suggesting improvements at an early stage which will help reduce unnecessary code changes in latter stages of the project.
0,The team has attached a bar chart for visualization which helps in understanding their purpose. Suggestion : More visual aids could have been added. The stacked bar chart as mentioned earlier . More mockups could have been added.
0,The design diagram is good and it would also be helpful to have a few screenshots of the current expertiza view.
0,The team has provided a flow diagram that helps to infer the structural outline of the project. The scope of the project can be perceived from the diagram.
0,A flowchart and graph has been shown in the documentation.  Suggestions: I feel that there should have been mockups of the screens where the functionality will actually appear. Team should have shown how the solution would look like on the expertiza page. There could have been use case diagrams too. 
0,Two graphs provided provide a good understanding of the process and what expected visualization should be. More diagrams would have been helpful.
0,Design document looks complete with problem statement, files that needs to be modified, a Lo-Fi diagram to indicate the flow.
0,Clear understanding of what needs to be done
0,This is a very innovative idea. Well explained design document. Files needed to be changes are also mentioned.
0,The design docs looks complete with all of the details being covered.
0,Yes it states the plan, design well. Testing can be better represented in terms of whether its UI testing or Automated tests etc.
0,The design document is well done with proper visual aids and explains the problem being tackled and the proposed solution very well.
0,The document is well written Just that a UML diagram or something similar could have been included to make it clearer and easier for the reader to understand.
0,Good work on problem statement and implementation ideas. However, screenshots could have added. LoFi sketches and flowcharts missing. 
0,The design doc is well designed and complete.
0,The design doc looks complete with all of the necessary details being covered.
0,Completed both the project purpose and design.
0,The purpose of the project seems quite clear. The team has explicitly mentioned all the requirements that has been expected of them along with the ways to implement said requirements. There is no testing plan however. They should include that and then the document would be good to go.
0, They showed all the details which were asked for
0,Brilliantly written code document consisting of background, problem statement and the implementation plan. 
0,The design incorporates all the functionalities that needs to be implemented. No suggestions are required.   
0,The suggested fix would address all the functionalities which is required to be implemented for the problem statement.
0,It incorporates most of the functionality.
0, Yes the design include all the required functionalities as their design plan. the problem statement specifies 3 task one is related to the admin panel , and two are related to the instructor panel . in their plan they have specified their approach and which all files need modification
0,All the functionality has been covered in the wiki. Issues are described in detail and files to be modified are also mentioned.
0,The document outlines all the required functionalities along with the design and implementation plan stated   
0,All the requirements have been covered
0,Yes, most of the functionality are included. Besides, they also got detailed explanations.
0,Yes. It incorporates all the functionality required by this project.
0,The document addresses everything mentioned in the problem statement.
0,Yes, I think the design included all functionality.
0,yes it does
0,Yes design doc cover all of the functionaliites.
0, Yes the design seems to incorporate all the functionalities required.
0,Yes the design doc covers all of the required functionalities.
0,Yes all the requirements are stated and an implementation plan is given. 
0,Yes. They have included everything mentioned to implement
0,It seems that the design incorporates all of the necessary functionality. It also mentions details of how the team is going to implement said functionality.
0,Yes, functionalities mentioned are covered in the doc
0,Yes, it covers everything.
0,Yes.
0,Yes, the authors have a great job of including all the needed functionality. 
0,The team has proposed reasonable changes to address the problem statement in detail. The explanation justifies every change they have suggested.
0, The changes that the author has proposed is quite inclined with the task that are expected to be completed. the author explains the the changes properly by mentioning the files that needs to updated along with the screenshots of the flow.
0,Looks like the team spent some time looking at the code and coming up with the solution. Good Job
0,Their explanation is adequate and easy to understand.
0,The authors have given adequate explanation in terms of the following what is existing currently, what needs to be changed. The have also explained with a diagram the exact place where they would be adding elements to the UI. Also the files required to be changed are also mentioned. 
0, The suggested changes seem to be appropriate. Explanation was also easy to follow.
0,The overall quality of explanations is very detailed and good. I might even take few ideas from here to improve my own design doc.
0, They have explained adequately
0,Yes very well done in explanation of changes and what needs to be done. Screen shots are helpful. good work 
0,Comprehensive.
0,Detailed implementation plan provided, including which files they expect to change and what the output should look like
0,The authors have done a pretty good job with explaining the proposed design. They have used wire frames to show us exactly where the changes are to be made. Adding a flow chart would make things much clearer.
0,The design seems to be precise. The description of the changes are provided in detail. Team has clearly mentioned about the approach that they will use. Enough efforts have been taken by the team to convey what is to be done and how the team will do it. 
0,The team has not proposed any design for the suggested changes.
0, As the project is more of adding features to the user interface of the website , the design plan is covering all the necessary steps that needs to be implemented
0,The code design appears to be sound. The UI implementation as shown on the screenshot looks intuitive. However, the final implementation is necessary to say definitively that the code is not smelly 
0,Design is good, there might be some changes when they start implementing it but its a good starting point.
0,The design appear to be good. Specific gems are also mentioned eg: paginate that would divide the document into discrete pages.
0,The design changes as described seem sound.
0,I don't see any trace of smells or redundancy in the proposed solution.
0,No potential smells or problems found.
0,There are adequate screenshots to show the required functionalities and how they would look after implementation though there aren't any UML diagrams to explain the use cases
0,They have added a screenshot for each of the problem they plan to tackle.
0,They show their design page as their visual aids, and their are helpful for readers to understand what their designs look like.
0,The whole document is easy to understand and well-written. Suggestion: It would be better to include what tools and technologies would be used in the project.
0,There were ample of visual aids to explain and walk through the proposed solution. I liked it.
0,Yes screen shots are helpful but the document missing flow control diagrams 
0,Good that you have used screenshots to explain the approach. Include Use case and activity/flow diagrams also.
0,UI enhancements are provided here.
0,They authors have used visual aids to their benefit. Even though they could have added a flow diagram, the wire frames and other screenshots they have used serve the purpose and add to the clarity of the explanation.
0,changes along with the screen mockup  are provided  
0,Explanations are easy to follow.
0,Well, the proposed solution looks satisfactory.
0,Explained the objectives very well. Also the criteria for completion are also explained.
0,I liked the overall quality of the expalnation.
0,It explains in an overall sense what the issue is and how its going to be solved. 
0,Really like the graph you guys  drawing.
0,Changes suggested look good.
0,They are trying to leverage the existing screen and adding additonal fucntionality- thus it wouldn't impact the existing code
0,new design approach is pretty straight forward. 
0,All the proposed changes look like exactly what needs to be implemented in this project.
0,They seem to have a clear idea of what they are going to do
0,According to the solution suggested, team should be able to implement it.
0,Included a kind of mock UI/Lo-Fi diagram to shown how the uiwould like which is great.
0,they have added notes explaining the mockup diagrams 
0,The hand drawn diagrams are good enough to explain the problem to others , next time they can update it with the actual page once its done.
0,Good UI mockups. 
0,They give the graph of the UI design which is good and explicit.
0,The design doc is well designed and complete.
0,They give the graph of the UI design which is good and explicit.
0,Clear understanding of what needs to be done
0,changes along with the screen mockup  are provided  
0,They are trying to leverage the existing screen and adding additonal fucntionality- thus it wouldn't impact the existing code
0,Explained the objectives very well. Also the criteria for completion are also explained.
0,yes it does
0,for now explainations are in preliminary state , I'm hoping that team will fillout this as they progress in project
0,new design approach is pretty straight forward. 
0,they have added notes explaining the mockup diagrams 
0,Design document looks complete with problem statement, files that needs to be modified, a Lo-Fi diagram to indicate the flow.
0,It incorporates most of the functionality.
0,Changes suggested look good.
0,The document addresses everything mentioned in the problem statement.
0,Explanations are easy to follow.
0,Based on the mockups, it seems like the designs will fit in well with th expertiza system. I'd like to see more professional mockups or descriptions of the new UIs, but I understand that might not be feasible yet.
0,Completed both the project purpose and design.
0,Really like the graph you guys  drawing.
0,Yes all the requirements are stated and an implementation plan is given. 
0,It explains in an overall sense what the issue is and how its going to be solved. 
0,Yes, I think the design included all functionality.
0,Well, the proposed solution looks satisfactory.
0,According to the solution suggested, team should be able to implement it.
0,Good UI mockups. 
0,Yes. They have included everything mentioned to implement
0,They seem to have a clear idea of what they are going to do
0,The design docs looks complete with all of the details being covered.
0,Yes design doc cover all of the functionaliites.
0,I liked the overall quality of the expalnation.
0,All the proposed changes look like exactly what needs to be implemented in this project.
0,Please add more details about the solution.
0,It includes all the sections
0,I don't think they need any visual aids.
0,Nothing specified.
0,Problem, Design, and Test plan are all here. Tres bien!
0,This design cod is fully completed, including project purpose, project design, and testing plan.
0,all necessary parts of design document are included.
0,Yes, they include project purpose, project design, and testing plan. It's detailed and easy to understand.
0,The team has included everything which is required in the documentation in a comprehensive manner. The team has also included test plan for two scenarios.
0,The project purpose. design and test plan are all explicit and detailed. Just one suggestion that the structure can be more centralized. For example, the 2.3 and 3.3 may better be together, like Overview and Details, which I think may be more specific.
0,All the required parts are in their design.
0,Yes the team have incorporated all the functionality required.
0,Yes, the design document mentions all the necessary steps and the design ideas for the implementation of them 
0,Explained the requiremnts well and their plan - but what they will be changing is vague
0,Design appears to account for all needed functionality.
0,Yes, they did a great job, incorporate all of the functionality required.
0,Yes. all functionalities mentioned in the requirement are listed.
0,Yes
0,Yes, they include all the functionality in the wiki page.
0,The team has included solutions to all the functionalities to be implemented. 
0,Their design contains all the functionality required.
0,Yes, it includes all the functionality mentioned.
0,It has incorporated all the functionality.
0,There is adequate explanation for the changes proposed along with screenshots to explain the output.
0,nice explanation with step by step implementation plan, it is very easy to follow the design document. 
0,They explain the changes step by step. Very detailed and easy to read.
0,The team has given a proper explanation by including the workflow/ steps that need to be achieved to solve the given issue. This shows that the team has an organized plan to implement the solutions, this will help the team in the later stages of the project.
0,An explanation for each functionality provided.
0,The explanation is complete and easy to understand.
0,Design appears to be sound. I would do the same.
0,no question there from my point of view, the implementation design is nice.
0,From the steps taken by each tasks, I guess they can perform all the functionalities well.
0,The design they have right now looks good to me. I did not find any inappropriate design in it.
0,The desigin has many details which from my point of view is in the right direction.
0,Images were very useful in understanding need/intent for the project.
0,They have included a diagram. It do help me understand how they are going to implement this project.
0,There are screenshots that can help in understanding the purpose.
0,The entire project flow is well documented along with the basic structural requirements. The document aligns with the plan of action and showcases the exact purpose of the project.
0,The project design doc is complete and specifies both issues and prospective solutions.
0,The doc mentions the changes to be made in a detailed way along with a proper stepwise explanation of the solution or the approach to be taken plus the screenshots which help in better understanding.
0,Good work. Good documentation
0,The document clearly specifies the problem statement. It seems good enough. They have mentioned the API they are planning to use as well as the files to be modified. However, I would like more details on this API and how they plan to integrate it into their project.
0,The document is almost complete. Includes proper planning and demonstration. Only suggestion would be to include more about how the implementation would be done. 
0,The Design document states all the required things right from project design to test plan. The doc also specifies what all files will be changes along with how the functionality will look like once the project is deployed.  Suggestion: I feel like the test plan should have been a bit more elaborate. The team did mention one scenario. I feel like there could have been many more. But, as all the required things are present, I am giving this post full stars. 
0,Yes, I believe they have included all of the required functionality. 
0,The design encompasses all the features in the specification. It only indicates supporting one more language, though, whereas the design document specifies any language. It seems out of the scope of the project, but what if you used the Google's Cloud Translation API to translate the static strings at run time? Then you could support almost any language. There might be licensing issues though.
0,Yes, The design document contains all parts of the functionality, ensuring that nothing is missed out.
0,Yes, it covers all the functionalities.
0,implementation looks just like what the requirement asked for, no removing of English code.
0,Implemented major of them
0,The design does incorporate all of the necessary functionality.
0,yes the required functionality is adequately explained. Good work in that 
0,The design incorporates everything that the project document has specified about the project.  No suggestions.
0,The explanation provided is on point to the requirement of the project. All the steps piece up the project completely.
0,The changes are apt and easy to follow. It makes sense.
0,Good explanations for all solutions
0,The wireframes themselves make the project self-explanatory. That being said, enough explanation about how the team will tackle the problem statement has been given. Things like what API will be used to achieve the objective has been mentioned. No suggestions.
0,The design seemed good.
0,The design looks solid, but it's hard to tell without sufficient detail. If anything, causing every static string reference to be encapsulated into an object that uses the current language to return the correct string is more DRY and maintainable than what we have now. I wonder if dynamic translation gems are out there or would work. The claim that dynamic translation should not be done in this project should be defended, e.g. it would take too much time.
0,Looking at the doc, it seems like the design is precise. The description of the changes are provided in details ensuring the satisfaction of the reader.
0,The design proposed is the natural way anyone would go around solving those issues, for example creating separate yaml files for different languages and then picking up the strings from there. 
0,Looks good, only view files are involving the changes.
0,well designed
0,The design seems sound. The team plans to add all translations of the static variables in a separate folder. I think that this could potentially increase the response time of the system. I would like to see this design in action before making a judgement.
0,The document does not go much into the technical details. The limited details provided sounds right. However, more research will generate better understanding.
0,The team have showed what they plan to do in the diagrams.
0,The diagrams describe the functioning of the project exceptionally.
0,Screenshots are helpful to understand the flow and their work
0,Screen mock up's are good. 
0,The team has done a fantastic job in explaining the design in the initial stage. They have the current scenario and what they plan to do in the project.
0,It is extremely detailed!! Eagerly awaiting updates on implementation and on Code Snippets as and when they happen!
0,Nice wiki page
0,The design doc is fulfilled and written pretty well.
0,The design doc is completed and gives exact information on what authors are gonna do.
0, This wiki is dope. They analyze the requirements for the GitHub metrics they would need, and walked the reader through their design considerations. It seems like they have a thorough understanding about how to do this project.
0,Well done on adding almost everything. 
0,The document is complete. The authors have mentioned each functionality in detail. Also the test plan in explained thoroughly.
0,A very well written document, great job 
0,All the required part is in the document
0,I think the diagrams shown include where you intend to add the metrics, but not how all the metrics will be incorporated, in the next phase make sure to include details for each of these : Total number of commits. Number of files changed. Lines of Code added Lines of code modified. Lines of code deleted. LOCs that survived until final submission - (exclude from MVP due to the complexity and lower priority). 
0,Yes. Detailed UI mockups were very impressive! The use case diagrams and explanations are well written!
0,Yes, The document covers very required functionality.
0,Yes.
0,Yes, it does
0,Yes
0,Includes all the functionality. 
0,The design doc does mention all of the functionality that the team is supposed to implement along with the different ways they can implement the same.
0,Yes, as far as i understand the document cover all the functionality given mentioned. all the github metrics mentioned in the requirements doc  
0, The design contains all of the functionality required.
0,The authors proposed in a great detail.
0,Explanation is quite easy to understand.
0, They clearly understand this software design process and Expertiza than me, so I trust their judgement.
0,They authors have explained it well. They have also mentioned which gems eg Oktokit (Ruby toolkit for GitHub Api) that they plan on using.
0,very good. authors have provided all explanations with adequate screen shots and now and after screens 
0, The team explained them design very well. It is easy to follow their idea.
0,No problem found. They are trying to implement the DRY principle.
0,As far as I can tell, it does not appear that the authors will add unnecessary classes and potentially smell up the code base.
0,Design is good.
0, All the design looks reasonable right now.
0,The team has done a wonderful job in including UML diagrams and visual aids.
0,The visual aids have been well put together. 
0,The chart is also in a great detail.
0,Visual aids are present which perfectly helps us explain the plan authors have proposed.  
0, Super legit use case diagrams. Some of their pictures even had colours! I liked that!
0,Uses UML diagrams and images to explain where the changes will be made.
0,There are different diagrams being used: 1. Use case diagram which describes the flow of how different users would navigate to the GitHub metric pages. 2. Mockup of their implementation which details the presence of a separate tab for GitHub metrics integration. They also plan to add some graphs which i think would be very useful to the instructors.
0,Yes the doc has use case diagrams and screen shots. this is very good and eases understanding
0, Both the use case diagram and the screenshot they provide helped me understand their purpose.
0,Well written
0,I think they have done a great job on this doc. It complete and detailed.
0,very robust! nearly cover every thing.
0,Yes, I believe they have included all of the required functionality. 
0,The design document addresses all the functionalities and even the implementation details in the specification.
0, looks good
0,Most of them are included.
0,The document does say what they're going to do, and that fits fully with the project description.
0,yes
0,The team have given a proper explanation of how the things will be implemented by specifying the files that needs to be modified. The team have written it in a good manner which is easy to understand.
0,Their explanations are detailed and easy to understand.
0,The authors have proposed changes in the OffscreenCanvasContextRendering2D.webidl by implementing it similar to HTMLCanvasContextRendering2D ; implement blob API and support webgl contexts as in WebGLRenderingContext. The explanations are quite convincing though a little more detail(including background specifications) would have made the documentation more cogent. 
0,The explanation is nicely written.
0,nearly perfect
0,Yes, the designs appears to be good to me.
0,uml diagram is clear!
0,The design doc is clean and neat. It specifies the issues and prospective solutions, which are easy to follow.
0,The design looks almost complete in terms of solution-wise details covered.
0,Yes, it incorporates all the functionalities.
0,Yes it incorporates all of the functionality required.
0,They have covered mostly all the problems mentioned and given a tentative solution
0,Yes the design doc incorporates all of the required functionalities.
0,The design incorporates all of the functionality required. Some edge cases are also listed. Good job.
0,The explanations are adequate and easy to follow.
0,Explanations are satisfactory and they they have provided multiple solutions for each problem which is good
0, The explanations given for the design are quite succinct and dont go into much details. They are just giving a high level overview of the system. Some of the explanations are thorough in nature. Kudos!
0,Thye provided a lot of solutions, which is great.
0,Adequate explanation is provided for each problem. 
0,Since, they have not come up with a perfect solution, it seems they have been working on that.
0,Changes are adequately explained, easy to follow.
0,Though, the solutions proposed are at a very high level, it does make sense. I can't comment on the actual implementation because there isn't much info on that.
0,No problem found.
0,It looks more or less right in the sense that the proposed changes are exactly what is required to be done in the project.
0,The flow seems feasible
0,As the project is in the initial stage, there is no technical description.However, I see from the document that their thought process is on the right track. 
0,The new design seems to take into account decreasing response time
0,Everything has been described well and in details.
0,at current state, the design doc has project problem, project solution, and design diagram, and each section has detailed description of the project. 
0,The document is well structured and provides all required information. 
0,The document explains what was asked for
0,Yes everything is incorporated.
0,All functions required are stated in the design document, which include search for user, assignment, questionnaire, and reviews. 
0,Yes.
0,Yes, they've included all functionalities.
0,The design document covers all the possible cases and should be fine.
0,Yes it does. They have explained the propose solution as well for each issue.
0,Yes, almost everything seems perfect, only a little more explaination is required
0,The design incorporates all the basic functionality.
0,Yes, almost all types of search functionalities are covered.
0,The design implements all the defined functionality elaborately.
0,Yes, the design incorporates all of the functionality required and also gives the possible solutions.
0,The quality of explanation is good and adequate.
0,The changes proposed are good and clearly meet the objectives of the project.
0,Good explanations. Easy to follow.
0,Overall, the design proposed seems good.
0,Yes, the changes are completely feasible
0,Did not see much info on the files or classes the changes proposed, so its hard to comment here
0,Code level details are not covered in this doc. But the high-level approach looks fine to me.
0,Yes they have provided an UML diagram which follows convention and explains their approach
0,The team has added sufficient diagrams for the reader
0,The diagrams are succinct and well-understood.
0,The ER Diagram is very well done. It encompasses all the classes and their attributes. Also the use of different shapes like diamond, square etc is great. 
0,uml is missing but er diagram is given. you can add a uml diagram it explains things better. 
0,The E-R diagram seems to deliver the task
0,Not required for this project
0,They have depicted their working strategy through an ER diagram. However, I would suggest them to include more UML diagrams to enhance understandability. Also, the ER diagram is somewhat incomplete.
0,There is an ER diagram which defines the relationships in the system.
0,Document is very well written and contains all the details like problem statement, solution, files to be modified, testing plan.
0,The doc seems complete. All aspects of the problem statement are covered and test plan is also included. A use-case diagram will be useful to add.
0,Design doc contains everything in clear explanation
0,It incorporates all the functionalites.
0,The wiki is detailed enough that it mentions all the functinoalities required in the project. The team has made sure to not miss out on any functionality and they even took out time to list the column names in each report they would add the sort feature to. Good work guys.
0,I think the authors have incorporated most of the functionality in the design document.
0,Design document contains all the functionality required.
0,The design document lists every issue that is being addressed in the project, providing comprehensive details on the functionality that is required for each one.
0,Changes look good.
0,It is easy to follow the changes that the authors have proposed.
0,Adequate explanation was given
0,The explanations can be more detailed. Overall understandable.
0,Team have shared the link for the TableSorter which explains the functionality
0,need some diagram or prototype. 
0,Mainly needs html files to be changed and they have mentioned them which looks good 
0,The design proposed by the authors appears to be sound. Since this project is only to sort the views, there will be no code added to either the models or controllers. I hope the team only adds one sorting function per view and allows that one function to handle sorting for different columns in that view.
0,I don't think the authors plan to add methods to the wrong class. They are modifying the right files. The new design does not appear to potentially make the code "smelly". The team is using one of the existing gems in their design.
0,The solution looks like it doesnt add any overhead and the doesnt make the code "smelly"
0,The solution seems right.
0,The team has not mentioned about how they are planning to do the changes.
0,The design data includes most of the important information required to understand the teams plan.
0,The doc seems complete. All aspects of the problem statement are covered and test plan is also included. A UML diagram may prove to be useful.
0,Good job on UI and test cases. Kindly add UML diagram.
0,The project documentation looks complete with clear details about the purpose- to enable the students to better analyze their review based on the suggestion metrics (like volume, sentiment, suggestion, praise and criticism metrics). They have delineated the design that includes the files that the team proposes to change (the view- app/views/response/response.html.erb and the partial app/views/submitted_content/_self_review.html.erb), the screenshot of the existing UI of the review section and how the UI would look after the project with the inclusion of a button to analyze and they have specified that a popup displaying the suggestion metrics will emerge when the button is clicked.  I specifically like how the Test plan includes their feature in the Connextra format. They have mentioned 2 scenarios- one where the student clicks the button without entering text in which case the popup alerts the reviewer saying no text for analysis and the regular scenario when the user clicks the analyze button after entering text in which case the popup displays the suggestion metrics. I wish to suggest an additional scenario where the user can intuitively test the quality of the suggestion metrics, based on the review input. Like for example, there can be test cases which show that the suggestion algorithm detects generic reviews that might be seemingly relevant to the topic but add no customization to the project being reviewed (like how some reviewers menially copy paste the same format of the review to all projects with just minor changes). Overall the team has done a great job with the documentation and I look forward to see the implementation of this project in the upcoming review.  
0,The design doc is clean and neat. It specifies the issues and prospective solutions, which are easy to follow.
0,Yes the documentation looks complete  and states the project purpose and solution are stated . The project design could be described in more detail.
0,I cannot find any project purpose, but they did provide a lot of solutions to problems.
0,The design looks almost complete in terms of solution-wise details covered.
0,Yes, it incorporates all the functionalities.
0,Yes it incorporates all of the functionality required.
0,They have covered mostly all the problems mentioned and given a tentative solution
0,Yes.
0,Yes the design doc incorporates all of the required functionalities.
0,The design incorporates all of the functionality required. Some edge cases are also listed. Good job.
0,The explanations are adequate and easy to follow.
0,Explanations are satisfactory and they they have provided multiple solutions for each problem which is good
0, The explanations given for the design are quite succinct and dont go into much details. They are just giving a high level overview of the system. Some of the explanations are thorough in nature. Kudos!
0,Thye provided a lot of solutions, which is great.
0,Adequate explanation is provided for each problem. 
0,Changes are adequately explained, easy to follow.
0,No problem found.
0,It looks more or less right in the sense that the proposed changes are exactly what is required to be done in the project.
0,The flow seems feasible
0,As the project is in the initial stage, there is no technical description.However, I see from the document that their thought process is on the right track. 
0,The new design seems to take into account decreasing response time
0,The design doc is complete and clearly indicates the project objectives. The test plan indicates what aspects are to be tested and screenshots of the proposed analyze button are also posted.
0,The document is complete and very clear.
0,The doc is complete and everything is included. Very well-written
0,The design document gives details about the problem statement and gives an idea about what is to be done in the project. It specifies what files will be modified and the test plan also contains 2 scenarios mentioned. No suggestions.  
0,Yes, I think the document includes everything as expected.
0, Yes, the wiki appears to incorporate all of the required functionality. We want students to know if they're giving helpful feedback, and we want the NLP algorithm to be local to the Expertiza project to decrease its reaction time. They have at least shown that they are going to add buttons. 
0,I could not spot the problem statement of the proposed project in the Google doc containing the list of Problem statements. But on reading the team's design documentation on the wiki page I'm quite satisfied with the functionality that they plan to include. In addition to elucidating the main functional requirement of the project namely- the implementation of the suggestion algorithm the team has also proposed a non-functional requirement of improving the performance and response time of the time it takes to generate the suggestion through the web service.
0,Yes, the design document incorporates the plan to implement the functionalities as stated in the problem statement.
0,yes all changes are incorporated and explained well.
0,The design incorporates most of the functionality required. It would be nice to have a design diagram.
0,Yes, they have discussed about all the functionality
0,Yes. 
0,The design document incorporated all the functionalities that the project is supposed to be implementing.  No suggestions. 
0,The authors have mentioned including 'Analyze' buttons for sentiment analysis of different parts of the comments. I think the rationale for this is very good because if they were to send all of the comments at once as input to the API, the results would be a mix of the sentiments of all the different comments and would therefore not be accurate. Also this way, I think that the response time of the system would not be affected by a whole lot.
0,The explanation is good and clearly indicates the project objectives.
0,I am able to understand the purpose of the project.
0,Please add more information on the NLP algorithm team is trying to use.
0,The team has has listed the 2 files that they propose to change namely - the view- app/views/response/response.html.erb and the partial app/views/submitted_content/_self_review.html.erb. However, they could have described what these files currently do and their purpose in the documentation. The authors have embedded screenshots of how the UI of the review page will look after the Analyze button will be included. They have specified that a pop up showing the suggestion metrics pertaining to a review namely - volume, sentiment, suggestion, praise and criticism metrics will be generated once the button is clicked.
0,The explanation is pretty good, I particularly found the images explaining what all they are going to add pretty intuitive.
0,changes are explained well. suggestion detection algorithm an be explained a bit more or how exactly you will be using it. probably some code snippets would help explaining that.
0,The team has done a fantastic job in explaining the design in the initial stage. They have the current scenario and what they plan to do in the project.
0,It is extremely detailed!! Eagerly awaiting updates on implementation and on Code Snippets as and when they happen!
0,Nice wiki page
0,The design doc is fulfilled and written pretty well.
0,The design doc is completed and gives exact information on what authors are gonna do.
0,The explanations are lucid.
0,The design seems to be following DRY principle. 
0,I don't think the authors plan to add methods to a wrong class. They seem to be working on the right class namely Review and its associated view page review.html.erb that exactly pertains to their project. The response time might potentially increase with this new feature. But fortunately the team has proposed to work on optimizing the suggestion algorithm so that it does not take forever to execute. The team has done a good job on the design documentation.
0,The design appears to be sound, and wouldn't conflict with the existing classes or methods. 
0,2 html files require change, i don't think it will affect anything.
0,Yes it completes functionality.
0,Yes the design seems to follow all of the functionalities required. It looks like they have gone through the Project description in a good manner.
0,The design incorporates all of the functionality required.
0,The team has done a good job in explaining the project and its purpose with the design and files that need to be changed. However,  Test plan is provided.
0,Nice flow chart
0,The design has pretty much covered all the functionalities in the doc.
0,Yes,  Design incorporates almost all the functionalities that should be tackled as per problem statement. 
0,Yes, they are trying to incorporate all the requirements
0,Yes it incorporates all of the functionality required
0,Yes.
0,No design provided. Use case diagrams have the functionality explained.
0,the team did a great work in understanding the requirements and have included the design for all the requirement mentioned in the requirement document.
0,The design has pretty much covered all the requested functionality. 
0,The chart is very clear.
0,No changes proposed.
0,the team has explained the implementation design/strategy in detail. the design was explained with all the required details and was very easy to understand.  
0,Not everything
0,Yes it looks good
0,Yes. Document incorporate all the functionalities mentioned in the problem statement assign. 
0,1. Team technically understand the change and proposed solution does not lead to adding methods in wrong classes. 2. New design should not make the code smelly. 3. Changes are logical and proposed solution is reasonable enough. No gem required. 4. It should not increase response time. 5. No, the plan is nice and should be taken forward. 
0,The design document contains all the functionality required.
0,The design does incorporate the functionalities required. It is descriptive and easy to understand.
0,No problem found.
0,The design incorporates all the functionality which are required. 
0,No design proposed.
0,The screenshots posted give a clear picture of the intended output. It would be nice to have a design diagram.
0,It would be better to add more diagrams.
0,Changes proposed by authors are viable.
0,It was easy to follow. 
0,Can't comment on it right now
0,Adequate diagrams are given. Explanation of problem statement done well.
0,Looks fine
0,Design document has all the necessary information like project design, test plan. The team has gone through their topic deeply and can be seen by their illustration of their implementation. Also, they have included code snippets which show thoroughness of their approach 
0,All necessary sections are present.
0,Yes the UML diagram have been correctly implemented and help in understanding their approach
0,Yes, gives clear understanding using the use case diagram
0,UML diagrams are drawn well to explain the flow. So, the diagrams help in explaining the project flow.
0,Screenshots which were included was explanatory. More figures such as logic flow, wireframes etc can be added for better understanding.
0,Visual aids are great.
0,Yes the design incorporates all of the functionalities
0,Incorporates intended functionality.
0,The team has submitted diagrams and screenshots that explain what is expected from the solutions.  
0,Yes, their design has all of the functionality that are required.
0,The document contains a flow diagram that analyzes the system's requirements and expected flow. However, it can certainly make use of other UML diagrams in the expected flow section to give more clarity about the requirements and the sequence of actions. 
0,The team did a great work in explaining the requirement with the help of flow chart which helped in better understanding of the requirements and proposed design.
0,The diagrams are clear enough to help me understand the flow of the project. 
0,Yes
0,The design has a good design flow diagram which is clear and concise.
0,The design document incorporated all the functionalities that the project is supposed to be implementing.  No suggestions. 
0,Yes
0,It would be better to add some UML diagrams.
0,Changes suggested look good.
0,The changes proposed for the Class performance is adequate and explains the files to be changed, what changes from the controller perspective and views perspective. no particular suggestions proposed
0,The team proposed to add a bar graph to give a pictorial view of the scores and indicate the performance of students.
0,The changes proposed by the team include implementing a bar chart, stacked or single. Based upon the project description, it is advised that the team look for other alternatives like pie chart that would help to span the results with a minimal look.       
0,A simple enough explanation has been provided for the functionality.  No suggestions.
0,For Now the design proposed looks perfect.
0,Design flow looks good.
0,The authors seem to have studied the code well and have thought of a good plan to implement the project. They also seem to follow DRY principles while adding and changing code. Also the new design flow is quite simple and easy to understand which can be implemented without any high degree of convoluted code.
0,The design changes as described are sound, they are mostly on Javascript for the visualization and dont potentially make the code "smelly"
0,The UML diagram included here is a flow chart diagram , which explains the process of how the instructor will be able to see the visualization and is easy to understand the flow
0,Design flow diagram is included indicating the flow which is good.
0,The UML diagrams is great, which is clear and easy to understand.
0,The team has provided a flow diagram that helps to infer the structural outline of the project. The scope of the project can be perceived from the diagram.
0,Two graphs provided provide a good understanding of the process and what expected visualization should be. More diagrams would have been helpful.
0,The team has presented a detailed explanation of  all the topics in the documentation
0,Following can be added. Project Introduction & Motivation Description of Project
0,The document includes the problem statements and proposed solutions of all the issues. All the proposed solutions have test plans as well.
0,The design does corporate all the functionalities required.
0,Yes, the doc covers every functionality and detailed description of the approach to deal with the issue. 
0,The design proposes solutions for all the issues. Every issue is well described and flow diagrams are provided for the solutions
0,They have each listed bug explained, at the very least, and most have a resolution pathway. A+.
0,The document incorporates all of the functionalities as mentioned in the google design document. The team have made sure to list, explain, and provide proposed solutions for each bug to be fixed. Good Job guys !!!
0,Yes, I think it includes everything, all the functionalities required. 
0,The design incorporates all the functionality required. Suggestion: Including screenshots or screen-mockups would make the document easier to understand.
0,Yes they have incorporated everything. They have explained the solutions as well.
0,It lists out all the functionalities in the problem solution and looks very clear and very elaborate with codes and diagrams.
0,The team has included all the 5 issues as stated in the project description google doc. The team has provided solutions for all these issues as well. The solutions are descriptive and easy to follow
0,The design document separately describes every distinct issue and in some cases even provides possible finalized fixes to the source code.
0,The authors have listed all the proposed changes in the problem solution. I was able to understand it without any trouble.  Overall quality of the proposals is good.
0,The document is very impressive and provides detailed description of all the proposed changes. Explanations and steps given are easy to follow. No suggestions.
0,Well, after reading all the proposed solutions, I think they look good and the explanation behind all of them are satisfactory as well.
0,For the bugs which have explanations, the proposed fixes and explanations of the problem are sound. I'd like more info on bugs #1017 and #1072, as they only have the flow.
0,The good thing about this wiki is that the proposed solution sections is brilliantly explained. The team have clearly mentioned all filenames where they propose to make changes, drawn diagrams to illustrate the flow control, and added snippets of code where necessary. Brilliant
0,The explanations are well written and describe the workflow well. There could have been a little more detail in the explanation as some of the statements are very high level.
0,The changes mentioned seems to be well thought and written as they are well explanatory. With adequate description, the doc covers all the issues.
0,The designs proposed makes some sense as they are backed up with diagrams to make them very clear of their approach.
0,Honestly in my opinion, the team has given a lot of thought into how to fix the bugs. The design/proposed solutions look completely logical and should fix the bugs with no/least redundancy. It also looks like the team has already managed to fix a few bugs as well. Kudos to them.
0,The proposed solution would be the best approach to tackle the issues in my opinion. They would not make the code smelly or complicated.
0,For now design plan looks good enough.
0,It appears to be sound.    
0,The diagrams that are provided in the document visualize the workflows of different actors that pertain to the given issues. They are definitely helpful for the reader to understand the scope of the problem that is being addressed.
0,The team has provided flowcharts which makes it easier to understand their solution. The provided diagrams seem enough for the reader to understand the solution.
0,Visual aids are used properly and very helpful in understanding. UML diagrams follow the convention. Everything looks proper.
0,Uml looks good, explains whats happening.
0,They have included flowcharts for each proposed solution. The flowcharts can clearly explain the work flow.
0,All the diagrams are great, and none feel extraneous.
0,The diagrams provided clearly explain the flow control of the proposed solutions. The team even mentions preconditions needed for the flow control. the only suggestion I have is that the team could also add a low-fi sketch or screenshot of how the view would like after before/after Issue #1008 is fixed.
0,Flow diagrams are well thought of and explain the workflow well. Adequate details are given for each diagram.
0,Diagrams are proper, precise and detailed to understand the behaviour of the system (currently and after making changes). Good effort in making the diagram and wiki.
0,The design looks fine but no explanation as to why this is done? Is it already existing or is this a new feature?
0,The UML is good. Liked the way they have clearly mentioned the functions.
0,The step by step instructions are detailed and is good.
0,Yes the design looks complete
0,Implementation details haven't been added yet but that's fine as it hasn't been started yet.
0,A very nice UML diagram is added explaining the cases.
0,Yes. The design document incorporates all the functionalities stated in problem statement. 
0,Document is explained well. Also the flow of document is good. Team can add screenshots of existing documents, also some diagram to explain the solution well.
0,1. Authors solution do not seem to create methods to wrong classes. 2. New design code does not make the code "smelly". 3. No new gem required. Explained solution is adequate. 4. Proposed design should not hamper system performance. 5. Well efforts expended on the design  
0,The team has done a commendable job in creating a very detailed UML diagram and explaining the case of every user very well.
0,Test plan is to be added, but the purpose and the design are coherent and easy to follow.
0,Includes everything, as far as I can tell.
0,The proposed flows and project tasks are sufficiently detailed that I can understand the relationship between the issue and how they're going to solve it in each step.
0,I don't have any issues with the design, looking forward to seeing some code snippets to understand it better.
0,The high-level design which is needed to start with the work looks prominent. As the project proceeds, few intricacies resulting due to design conflicts, scalability need to be addressed as and when required. But the team has laid out a solid foundation to begin with.
0,The authors have explained the workflow very well with respect to the different types of users involved in the particular feature. The language is simple to follow.
0,Use case diagram adds extra weight to the design since the visuals always help the reader to relate the project well.
0,The design does incorporate the functionality required of making reviews public allowing the students to toggle the visibility of review submitted. It is descriptive and easy to understand.
0,The proposals given by the team are reasonable and adequately cover the features to be established during the course of the project. The changes suggested follow the desired requirements. 
0,As mentioned in their Approach section, the team decided on adding some functionalities like checkboxes and views. I find these changes perfect for the problem statement given.
0,They have used a USE case diagram to explain flow. I found it quite understandable and all the steps are clearly drawn out in the diagram. It clearly explains the steps required to approach a situation.
0,The explanations are very clear and easy to follow. They give the idea of how team intends to approach the feature.
0,I think overall it looks good. However, a bit more low-level details may give better insight about such issues.
0,Yes, it does
0,Created a great visual aid which helps us explain the plan.
0,Document is very well written and contains all the details like problem statement, solution, files to be modified, testing plan.
0,The write-up is very minimal. I think it should elaborate made 
0,It says what they will do, but it seems high level. Would appreciate some diagrams or mockups
0,Design doc contains everything in clear explanation
0,It incorporates all the functionalites.
0,Though the pull request has been passed, but the writeup does not explain the details of the implementation, like what sorting algorithm the team has implemented using jQuery etc. The design part of the writeup is very hollow, and needs further refinement.
0,The wiki is detailed enough that it mentions all the functinoalities required in the project. The team has made sure to not miss out on any functionality and they even took out time to list the column names in each report they would add the sort feature to. Good work guys.
0,I think the authors have incorporated most of the functionality in the design document.
0,Design document contains all the functionality required.
0,Please add more details about the solution. How to code for that functionality is yet to be thought of.
0,Yes, as per the solution provided, it does seem that the design incorporates the required functionality. It considers sorting on all the specified fields. Suggestions: Since you have mentioned the use of jQuery tablesorte, you may also add explanation as to what is tablesorter and try explaining atleast for one field (e.g. name) as to how does it work to sort the entries.    
0,The design document lists every issue that is being addressed in the project, providing comprehensive details on the functionality that is required for each one.
0,Changes look good.
0,could use more detail
0,It is easy to follow the changes that the authors have proposed.
0,Adequate explanation was given
0,Solutions have been proposed. How they are going to do that is not mentioned.
0,Team have shared the link for the TableSorter which explains the functionality
0,The authors provide a list of files that will be modified in the scope of this project and a high level overview of what needs to be done. The rationale behind using a tablesorter jQuery library and defining the code in the script seems reasonable but the team needs to discuss more details to further clarity the solution. 
0,need some diagram or prototype. 
0,Mainly needs html files to be changed and they have mentioned them which looks good 
0,As mentioned above, the design part is pretty weak for a writeup, and needs to be further worked upon.
0,The design proposed by the authors appears to be sound. Since this project is only to sort the views, there will be no code added to either the models or controllers. I hope the team only adds one sorting function per view and allows that one function to handle sorting for different columns in that view.
0,I don't think the authors plan to add methods to the wrong class. They are modifying the right files. The new design does not appear to potentially make the code "smelly". The team is using one of the existing gems in their design.
0,The solution looks like it doesnt add any overhead and the doesnt make the code "smelly"
0,The solution seems right.
0,The team has not mentioned about how they are planning to do the changes.
0,Wrtie up clearly explains the project purpose, what changes needs to be made, however including a mock test plan would have been better.
0,The team has done a fantastic job in explaining the design in the initial stage. They have the current scenario and what they plan to do in the project.
0,It is extremely detailed!! Eagerly awaiting updates on implementation and on Code Snippets as and when they happen!
0,Nice wiki page
0,The design doc is fulfilled and written pretty well.
0,The design doc is completed and gives exact information on what authors are gonna do.
0, This wiki is dope. They analyze the requirements for the GitHub metrics they would need, and walked the reader through their design considerations. It seems like they have a thorough understanding about how to do this project.
0,Well done on adding almost everything. 
0,The document is complete. The authors have mentioned each functionality in detail. Also the test plan in explained thoroughly.
0,A very well written document, great job 
0,All the required part is in the document
0,Yes. Detailed UI mockups were very impressive! The use case diagrams and explanations are well written!
0,Yes, The document covers very required functionality.
0,Yes.
0,Yes, it does
0,Get the GitHub pull metrics and show 'em to a person! That person being an instructor!
0,Yes
0,Includes all the functionality. 
0,The design doc does mention all of the functionality that the team is supposed to implement along with the different ways they can implement the same.
0,Yes, as far as i understand the document cover all the functionality given mentioned. all the github metrics mentioned in the requirements doc  
0, The design contains all of the functionality required.
0,The explanation was perfectly organized and flowing. Could not have been any better! A sample request response of GitHub metric API would've made it more amazing!
0,The authors proposed in a great detail.
0,Explanation is quite easy to understand.
0, They clearly understand this software design process and Expertiza than me, so I trust their judgement.
0,They authors have explained it well. They have also mentioned which gems eg Oktokit (Ruby toolkit for GitHub Api) that they plan on using.
0,The explanation given by the authors was pretty straightforward. Looking at the explanations it looks like the authors have thought about different aspects of the problem statement and also of different ways to implement the GitHub metrics integration feature along with the side effects of implementing it in a particular way. e.g one would think that adding the metrics to the database would be a sound solution but given the nature of an open source project and the fact that students would commit beyond the deadline the authors have thought not to add the metrics to the database which is sound and reasonable.
0,very good. authors have provided all explanations with adequate screen shots and now and after screens 
0, The team explained them design very well. It is easy to follow their idea.
0,No problem found. They are trying to implement the DRY principle.
0,As far as I can tell, it does not appear that the authors will add unnecessary classes and potentially smell up the code base.
0,Design is good.
0, All the design looks reasonable right now.
0,The team has done a wonderful job in including UML diagrams and visual aids.
0,The visual aids have been well put together. 
0,The chart is also in a great detail.
0,Visual aids are present which perfectly helps us explain the plan authors have proposed.  
0, Super legit use case diagrams. Some of their pictures even had colours! I liked that!
0,Uses UML diagrams and images to explain where the changes will be made.
0,There are different diagrams being used: 1. Use case diagram which describes the flow of how different users would navigate to the GitHub metric pages. 2. Mockup of their implementation which details the presence of a separate tab for GitHub metrics integration. They also plan to add some graphs which i think would be very useful to the instructors.
0,Yes the doc has use case diagrams and screen shots. this is very good and eases understanding
0, Both the use case diagram and the screenshot they provide helped me understand their purpose.
0,The Design document states all the required things right from project design to test plan. Files that will be changed along with how functionality will work/flow are included in the doc clearly.  Suggestion: great work! no suggestions required.
0,The design doc is complete. All the relevant sections have been added.
0,Document looks complete.
0,The design doc clearly explains the project purpose, project design and the test plan.
0,Design is very nicely explained with flowchart makes the design flow very clear. Suggestion : If a screenshot of actual screen where the change needs to be made is added, that would be perfect.
0,The document is quite comprehensive in its descriptions of the design proposal.
0,Design document has all the necessary information like project design, test plan. The team has gone through their topic deeply and can be seen by their illustration of their implementation. Also, they have included code snippets which show thoroughness of their approach 
0,The design documents contain all required part.
0,Impressive write-up. Flow-charts and UML diagrams are well-explained. Detailed explanation of problem statement and solution to be implemented.
0,Yes, the document incorporates all the functionality,ensuring nothing is missed.
0,The design incorporates all the required functionality to a good extent.
0,Yes, it does.
0,Yes the design incorporates all the functionality required. All the issues are explained clearly and their required solutions are also given.
0,Yes all the issues mentioned in the project description are covered along with their proposed Solution. Good Job
0,Design document has outlined the project requirement and issues. They have proposed a solution to each problem. they have even figured the files and methods to be modified. Overall, it looks good.
0,The design contains all of the functionality that required.
0,Yes, it is complete
0,The explanation provided is on point to the requirement of the project. All the steps piece up the project completely. No suggestions.
0,Very clear, very well organized.
0,The flowchart makes it very clear.
0,Everything is explained well and easy to understand.
0,The team has explained the solution with flow charts and code snippets. They have even considered the feasibility of their solution which is a good thing as this is a big project so feasibility is a big factor. 
0,They explained their plan very well. Both the visual aid and the word they use are very clear.
0,Adequate information given on implementing the solution. Flow charts are impressive.
0,Great efforts have been taken to convey what is to be done and how the team will do it. The design will definitely increase the response time. Suggestion: Information about the methods that will be implemented is not given in the design document Availability of such info would have been helpful.
0,Though I couldn't follow everything, overall, the design seems to do the right thing.
0,As stated above all the references needs to be checked as signup sheet controller is populating the database and every field should be available to maintain consistency.
0,There is nothing wrong in current design. Looks good. Suggestion: However Since I have already worked on a similar assignment so I know that similar issue has already been resolved for drop topic deadline. You can reuse the entire code and just change deadline type. Have a look at OSS project topic- 1843.  Check with the Professor once.
0,All proposed changes seem to be in line with good coding practices and the expertiza system guidelines.
0,Their solution sounds good. 
0,The design they have right now looks good to me. It does not have any issue.
0,not show which method
0,The use of flowcharts describe the functioning of the project exceptionally. Suggestion: Including screen mockups to your doc will add more weight to it.
0,Clearly defined UML (+1)
0,Uml diagrams mentioned are excellent and to the mark.
0,Diagrams are very clear and well explained!
0,No diagrams shown
0,One of the best wikis I have reviewed with good diagrams and explanations. The flow diagrams are really good. Kudos
0,The flowcharts used are very good and do a great job of conveying the intended purpose of each solution presented.
0,They have used UML diagram and flowcharts which aided in understanding their approach and the logic
0,Their visual aid is well designed and high quality. It helps the reader understand their total design very well.
0,UML diagrams are well formed. Flow charts are easy to understand. Looks like the team has thoroughly understood the problem statement. 
0,no such things like UML.
0,The design document looks really good. All sections are properly described, screenshots included. A possible uml or workflow diagram would have been appreciated.
0,All the features are mentioned in the design document. It explains the background and the approach that they are going to take to create the view aggregating all the information.
0,Very well maintained and explained
0,The document is complete and well structured. They have also incorporated the prototype comments and mentor's feedback. 
0,This documentation is the first one to clearly give a background for the project, out of all the documentations that I have reviewed until now. Kudos to the team for taking that extra mile. They have clarified the purpose of this project under the Task heading as: to provide a holistic insight into the performance of each student in a class as an objective. The project design includes the view and controller section that projects the requirements of the project. I like how the team has listed all the information to be presented in the Grade Summary. The documentation finally contains the Test plan, where they propose to do controller tests to check if the correct model method is called and if the objects of appropriate datatype are returned and also if the correct view is rendered. They have also listed 2 feature tests to see if the correct information is being rendered on the view. The team could have added more such tests like: to test if the sorting functionality works fine
0,The document is well made with necessary snapshots.
0,The design doc submitted is pretty neat and contains all the necessary information to understand the requirements of the project.
0,The design doc is clear and well written. The authors have done a great job explaining the project's purpose and their design plan with the use of LoFi sketch and prototype for the required view. I would suggest the team to include files that are involved for this project. Overall good work!
0,The design doc is complete and clearly includes all details about the project.
0,Complete, and well-explained. Impressed by 'Background' paragraph. Also, the screenshot of problem statement and solution is thorough.
0,This design documentation is very crisp and clear. Explained in detail and well organized.
0,Yes, the design document does incorporate all the functionality. There are proposed test plans, so expecting more screenshots with test cases in it.
0,Yes. It includes all the functionality.
0,Yes. it incorporates with the functionality 
0,yes
0,The design does incorporate all of the functionalities. One suggestion that I can give in the context of the design is that the documentation could have covered the list of files that they plan to work on and the current version of that code. They could have shown a UML diagram of the flow of activities for a lucid understandability 
0,Yes, according to the given link, the design has incorporated all the requirements and mentioned their test plan as well
0,The design incorporates all the primary functionality, however adding a UML diagram would make it much better
0,Yes, I do not find any information missing.
0,The authors have incorporated all the functionalities required.
0,The proposed changes look good, explanations are clear. Also, mentioned the continuous talk with mentor to come up with a prototype. Suggest you to include screenshots of some positive and negative tests in the future submissions.  
0,Adequate explanation is provided. They also mention what tests are feasible to be performed.
0,yes, all of them are implemented with good quality of explanation
0,Explanations are very clear and simple to understand.
0,The proposed implementation design is elaborate and clearly defines what the team plans on doing. 
0,The explanation is good and more information on which files would be changed would be more helpful.
0,Very well explained solution with LoFi sketch.
0,The explanation is very detailed and easy to understand. 
0,Design appears to be good.  
0,Well designed
0,Proper design as well as test features are mentioned.
0,According to me, the given design incorporates all the expected outcomes without disturbing the current functionality.
0,Looks like a lot of effort will go into the VIEW
0,The document explains where the changes will be made and also gives screenshots of the appropriate views.
0,Screenshots are helpful to understand the flow
0,Screenshots and visual ques are provided to the user
0,The screenshots posted on the wiki page provide a clear picture of what the team seeks to achieve.
0,Very well explained with sketches and UML diagrams. The diagrams are detailed and easy to understand.
0,Even thought there aren't any UML diagrams, the team has added a wire frame design of the proposed page and it has helped in visualizing the solution.
0,Yes.
0,The project is complete and sound enough in its approach and the implementations and the test plan has been well devised and just shy of application.
0,No everything is properly described.
0,The doc is very succinct and well written!  
0,The team has included all the topics required for the documentation.
0,The authors have explained the changes in a brief manner which are easy to understand
0,The explanation is descriptive and explains the logic behind the solution which is think should work. However, I believe that team should can add the explanation about the files and classes they tend to make changes in. The team can now focus on implementation of the code.
0,Yes it incorporates all the required functionalities along with the test cases
0,Yes, the required functionality is covered with details in the document.
0,Yes, I believe they have included all of the required functionality. 
0,Yes, their sections Method to calculate Composite Score and Application Flow sections have a flow chart as well as at least a targeted section of the code which they have planned to work upon. 
0,No, not all, but major of all functionalities.
0,The design incorporates all of the functionality required.
0,The team has suggested reasonable changes to address the problem statement and has given explanation for each solution they have proposed for the implementation.
0,Yes, in my opinion the team has understood the topic well and clearly listed all the functionality as described in the design document. Good Job !!
0,The project purpose is well defined and clearly explains what this project aims to do. The team also identifies the strategies they wish to adopt to fix the issue. This explanation is clear and concise. However, I would also suggest the team to add a basic test plan, on how they would test the functionality they add. Also I suggest them to list down the list of files they would be changing.
0,The authors propose changes in an extremely concise manner. The idea that the team proposes to follow seems logical, but I would suggest them to include a dummy example or sample pseudocode so that the english explanantion is backed up with an idea of the code as well. Such as this-: 1) Review X is submitted 2) Loop through Review 1......n If abs(Review n score - Review X score) >= (some value) store Review n URL in list  
0,The authors propose a sound logic to improve the functionality required. However, I would suggest the team to think about looping over each and every review. This may increase the response time of the system. Perhaps more interaction with the instructors could help the team come up with a less complex solution.
0,The changes are much that is required just some calculated approach of the score which the author has mentioned and seems will be working
0,The document seems complete.
0,Could be more specific, especially with test plan.
0,Just overview is presented which is explained properly. The technical design is not explained in depth.
0,The design is rather straightforward, incorporates all the functionality required.
0,Changes are suggested in a well manner but could have been explained in more details.
0,The explanations are brief and to the point, thought that seems to be due to the nature of the problem statement itself.
0,The changes are clearly stated and represented. 
0,Yes, they include project purpose, project design, and testing plan. It's a little short. It's suggested that add more details.  
0,Yes, they include all the functionality in the wiki page. They can work it better if they add more details and some visual aids.
0,The design appears to be complete.
0,They did explain what they want to do. It's easy to understand and seems reasonable. They can make it more explicit and clear by making it step by step.
0,The design appears to be perfect for now  except for the flow diagram
0,This design is good. There are no visual aids. Maybe they can consider use it to make it more detailed.
0,The design gives a proper explanation of the behavior of the system/functionality
0,The design covers the functionalities but there seem to be no concrete solutions for the same. Some more explanations is expected.
0,Although it looks like a good start the team can still improve on the design by adding a UML diagram and a test plan. There is a need for a low-level design explanation so that others can understand the technical details of the implementation.
0,Have explained the project as according to the given description.
0,NO UML diagram is provided so cant comment.
0,Yes, the designs appears to be good to me. I believe the diagram shown in wiki helped me to understand their understanding
0,The design looks reasonable for me.
0,The application plan diagram has been shown. It distinguishes between Instructor and Student.
0,I really like the flow graphs! The helped me understand what you are aiming to do.
0,The flow diagrams are well written and it is easy to understand just looking at them.
0,The document seems complete.
0,Not explained properly
0,Yes, in my opinion the team has understood the topic well and clearly listed all the functionality as described in the design document. Good Job !!
0,The design is rather straightforward, incorporates all the functionality required.
0,Have explained the project as according to the given description.
0,No changes
0,Not much described to rate over
0,The authors have explained the changes in a brief manner which are easy to understand
0,It looks to me from the document that the authors are clear about their implementation. Suggestion: They can elaborate more by specifying how do they intend to store the URLs to the reviews, how are they identifying the two distinctly different reviews. They can also add a basic flow of their proposed solution. This will enhance the explanation.
0,The explanations are brief and to the point, thought that seems to be due to the nature of the problem statement itself.
0,The design appears to be complete.
0,The explanation is descriptive and explains the logic behind the solution which is think should work. However, I believe that team should can add the explanation about the files and classes they tend to make changes in. The team can now focus on implementation of the code.
0,The team has done a fantastic job in explaining the design in the initial stage. They have the current scenario and what they plan to do in the project.
0,It is extremely detailed!! Eagerly awaiting updates on implementation and on Code Snippets as and when they happen!
0,Nice wiki page
0,The design doc is fulfilled and written pretty well.
0,The design doc is completed and gives exact information on what authors are gonna do.
0, This wiki is dope. They analyze the requirements for the GitHub metrics they would need, and walked the reader through their design considerations. It seems like they have a thorough understanding about how to do this project.
0,Well done on adding almost everything. 
0,The document is complete. The authors have mentioned each functionality in detail. Also the test plan in explained thoroughly.
0,A very well written document, great job 
0,All the required part is in the document
0,Yes. Detailed UI mockups were very impressive! The use case diagrams and explanations are well written!
0,Yes, The document covers very required functionality.
0,Yes.
0,Yes, it does
0,Get the GitHub pull metrics and show 'em to a person! That person being an instructor!
0,Yes
0,Includes all the functionality. 
0,The design doc does mention all of the functionality that the team is supposed to implement along with the different ways they can implement the same.
0,Yes, as far as i understand the document cover all the functionality given mentioned. all the github metrics mentioned in the requirements doc  
0, The design contains all of the functionality required.
0,The explanation was perfectly organized and flowing. Could not have been any better! A sample request response of GitHub metric API would've made it more amazing!
0,The authors proposed in a great detail.
0,Explanation is quite easy to understand.
0, They clearly understand this software design process and Expertiza than me, so I trust their judgement.
0,Very good explanation and good work on giving alternatives. It would have been great if the team had added DB design as well but the work done is sufficient. 
0,They authors have explained it well. They have also mentioned which gems eg Oktokit (Ruby toolkit for GitHub Api) that they plan on using.
0,The explanation given by the authors was pretty straightforward. Looking at the explanations it looks like the authors have thought about different aspects of the problem statement and also of different ways to implement the GitHub metrics integration feature along with the side effects of implementing it in a particular way. e.g one would think that adding the metrics to the database would be a sound solution but given the nature of an open source project and the fact that students would commit beyond the deadline the authors have thought not to add the metrics to the database which is sound and reasonable.
0,very good. authors have provided all explanations with adequate screen shots and now and after screens 
0, The team explained them design very well. It is easy to follow their idea.
0,No problem found. They are trying to implement the DRY principle.
0,As far as I can tell, it does not appear that the authors will add unnecessary classes and potentially smell up the code base.
0,Design is good.
0, All the design looks reasonable right now.
0,The team has done a wonderful job in including UML diagrams and visual aids.
0,The visual aids have been well put together. 
0,The chart is also in a great detail.
0,Visual aids are present which perfectly helps us explain the plan authors have proposed.  
0, Super legit use case diagrams. Some of their pictures even had colours! I liked that!
0,Proper use case diagram have been added. For next submission team can add UML diagrams.
0,Uses UML diagrams and images to explain where the changes will be made.
0,There are different diagrams being used: 1. Use case diagram which describes the flow of how different users would navigate to the GitHub metric pages. 2. Mockup of their implementation which details the presence of a separate tab for GitHub metrics integration. They also plan to add some graphs which i think would be very useful to the instructors.
0,Yes the doc has use case diagrams and screen shots. this is very good and eases understanding
0, Both the use case diagram and the screenshot they provide helped me understand their purpose.
0,Well done on adding almost everything. 
0,The document is complete. The authors have mentioned each functionality in detail. Also the test plan in explained thoroughly.
0,A very well written document, great job 
0,All the required part is in the document
0,Yes. Detailed UI mockups were very impressive! The use case diagrams and explanations are well written!
0,Yes, The document covers very required functionality.
0,Yes.
0,Yes, it does
0,Yes
0,Includes all the functionality. 
0,Yes, as far as i understand the document cover all the functionality given mentioned. all the github metrics mentioned in the requirements doc  
0,The design doc does mention all of the functionality that the team is supposed to implement along with the different ways they can implement the same.
0, The design contains all of the functionality required.
0,The explanation was perfectly organized and flowing. Could not have been any better! A sample request response of GitHub metric API would've made it more amazing!
0,The authors proposed in a great detail.
0,Explanation is quite easy to understand.
0, They clearly understand this software design process and Expertiza than me, so I trust their judgement.
0,Very good explanation and good work on giving alternatives. It would have been great if the team had added DB design as well but the work done is sufficient. 
0,They authors have explained it well. They have also mentioned which gems eg Oktokit (Ruby toolkit for GitHub Api) that they plan on using.
0,very good. authors have provided all explanations with adequate screen shots and now and after screens 
0, The team explained them design very well. It is easy to follow their idea.
0,No problem found. They are trying to implement the DRY principle.
0,As far as I can tell, it does not appear that the authors will add unnecessary classes and potentially smell up the code base.
0,Design is good.
0, All the design looks reasonable right now.
0,The team has done a wonderful job in including UML diagrams and visual aids.
0,The visual aids have been well put together. 
0,The chart is also in a great detail.
0,Visual aids are present which perfectly helps us explain the plan authors have proposed.  
0, Super legit use case diagrams. Some of their pictures even had colours! I liked that!
0,Yes the doc has use case diagrams and screen shots. this is very good and eases understanding
0, Both the use case diagram and the screenshot they provide helped me understand their purpose.
0,Design document has all the necessary information like project design, test plan. The team has gone through their topic deeply and can be seen by their illustration of their implementation. Also, they have included code snippets which show thoroughness of their approach 
0,The design doc contains project purpose, project design and testing plan in the wiki. The wiki contains mock visualizations which make it easy to understand the project proposal and how are they planning to do. The design flow as a flow chart adds to the ease of understanding. The test plan explains about the technologies that they are planning to use for testing. Suggestion:  The test plan could say what should be done in testing than just the technologies to be used for a particular part of code. For ed, we plan to have a dummy small data and see if the graphs output the visualizations correctly, if the sum id being counted to 100% of the class participation etc... the stacked version could also have been represented for better understanding.
0,The document shows the flow of work really well.However, I would like to suggest to put more of test planning and the tools and technologies that will be used. This will enhance the quality of the document to a great extent.
0,The design doc is good and provides a clear picture about the objective of the project. However,It would also be nice to know what features would be tested in the test plan.
0,All necessary sections are present.
0,Yes the design incorporates all of the functionalities
0,Incorporates intended functionality.
0,Yes, their design has all of the functionality that are required.
0,The design document has included all the functionality that is required by the project description.
0,Yes
0,The design has a good design flow diagram which is clear and concise.
0,The design follows the basic functionality expected by proposing a bar graph solution for the select criteria. It could incorporate the rubrics that the team are planning to target. The flow in general does help to understand the project.
0,The design document incorporated all the functionalities that the project is supposed to be implementing.  No suggestions. 
0,Yes
0,Changes suggested look good.
0,the team has mentioned all the files that will be changed and have also written a paragraph stating what are the proposed changes. The team could also document the changes that are being made to individual code files stating the changes done using code snippets and the reason why the changes are being made. Also they can talk about what design patterns principle are being used to incorporate the functionality that is being proposed. The team could also use CRC cards to depict the proposed code changes. This will not only help readers understand the report better but also help the team in dividing work between the team members and fast tracking the completion of project.
0,The changes proposed for the Class performance is adequate and explains the files to be changed, what changes from the controller perspective and views perspective. no particular suggestions proposed
0,The team proposed to add a bar graph to give a pictorial view of the scores and indicate the performance of students.
0,More explanation around only those two graphs are being considered is needed. While its early in the project, at least what changes will be made to a file could have been mentioned.
0,proposed changes needs more explanation at the files and system specifically what files needs to be changed and how
0,The changes proposed by the team include implementing a bar chart, stacked or single. Based upon the project description, it is advised that the team look for other alternatives like pie chart that would help to span the results with a minimal look.       
0,A simple enough explanation has been provided for the functionality.  No suggestions.
0,For Now the design proposed looks perfect.
0,Design flow looks good.
0,The authors seem to have studied the code well and have thought of a good plan to implement the project. They also seem to follow DRY principles while adding and changing code. Also the new design flow is quite simple and easy to understand which can be implemented without any high degree of convoluted code.
0,The design changes as described are sound, they are mostly on Javascript for the visualization and dont potentially make the code "smelly"
0,The design looks good enough. It mostly deals with html.erb files to accommodate the graph and some database filtering in the controllers.I do not think that the design will increase the responses time of the system. Suggestion: If the details regarding how the graph will be implemented or any gem will be used should have been given. I did not find any details regarding about any methods that will be used to implement the functionality. That too would have been useful. 
0,The UML diagram included here is a flow chart diagram , which explains the process of how the instructor will be able to see the visualization and is easy to understand the flow
0,The UML diagrams is great, which is clear and easy to understand.
0,The design diagram is good and it would also be helpful to have a few screenshots of the current expertiza view.
0,The team has provided a flow diagram that helps to infer the structural outline of the project. The scope of the project can be perceived from the diagram.
0,A flowchart and graph has been shown in the documentation.  Suggestions: I feel that there should have been mockups of the screens where the functionality will actually appear. Team should have shown how the solution would look like on the expertiza page. There could have been use case diagrams too. 
0,Two graphs provided provide a good understanding of the process and what expected visualization should be. More diagrams would have been helpful.
0,The design document gives a clear picture of the intended functionality of the project but it should have included test cases or what would be tested.
0,Yes everything is incorporated.
0,Yes.
0,Yes, they've included all functionalities.
0,The design document covers all the possible cases and should be fine.
0,The quality of explanation is good and adequate.
0,The changes proposed are good and clearly meet the objectives of the project.
0,Overall, the design proposed seems good.
0,The authors do not talk much about the technical aspects of how they are going to implement their work. The new design they proposed however seem to go on the right track. However, not much research is done till now.
0,Just one ER diagram. Add use case and activity/flow diagrams.
0,There is an ER diagram helps the reviewer understand the relationship between different sets. Maybe more screenshot can be provided to show where is the search bar, etc.
0,The entire project flow is well documented along with the basic structural requirements. The document aligns with the plan of action and showcases the exact purpose of the project.
0,The project design doc is complete and specifies both issues and prospective solutions.
0,The doc mentions the changes to be made in a detailed way along with a proper stepwise explanation of the solution or the approach to be taken plus the screenshots which help in better understanding.
0,Good work. Good documentation
0,The document seems complete.
0,Yes, they include project purpose, project design, and testing plan. It's a little short. It's suggested that add more details.  
0,Could have been explained more
0,The team has included all the topics required for the documentation.
0,Yes, in my opinion the team has understood the topic well and clearly listed all the functionality as described in the design document. Good Job !!
0,Yes, they include all the functionality in the wiki page. They can work it better if they add more details and some visual aids.
0,The design is rather straightforward, incorporates all the functionality required.
0,Have explained the project as according to the given description.
0,The authors propose changes in an extremely concise manner. The idea that the team proposes to follow seems logical, but I would suggest them to include a dummy example or sample pseudocode so that the english explanantion is backed up with an idea of the code as well. Such as this-: 1) Review X is submitted 2) Loop through Review 1......n If abs(Review n score - Review X score) >= (some value) store Review n URL in list  
0,They did explain what they want to do. It's easy to understand and seems reasonable. They can make it more explicit and clear by making it step by step.
0,Not much described to rate over
0,The authors have explained the changes in a brief manner which are easy to understand
0,It looks to me from the document that the authors are clear about their implementation. Suggestion: They can elaborate more by specifying how do they intend to store the URLs to the reviews, how are they identifying the two distinctly different reviews. They can also add a basic flow of their proposed solution. This will enhance the explanation.
0,The explanations are brief and to the point, thought that seems to be due to the nature of the problem statement itself.
0,The authors propose a sound logic to improve the functionality required. However, I would suggest the team to think about looping over each and every review. This may increase the response time of the system. Perhaps more interaction with the instructors could help the team come up with a less complex solution.
0,The design appears to be complete.
0,Needs to work a bit on the plan
0,The explanation is descriptive and explains the logic behind the solution which is think should work. However, I believe that team should can add the explanation about the files and classes they tend to make changes in. The team can now focus on implementation of the code.
0,Some screenshots of actual emails sent and proposed format of the new email would be helpful
0,The design data includes most of the important information required to understand the teams plan.
0,The doc seems complete. All aspects of the problem statement are covered and test plan is also included. A UML diagram may prove to be useful.
0,Good job on UI and test cases. Kindly add UML diagram.
0,The project documentation looks complete with clear details about the purpose- to enable the students to better analyze their review based on the suggestion metrics (like volume, sentiment, suggestion, praise and criticism metrics). They have delineated the design that includes the files that the team proposes to change (the view- app/views/response/response.html.erb and the partial app/views/submitted_content/_self_review.html.erb), the screenshot of the existing UI of the review section and how the UI would look after the project with the inclusion of a button to analyze and they have specified that a popup displaying the suggestion metrics will emerge when the button is clicked.  I specifically like how the Test plan includes their feature in the Connextra format. They have mentioned 2 scenarios- one where the student clicks the button without entering text in which case the popup alerts the reviewer saying no text for analysis and the regular scenario when the user clicks the analyze button after entering text in which case the popup displays the suggestion metrics. I wish to suggest an additional scenario where the user can intuitively test the quality of the suggestion metrics, based on the review input. Like for example, there can be test cases which show that the suggestion algorithm detects generic reviews that might be seemingly relevant to the topic but add no customization to the project being reviewed (like how some reviewers menially copy paste the same format of the review to all projects with just minor changes). Overall the team has done a great job with the documentation and I look forward to see the implementation of this project in the upcoming review.  
0,looks great. test plan , screenshots are all given. uml is missing but i don't think its required as the changes are in html.
0,The design doc is complete and clearly indicates the project objectives. The test plan indicates what aspects are to be tested and screenshots of the proposed analyze button are also posted.
0,The document is complete and very clear.
0,The design document gives details about the problem statement and gives an idea about what is to be done in the project. It specifies what files will be modified and the test plan also contains 2 scenarios mentioned. No suggestions.  
0,Yes, I think the document includes everything as expected.
0, Yes, the wiki appears to incorporate all of the required functionality. We want students to know if they're giving helpful feedback, and we want the NLP algorithm to be local to the Expertiza project to decrease its reaction time. They have at least shown that they are going to add buttons. 
0,I could not spot the problem statement of the proposed project in the Google doc containing the list of Problem statements. But on reading the team's design documentation on the wiki page I'm quite satisfied with the functionality that they plan to include. In addition to elucidating the main functional requirement of the project namely- the implementation of the suggestion algorithm the team has also proposed a non-functional requirement of improving the performance and response time of the time it takes to generate the suggestion through the web service.
0,Yes, the design document incorporates the plan to implement the functionalities as stated in the problem statement.
0,yes all changes are incorporated and explained well.
0,The design incorporates most of the functionality required. It would be nice to have a design diagram.
0,Yes, they have discussed about all the functionality
0,Yes. 
0,The design document incorporated all the functionalities that the project is supposed to be implementing.  No suggestions. 
0,I am able to understand the purpose of the project.
0, Add a button to these questions to analyze them for their helpfulness. Seems clear to me.
0,Please add more information on the NLP algorithm team is trying to use.
0,The explanation is pretty good, I particularly found the images explaining what all they are going to add pretty intuitive.
0,changes are explained well. suggestion detection algorithm an be explained a bit more or how exactly you will be using it. probably some code snippets would help explaining that.
0,The authors have mentioned including 'Analyze' buttons for sentiment analysis of different parts of the comments. I think the rationale for this is very good because if they were to send all of the comments at once as input to the API, the results would be a mix of the sentiments of all the different comments and would therefore not be accurate. Also this way, I think that the response time of the system would not be affected by a whole lot.
0,The explanation is good and clearly indicates the project objectives.
0,The authors have not specified any code changes as of now so I can't comment on it. Suggestion: You might want to add any API Adapter class you plan to implement to generalize the solution for any future API implementations.  
0,The explanations are lucid.
0,The design is likely to increase the response time since API requests take time. It is essential to implement a system that keeps track of these API responses and disables this functionality when the API is unresponsive beyond and unreasonable time.
0,The design seems to be following DRY principle. 
0,The design appears to be sound, and wouldn't conflict with the existing classes or methods. 
0,2 html files require change, i don't think it will affect anything.
0,No design has been yet proposed by the author, however i feel the author is on track to make the right changes by looking at the files intended to be modified.
0,Not much has been talked about the methods to be added. but the files specified seems right
0,I do not think that the design will increase the response time of the system. Suggestion: I did not find any details regarding about any methods that will be used to implement the functionality. That would have been useful. The test plan does mention  ViewSuggestionMetricsForReviewSegment though. If this is the method name then it does not follow snake casing. 
0,The authors have provided a mock-up of their final design which seems pretty good. However what's missing is UML diagrams. Something that would help understand the flow of functionality would be useful.
0,The screenshots posted give a clear picture of the intended output. It would be nice to have a design diagram.
0,It would be better to add more diagrams.
0,Adequate diagrams are given. Explanation of problem statement done well.
0,The design has pretty much covered all the functionalities in the doc.
0,Hard to tell as very little explanation given.
0,Yes,  Design incorporates almost all the functionalities that should be tackled as per problem statement. 
0,Yes, they are trying to incorporate all the requirements
0,Yes it incorporates all of the functionality required
0,Yes.
0,No design provided. Use case diagrams have the functionality explained.
0,the team did a great work in understanding the requirements and have included the design for all the requirement mentioned in the requirement document.
0,The design has pretty much covered all the requested functionality. 
0,The chart is very clear.
0,the team has explained the implementation design/strategy in detail. the design was explained with all the required details and was very easy to understand.  
0,The project design has not really been expanded upon so not able to tell
0,The reuse of the questionaire class is smart to reduce duplication. Otherwise the minimal explanations make it hard to judge
0,1. Team technically understand the change and proposed solution does not lead to adding methods in wrong classes. 2. New design should not make the code smelly. 3. Changes are logical and proposed solution is reasonable enough. No gem required. 4. It should not increase response time. 5. No, the plan is nice and should be taken forward. 
0,Try to give a class diagram inorder to explain your implementation
0,No problem found.
0,Yes the UML diagram have been correctly implemented and help in understanding their approach
0,Yes, gives clear understanding using the use case diagram
0,UML diagrams are drawn well to explain the flow. So, the diagrams help in explaining the project flow.
0,Visual aids are great.
0,The team did a great work in explaining the requirement with the help of flow chart which helped in better understanding of the requirements and proposed design.
0,The diagrams are clear enough to help me understand the flow of the project. 
0,Everything has been described well and in details.
0,at current state, the design doc has project problem, project solution, and design diagram, and each section has detailed description of the project. 
0,The document is well structured and provides all required information. 
0,The document explains what was asked for
0,Yes everything is incorporated.
0,All functions required are stated in the design document, which include search for user, assignment, questionnaire, and reviews. 
0,Yes.
0,Yes, they've included all functionalities.
0,The design document covers all the possible cases and should be fine.
0,Yes it does. They have explained the propose solution as well for each issue.
0,The design incorporates all the basic functionality.
0,Yes, almost all types of search functionalities are covered.
0,The design implements all the defined functionality elaborately.
0,Yes, the design incorporates all of the functionality required and also gives the possible solutions.
0,The quality of explanation is good and adequate.
0,The proposed search features are good. If all of them are implemented it should more than suffice.
0,The changes proposed are good and clearly meet the objectives of the project.
0,Good explanations. Easy to follow.
0,Overall, the design proposed seems good.
0,Yes, the changes are completely feasible
0,Yes they have provided an UML diagram which follows convention and explains their approach
0,The team has added sufficient diagrams for the reader
0,The diagrams are succinct and well-understood.
0,The ER Diagram is very well done. It encompasses all the classes and their attributes. Also the use of different shapes like diamond, square etc is great. 
0,The E-R diagram seems to deliver the task
0,Not required for this project
0,There is an ER diagram which defines the relationships in the system.
0,No everything is properly described.
0,The doc is very succinct and well written!  
0,The project is complete and sound enough in its approach and the implementations and the test plan has been well devised and just shy of application.
0,The design incorporates all of the functionality required.
0,Yes, their sections Method to calculate Composite Score and Application Flow sections have a flow chart as well as at least a targeted section of the code which they have planned to work upon. 
0,Yes it incorporates all the required functionalities along with the test cases
0,Yes, the required functionality is covered with details in the document.
0,Yes, I believe they have included all of the required functionality. 
0,The changes are clearly stated and represented. 
0,The team has suggested reasonable changes to address the problem statement and has given explanation for each solution they have proposed for the implementation.
0,The author has given a proper explanation of how the things will be implemented by specifying the files that needs to be modified along with how they are going to merge the grades
0,The Design document states all the required things right from project design to test plan. Files that will be changed along with how functionality will work/flow are included in the doc clearly.  Suggestion: great work! no suggestions required.
0,The design doc is complete. All the relevant sections have been added.
0,Document looks complete.
0,The wiki explains the problem statement very well along with the proposed solution which seems reasonable. But the wiki does not include any test plans as of now. There are a few test cases which can be used to write the test plan, for eg. not adding drop deadline for the assignment itself and assigning each topic a drop deadline and check the behaviour of the system.
0,The design doc clearly explains the project purpose, project design and the test plan.
0,The document is quite comprehensive in its descriptions of the design proposal.
0,Design document has all the necessary information like project design, test plan. The team has gone through their topic deeply and can be seen by their illustration of their implementation. Also, they have included code snippets which show thoroughness of their approach 
0,The design documents contain all required part.
0,Yes, the document incorporates all the functionality,ensuring nothing is missed.
0,The design incorporates all the required functionality to a good extent.
0,Yes, it does.
0,Yes the design incorporates all the functionality required. All the issues are explained clearly and their required solutions are also given.
0,Yes all the issues mentioned in the project description are covered along with their proposed Solution. Good Job
0,Design document has outlined the project requirement and issues. They have proposed a solution to each problem. they have even figured the files and methods to be modified. Overall, it looks good.
0,The design contains all of the functionality that required.
0,Yes, it is complete
0,The explanation provided is on point to the requirement of the project. All the steps piece up the project completely. No suggestions.
0,Very clear, very well organized.
0,The flowchart makes it very clear.
0,Everything is explained well and easy to understand.
0,The team has explained the solution with flow charts and code snippets. They have even considered the feasibility of their solution which is a good thing as this is a big project so feasibility is a big factor. 
0,They explained their plan very well. Both the visual aid and the word they use are very clear.
0,Adequate information given on implementing the solution. Flow charts are impressive.
0,Though I couldn't follow everything, overall, the design seems to do the right thing.
0,All proposed changes seem to be in line with good coding practices and the expertiza system guidelines.
0,Their solution sounds good. 
0,The design they have right now looks good to me. It does not have any issue.
0,not show which method
0,Clearly defined UML (+1)
0,Uml diagrams mentioned are excellent and to the mark.
0,Diagrams are very clear and well explained!
0,One of the best wikis I have reviewed with good diagrams and explanations. The flow diagrams are really good. Kudos
0,The flowcharts used are very good and do a great job of conveying the intended purpose of each solution presented.
0,They have used UML diagram and flowcharts which aided in understanding their approach and the logic
0,Their visual aid is well designed and high quality. It helps the reader understand their total design very well.
0,UML diagrams are well formed. Flow charts are easy to understand. Looks like the team has thoroughly understood the problem statement. 
0,Yes, I believe they have included all of the required functionality. 
0,The design encompasses all the features in the specification. It only indicates supporting one more language, though, whereas the design document specifies any language. It seems out of the scope of the project, but what if you used the Google's Cloud Translation API to translate the static strings at run time? Then you could support almost any language. There might be licensing issues though.
0,Yes, The design document contains all parts of the functionality, ensuring that nothing is missed out.
0,Yes, it covers all the functionalities.
0,implementation looks just like what the requirement asked for, no removing of English code.
0,Implemented major of them
0,The entire project flow is well documented along with the basic structural requirements. The document aligns with the plan of action and showcases the exact purpose of the project.
0,The project design doc is complete and specifies both issues and prospective solutions.
0,yes the required functionality is adequately explained. Good work in that 
0,The design incorporates everything that the project document has specified about the project.  No suggestions.
0,The doc mentions the changes to be made in a detailed way along with a proper stepwise explanation of the solution or the approach to be taken plus the screenshots which help in better understanding.
0,The team have suggested reasonable changes to address the problem statement but have not given explanation for each solution they have proposed for the implementation.
0,Good work. Good documentation
0,The explanation provided is on point to the requirement of the project. All the steps piece up the project completely.
0,The changes are apt and easy to follow. It makes sense.
0,Good explanations for all solutions
0,The explanations given are succinct and clear. The flow of implementation seems very clear. However, as mentioned before I would like more details on the API
0,The design seemed good.
0,Yes, I believe they have included all of the required functionality. 
0,Looking at the doc, it seems like the design is precise. The description of the changes are provided in details ensuring the satisfaction of the reader.
0,The design proposed is the natural way anyone would go around solving those issues, for example creating separate yaml files for different languages and then picking up the strings from there. 
0,Yes, The design document contains all parts of the functionality, ensuring that nothing is missed out.
0,Yes, it covers all the functionalities.
0,Looks good, only view files are involving the changes.
0,well designed
0,The functionality scope is restricted because of the topic but the design doc covers everything what all is required to be done in the project.
0,implementation looks just like what the requirement asked for, no removing of English code.
0,Implemented major of them
0,The design does incorporate all of the necessary functionality.
0,yes the required functionality is adequately explained. Good work in that 
0,The team have showed what they plan to do in the diagrams.
0,The design incorporates everything that the project document has specified about the project.  No suggestions.
0,The diagrams describe the functioning of the project exceptionally.
0,Screenshots are helpful to understand the flow and their work
0,The explanation provided is on point to the requirement of the project. All the steps piece up the project completely.
0,The changes are apt and easy to follow. It makes sense.
0,Screen mock up's are good. 
0,Good explanations for all solutions
0,The wireframes themselves make the project self-explanatory. That being said, enough explanation about how the team will tackle the problem statement has been given. Things like what API will be used to achieve the objective has been mentioned. No suggestions.
0,The design seemed good.
0,Looking at the doc, it seems like the design is precise. The description of the changes are provided in details ensuring the satisfaction of the reader.
0,The design proposed is the natural way anyone would go around solving those issues, for example creating separate yaml files for different languages and then picking up the strings from there. 
0,Looks good, only view files are involving the changes.
0,well designed
0,The team have showed what they plan to do in the diagrams.
0,The diagrams describe the functioning of the project exceptionally.
0,Screenshots are helpful to understand the flow and their work
0,Screen mock up's are good. 
0,No clarification
0,The changes are much that is required just some calculated approach of the score which the author has mentioned and seems will be working
0,Changes are not proposed to a suitable extent as they have mostly elaborated on the problem statement. It yet remains for them to implement them and explain in explicit details their action plan to arrive at the solution.  
0,The design gives a proper explanation of the behavior of the system/functionality
0,The design looks reasonable for me.
0,Yes, the designs appears to be good to me. I believe the diagram shown in wiki helped me to understand their understanding
0,I really like the flow graphs! The helped me understand what you are aiming to do.
0,The flow diagrams are well written and it is easy to understand just looking at them.
0,Diagrams are explanatory but few but I think they are sufficient
0,The application plan diagram has been shown. It distinguishes between Instructor and Student.
0,The team has included all the topics required for the documentation.
0,NO UML diagram is provided so cant comment.
0,It includes all the sections
0,no implementation details given, so cannot say how they 
0,No, their sections Solution Design is blank saying everything of importance will be be provided in the final design doc. Only good thing is that they have at least a targeted section of the code which they have planned to work upon.   
0,No changes proposed.
0,Yes, the functionality required is stated but the idea about how to code for that functionality is yet to be thought of.
0,I don't think they need any visual aids.
0,Not explained properly
0,No, many functionality are missing in their design.
0,Yes, they include all the functionality in the wiki page. They can work it better if they add more details and some visual aids.
0,Not descriptive
0,The authors have provided a brief design approach of storing the URL and looping it into an email notification, so that instructor would be able to identify which review has been mapped to it. Improvisation: You can try adding information about new functions you wish to add, and if yes, which of the files identified by the mentor do you want to add the function to. This will increase the depth of your design document.
0,The design is rather straightforward, incorporates all the functionality required.
0,Have explained the project as according to the given description.
0,Just few high-level details (very generic) are provided which makes it hard to visualize a solution
0,No changes
0,The authors propose changes in an extremely concise manner. The idea that the team proposes to follow seems logical, but I would suggest them to include a dummy example or sample pseudocode so that the english explanantion is backed up with an idea of the code as well. Such as this-: 1) Review X is submitted 2) Loop through Review 1......n If abs(Review n score - Review X score) >= (some value) store Review n URL in list  
0,They did explain what they want to do. It's easy to understand and seems reasonable. They can make it more explicit and clear by making it step by step.
0,Not much described to rate over
0,The authors have explained the changes in a brief manner which are easy to understand
0,It looks to me from the document that the authors are clear about their implementation. Suggestion: They can elaborate more by specifying how do they intend to store the URLs to the reviews, how are they identifying the two distinctly different reviews. They can also add a basic flow of their proposed solution. This will enhance the explanation.
0,The explanations are brief and to the point, thought that seems to be due to the nature of the problem statement itself.
0,The design appears to be complete.
0,The new design does not talk about any methods or class definitions, thus I cannot comment on this. Suggestion: You can add more information on methods or any usage of design patterns in order to make the review effective and useful.
0,The new design loops through all existing reviews to compare new review scores with the original ones, and stores the URL of a specific iteration if its limit is exceeded. By waiting for all reviews to be looped in before sending email, it may increase the response time of the system.
0,Design document explains the entire project flow very well. The  objectives/goals are clearly stated in the doc along with the approach which team will be following in future.The  flowchart explains the functionality very well. Overall, the doc is easy to understand.  Suggestion: Team should include test plan in the doc.
0,The design document is well planned and does not miss any of the significant details.
0,The document seems to be generally well-designed. However, I believe that they have glossed over how a link is said to be "closed". They properly described the additional functionality and the challenges they will likely face.
0,all basic elements are included.
0,the design document seems to be well written and detailed with respect to the objectives that need to be achieved. The team explains well the purpose and project design. they have included the database tables which will be modified. the team could add a testing plan to make the design document look complete.
0,The design doc is well written and the points to be completed are clearly expressed.
0,The design document is very thorough, indicating what's the problem, how system works and proposed soluion.
0,Yes, they've decided to do all there is in the scope of the project
0,Yes the design tries to cover all the requested features.
0,Yes the functionality is explained.
0,Enough explanation about how the team will tackle the problem statement has been given. Overall explanation is good.  
0,The explanations provided are granular and do not leave any lingering questions in the readers mind.
0,The explanation given is quite easy to understand and explains the solution to the point
0,The design seems to be precise. The description of the changes are provided in detail.The team also has mentioned about the API that they will use. They have clearly mentioned about the approach that they will use. Enough efforts have been taken by the team to convey what is to be done and how the team will do it. 
0,The design appears to be sound considering the expected outcomes of the project and it doesn't seem that it will create any dependency mismatch as well.
0,The design document is well planned and does not miss any of the significant details.
0,all basic elements are included.
0,The design doc is well written and the points to be completed are clearly expressed.
0,No testing plan or tests are specified. 
0,The design document is very thorough, indicating what's the problem, how system works and proposed soluion.
0,yes, the design incorporates all the functionalities that are required.
0,The document incorporates all the functionality required and explains the same with an ever so accurate reasoning.
0,Yes the design is having also the functionalities that is been required . it mentions also mentions a proper proposed solution for all the required tasks
0,Yes I believe so. They discuss what they need to track during a review and what they need display after a review is complete.
0,Yes the design tries to cover all the requested features.
0,Yes the functionality is explained.
0,Yes
0,Enough explanation about how the team will tackle the problem statement has been given. Overall explanation is good.  
0,The explanations provided are granular and do not leave any lingering questions in the readers mind.
0,The explanation given is quite easy to understand and explains the solution to the point
0,The expected outcomes of the project have been clearly explained and requirements well understood.
0,The given flow-chart describes the flow of the project and how the implemented system will work
0,Authors have proposed solutions in detail and is understandable.
0,The design seems to be precise. The description of the changes are provided in detail.The team also has mentioned about the API that they will use. They have clearly mentioned about the approach that they will use. Enough efforts have been taken by the team to convey what is to be done and how the team will do it. 
0,The design is accurate; The changes suggested are minimal and ensure that DRY is followed.
0,I think the writing could be done better, with more explanation on why the solutions mentioned in the last paragraph are taken, and what other approaches were considered. Or an explanation of why no alternative exists. With regard to design, explained in detail in a previous comment.
0,The Design is properly designed
0,The flow diagram is good, makes understanding easier
0,Uml looks good, follows the convention.
0,Enough visual aids used to make understanding the project easier.
0,The design appears to be sound considering the expected outcomes of the project and it doesn't seem that it will create any dependency mismatch as well.
0,they have specified the files they'll be making the changes to and it looks good
0,The changes provided appear to be sound.
0,The provided flow diagram and db table are enough the explain the functionality of the project.  
0,The visual aids used are precise and explain the in-depth functionality of the project. The diagrams and flowcharts ensure there is no ambiguity in the functioning of the project.
0,The UMl diagram mentioned her is a flow chart representing the flow of the functionality . It is designed in details  which explains the flow of the functionality quite well. 
0,visual aids are very nice, especially for the flow diagram.
0,Good use of both diagrams and tables!
0,The given flow-chart describes the flow of the project and how the implemented system will work
0,The flow diagram is good, makes understanding easier
0,Enough visual aids used to make understanding the project easier.
0,only the issues/problem statement is included in the documentation as of now. The tea did mention that they will be adding the detailed design in the upcoming submissions.
0,The doc clearly explains the agenda of the whole project. Seems like the team still needs time to understand and devise a plan to tackle the issues identified.
0,Team have decided to give all details after final submission. A Design Doc should be available before starting the Project. I would recommend to provide few details on Project Design (classes involved in the project or application flow etc)
0,It includes all the sections
0,All functionalities required are in the design doc, but no content is provided. 
0,Please add more details about the solution.
0,No, their sections Solution Design is blank saying everything of importance will be be provided in the final design doc. Only good thing is that they have at least a targeted section of the code which they have planned to work upon.   
0,Yes, the functionality required is stated but the idea about how to code for that functionality is yet to be thought of.
0,Team have decided to give all details after final submission. A Design Doc should be available before starting the Project. I would recommend to provide few details on Project Design (classes involved in the project or application flow etc)
0,only the issues/problem statement is included in the documentation as of now. The tea did mention that they will be adding the detailed design in the upcoming submissions.
0,Have covered almost all the issues, it would have been better if an implementation plan was provided.
0,Clearly defined bugs and problem statements, but no implementation details given. So it is hard to judge this criterion
0,Did not find much info on the Design
0,The team has not mentioned about how they are planning to do the changes.
0,Did not find much info on the Design
0,No plan or UML design is given.
0,This couldn't be reviewed as the design doc is incomplete.
0,There are no diagrams present. It would have been great if a screenshot of a test case or flow diagram was given.
0,I don't think they need any visual aids.
0,no visual aids in the design document.
0,No UML diagram.
0,There were no flow or UML diagrams.
0,Nothing specified.
0,Did not find much info on the Design
0,The design document is well planned and does not miss any of the significant details.
0,all basic elements are included.
0,the design document seems to be well written and detailed with respect to the objectives that need to be achieved. The team explains well the purpose and project design. they have included the database tables which will be modified. the team could add a testing plan to make the design document look complete.
0,The design doc is well written and the points to be completed are clearly expressed.
0,The design document is very thorough, indicating what's the problem, how system works and proposed soluion.
0,yes, the design incorporates all the functionalities that are required.
0,The document incorporates all the functionality required and explains the same with an ever so accurate reasoning.
0,Yes the design is having also the functionalities that is been required . it mentions also mentions a proper proposed solution for all the required tasks
0,Yes I believe so. They discuss what they need to track during a review and what they need display after a review is complete.
0,Yes, they've decided to do all there is in the scope of the project
0,Yes the design tries to cover all the requested features.
0,Yes the functionality is explained.
0,Yes
0,Enough explanation about how the team will tackle the problem statement has been given. Overall explanation is good.  
0,The explanations provided are granular and do not leave any lingering questions in the readers mind.
0,The explanation given is quite easy to understand and explains the solution to the point
0,The authors propose two changes and have mentioned in detail about the flow in which they will make changes. They could benefit from drawing simple LoFi UI cards to illustrate how the new review page might look like which will benefit them in improving their UI design and proper representation of data before they actually spend the man hours in coding it. Overall the have explained the process in detail  and clean fashion.
0,The expected outcomes of the project have been clearly explained and requirements well understood.
0,explanation is good and easy to understand. proposed solution looks good as well. Design and implement a solution that handle GitHub hasn't been explained.
0,Authors have proposed solutions in detail and is understandable.
0,The design seems to be precise. The description of the changes are provided in detail.The team also has mentioned about the API that they will use. They have clearly mentioned about the approach that they will use. Enough efforts have been taken by the team to convey what is to be done and how the team will do it. 
0,The design is accurate; The changes suggested are minimal and ensure that DRY is followed.
0,I think the writing could be done better, with more explanation on why the solutions mentioned in the last paragraph are taken, and what other approaches were considered. Or an explanation of why no alternative exists. With regard to design, explained in detail in a previous comment.
0,The Design is properly designed
0,These changes seem to be appropriate for the objectives they have. Only a small set of files are being changed, and the functionality is isolated well. My only feedback here is that there is likely a place to create helpers or utilities for time tracking.
0,The authors seem to have understood the project and know what changes need to be made to what files. The changes seem to be targeted to the correct classes and preliminary investigation reveals that it does seem to follow DRY principles. They might want to make their design diagram more simplified which will not only help in making it look readable and also help in implementing the code effectively. This will help in reducing convoluted code.
0,The design appears to be sound considering the expected outcomes of the project and it doesn't seem that it will create any dependency mismatch as well.
0,they have specified the files they'll be making the changes to and it looks good
0,The changes provided appear to be sound.
0,The provided flow diagram and db table are enough the explain the functionality of the project.  
0,The visual aids used are precise and explain the in-depth functionality of the project. The diagrams and flowcharts ensure there is no ambiguity in the functioning of the project.
0,The UMl diagram mentioned her is a flow chart representing the flow of the functionality . It is designed in details  which explains the flow of the functionality quite well. 
0,Good use of both diagrams and tables!
0,visual aids are very nice, especially for the flow diagram.
0,The given flow-chart describes the flow of the project and how the implemented system will work
0,The flow diagram is good, makes understanding easier
0,Uml looks good, follows the convention.
0,Enough visual aids used to make understanding the project easier.
0,Document is very well written and contains all the details like problem statement, solution, files to be modified, testing plan.
0,It says what they will do, but it seems high level. Would appreciate some diagrams or mockups
0,The doc seems complete. All aspects of the problem statement are covered and test plan is also included. A use-case diagram will be useful to add.
0,The authors can add the project's purpose (why this feature is important/helpful). The authors have mentioned the plan to use tablesorter jQuery to sort the table but No design plan is included. I suggest the team to remove the introduction to expertiza since it was clearly mentioned in the requirements to not include it.
0,Design doc contains everything in clear explanation
0,The document mentions the tools of JQuery sorting table, in fact which API or any sample code that can be referenced to is expected in the document. Also, this project seems to focus on the view part of Expertiza, so the test plan should be more detailed, cover more edge case. 
0,There are no diagrams present. It would have been great if a screenshot of a test case or flow diagram was given.
0,Unfortunately the team has missed out on adding any visual aids to the document. I would suggest that where you list all the column names which would be sorted in each view, also add a screenshot of how that view looks at the present moment, and a low-fi sketch of how the view would look after the changes have been implemented.
0,The author has not used any UML diagram, nor any other forms of pictorial representation. 
0,Although the textual explanation is succinct and nice, there's not yet diagrams or other visual aids available. I think a diagram that depicts the workflow might be very helpful.
0,1)     The team has already identified the files to be changed, which is a good thing. It looks like, all changes will be handled in the client-side, so not applicable 2)     I assume, as it is nowhere mentioned, they would be writing a custom js file, the team plans to repeat some of the custom written code, if same functionality is required in 2 different file, which could violate DRY. Team might need to consider such possibility. 3)     NO, the team is already optimizing by leverage some JavaScript libraries. 4)     It would as user opts to sort, but here it seems to be a necessary evil. 5)     Yes, the team can elaborate more on their design approach and provide visual aids to help reader understand the sorting intended better.    
0,The authors talk about adding the tablesorter class to the html table and using javascript scripts for further action. There are no apparent problems with this strategy, however I would suggest for the team to elaborate and provide more details on the implementation. For example, it is not possible to understand what the javascript part will look like, how many functions will be used or how they will interact with html.
0,Mainly needs html files to be changed and they have mentioned them which looks good 
0,The design proposed by the authors appears to be sound. Since this project is only to sort the views, there will be no code added to either the models or controllers. I hope the team only adds one sorting function per view and allows that one function to handle sorting for different columns in that view.
0,I don't think the authors plan to add methods to the wrong class. They are modifying the right files. The new design does not appear to potentially make the code "smelly". The team is using one of the existing gems in their design.
0,The solution looks like it doesnt add any overhead and the doesnt make the code "smelly"
0,The solution seems right.
0,I think that the authors have identified changes in the html.erb files, which looks right to me. As it only deals with the sorted view of instructor reports, the changes must go in the views part of the application.  Suggestion: You can try to add a bit of information on whether your changes include addition of new code, deletion of existing code, or just slightly modifying or extending the existing code and justify it. Query: Do you plan on creating  a drop-down like option to choose from which type of sorting is to be performed? If yes, it is an add-on user-friendly feature.
0,Team have shared the link for the TableSorter which explains the functionality
0,The explanations can be more detailed. Overall understandable.
0,Adequate explanation was given
0,It is easy to follow the changes that the authors have proposed.
0,Changes look good.
0,The design document lists every issue that is being addressed in the project, providing comprehensive details on the functionality that is required for each one.
0,Yes, as per the solution provided, it does seem that the design incorporates the required functionality. It considers sorting on all the specified fields. Suggestions: Since you have mentioned the use of jQuery tablesorte, you may also add explanation as to what is tablesorter and try explaining atleast for one field (e.g. name) as to how does it work to sort the entries.    
0,The wiki is detailed enough that it mentions all the functinoalities required in the project. The team has made sure to not miss out on any functionality and they even took out time to list the column names in each report they would add the sort feature to. Good work guys.
0,I think the authors have incorporated most of the functionality in the design document.
0,Design document contains all the functionality required.
0,It incorporates all the functionalites.
0,It includes all the sections
0,Except for the test plan, the design doc seems to have all the important details. The team should add a test plan before starting in order to go for a test-driven development. 
0,Test plan is to be added, but the purpose and the design are coherent and easy to follow.
0,The test plan is not yet done. Rest, I could see that the document is very much complete.
0,Yes the design looks complete
0,So far the idea is clearly articulated. Few things which are not defined are explicitly stated in the doc.
0,Yes, it does
0,Includes everything, as far as I can tell.
0,Yes. The design document incorporates all the functionalities stated in problem statement. 
0,The design has not been stated explicitly so its difficult to comment only with the flow and UML diagrams whether it is appropriate and the best way to address the issue.
0,Authors have a clear idea of what details need to be included to make the audience understand the purpose of the project. The design document is sufficient to get the basic idea and implementation.
0,The design does incorporate the functionality required of making reviews public allowing the students to toggle the visibility of review submitted. It is descriptive and easy to understand.
0,It's not a great explanation
0,Document is explained well. Also the flow of document is good. Team can add screenshots of existing documents, also some diagram to explain the solution well.
0,The proposed flows and project tasks are sufficiently detailed that I can understand the relationship between the issue and how they're going to solve it in each step.
0,The step by step instructions are detailed and is good.
0,The authors have explained the workflow very well with respect to the different types of users involved in the particular feature. The language is simple to follow.
0,The proposals given by the team are reasonable and adequately cover the features to be established during the course of the project. The changes suggested follow the desired requirements. 
0,The team has not addressed the project design approach and the proposed implementation details in the documentation.
0,1. Authors solution do not seem to create methods to wrong classes. 2. New design code does not make the code "smelly". 3. No new gem required. Explained solution is adequate. 4. Proposed design should not hamper system performance. 5. Well efforts expended on the design  
0,I don't have any issues with the design, looking forward to seeing some code snippets to understand it better.
0,As mentioned in their Approach section, the team decided on adding some functionalities like checkboxes and views. I find these changes perfect for the problem statement given.
0,Implementation details haven't been added yet but that's fine as it hasn't been started yet.
0,The design looks fine but no explanation as to why this is done? Is it already existing or is this a new feature?
0,I think the UML diagram can be improved further by adding the classes that are related to the use cases separately.  
0,The team has done a commendable job in creating a very detailed UML diagram and explaining the case of every user very well.
0,No UML diagrams
0,Only a single UML diagram is present, but I'd have appreciated a couple of flow charts to accompany the expected flows.
0,They have used a USE case diagram to explain flow. I found it quite understandable and all the steps are clearly drawn out in the diagram. It clearly explains the steps required to approach a situation.
0,The document contains a UML Use Case Diagram that analyze the system's requirements and describes the actors involved and the relationship between them. It helps to understand the overview of the project details. However, it can certainly make use of a flow diagram in the Expected Flow section that gives more clarity about the sequence of actions. The flow diagram can follow from the use case diagram to show the tasks performed by the actors in a serial order.  
0,The authors have explained the changes to be made to the system, including screenshots of the tables, UML diagrams as well as all the files that will be modified. Suggestion: Although all the details are explained well in the document, by writing the changes proposed to the files in bullet points or by using a diagram the document will be easier to read.
0,They made clear explanation about their task. For example, their provide pictures to show what they need to do.  
0, Yes, the team has elaborated their design approach and changes to system in detail. They have mentioned all the file changes and also provided sample code for reader understanding.
0,The design document clearly specifies all the issues that are going to be addressed by this project. UI views are provided which help the reader to better understand the scope of the requirements. Moreover, the authors list the files that are going to be modified and the authors comprehensively describe how the jQuery tablesorter 2.0 library will be used for three types of sorting. One minor improvement would be to highlight the parts associated with introduced changes that link html table with the library for better readability.
0,Great improvements compared to the previous submission. Now its a Very well written document. Good job team.
0,The team has added uml diagrams, images of related web pages and provided details on jQuery tablesorter that explains well the changes the team plans to make.
0,The authors have explained enough about the changes
0,The wiki is detailed enough that it mentions all the functionalities required in the project. The team has made sure to explain all the changes they wish to make to the system. They list all columns that need to be sorted and how they will implement the sorting.
0,Yes, the authors have significantly improved the writeup, and very adequately explained the changes that they've made.
0,The design is very efficient and follows the standardized software engineering practices. 
0,the design is sound and easy to understand. The design proposed also sounds logical, i.e to sort team names alphabetically, and grades numerically. To sort by both ascending and descending order.
0,Yes, the design seems to be sound.
0,The authors have justified the use of jQuery table sorter by listing its advantages.
0,The team has analysed the existing design principles used in the project and has appropriately defined the design for the new changes which will be made. the design looks good and easy to implement. 
0,The design appears to be specific to the requirements. For this, they have used a UML design which basically explains the flow of the use-case. They have not used any principles or design patterns. However, there does not seem a need to use any, as their changes are limited to the html view and making a call to the tablesorter using JQuery. As per the document, the design does not make any redundant changes or unnecessary changes to the code. Thus, they have done a good job by optimizing the changes.
0,The authors have improved the part of the document that describes the interactions between html and javascript parts since the 1st round. While this assignment does not require an extensive discussion about the design principles or patterns, it would be better if the document explicitly addressed this topic.
0,Yes, as its sorting, not much scope on design approach. Yet the team has documented well on their approach regarding multi-level sortings that they are undertaking in few pages. They have also considered cross-browser compatibility of their jQuery library, which is a common design miss during client-side changes.
0,This project is not very difficult, so they don't need to follow some principles or patterns.
0,This their design is very simple and clear.
0,Yes, the design is as simple as it can be. The current scenario is explained with adequate screenshots, and the changes are explained by stating the field to be used for sorting the table. A mock-up screen of the expected output would have made it even better to understand, however reading the material is sufficient as well. The changes are not complex, as they interact with a single view at a time. The tablesorter function is also called for each view, e.g. view_submissions layout.
0,Yes, the design is very simple to understand, and also the implementation is pretty clear and effective.
0,Yes, the solution proposed is simple by using the  jQuery tablesorter gem.
0,The design is extremely simple and easy to understand. Good work guys :)
0,The screenshots of the expected result and the UML diagram are good, But the screenshots can be smaller to make the page more user-friendly. The UML diagram can be better if it's designed as a design plan diagram instead of a user diagram, which simply states how the reader is to approach this. Or it could be better if we have both.
0,The changes are mentioned, but not in a concise section, which I suggest would make the documentation easier to read.
0,the document is clear. and they added changes that have been pointed out in the previous review ..good job team!
0,Yes, they have been thorough in their approach and this has been a project implemented to perfection. They have given proper UML diagrams and then showcased in the "New Model", "New Controller" and "New Views" section. 
0,The changes to be made are clearly stated and explained
0,The doc explains the entire project agenda very clearly. 
0,The team has included all the details required to implement the given requirement. The wiki has complete details related to requirements , analysis of current designs and changes required to achieve the required functionality. overall great job !
0,The design is well-considered and design principles are being considered when implementing the design.
0,The design is the strong point and it is easily understandable, New model table idea is good
0,The design is perfectly well depicted in the form of the diagram and they have been thorough in pointing out the application flow in the Workflow and Models section so as to elucidate the problem statement.
0,It's good.
0,The design is sound with appropriate principles and patterns.
0,the team has analysed the existing design principles used in the project and has appropriately defined the design for the new changes which will be made. the design looks good and easy to implement. great work done !
0,Yes, from a perspective of an outsider, the design seems to be simple enough, easy to understand, and efficient to implement.
0,Yes, the design is a very simple and effective representation of the problem statement and they serve a good representation on how they are working and implemented the changes to the review section. 
0,The team has taken enough efforts to make it as simple as possible to explain the design
0,the design appears to be simple and is derived from the existing modules /designs. The workflow is easy to understand.
0,great visualization on existing expertiza system, I would love to see how the system is going to change after your implementation
0,The team has added enough diagrams to explain their design
0,Most of the edge cases are identified
0,Add screenshots. UML diagrams are very helpful when viewers walk through the design.
0,Yes, the authors have clearly explained the changes to be made to the system. Document is simple, succinct and easy to understand. Great use of flow charts, uml diagrams and mockups to visually represent the information is done. 
0, Yes the author has provided a sufficient explanation of what changes needs to be done to the system by giving flow diagrams and screenshots about what changes they are going to incorporate in their system
0,Team has added all the diagrams and screenshots. The document is well explained and looks complete.
0,Yes, their explanations are adequately explained the changes.
0,1) The authors have clearly explained the changes to be made to the system. 2) They also have given the files to be modified/added for each change.  
0,I think that the authors have done a really good job of explaining and covering all the changes to be made. Overall this is the best document i have seen so far.
0,The authors have explained all the changes to be made very clearly and concisely. Each change is supplemented with sufficient diagrams and mock-ups so as to make the final task of visualization easier.
0,Yes, one of the best design docs of project 4!
0,The document was very well written previously too, and they have improved it with diagrams and test. Nice work.
0,The authors have considerably improved on the document. UML diagrams as requested have been added.
0,The team has adequately explained all of the changes required for segregation including the exact reports and functions to be removed out of review_mapping_controller.rb along with the design pattern to be followed(strategy in this case).
0,Yes. Since the previous round of reviews, I can see significant and positive progress.
0,Well done adding a lot of detail since your last submission.
0,The document explains the problem and the approach the team is planning to take clearly.
0,The explanations are good and the project goals are easily readable.
0, Refactor the report_formatter_helper into a reports_controller, where the reports_controller implements a Strategy pattern to help it figure out how it should handle a given report. If that is correct, then yes, their explanation is great!
0,Yes, the design follows appropriate principles and patterns. suggestions: not required.
0, As the project is based upon making changes to the UI of the system , thus there is no such specific pattern being followed however the design that they have made available in the form of screenshots appear very much inclined with the functionalities that they need to implement .
0,Design is good
0,Yes, their design is very sound, and principles and patterns are used appropriately.
0,The project involves refactoring of the review mappings controller and the authors have proposed a clear action plan. They have added a b=very detailed testing plan and also a detailed UML diagram. The authors have updated their UML diagram and also updated their testing plan after the first submission.
0,1) The design appears to be sound. 2) Also follows proper design principles eg: for making changes to nomination and review questions, inheritance is used (inheriting methods from questions parent class)
0,The authors have done a very good job at writing the design document. Their requirements and proposed solutions are properly aligned, and their approach takes all the factors into consideration, viz. Listing the major areas that need refactoring, Changing the code, modifying the UI, making sure that the refactoring does not affect the existing functionalities.  They have explained each of these phases with ample explanation.
0,The design seems to be appropriate and sound. It follows appropriate principles.
0,Yes, the design appears to be very sound and follows all the principles that I know. I loved the format of the documentation as well.
0,They have explained very well
0,The document enlisted the crucial aspects of the project in the first stage. The team has made improvements in this stage by including a test plan section that lists the set of test cases to deal with the retrieval issue and plan on including a new controller for the next stages. 
0,The team has adequately explained all of the changes required for segregation including the exact reports and functions to be removed out of review_mapping_controller.rb along with the design pattern to be followed(strategy in this case).
0,Yes the design follows simple rails concepts and is pretty straightforward. I would like to see if the team uses existing gems available to speed up implementation and re use.   
0,Yes, looks clean. Any design patterns used????
0,Yes. Since the previous round of reviews, I can see significant and positive progress.
0,Yes, the design appears to be sound and well made. 
0,Yes, the plan is clear and easy to read.
0,Well done adding a lot of detail since your last submission.
0,Have Updated the test plan.Good job!
0,Yes, the design appears to be sound. There could be some rearrangement in the mock-up layout, e.g. text box for email address and 'Add' button could have the same horizontal alignment for a better user interface.
0,The document explains the problem and the approach the team is planning to take clearly.
0,The design looks clear and complete and is using a strategy pattern for implementation.
0,The design seems to be very simple. I think the team has avoided unnecessary complications and are doing minimal changes to existing system to solve issues given to them.
0,The explanations are good and the project goals are easily readable.
0,The design approach seems justified and inline with the functionalities required to be implemented. They have mentioned step wise details for all the changes they are going to take. Done a good job. No rework required.
0,They have used the design patterns well, and made a good choice in explaining the class hierarchy with the class diagram (however, I'm not quite sure whether it's right to call the diagram as a UML diagram)
0,design looks well thought out.
0, Refactor the report_formatter_helper into a reports_controller, where the reports_controller implements a Strategy pattern to help it figure out how it should handle a given report. If that is correct, then yes, their explanation is great!
0, Yes the design is presented in a much simpler form which gives a very clear picture of how the changes are going to be implemented and which functionalities would be witnessing the changes , also as they have provide the screenshots it enhances the understanding about the project more.
0,Good design principles are being used for this project.
0,Yes, their design is simple and clear enough to read and understand.
0,Refactor functionality from a Controller helper into its own Controller where that Controller will implement the Strategy pattern. It seems sounds to me!
0,The project involves refactoring of the review mappings controller and the authors have proposed a clear action plan. They have added a b=very detailed testing plan and also a detailed UML diagram. The authors have updated their UML diagram and also updated their testing plan after the first submission.
0,1) The design is simple and well modularized. 2) Each method is implementing only one task as it should.
0,The design does appear to be as simple as possible. The team have not unnecessarily complicated the project.
0,Yes, the design is pretty simple and to the point. The design proposed is very clear and talk why each change is necessary.
0, The design is straightforward and as simple as possible. The team has thought this project out very clearly and laid the same in the form of flowcharts and mock-ups. This has greatly reduced the complexity of the project and helped decrease the chances of clutter and confusion.
0,The authors have done a very good job at writing the design document. Their requirements and proposed solutions are properly aligned, and their approach takes all the factors into consideration, viz. Listing the major areas that need refactoring, Changing the code, modifying the UI, making sure that the refactoring does not affect the existing functionalities.  They have explained each of these phases with ample explanation.
0,The authors have understood the requirements of each report generation clearly. They have converted report generation into a single step by providing a drop-down menu for 8 reports. For this, they have used generateReport() method. The design uses a strategy pattern to generate a particular type of report. The sub classes (strategy classes) use only required subset of class variables, and it seems as an efficient design. The strategy pattern is a good example of DRY principle.
0,Yes, adequate amount of details present
0,The design follows the apt principles and patterns in that the refactored version is planned to be implemented using the Strategy pattern by working on the eight different report categories.
0,Yes, the design principles incorporated is quite impressive. They have thought through the best way to accommodate the changes and wrap it up as a good design.    
0,Yes!  The requirements are simple and the design plan clearly explains all the points.
0,The document enlisted the crucial aspects of the project in the first stage. The team has made improvements in this stage by including a test plan section that lists the set of test cases to deal with the retrieval issue and plan on including a new controller for the next stages. 
0,yes, design appears to be very simple.
0,Yes have followed all SE practices in design document.
0,Yes, the design is quite simple.
0,Great use of UML diagrams, flowcharts and mock-ups by the team to clearly explain the flow of their work. It is easy to understand the flow and how the end product will look like.
0,The design is pretty straightforward and I am able to get a complete idea of what changes the team intend to make.
0,Yes..
0,They team has done awesome work in representing every detail possible in the flow diagrams. They have created UML diagrams which depicts the flow of the admin and students along with other actors. As mentioned earlier they have also represented the admin flow diagram and instructor flow diagram through the flow chart which makes it very easy for end user to understand the workflow of the requirements in the expertiza system.
0, Yes the visualization is pretty clear and good.
0,Using the report interface to assist with specialization was good
0,Proper use of UML to explain the use cases and flow charts to explain the workflow has been done. The plan is complete.
0,Yes, their visualization is good. They are clear and well described the changes.
0,Yes, the plan is clear and easy to read.
0,Using a strategy pattern to solve this problem is one of the simplest approach according to me and team has selected the same thing. Only thing i would suggest the team is to be carefull when separating the classes as it might have some un-intended side affect.
0,Have Updated the test plan.Good job!
0,The proposed design is simple and no extra changes are being proposed.
0,1) In the UML diagram the set of actions that the instructor can perform to add more than one question to nomination and textual type is not added. Also add the actions to modify the display sequence of existing questions. 2) In the instructor flow-chart, the flow for review questionnaire and to modify the display sequence of existing questions is missing.
0, Yes, the design does sound like the simplest refactoring possible that can move the Review Mapping Controller closer to a single responsibility class.
0,The design looks clear and complete and is using a strategy pattern for implementation.
0,The design document is extremely clear. They have done a very good job in the design document.
0, The design document includes flow charts, UML diagrams and screenshots which is really impressive as it made the document easier to understand. 
0,I loved the overall use of the visualizations which aids to the understanding of the whole doc. The formatting of the documentation makes it really easy to read and understand.
0,design looks well thought out.
0,Yes the presence of use case diagrams and flow charts explaining the work flow is good. It would be nice if there were more uml diagrams such as sequence so show various class interactions.  Presence of mockup screens is good. That helps in understanding what is being implemented. It would have been good if the authors put in more details about the validations that that propose in the system 
0,The design document appears to be concise in it's representation. According to the task specified and proposals described, the design appears simple to be executed.
0,Good design principles are being used for this project.
0,    Yes, the design is simple and straight-forward. In personal opinion, it could not have been simpler than this. Great work on design.
0,Yes, the uml diagrams sufficiently provide visualization.
0,Refactor functionality from a Controller helper into its own Controller where that Controller will implement the Strategy pattern. It seems sounds to me!
0,Yes, the plan seems simple and feasible.
0,Easy to comprehend
0,The authors have added UML diagrams as requested in the previous review and it has made a lot of difference. The explanation is much clearer now.
0,The team has done a good job with the UML diagram. They have also added details to the class diagram as was suggested in the last review
0,Test plan outlines the functionalities that the team will test and it seems sufficient to test the changes.
0,the proposed refactoring changes seem to follow good ruby principles and also looks DRY.  They haven' t mentioned any pattern as such. But overall the design document looks neat and very well written.
0,They team has done tremendous job in following the test driven approach for the project implementation. They have already included the tests they are writing for the functionality implementation. They have covered the exhaustive scenarios  for the project in their test. Their test plan is highly appreciative.
0,Excellent diagrams and UI mock ups!
0, The test plan is quite good as it covers all the test cases in the form of 11 test cases which test all the functionalities for the admin and the instructor role. It also considers the negative test cases like throwing an exception when the pending instructor tries to add more then 10 students to his/her course.
0,The authors have understood the requirements of each report generation clearly. They have converted report generation into a single step by providing a drop-down menu for 8 reports. For this, they have used generateReport() method. The design uses a strategy pattern to generate a particular type of report. The sub classes (strategy classes) use only required subset of class variables, and it seems as an efficient design. The strategy pattern is a good example of DRY principle.
0,Yes, they include the test plan.
0, Their diagrams are Supreme. The diagram of how they plan to implement the Strategy pattern significantly helped to cement my comprehension of what they plan to do.
0,1) The test cases cover all of the functionalities that they are going to implement.
0,No visualizations required for this project.
0,The design follows the apt principles and patterns in that the refactored version is planned to be implemented using the Strategy pattern by working on the eight different report categories.
0,Yes, the document includes a test plan. There was no test plan present in the previous version of the design document but the team included the test plan in the second round. The test plan is clear and seems like it would really test the functionalities.
0,The test plan has been written in a very good way following the great quality of documentation till the end. It covers all the edge cases and scenarios.
0,Yes, the design principles incorporated is quite impressive. They have thought through the best way to accommodate the changes and wrap it up as a good design.    
0,The test plans are excellent. The best I have seen so far.It has accurately taken all test cases into consideration and described the layout of the final test in the form of a pseudo code. Well Done on the test plan!!
0,Yes, test plans are included
0,Yes have followed all SE practices in design document.
0,The design is pretty straightforward and I am able to get a complete idea of what changes the team intend to make.
0,Yes, the authors provide a UML and a screenshot to explain the class relationship and the change they will make, which are helpful.
0,Yes, the test plan looks good. It covers all the functionalities.
0,Have used visualizations diagram appropriately 
0,Yes..
0,Test plan seems thorough and well thought out.
0,Using the report interface to assist with specialization was good
0,Yes, the team has added a test plan after the first review. The test plan seems to cover the major portion of the changes planned.
0,The team is following a Test Driven Development approach. They have defined the test cases that need to be tested after the implementation. It seems to completely test the feature.
0,This test plan is simple and easy to follow good job.
0,The proposed design is simple and no extra changes are being proposed.
0,The test plan is good and describes all aspects of the RSpec tests needed.
0, Yes, the design does sound like the simplest refactoring possible that can move the Review Mapping Controller closer to a single responsibility class.
0, Looks like a good test plan, and there is a use case diagram! Their expectations for each of the Report Strategies is clearly documented in their Test Plan.
0,The design document is extremely clear. They have done a very good job in the design document.
0,The design document appears to be concise in it's representation. According to the task specified and proposals described, the design appears simple to be executed.
0,The Test Plan section suggests the manner in which the test cases will check the functionality of retrieval of a variety of reports for the assignments to the instructor. Each scenario tests a similar function of checking whether the report is rendered based on the report type.  
0,    Yes, the design is simple and straight-forward. In personal opinion, it could not have been simpler than this. Great work on design.
0,Yes, the plan seems simple and feasible.
0,Easy to comprehend
0,Yes, they have a complete design for testing, and include all the cases they need to test.
0,The team has done a good job with the UML diagram. They have also added details to the class diagram as was suggested in the last review
0,Excellent diagrams and UI mock ups!
0,The UML and flow Charts used by the teams are good but can be made more clear and appealing
0,No visualizations required for this project.
0, Their diagrams are Supreme. The diagram of how they plan to implement the Strategy pattern significantly helped to cement my comprehension of what they plan to do.
0,From the previous stage, the team has added the Use Case Diagram that efficiently describes the actors involved in the process. Also, since a new controller is proposed it was essential to identify the role of the instructor.
0,Yes, the authors provide a UML and a screenshot to explain the class relationship and the change they will make, which are helpful.
0,Have used visualizations diagram appropriately 
0,Yes, the team has added a test plan after the first review. The test plan seems to cover the major portion of the changes planned.
0,The authors have dived into the depths when explaining the changes. All of the changes are well defined and precise.
0,Yes, they did.
0,This test plan is simple and easy to follow good job.
0,The test plan is good and describes all aspects of the RSpec tests needed.
0, Looks like a good test plan, and there is a use case diagram! Their expectations for each of the Report Strategies is clearly documented in their Test Plan.
0,The authors have very well explained the problem statement and the changes to be made to the system, including flowcharts, the files to be modified/added and useful links.
0,Authors have clearly explained the changes to be made to the system. The design document was easy to understand.
0,The Test Plan section suggests the manner in which the test cases will check the functionality of retrieval of a variety of reports for the assignments to the instructor. Each scenario tests a similar function of checking whether the report is rendered based on the report type.  
0,Yes, they have a complete design for testing, and include all the cases they need to test.
0,This part has been significantly improved from the previous submission. The diagram make it very easy for an outsider to understand the architecture, the underlying problems and the proposed solution. 
0,Yes. The figures added to the wiki clearly indicate the changes that will be made to each view. The columns that will be made sortable and how will the made sortable. Good work :)
0,Yes, the team added visual aids like UML diagrams, screen shots, code snippets to clearly describe the changes to be made to the system. Well done!
0,This team used great diagrams that add to their documentation's clarity significantly.
0,There are multiple visual elements that improve the readability of the document. Screenshots of the UI tables help with the illustration of the required changes. Furthermore, the UML diagram demonstrates the relation between relevant flows.
0,The team has added good number of mock UIs and UML diagram and clearly explains the code follow. All of them are self-explanatory and needs no improvement
0,diagram is added. 
0,No visulization is necessary for this project
0,the test plan is thorough. 
0,The design doc includes the test plan which covers all the changes that will be made.
0,There is a detail explanation on how the function testing will be carried out under the teating plan section of the wiki doc.
0,Test plans looks to be an overview of the functionality, In the test plan i see the functionalities explained l
0,Yes it includes test plan. It is very well written and will test the functionalities.
0,You have a lot of testing scenarios which is really good
0,Yes, they made detailed explanation about their changes.
0,The design seems to be flawless. All the principles and patterns used are flawless and to the point.
0,Yep, they have good structure to show what and how they gonna do with the project
0,The design looks good. The code is already committed and approved by the concerned team. Good Job !
0,Yes, their design appears to be sound.
0,The design appears to be sound and following appropriate principles.
0,yeah, Their proposed design includes workflow, initial step, and subsequent steps. It was easy to follow their design. Their solution appears to be sound.
0,I don't exactly understand how the waveforms help to produce the sound for the new browser they're adding support for, but other than that, their approach seems solid.
0,Yes, I am surprised that they have already finished the project. 
0,The design is concise and clear.
0,The design is simple and easy to understand. The sin waves and the description about it helps to properly understand the changes made and its impact.
0,The design was not unnecessarily complex. It was as easy as it could be.
0,Use of flowcharts and step by step explanation simplified their solution. It was easy to grasp and design also appears to be simple.
0,Very simple and clear.
0,The team has done tremendous job in adding visualization aids. They have added application flow diagrams and visualized images. They have also included screenshots to explain the code functionality implementation of enabling self reviews and score pages. This makes the document descriptive and very easy to read and understand.  
0,Self explanatory visual changes have been added. All the changes are described via the visual aids.
0,Yes the flow diagram and graph plots help to understand the changes and its implications. The diagrams clearly describe the change approach followed.
0,The flowcharts included in the design document clearly explain the changes that need to be done.
0,The design document includes proper visualization. It included appropriate flow charts and screenshots which made it easier to understand the design document and the project.
0,Yes, the team has used flowcharts and diagrams which clearly describe the changes to be made to the system.
0,They provide pictures of their sound waves.
0,The team has done tremendous job in the test plan they have already implemented the test cases and given the path to run it.
0,The provided tests are in depth and will test the changes made thoroughly.
0,They have pretty good test plan as there is no code yet.
0,This is a mozilla project and I am not sure what are the testing requirements and depth to be covered, as it is not mentioned in the document. But the steps mentioned do suggest that basic testing id done
0,It included a proper test plan. There was no test plan included in the previous version of the design document but authors have added it in the second round which made the design document complete.
0,the design does include test plan and plans to test the functionalities 
0,Yes they have
0,explained details about their solution and what will be changed after their implementation.
0,Yes, changes to be made are clearly explained
0,They have explained in detail about the proposed changes with individual diagrams for each case. It is very thorough in explanation
0,Great documentation. Tbh, the best i have seen yet.  
0,They have documented it in a very rehearsed manner
0,The design document is really well written. It clearly describes what needs to be done, how it needs to be done and what code changes need to be made. The files and tables affected are clearly listed.
0,The authors have prepared the design document quite well.
0,The author has explained extensively about the changes to be made to the system.
0,Yes, the problem definition and the proposed solution are pretty clear. They also provide some diagrams to explain their project which is helpful.
0,Their introduction and problem definition are clearly enough to explained the changes.
0,With er diagram and database details, the design looks good. 
0,The design follows appropriate principles and patterns as required
0,The project consists of making a search function to select specific users, assignments etc using some criteria. So they're creating a search functionality for individual models.
0,Yes the proposed changes make only required additions.
0,Yes it follows appropriate principles. 
0,The design appears to be sound. It is really well structured. It is easy to follow. It clearly states the changes to be made and the files affected by these changes.
0,The design appears to be sound and clearly indicates the proposed code changes.
0,Yes, the design is appropriate.
0,Yes, they provide solution for different problem situations.
0,Yes it is fairly simple
0,Yes, the approach described in the design document is easy enough to understand. They have also backed their decision to go with the second approach with appropriate reasoning.
0,The design is simple and quite comprehensive covering lots of methods of searching.
0,YEs based on the proposed solution it appears to be simple as possible.
0,The design document appears really easy to follow. A person who is new to the project can get the summary of what is happening just by reading and going through the design document.
0,The design has been explained in a simple way. The team has explained the design using use cases which is easy to comprehend.
0,Yes, the design is simple and feasible.
0,Yes, clear and simple.
0,Yes, easy to understand.
0,They have used apt visual aid like UML diagrams and screen shots
0,Necessary diagrams are included.
0,The team has communicated their design clearly via use-case diagram and a class diagram with a description of various database tables involved.
0,Excellent use of visualizations. They already had an overall flow chart and this time additional tables and UML has been added. Best of what I've seen.
0,Yes they do explain everything. The er diagram, use case diagram, relevant tables explain everything.
0,The diagrams seems to go out of the boundary of the pae.
0,The project has great visualization. A lot of UML diagrams have been included which makes the understanding the project easier. The UML diagrams also clarifies what work is to be done.
0,The team has described changes using use case and ER diagrams to clearly explain the system.
0,The authors add more diagrams to help to explain the change they are going to make. The relevant tables are really helpful.
0,test plans walk through necessary functionalities.
0,Yes, a good test plan is also included
0,The test cases described will cover the functionalities described given that they write multiples tests with the same structure as described for all search criteria. 
0,A concrete test plan is also added and it has both UI and automated test details.
0,Yes this is done very well.
0,They include a very described test plan. It has everything proper. What framework, what tests all this information is well included. They clearly specify what they aim to test.
0,The test plan is pretty good and it has both UI tests and automated tests. 
0,Manual test plans as of now! The team is planning to add Rspecs after implementation.
0,The test plan is designed efficiently. They have described the UI tests and automated tests which cover most of the cases. 
0,Two types of testing are listed, and the authors list all the cases they need to test.
0,The author has excellently explained about the changes that they would be making by providing the design diagram and the screenshot of the the changes that they have incorporated .Also they have mentioned about their choice of tool which is google chart and why do they prefer , so overall a good explanation
0,Changes that's needs to be made has been explained correctly.
0,Yes, their doc has adequately explained the changes.
0,The team have a well written design document and and the authors have explained the proposed changes well. The authors have also listed each file they are going to be changed.
0,yes, the team has well explained the changes that they are going to make. Last time it was a bit confusing but this time because of the help of the diagrams and mock UI screen, the solution seems clear now.
0,The authors have explained the changes made to the system. The design flow greatly helps to understand the flow of the system.
0,The authors have described what all changes they plan to do and where they plan to do it. Compared to the previous version of the design document they have now included what tools and framework they plan to work on. The design document looks complete and understandable now.
0,They will be changing mostly html and erb code to create a visual interface that delivers information to instructors more effectively.
0,The proposed changes have been explained in a simple manner.
0,The document adequately describes the project description and proposals made. The proposed change of generating a single or single bar chart graph based on the categories selected to display the chart, can be efficiently made to the system.
0,They have improved the document to provide a better description of changes to be made to the system.
0,Yes the design is sound and gives a proper explanation about how their implementation would behave.
0,Design seems correct.
0,Yes, their design is clear and sound, and the principles and patterns are well used.
0,yeah their design seems to be sound and neat.
0,System is well defined 
0,The design document is good and I don't think any design pattern needs to be followed as very few changes are being made. 
0,The design makes use of the Google charts tool to generate visual charts for specific criteria set. Based on the design flow, it appears that the functionality can be consistently performed to generate the visual graph for the instructor.
0,Yes, the design appears to be sound and uses appropriate design principles.
0,Yes the design is pretty simple and inclusion of screenshot enhances the clarity of what the team has achieved in terms of the required changes. 
0,Design is simple and easy to understand.
0,Yes, the design is simple and easy to understand. I can easily know what they will do through their doc.
0,The design appears to be very simple and well written. They have explained the use case diagram very well. also they have added visualizations.
0,yes, the design is simple and easy to understand 
0,The team is using external tools to do the work and its clear and easy
0,Using google charts is a good idea.
0,From the reasons provided for choosing the Google charts tool, and it's effectiveness, it can be integrated into the system functionality easily making the design simpler to be executed.
0,Yes, design involves google charts API and seems very simple.
0,Yes the design flow and the screenshots very clearly describes the changes made to the system.
0,Flow diagram explains the flow correctly.
0,Yes, they have used visualization to help people understand their design.
0,The bar charts have been added to the design report. The visualizations have been added to views also and the screen shots have been added too. The only thing that I would like to add is that the bar charts could have been more descriptive. As in they could have added details for  x label and y label and also put legend. this will aid the user in quickly understanding what the chart is conveying. 
0,They have worked on their weak point. Earlier their solution does not seem cogent but I would say now they have made good progress.
0,The sample data visualizations is good. The way they have given visualizations for sample data is nice. easier to understand and good.
0,The document does include a flowchart which shows the flow of changes. However, an UML diagram would have made the document more understandable and easy to follow.
0,The team already has mockups for their design.
0,The visualization is great, the screenshots clearly indicate the proposed output of the project.
0,The team has not included any additional diagrams apart from the flow diagram provided in the first stage. The flow diagram effectively describes the sequence of actions that need to be taken so that the instructor can view the bar graph visual representation for the selected criteria set.
0,Really good visualization provided.
0,According to the team "The specification of the project does not require us to use automated tests" but they plan to test the modified ruby code or the new features using the RSpec testing framework. Overall, the test  plan sounds good 
0,No tests are required for the project as stated
0,This team did not require any tests.
0,The design document does not include a test plan as testing requirement is very minimal since most changes are in view.
0,The test plan section specifies that it does not require performing any automated tests. However, since the new functionality of adding a visual diagram, the team would modified ruby code for the functions added to the grades_controller.
0,Authors have explained the changes that needs to be made clearly.
0,Yes the design is sound and appeopriate. However, it may be better to implement more code level design.
0,Simple and clear. Easy to understand.
0,It gives a high-level design picture and two scratches of UI, which are all good and understandable.
0,The test plan is completed. Just one suggestion that it can be more specific. For example, it may include some real test cases.
0,Yes, have included the flow of the process in the second round of interview
0,1) The document clearly mentions the changes to be made to the existing system and requirements that need to be delivered. 2) Also mentions the changes to be made to the UI. 3) The files to be added/modified are also mentioned.
0,1) Follows appropriate design principles and patterns.
0,1) Yes, the design appears to be simple.
0,1) Document includes test plan. 2) However can include more test cases.
0,yes, there is no mention of design pattern yet but overall design appear very clear to me
0,mockup diagrams really make it easy to understand  
0,great work in high level test plan , it is very easy to understand and it is one of the strong point of this documentnt
0,overall team has done good work on visualization, hope to see the actual images of expertiza by the end of the project
0,Authors have explained the changes that needs to be made clearly.
0,Design seems good.
0,Design seems simple and correct.
0,The changes necessary are explicitly outlined. though more description as to why certain files need to be modified would be nice to have.
0,The proposed changes match existing expertiza guidelines well.
0,The plan of work seems to be quite simple. 
0,Yes, very clearly writeup.
0,The explanation is good and helps get the point across
0,The design for the feature is simple and clear.
0,I see that they added an additional flow diagram that is further helping in the understanding
0,They have mentioned about possible tests required for the project.
0,Well, they have mentioned what needs to be done, what changes have to be implemented.
0,It does appear to be sound and in sync with the DRY principles.
0,Well, the design does look simple. It is not difficult to understand the principle.
0,UI mockups and UML diagrams are descriptive. However, more information should be conveyed to how to solve the problem
0,Yes, diagrams are self-explanatory.
0,The design appears to be sound following all the appropriate principles and patterns. I liked the overall flow of the document.
0,The design looks to be simple and clear to me. It clearly states what files are going to be changed and as per my knowledge there is no redundant and unnecessary change.
0,i liked the visualizations used this time around. they have certainly improved from the last time. I liked the overall used of high and low level visualisations provided.
0,Even though few test cases have been provided I feel like it could have been more detailed with the steps involved in the testing.
0,Yes, very clearly writeup.
0,Well, they have mentioned what needs to be done, what changes have to be implemented.
0,1) The document clearly mentions the changes to be made to the existing system and requirements that need to be delivered. 2) Also mentions the changes to be made to the UI. 3) The files to be added/modified are also mentioned.
0,The explanation is good and helps get the point across
0,Design seems good.
0,The proposed changes match existing expertiza guidelines well.
0,It does appear to be sound and in sync with the DRY principles.
0,1) Follows appropriate design principles and patterns.
0,The design appears to be sound following all the appropriate principles and patterns. I liked the overall flow of the document.
0,Design seems simple and correct.
0,The plan of work seems to be quite simple. 
0,Well, the design does look simple. It is not difficult to understand the principle.
0,mockup diagrams really make it easy to understand  
0,1) Yes, the design appears to be simple.
0,The design looks to be simple and clear to me. It clearly states what files are going to be changed and as per my knowledge there is no redundant and unnecessary change.
0,The design for the feature is simple and clear.
0,Simple and clear. Easy to understand.
0,Yes, have included the flow of the process in the second round of interview
0,overall team has done good work on visualization, hope to see the actual images of expertiza by the end of the project
0,i liked the visualizations used this time around. they have certainly improved from the last time. I liked the overall used of high and low level visualisations provided.
0,I see that they added an additional flow diagram that is further helping in the understanding
0,Yes, diagrams are self-explanatory.
0,It gives a high-level design picture and two scratches of UI, which are all good and understandable.
0,great work in high level test plan , it is very easy to understand and it is one of the strong point of this documentnt
0,They have mentioned about possible tests required for the project.
0,The issues have been identified and documented clearly. However, a little more of explanation is required for the solutions proposed for issues 2 - 5. They seem to me at a very high level.
0,Yes, they look well written and easy to follow with all the visual aids. 
0,Very well written document. Good job team.
0,I understand what the team is supposed to do to the expertiza system.
0,Drastic improvements have been made to design doc. 
0,As far as the issues are concerned, the solutions do seem logical.   
0,The design looks good. All the issues are stated and addressed nicely.
0,Yes, the deisgn appears to be totally sound. The changes proposed are very standardized, and follows appropriate industry standards.
0,the design is sound with appropriate principles and patterns.
0,Clearly explained with diagrams and UML diagrams.
0,  The design is perfectly well depicted in the form of the use case diagram in which the users are student and instructor and the data base is where the actions are stored in the database and the retrieved from the same for the case of reviews information.  Also, they have been thorough in pointing out the application flow in the Application Flow section so as to elucidate the problem statement. 
0,Since the project is aimed at fixing the issues, no design patterns need to be used.
0,The team has analysed the existing design principles used in the project and has appropriately defined the design for the new changes which will be made. the design looks good and easy to implement. great work done !  
0,Yes, simple straightforward solutions.
0,The design does not seem that complex. The team has clearly mentioned the issues and the way to go about it.  
0,Yes, the design is very simple, lucid and efficient.
0,yes, only a few files are being modified. 
0,The design is simple. 
0,Yes, the design is a very simple and effective representation of the problem statement and they serve a good representation on how they are working and implemented the changes to the review section. 
0,The explanation of each of the issues in details is done very well but it does seem to be complicated unless files to be modified and solutions are read.
0,It was weird that two of the bugs they were assigned don't exist, but that's not the team's fault.
0,The design appears to be simple and straightforward to implement. The team has also included all the changes that will be made to achieve the desired results.  Great Work !
0,The design document is easy to comprehend.Have explained in detail about the problem but not about the solution.
0,Great use of mock ups and UML diagrams. It makes understanding the issues easier. Looks like a great amount of thought has gone into making it. 
0,The visualization is great. All the flow diagrams and required screenshots are in place as required.
0,The visualization is by far the best part of this writeup. Also, it's visualization is among the best I've reviewed till date. The author has put in a lot of efforts for the same. The diagrams make the architecture and the problem statement very simple to understand.
0,A lots of visuals, very helpful when viewers walk through the design. 
0,Great work by the team on UML diagrams. 
0,Yes, the diagrams are clear to show how the system works. They have even gone a step ahead to show how they have thought of resolving the problem at each and every step of the Expertiza review section and the message popups they receive for the same. 
0,This team consistently uses great diagrams that add to their documentation's clarity significantly.
0,The team has included a lot of visual aids which complements the document making it a lot easier to understand.  Great work with the UI mockups / project design / UML diagrams.
0,As per the requirement document, test cases are not required.
0,Yes, they have a working test plan in mind and also they have thought of the ways in which they are going to test the various edge cases for the various issues at hand.
0,The aspect of re-producing the issues are very clearly mentioned and hence tests are written briefly which can be easily understood.
0,The tests are really in depth for each issue the team will be fixing.
0,The authors have dived into the depths when explaining the changes. All of the changes are well defined and precise.
0,Yes, they did.
0,The authors have very well explained the problem statement and the changes to be made to the system, including flowcharts, the files to be modified/added and useful links.
0,Authors have clearly explained the changes to be made to the system. The design document was easy to understand.
0,The team is going to improve compatibility with web content that relies on the WebAudio API by implementing missing pieces of incomplete node types (OscillatorNode) along with entire missing nodes (ConstantSourceNode, StereoPannerNode, IIRFilterNode). 
0,Yes, they made detailed explanation about their changes.
0,The design seems to be flawless. All the principles and patterns used are flawless and to the point.
0,Yep, they have good structure to show what and how they gonna do with the project
0,The design looks good. The code is already committed and approved by the concerned team. Good Job !
0,Yes, their design appears to be sound.
0,The design appears to be sound and following appropriate principles.
0,I don't exactly understand how the waveforms help to produce the sound for the new browser they're adding support for, but other than that, their approach seems solid.
0,Yes, I am surprised that they have already finished the project. 
0,The design is concise and clear.
0,The design is simple and easy to understand. The sin waves and the description about it helps to properly understand the changes made and its impact.
0,The design was not unnecessarily complex. It was as easy as it could be.
0,Use of flowcharts and step by step explanation simplified their solution. It was easy to grasp and design also appears to be simple.
0,Very simple and clear.
0,The team has done tremendous job in adding visualization aids. They have added application flow diagrams and visualized images. They have also included screenshots to explain the code functionality implementation of enabling self reviews and score pages. This makes the document descriptive and very easy to read and understand.  
0,Self explanatory visual changes have been added. All the changes are described via the visual aids.
0,The authors have dived into the depths when explaining the changes. All of the changes are well defined and precise.
0,Yes, they did.
0,The authors have very well explained the problem statement and the changes to be made to the system, including flowcharts, the files to be modified/added and useful links.
0,Authors have clearly explained the changes to be made to the system. The design document was easy to understand.
0,The team is going to improve compatibility with web content that relies on the WebAudio API by implementing missing pieces of incomplete node types (OscillatorNode) along with entire missing nodes (ConstantSourceNode, StereoPannerNode, IIRFilterNode). 
0,Yes, they made detailed explanation about their changes.
0,The design seems to be flawless. All the principles and patterns used are flawless and to the point.
0,Yep, they have good structure to show what and how they gonna do with the project
0,The design looks good. The code is already committed and approved by the concerned team. Good Job !
0,Yes the flow diagram and graph plots help to understand the changes and its implications. The diagrams clearly describe the change approach followed.
0,Yes, their design appears to be sound.
0,The design appears to be sound and following appropriate principles.
0,The flowcharts included in the design document clearly explain the changes that need to be done.
0,yeah, Their proposed design includes workflow, initial step, and subsequent steps. It was easy to follow their design. Their solution appears to be sound.
0,I don't exactly understand how the waveforms help to produce the sound for the new browser they're adding support for, but other than that, their approach seems solid.
0,The design document includes proper visualization. It included appropriate flow charts and screenshots which made it easier to understand the design document and the project.
0,Yes, I am surprised that they have already finished the project. 
0,Yes, the team has used flowcharts and diagrams which clearly describe the changes to be made to the system.
0,The design is concise and clear.
0,The design is simple and easy to understand. The sin waves and the description about it helps to properly understand the changes made and its impact.
0,The design was not unnecessarily complex. It was as easy as it could be.
0,They provide pictures of their sound waves.
0,Use of flowcharts and step by step explanation simplified their solution. It was easy to grasp and design also appears to be simple.
0,Very simple and clear.
0,The team has done tremendous job in the test plan they have already implemented the test cases and given the path to run it.
0,The team has done tremendous job in the test plan they have already implemented the test cases and given the path to run it.
0,The provided tests are in depth and will test the changes made thoroughly.
0,The provided tests are in depth and will test the changes made thoroughly.
0,They have pretty good test plan as there is no code yet.
0,They have pretty good test plan as there is no code yet.
0,This is a mozilla project and I am not sure what are the testing requirements and depth to be covered, as it is not mentioned in the document. But the steps mentioned do suggest that basic testing id done
0,It included a proper test plan. There was no test plan included in the previous version of the design document but authors have added it in the second round which made the design document complete.
0,the design does include test plan and plans to test the functionalities 
0,The team have thoroughly explained the changes that need to be made and how they intend to make those changes. The team could explain their test plan in more detail.
0,The additions made to the explanations were excellent. The detail of which changes affect which files is very good.
0,They explain their changes succinctly and in an easy to follow manner, and they explain the motivation for the changes well.
0,Yes, they explained the changes in a great detail. They also wrote a part called "Implement Steps" which includes 5 tasks. Good job!
0,the design does include test plan and plans to test the functionalities 
0,The authors have explained the required changes in a concise manner.
0,Yes, the project design is meaningful and clear. The solution is well laid out.
0,Changes are explained but are not very descriptive. The document is not much changed since the last submission
0,Yes. 
0,Yes, the authors have specified the changes to be made in the system under the proposed project design. The changes have been included as sub heading with sub points under each. The authors have also included a relevant files heading that includes the files where changes are made.The changes involve allowing the instructor to change language for a course. In the process a separate language column will be added to the Courses table and a dropdown of languages in the Edit Courses page where a language can be chosen. Once the instructor updates the Edit Course page with the chosen language, the static strings in the Expertiza application will be changed to the chosen language. For adding multi-language support, Google Translate and Rails Internationalization API is being used. Also, two yaml files- en.yml and hi_EN.yml contains the translated strings for the respective languages. The routes.rb file and all the view files will be correspondingly modified to show the different languages after reading from the yaml files. 
0,The explanations provided by the authors seems to be good. They have referred the Rails Internationalization API guide which provides sufficient explanation for multi language support. They have mentioned the different elements that will be changed and how an instructor would proceed to change the language of the course verbally. In addition they have also added mock-ups to visually represent this information.
0,The explainations are succinct. The description in technical design section and before-after images clearly shows what the project intends to do.
0,The changes are clearly mentioned , they are very clear what and where to make changes. Only suggestion would be to include more about how these changes are going to be done. 
0,Adding a languages column to the Courses table makes sense and so does leveraging third-party APIs to handle the translation.
0,The design is as required, following the appropriate patterns.
0,As far as the issues are concerned, the solutions do seem logical.
0,It is sound.
0,Looking at the design there seems to be high use of cohesion  and low coupling. It's good that all the changes are restricted to the routes.rb and config/locales files so that the resulting changes won't be messy and ruin the rest of the system. Also this helps in refactoring if needed in the future as there will be limited number of files to be changed.
0,Yes, the design appears to be as simple as possible. The team has mentioned what needs to be done and how they plan to implement it.
0,Yes, simple straightforward solution.  
0,The changes have been explained well enough to minimize the complexity. The implementation seems extremely clear.
0,Simple and easy to understand steps.
0,The team has mentioned properly what changes they are doing and how they will be doing them. In the first submission they had suggested the possible approaches. Now, they are having a concrete way they are implementing these changes.
0,Yes, and at times, much more than necessary! 
0,Yes. Only view files are involving since this topic is about changing the language.
0,Yes. The authors have made changes to the design document and are more specific about how exactly they plan to implement the new functionality.
0,Yes, they explained a lot for the changes. Great job!
0,The design appears to be very simple. The team has avoided unnecessary complications by adhereing to the Rails Internationalization guide. They have also avoided making unnecessary changes to many files and kept the changes to the minimum number of files required.
0,The team added more information from the last time which aided in a better explanation of the problem. Good job team
0,1) The authors have adequately explained the changes to be made to the design document.
0,The design is really crisp and easy to understand. One can clearly understand the problem statement and the proposed solution for the same. The design document is properly structured as well.
0,The explanations are more than sufficient. Not only have the authors explained the changes to the system, but also explained the reasoning for considering those changes. I like the way that they also explained the other different ways they could've integrated the GitHub metrics but avoided those methods with sufficient reasoning for the same.The team has also given an explanation of their database design modifications would be like which is good.
0,Yes the current design looks simple and wholesome. Seems they have done a good job in implementing understanding how rails internationalization works. Good job   
0,Yes , excellent work done by the team. The design document adequately explains what is the problem that they are trying to solve, what is the proposed solution and how the solution would look like.  There are enough details to in the document to understand what is being done and what changes are proposed. The document also has enough illustrations on what is the current situation. 
0,The authors adequately explained the changes they plan to make.
0,The design seems to be sound. They have a sample design where they are explaining the tables and how they plan to work with them as well. The examples provided help understand how the data will be stored.
0,Yes
0,The visualization clearly and effectively conveys the translation capability which the project proposes to provide to Expertiza.
0,Yes, the provided diagrams deliver sufficient information about the implementation.
0,Yes
0,Yes, they included some design principles, which is good. Maybe the authors could add some design patterns into wiki.
0, The design appears to be sound. They have weighed their options and are using an official gem to interact with the github api.
0,The necessary visual inputs to aid explanation are present.
0,mock UIs screenshots give a perfect picture of how the system will be after the required changes.
0,I don't see any issue in the design document. They have followed a good design principle.
0,No visualization or diagrams are necessary.
0,1) The authors have mentioned several approaches in which these functionalities could be implemented. 2) Their chosen approach is follows MVC architecture and DRY principles.
0, The design sound very reasonable.
0,The design is concise and clear. They have added reference images of how the system would look after their changes, which properly shows the expected implementation results.
0,Yes. It is thoroughly investigated.
0,Yes
0,Their design is much simple and clear, also easy to understand.
0,Yeah, I believe it is as simple as possible while choosing the best path for the expertiza project to grow, but it still sounds like a very ambitious project for 1 group to complete.
0,With proper documentation, the problem is explained nicely and understanding of the complex problem is made easier.
0,1) Have clearly mentioned when will GitHub Api be hit to retrive the data and which gem will be used.
0, Their design is simple and clear.
0,The use case diagram properly shows how the addition of this feature will help for the instructor role.
0,The visualizations used by the team are comprehensive and well made.
0,Good design
0,A testplan that covers the entire functionality has been devised, it seems sufficient to test the change.
0,excellent use of screenshots, made things very clear for me.
0,The test plan is compatible with the problem statement. 
0,Yes, they use a lot of diagrams to show use case.
0,As there are UI changes test plan is not required but a basic stepwise description of how to see the required output can be helpful
0,Test plan have been shown clearly and tests are easy to understand.
0,Yup, because it only tests the ability to change the language. 
0,Explains the different approaches with the help of use case diagram.
0,There are enough aids such as uml diagrams and screen shots. The authors explicitly mention that there are no db changes so no need of an er diagram. Although I would have liked some class level details to be mentioned in the document that would help to dig more about the design changes
0, They not only use use case diagram but also mock-up screenshot to help the reader understand their design.
0,The test plan briefly mentions the scenarios the team plans to test. They can add more about the test cases if possible.
0,The test plan seems adequate at this stage, edge cases may need to be considered at a later stage.
0,No
0,Yes, it includes the test plan with a great detail.
0, The test plan seems adequate enough to show that they understand what to test.
0,Few test plan is written. The team can add more test plan.
0, Test plans for both of their subtasks were present.
0,Yes, the authors have clearly explained the changes to be made to the system. Document is simple, succinct and easy to understand. Great use of flow charts, uml diagrams and mockups to visually represent the information is done. 
0, Yes the author has provided a sufficient explanation of what changes needs to be done to the system by giving flow diagrams and screenshots about what changes they are going to incorporate in their system
0,Team has added all the diagrams and screenshots. The document is well explained and looks complete.
0,Yes, their explanations are adequately explained the changes.
0,1) The authors have clearly explained the changes to be made to the system. 2) They also have given the files to be modified/added for each change.  
0,Authors have clearly explained all the changes to be made and where to make them. The design document is quite clear and easy to understand.
0,I think that the authors have done a really good job of explaining and covering all the changes to be made. Overall this is the best document i have seen so far.
0,The document seems complete
0,Yes, one of the best design docs of project 4!
0,The document was very well written previously too, and they have improved it with diagrams and test. Nice work.
0,The authors have considerably improved on the document. UML diagrams as requested have been added.
0,Yes, the design follows appropriate principles and patterns. suggestions: not required.
0, As the project is based upon making changes to the UI of the system , thus there is no such specific pattern being followed however the design that they have made available in the form of screenshots appear very much inclined with the functionalities that they need to implement .
0,Design is good
0,Yes, their design is very sound, and principles and patterns are used appropriately.
0,1) The design appears to be sound. 2) Also follows proper design principles eg: for making changes to nomination and review questions, inheritance is used (inheriting methods from questions parent class)
0,They have explained very well
0,Yes the design follows simple rails concepts and is pretty straightforward. I would like to see if the team uses existing gems available to speed up implementation and re use.   
0,Yes, looks clean. Any design patterns used????
0,Yes, the design appears to be sound and well made. 
0,Yes, the design appears to be sound. There could be some rearrangement in the mock-up layout, e.g. text box for email address and 'Add' button could have the same horizontal alignment for a better user interface.
0,The design seems to be very simple. I think the team has avoided unnecessary complications and are doing minimal changes to existing system to solve issues given to them.
0,The design approach seems justified and inline with the functionalities required to be implemented. They have mentioned step wise details for all the changes they are going to take. Done a good job. No rework required.
0, Yes the design is presented in a much simpler form which gives a very clear picture of how the changes are going to be implemented and which functionalities would be witnessing the changes , also as they have provide the screenshots it enhances the understanding about the project more.
0,Yes, their design is simple and clear enough to read and understand.
0,1) The design is simple and well modularized. 2) Each method is implementing only one task as it should.
0,The design does appear to be as simple as possible. The team have not unnecessarily complicated the project.
0,Yes, the design is pretty simple and to the point. The design proposed is very clear and talk why each change is necessary.
0, The design is straightforward and as simple as possible. The team has thought this project out very clearly and laid the same in the form of flowcharts and mock-ups. This has greatly reduced the complexity of the project and helped decrease the chances of clutter and confusion.
0,Yes, adequate amount of details present
0,Yes!  The requirements are simple and the design plan clearly explains all the points.
0,yes, design appears to be very simple.
0,Yes, the design is quite simple.
0,Yes, they have done a great job to adequately explained their changes.
0,they have done this part.
0,Yes, they have well explained their design.
0,Yes, the design appears to be sound and appropriate.
0,Great use of UML diagrams, flowcharts and mock-ups by the team to clearly explain the flow of their work. It is easy to understand the flow and how the end product will look like.
0,The design appears to be sound.
0,They team has done awesome work in representing every detail possible in the flow diagrams. They have created UML diagrams which depicts the flow of the admin and students along with other actors. As mentioned earlier they have also represented the admin flow diagram and instructor flow diagram through the flow chart which makes it very easy for end user to understand the workflow of the requirements in the expertiza system.
0, Yes the visualization is pretty clear and good.
0,Proper use of UML to explain the use cases and flow charts to explain the workflow has been done. The plan is complete.
0,Yes, the design appears to be as simple as possible. The team has mentioned what needs to be done and how they plan to implement it.
0,The design seems straightforward and simple.
0,Yes, their visualization is good. They are clear and well described the changes.
0,In my view, they are simple and clear.
0,Simple design with the use of interface and APIs.
0,The design seems to be quite simple
0, The design document includes flow charts, UML diagrams and screenshots which is really impressive as it made the document easier to understand. 
0,The design appears to be simple.
0,I loved the overall use of the visualizations which aids to the understanding of the whole doc. The formatting of the documentation makes it really easy to read and understand.
0,A suggestion would be to add some visualization about what the offscreenCanvas does would be helpful.
0,Since it is a Mozilla project testing is not necessary, but the previous design documentation does touch upon the specifics of testing how an OffScreenCanvas is rendered.
0,Yes the presence of use case diagrams and flow charts explaining the work flow is good. It would be nice if there were more uml diagrams such as sequence so show various class interactions.  Presence of mockup screens is good. That helps in understanding what is being implemented. It would have been good if the authors put in more details about the validations that that propose in the system 
0,Yes, the uml diagrams sufficiently provide visualization.
0,The authors have added UML diagrams as requested in the previous review and it has made a lot of difference. The explanation is much clearer now.
0,Test plan outlines the functionalities that the team will test and it seems sufficient to test the changes.
0,They team has done tremendous job in following the test driven approach for the project implementation. They have already included the tests they are writing for the functionality implementation. They have covered the exhaustive scenarios  for the project in their test. Their test plan is highly appreciative.
0, The test plan is quite good as it covers all the test cases in the form of 11 test cases which test all the functionalities for the admin and the instructor role. It also considers the negative test cases like throwing an exception when the pending instructor tries to add more then 10 students to his/her course.
0,Tests can be made more exhaustive. For now it looks like only the view will be tested but controller should be tested as well.
0,Yes, they include the test plan.
0,1) The test cases cover all of the functionalities that they are going to implement.
0,Yes, the document includes a test plan. There was no test plan present in the previous version of the design document but the team included the test plan in the second round. The test plan is clear and seems like it would really test the functionalities.
0,The test plan has been written in a very good way following the great quality of documentation till the end. It covers all the edge cases and scenarios.
0,The test plans are excellent. The best I have seen so far.It has accurately taken all test cases into consideration and described the layout of the final test in the form of a pseudo code. Well Done on the test plan!!
0,Yes, test plans are included
0,Yes, the test plan looks good. It covers all the functionalities.
0,Test plan seems thorough and well thought out.
0,The team is following a Test Driven Development approach. They have defined the test cases that need to be tested after the implementation. It seems to completely test the feature.
0,Yes, the issues and the proposed solutions are clearly written.
0,Yes they have
0,Yes, this is the best design I have reviewed. It has clearly explained the changes in steps. the formatting is great, and it's very well made with very good design details and objectives. It also included the current scenario and a typical score table. It should be great if there's an expected final outcome visualization as well.
0,Yes the authors have adequately described the changes required to be made to the system. The process has been divided into steps and each step describes changes in the MVC files. Good job
0,The problem and the changes needed is explained clearly
0,Yes, they explained a lot with two steps.
0,I really loved the way that the authors have provided a detailed proposed plan section making it very clear about the changes that are required to be made in order to tackle the given problem statement.
0,The authors have described 1-2 solutions of the problem. However, I would suggest them to include more about how these changes will be done and where are these changes going to occur, what files will be affected etc.
0,All problem statements have been explained, this time including an elaborate test plan.
0,Yes, the author explained the plan clearly. The steps and the files need to be modified are listed.
0,As far as the issues are concerned, the solutions do seem logical.
0,Yes it looks sound
0,The  design is sound. It completely follows the instructions. It also has detailed implemenation plan in each steps. I think it follows the DRY principle, because it uses existing implementations, fully understood the existing implementations, and added the functions above. I think it should also follow the factory pattern, although not shown in the design doc.
0,Yes the system is well designed and the UI looks neat as well. They have put effort into the UI thinking process.
0,Yes they have
0,explained details about their solution and what will be changed after their implementation.
0,Yes, changes to be made are clearly explained
0,They have explained in detail about the proposed changes with individual diagrams for each case. It is very thorough in explanation
0,Great documentation. Tbh, the best i have seen yet.  
0,They have documented it in a very rehearsed manner
0,The design document is really well written. It clearly describes what needs to be done, how it needs to be done and what code changes need to be made. The files and tables affected are clearly listed.
0,The authors have prepared the design document quite well.
0,The author has explained extensively about the changes to be made to the system.
0,Yes, the problem definition and the proposed solution are pretty clear. They also provide some diagrams to explain their project which is helpful.
0,Their introduction and problem definition are clearly enough to explained the changes.
0,With er diagram and database details, the design looks good. 
0,The design follows appropriate principles and patterns as required
0,Yes the proposed changes make only required additions.
0,Yes it follows appropriate principles. 
0,The design appears to be sound. It is really well structured. It is easy to follow. It clearly states the changes to be made and the files affected by these changes.
0,The design appears to be sound and clearly indicates the proposed code changes.
0,The design follows appropriate principles, but no design patterns have been used.
0,Yes, the design is appropriate.
0,Yes, they provide solution for different problem situations.
0,Yes it is fairly simple
0,no complex design, only few places need to add functionalities, and they all very similar.
0,The design is simple, although the ER diagram takes a little time to decipher since it is quite big
0,Yes, the approach described in the design document is easy enough to understand. They have also backed their decision to go with the second approach with appropriate reasoning.
0,The design is simple and quite comprehensive covering lots of methods of searching.
0,YEs based on the proposed solution it appears to be simple as possible.
0,Yes, easy to understand.
0,The design has been explained in a simple way. The team has explained the design using use cases which is easy to comprehend.
0,Yes, the design is simple and feasible.
0,Yes, clear and simple.
0,They have used apt visual aid like UML diagrams and screen shots
0,No class diagram, but there is er diagram and tables for database, it looks a little complex, but give the idea of what is involving. 
0,Necessary diagrams are included.
0,The team has communicated their design clearly via use-case diagram and a class diagram with a description of various database tables involved.
0,Excellent use of visualizations. They already had an overall flow chart and this time additional tables and UML has been added. Best of what I've seen.
0,Yes they do explain everything. The er diagram, use case diagram, relevant tables explain everything.
0,The project has great visualization. A lot of UML diagrams have been included which makes the understanding the project easier. The UML diagrams also clarifies what work is to be done.
0,The team has described changes using use case and ER diagrams to clearly explain the system.
0,The authors add more diagrams to help to explain the change they are going to make. The relevant tables are really helpful.
0,test plans walk through necessary functionalities.
0,The test cases described will cover the functionalities described given that they write multiples tests with the same structure as described for all search criteria. 
0,A concrete test plan is also added and it has both UI and automated test details.
0,Yes this is done very well.
0,They include a very described test plan. It has everything proper. What framework, what tests all this information is well included. They clearly specify what they aim to test.
0,The test plan is pretty good and it has both UI tests and automated tests. 
0,The test plan is designed efficiently. They have described the UI tests and automated tests which cover most of the cases. 
0,Two types of testing are listed, and the authors list all the cases they need to test.
0,Yes, the authors have significantly improved the writeup, and very adequately explained the changes that they've made.
0,The wiki is detailed enough that it mentions all the functionalities required in the project. The team has made sure to explain all the changes they wish to make to the system. They list all columns that need to be sorted and how they will implement the sorting.
0,The authors have explained enough about the changes
0,The team has added uml diagrams, images of related web pages and provided details on jQuery tablesorter that explains well the changes the team plans to make.
0,Great improvements compared to the previous submission. Now its a Very well written document. Good job team.
0, Yes, the team has elaborated their design approach and changes to system in detail. They have mentioned all the file changes and also provided sample code for reader understanding.
0,They made clear explanation about their task. For example, their provide pictures to show what they need to do.  
0,The design is very efficient and follows the standardized software engineering practices. 
0,The design is sound because it has plans of file modification, of implemented solution, and very detailed testing plan. The DRY principle might not be well followed, since in each testing, the tester needs to log in as a super_administrator2 again. And there are five testings. 
0,the design is sound and easy to understand. The design proposed also sounds logical, i.e to sort team names alphabetically, and grades numerically. To sort by both ascending and descending order.
0,Yes, the design seems to be sound.
0,The authors have justified the use of jQuery table sorter by listing its advantages.
0,The team has analysed the existing design principles used in the project and has appropriately defined the design for the new changes which will be made. the design looks good and easy to implement. 
0,The design appears to be specific to the requirements. For this, they have used a UML design which basically explains the flow of the use-case. They have not used any principles or design patterns. However, there does not seem a need to use any, as their changes are limited to the html view and making a call to the tablesorter using JQuery. As per the document, the design does not make any redundant changes or unnecessary changes to the code. Thus, they have done a good job by optimizing the changes.
0,Yes, as its sorting, not much scope on design approach. Yet the team has documented well on their approach regarding multi-level sortings that they are undertaking in few pages. They have also considered cross-browser compatibility of their jQuery library, which is a common design miss during client-side changes.
0,This project is not very difficult, so they don't need to follow some principles or patterns.
0,Yes, the design is very simple to understand, and also the implementation is pretty clear and effective.
0,The design is extremely simple and easy to understand. Good work guys :)
0,Yes, the solution proposed is simple by using the  jQuery tablesorter gem.
0,The use of jQuery plugin sounds simple and easy to use.
0,The design looks simple and clear.
0,This their design is very simple and clear.
0,This part has been significantly improved from the previous submission. The diagram make it very easy for an outsider to understand the architecture, the underlying problems and the proposed solution. 
0,Yes. The figures added to the wiki clearly indicate the changes that will be made to each view. The columns that will be made sortable and how will the made sortable. Good work :)
0,Yes, the team added visual aids like UML diagrams, screen shots, code snippets to clearly describe the changes to be made to the system. Well done!
0,This team used great diagrams that add to their documentation's clarity significantly.
0,There are multiple visual elements that improve the readability of the document. Screenshots of the UI tables help with the illustration of the required changes. Furthermore, the UML diagram demonstrates the relation between relevant flows.
0,The team has added good number of mock UIs and UML diagram and clearly explains the code follow. All of them are self-explanatory and needs no improvement
0,diagram is added. 
0,No visulization is necessary for this project
0,You have a lot of testing scenarios which is really good
0,The design doc includes the test plan which covers all the changes that will be made.
0,There is a detail explanation on how the function testing will be carried out under the teating plan section of the wiki doc.
0,Yes it includes test plan. It is very well written and will test the functionalities.
0,Test plans looks to be an overview of the functionality, In the test plan i see the functionalities explained l
0,The test plan is complete and covers all intended functionalities. They have also provided all necessary steps to test the functionality. Good documentation on test plan. As client-side changes using script is added, a latency test to verify system is not slow in responding to sorting can be included.
0,the test plan is thorough. 
0,Yes. The authors do have an adequate explanation. 
0,they have also added the UML diagrams which makes things a lot more clearer
0,The authors have very well explained all the changes that need to be done with the help of proper problem statement, the files that require modifications, the current and the required state.
0,Good additions on the purpose and use case of your work.
0,Is decently explained
0,Team has explain the changes to be made very well. Also screenshots of the system is helping to understand which part of system is changing.
0,The Introduction and Proposed Solution sections appropriately describes the problem and the approach to resolve the issue. The changes proposed can be concisely implemented into the system. They have enlisted use case diagrams for the entire scenario to be added to the rubrics.
0,I cannot remember what the explanation looked like last week, but the read through this week felt very clear. The organization of the article felt like it followed the logic of a design project. The problem statement felt like it was reduced to a clear, concise, set of requirements that are attainable. The addition of the program flow diagram and an explanation as to why there is no UML diagram also helped to cement my understanding and set my expectations.
0,Good work on adding UML diagrams. Now the problem is very well explained.
0,Yes, they have given a good, detailed explanation of the planned changes.
0,Yes, they include all the details in the functionality implementation.
0,The authors have mentioned about the changes
0,Yes, clear and crisp.
0,The authors have thoroughly explained the changes made to the system.
0,The authors have lucidly explained the changes that are to be made to the system. They show the current state of the system and the expected state which includes a new button to Analyze the review content in the segmented text box. The authors have specified 2 files that they plan to modify namely the view file response.html.erb and a partial _self_review.html.erb. The team clearly show the format of the response popup with suggestion metrics that capture sentiment score, sentiment tone, whether suggestions are present or not, chance of suggestions, volume of text and the volume of text without stop words. They also propose to improve the response time of extracting the output from the API.One suggestion is that the team could have touched upon the working of the suggestion detection algorithm though it is not part of their current implementation. They do mention that it is a black box and have included a link to the deployed NLP project for suggestion algorithm, where users can test the suggestion metrics generated for custom text.
0,yes they have explained it very well.
0,The changes proposed are well explained and clearly indicate the intended output.
0,The authors have adequately explained changes made to the system. They have explained the problem and proposed solution clearly and supported it with appopriate diagrams.
0,Very detailed and precise. Solution explained thoroughly. 
0,The desgn looks okay
0,The design appears sound.
0,Yes, it seems very sound and workable.
0,The design appears to be sound, they are checking if its multiple round exists and adding the checkbox functionality.
0,The design is clear and easy to interpret. The team has provided a code snippet which explains the changes to be made in the system to implement the solution.
0,The design lacked enough explanation about how will they deal with reviews when the box is  checked and unchecked. For the naming of the function and database, the name seems too long. It is better to make the name shorter and easy to understand.
0,Basic complexity
0,Looks simple
0,Design doc shows a good amount of work to be done. Team has articulated changes to be made well that makes design doc simple to understand.
0,The design is seems to be as simple as possible.
0,Yes. According to what they wrote, they are going to realize this project from 2 sides, the instructor side and the student side. The steps are very clear.
0,The design appears to be simple and easily understandable
0,Yes, simple and straightforward.
0,The design has been made as simple as possible. The complexity of the design is simplified using flow charts.
0,This is a fairly simple design.
0,Yes a variety of apt visual aid has been used like screenshots, UML diagram etc
0,The team has used flowcharts and UI which was necessary for this project.
0,The diagram in UI part states clearly the changes the authors intend to make and how it will be like. The flow diagram explains clearly the design logic and help me understand what changes the team will make.
0,The team has used mock-ups and a flowchart to show the basic functionality.
0,Tests with different scenarios are provided.
0,Yes. According to what they wrote, they are going to realize this project from 2 sides, the instructor side and the student side. The steps are very clear.
0,The team has analysed the existing design principles used in the project and has appropriately defined the design for the new changes which will be made. the design looks good and easy to implement.
0,The authors have included an elaborate test plan which tests even the functionality they have missed to mention in the proposed design part of the document. This is quite complete.
0,The design seems to be clear such that it provides the implementation procedure to be followed to include the feature of adding student generated questions to the rubrics.
0,They explained from their requirements and in their flow, that they only need to plan to edit the View, so there is no need for a UML.
0,The design is sound.
0,As per the documentation, the design seems simple.
0,Looks very doable
0,Yes from the diagrams I could say, design and design flow is simple enough and team has well understood the changes to be made.
0,Yes, the design is sound and clear. Majority of the work is done by the suggestion algorithm. The team proposes to integrate this functionality into Expertiza and also improve the response time. This project does not need to incorporate any design pattern as only the view files are altered. The project does not impact the degree to which it is object oriented.
0,Since the task is to integrate a web service in the existing system, the design mentioned is sound and reasonably primitive. 
0,yes it does based on the proposed solution.
0,The design is good. However, there is no scope of using bad principles since the number of files that will be affected are minimal and restricted to just 2.
0,The design doc is sound and I believe no design patterns are required for this project.
0,The design appears sound.
0,Yes, the design in its current form seems straight forward.
0,The Requirements were distilled down to the fewest simple terms possible without over-generalization. It felt like they just gave me the tl;dr statement without any fluffy words to waste my time, and also feels like they have a strong grasp over what they are expected to accomplish.
0,Yes, the design appears to be simple. 
0,Yes, the design appears to be very simple
0,Yes, the design is very simple and easy to follow.
0,The design appears to be simple and straightforward to implement. The team has also included all the files that will be changed to achieve the desired results
0,The design appears simple to be executed based on the procedure specified and the list of diagrams given that it justifies the implementation to be carried out.
0,Yes the design is simple and illustrated well with the use of wireframes showing the current, expected state and UML diagram showing the flow diagram. It depicts that once the Analyze button is clicked, the request is sent as JSON which contains the text typed by reviewer in the segmented textbox to the API which generates the suggestion metrics. The response contains the suggestion metrics like sentiment score, sentiment tone, presence of suggestions, chance of suggestion, total volume of text and volume of text without stop words. 
0,Yes, the design is simple and clear. The task is to integrate a web service which returns a result in JSON format.
0,The diagram is clear and easy to understand, from the diagram, the design may be easy and clear to implement. More details should be provided to evaluate further about the complexity.
0,yes it does appear to be simple as possible.
0,The design is simple and easy to understand. Could be better if implementing some code level design.
0,The design is as simple as it could be since the flow of logic is pretty linear and there is no scope of complexity. The changes also seems to be restricted to just one file which is good and in keeping with sound principles.
0,It would be better if UML and Class diagram are added as a part of the documentation.
0,Team has provided good amount of use case diagrams, which actually are heart of the whole design doc and explains the design and approach well.
0,They have made some UML diagrams which could describe the changes.
0,Yes, they use a lot of charts to explain the use cases. Great job!
0,The use case diagrams provided to describe the role of each user through the flow and specify how each case maps to another in order for the desired functionality to be achieved.
0,The diagram is logistic and it's easily to tell the logic behind the changes. By reading these diagrams, I can get an understanding of this project quickly.
0,Yes, the flow charts are complete and readable. All cases are included.
0,The design appears very simple.
0,The project does not necessarily need diagramatic explanations but UML diagrams have been used which show implementation plan fairly well.
0,the screenshots of the Expertiza system are very helpful in understanding the problem and the solution
0,The Flow diagram mentioned in the document clearly explains the changes need to be done.
0,The author has excellently explained about the changes that they would be making by providing the design diagram and the screenshot of the the changes that they have incorporated .Also they have mentioned about their choice of tool which is google chart and why do they prefer , so overall a good explanation
0,Changes that's needs to be made has been explained correctly.
0,Yes, their doc has adequately explained the changes.
0,The team have a well written design document and and the authors have explained the proposed changes well. The authors have also listed each file they are going to be changed.
0,yes, the team has well explained the changes that they are going to make. Last time it was a bit confusing but this time because of the help of the diagrams and mock UI screen, the solution seems clear now.
0,The authors have explained the changes made to the system. The design flow greatly helps to understand the flow of the system.
0,Yes, this team has made the best use of visualization tools that can be applied to their project. They have clearly shown wireframes of the current response page juxtaposed with the expected state with the Analyze button next to each rubric. The document also includes the flow of the project represented as UML diagram. Once the Analyze button is clicked the request text is sent to the suggestion detection algorithm. The API returns the response which contains the suggestion metrics like sentiment score, sentiment tone, presence of suggestions, chance of suggestion, total volume of text and volume of text without stop words. 
0,The authors have described what all changes they plan to do and where they plan to do it. Compared to the previous version of the design document they have now included what tools and framework they plan to work on. The design document looks complete and understandable now.
0,They will be changing mostly html and erb code to create a visual interface that delivers information to instructors more effectively.
0,The proposed changes have been explained in a simple manner.
0,The use of visualization is not pivotal for this task as it can be explained theoretically as well. But still, the team has made an effort to present the task with help of a flow diagram.
0,yes, very well explained.
0,The document adequately describes the project description and proposals made. The proposed change of generating a single or single bar chart graph based on the categories selected to display the chart, can be efficiently made to the system.
0,They have improved the document to provide a better description of changes to be made to the system.
0,The screenshots clearly display where the output would be displayed.
0,Yes the design is sound and gives a proper explanation about how their implementation would behave.
0,Design seems correct.
0,Yes, their design is clear and sound, and the principles and patterns are well used.
0,yeah their design seems to be sound and neat.
0,System is well defined 
0,The UML diagrams clearly descibes the design of the solution. The screenshots explain changes required in the system adequately.
0,The design document is good and I don't think any design pattern needs to be followed as very few changes are being made. 
0,The design makes use of the Google charts tool to generate visual charts for specific criteria set. Based on the design flow, it appears that the functionality can be consistently performed to generate the visual graph for the instructor.
0,Yes, the design appears to be sound and uses appropriate design principles.
0,Yes the design is pretty simple and inclusion of screenshot enhances the clarity of what the team has achieved in terms of the required changes. 
0,Design is simple and easy to understand.
0,Yes UML diagram is provided and it is detailed. Flow diagrams explains how suggestions will be given. 
0,Yes, the design is simple and easy to understand. I can easily know what they will do through their doc.
0,The design appears to be very simple and well written. They have explained the use case diagram very well. also they have added visualizations.
0,yes, the design is simple and easy to understand 
0,The team is using external tools to do the work and its clear and easy
0,The document is really simple to understand once you get to understand the flow. However, initially it appears to be difficult.
0,I think more tests can be added
0,From the reasons provided for choosing the Google charts tool, and it's effectiveness, it can be integrated into the system functionality easily making the design simpler to be executed.
0,Yes, design involves google charts API and seems very simple.
0,Yes the design flow and the screenshots very clearly describes the changes made to the system.
0,Flow diagram explains the flow correctly.
0,Yes, they have used visualization to help people understand their design.
0,They have worked on their weak point. Earlier their solution does not seem cogent but I would say now they have made good progress.
0,The sample data visualizations is good. The way they have given visualizations for sample data is nice. easier to understand and good.
0,The use cases appear to offer a quality, general test approach to see if their design does what it should.
0,Test cases have been added. 
0,The team already has mockups for their design.
0,The visualization is great, the screenshots clearly indicate the proposed output of the project.
0,Really good visualization provided.
0,The project does not have any testing involved as such. But the authors have added a testing plan.
0,According to the team "The specification of the project does not require us to use automated tests" but they plan to test the modified ruby code or the new features using the RSpec testing framework. Overall, the test  plan sounds good 
0,No tests are required for the project as stated
0,This team did not require any tests.
0,The test plan section specifies that it does not require performing any automated tests. However, since the new functionality of adding a visual diagram, the team would modified ruby code for the functions added to the grades_controller.
0,The test plan is complete. The team plans to test the two possible cases:1. When the review is blank. Response should be no review in text box.2. When review is present response is the result of suggestion metrics analysis. The team is right in testing just these two cases because they should not test if the API itself is returning a correct response as that would be against testing rules.
0,Yes. Functional tests with scenarios provided.
0,The design doc includes the test plan which covers changes in the functionalities.
0,Yes, the issues and the proposed solutions are clearly written.
0,Yes they have
0,Yes, this is the best design I have reviewed. It has clearly explained the changes in steps. the formatting is great, and it's very well made with very good design details and objectives. It also included the current scenario and a typical score table. It should be great if there's an expected final outcome visualization as well.
0,Yes the authors have adequately described the changes required to be made to the system. The process has been divided into steps and each step describes changes in the MVC files. Good job
0,The problem and the changes needed is explained clearly
0,Yes. The design is clear and the details are succinct.
0,The design looks simplified but there might be some edge cases that needs handling such as - What if a student makes his/her review public, this review is selected by the power user to create a sample and then the student wishes to make the review private?
0,Yes the approach is explained in detail.
0,The design is proper.
0,It is simple enough and also achieves the required features
0,The UML diagram is very good and makes understanding very easy
0,Yes the test plan section is again detailed with step by step instruction
0,Team has explained the problem statement, approach to solve the issue well. Also the use case diagram explains design well.
0,Design doc is not complex and every section of the menu explains the itself with simplest term possible.
0,Very basic explanation
0,Simple design
0,  The team has well explained the changes which are required to be made in the system. They have broken the explanation of the details of the requirement in simple bullet points which makes it very easy to understand the change requested. The design approach 
0,The steps taken by the team to implement the functionality is very clear and detailed. as stated above, the approach discusses the  step wise action that the team is going to take for the implementation.
0,The team has come up with a very detailed and clear step wise test plan for all the actors involved. They have done great work to depict the flow for every user which makes sure they are handling all the scenarios. This also suggests their approach is behavior driven. They have done great job in this and the test are in depth.
0,While I'm awaiting to receive the details which are pending on the implementation, I feel the general nature of the changes is well-explained. 
0,Confronted with a tricky problem in creating links between different assignments across semesters to aggregate the reviews, I was really impressed with the way they plan to accomplish this feature.
0,I like the Use Case Diagram, but I would like class diagrams or a database visualization too, so it's easier to understand how the cross-course assignment linking will work.
0,Detailed test plan (+1)
0,The authors have adequately mentioned the desired changes in the approach and design section. The problem statement gives the gist of the issue at hand including adding feature to make student's reviews public. The proposals specified are effective to deal with the issue by creating a new MVC framework.
0,The design and fixes are coherently described and are logical to be implemented for the given functionality. The issues are stated properly allowing the reader to understand it and the fixes suggested are enlisted in an appropriate manner.
0,The design makes it clear to understand the procedure adapted to realize the goal. The authors have made it a point to describe the tasks carried out in a simpler manner allowing the reader to realize the approach towards the issue. 
0,The UML Use Case diagram takes into consideration the system specifications and the manner in which the users interact with each other in the process. It makes it easy to analyze how the implementation can take place in the current scenario. 
0,The test plan section properly describes the flow that needs to be followed by each actor involved in the process. This could be enhanced either by providing a flow diagram or adding certain test case snippets for the scenarios.
0,The design seems pretty simple and straightforward. 
0,Yes based on the explanation given, the design seems appropriate and will achieve the desired end-results. Good Job !
0,The design is concised and clear. Only makes the required changes and introduces no duplications.
0,Yes, they explained a lot with two steps.
0,I really loved the way that the authors have provided a detailed proposed plan section making it very clear about the changes that are required to be made in order to tackle the given problem statement.
0,All problem statements have been explained, this time including an elaborate test plan.
0,Yes, the author explained the plan clearly. The steps and the files need to be modified are listed.
0,As far as the issues are concerned, the solutions do seem logical.
0,Yes it looks sound
0,The  design is sound. It completely follows the instructions. It also has detailed implemenation plan in each steps. I think it follows the DRY principle, because it uses existing implementations, fully understood the existing implementations, and added the functions above. I think it should also follow the factory pattern, although not shown in the design doc.
0,Yes the system is well designed and the UI looks neat as well. They have put effort into the UI thinking process.
0,Although the design provided is clear, there might be some more work needed to optimize it properly and make it work as intended. 
0,The design appears to be sound and seems to follow all the appropriate principles as far as I am concerned. And as mentioned earlier I would again like to point out that the proposed plan section has been handled really well.
0,The document is very well structured and is quite easy to follow. They have explained each and everything stepwise.
0,Yes, the design seems appropriate and suitable for the case. Maybe the author could specify the patterns they use in the document.
0,Yes, simple straightforward solutions.
0,the design is simple
0,The design is both simple and clear. It should be better to add another step for the comparison of the instructor review and the student review. Both as a final examination and a testing.
0,Yes the design is as simple as possible. However they have only described the proposed design. They could have provided simple mock ups or samples,
0,Yes, pretty simple. Great job!
0,The design appears to be simple to the best of my knowledge. Not a lot of files needed to be changed, signifying that they are just targeting specific files in order to make minimum number of changes possible not making it too complex.
0,The document is well explained. Thus, it reduces complexity and makes itself appear quite easy for the user to understand. However, more diagrams and flowcharts would have helped even more.
0,The design is as simple as possible, and described in a straightforward manner.
0,The design seems simple and feasible.
0,Necessary visual inputs are present to aid explanation.
0,Yes, appropriate visual cue is present in the form of screen shots
0,There are visual aids included with the design, depicting the current state of the system as well as proposed icons to institute the design changes.
0,The authors provide some screenshots which make their project more clear. It would be better if they provide more diagrams to explain their solutions.
0,I see test cases properly defined, but the test plan is missing.
0,Yes the test plan is included.I think the tests will cover all scenarios
0,The testing appears to be pretty rigorous. They have taken into account cases when TA/instructor's scores should be excluded. The test cases could have been better described.
0,Team has done a good job in identifying the cases that needs to be tested. It will be an improvement if they can add details on how they plan to test each controller/view separately.
0,Yes, there is a detailed test plan for this project. Not only basic features testing but also other more testing.
0,The test plan looks really thorough covering all the possible scenarios. I am personally happy with the given test-plan.
0,Yes, the authors have significantly improved the writeup, and very adequately explained the changes that they've made.
0,The authors have explained the changes to be made to the system, including screenshots of the tables, UML diagrams as well as all the files that will be modified. Suggestion: Although all the details are explained well in the document, by writing the changes proposed to the files in bullet points or by using a diagram the document will be easier to read.
0,The authors have explained enough about the changes
0,The team has added uml diagrams, images of related web pages and provided details on jQuery tablesorter that explains well the changes the team plans to make.
0,Great improvements compared to the previous submission. Now its a Very well written document. Good job team.
0, Yes, the team has elaborated their design approach and changes to system in detail. They have mentioned all the file changes and also provided sample code for reader understanding.
0,They made clear explanation about their task. For example, their provide pictures to show what they need to do.  
0,The design is very efficient and follows the standardized software engineering practices. 
0,the design is sound and easy to understand. The design proposed also sounds logical, i.e to sort team names alphabetically, and grades numerically. To sort by both ascending and descending order.
0,Yes, the design seems to be sound.
0,The authors have justified the use of jQuery table sorter by listing its advantages.
0,The team has analysed the existing design principles used in the project and has appropriately defined the design for the new changes which will be made. the design looks good and easy to implement. 
0,This project is not very difficult, so they don't need to follow some principles or patterns.
0,Yes, the design is very simple to understand, and also the implementation is pretty clear and effective.
0,The design is extremely simple and easy to understand. Good work guys :)
0,Yes, the solution proposed is simple by using the  jQuery tablesorter gem.
0,The use of jQuery plugin sounds simple and easy to use.
0,The design looks simple and clear.
0,The modifications that are suggested by the team are minimalistic and cover the changes that are necessary for the javascript library to work. While it is possible to infer the majority of changes that will be introduced in this project, it would be better if the authors elaborated on the implementation of all the views as opposed to discussing only the "view submissions" table. 
0,This their design is very simple and clear.
0,This part has been significantly improved from the previous submission. The diagram make it very easy for an outsider to understand the architecture, the underlying problems and the proposed solution. 
0,Yes. The figures added to the wiki clearly indicate the changes that will be made to each view. The columns that will be made sortable and how will the made sortable. Good work :)
0,The flowchart added gives a good idea of the final outcome after implementation of the changes proposed. Suggestion: A diagram explaining the plan of changes to be made will make the document easier to read.
0,This team used great diagrams that add to their documentation's clarity significantly.
0,There are multiple visual elements that improve the readability of the document. Screenshots of the UI tables help with the illustration of the required changes. Furthermore, the UML diagram demonstrates the relation between relevant flows.
0,The team has added good number of mock UIs and UML diagram and clearly explains the code follow. All of them are self-explanatory and needs no improvement
0,diagram is added. 
0,No visulization is necessary for this project
0,You have a lot of testing scenarios which is really good
0,I suggest the testing plan be improved. In place of giving steps on how a reviewer should test the project, the team should instead list how they wish to write tests for the functionality added. The rspec could be something like expect(page).to have_content(sorted)
0,The design doc includes the test plan which covers all the changes that will be made.
0,There is a detail explanation on how the function testing will be carried out under the teating plan section of the wiki doc.
0,Yes it includes test plan. It is very well written and will test the functionalities.
0,Test plans looks to be an overview of the functionality, In the test plan i see the functionalities explained l
0,The test plan is present. It consists of a set of functional tests described for each of the five views. I would suggest elaborating on the technical side of tests, for example specifying which spec files will be modified or whether or not the project will utilize RSpec. Moreover, it would be better if the team provided a rationale for why it is sufficient to use only functional tests.
0,the test plan is thorough. 
0,They have discussed clearly what functionalities they are going to test to make the project more efficient. I think they have made a quite descent research in the testing aspect of the project.
0,The design includes the test plan.
0,Yes, the test plan looks good. The author lists all the cases they need to test.
0,Yes. The authors have made changes to the design document and are more specific about how exactly they plan to implement the new functionality.
0,The team has mentioned properly what changes they are doing and how they will be doing them. In the first submission they had suggested the possible approaches. Now, they are having a concrete way they are implementing these changes.
0,Yes, and at times, much more than necessary! 
0,No changes has been done
0,Yes, they explained a lot for the changes. Great job!
0, The authors have done good job explaining the changes to be made to the system, and even explaining why other, more obvious options, are not chosen. It still sounds like a complicated change to make to the system.
0,The team added more information from the last time which aided in a better explanation of the problem. Good job team
0,1) The authors have adequately explained the changes to be made to the design document.
0,The explanations are more than sufficient. Not only have the authors explained the changes to the system, but also explained the reasoning for considering those changes. I like the way that they also explained the other different ways they could've integrated the GitHub metrics but avoided those methods with sufficient reasoning for the same.The team has also given an explanation of their database design modifications would be like which is good.
0,The authors have dived into the depths when explaining the changes. All of the changes are well defined and precise.
0,Yes , excellent work done by the team. The design document adequately explains what is the problem that they are trying to solve, what is the proposed solution and how the solution would look like.  There are enough details to in the document to understand what is being done and what changes are proposed. The document also has enough illustrations on what is the current situation. 
0,Yes, they did.
0,The authors adequately explained the changes they plan to make.
0,Yes
0,The authors have very well explained the problem statement and the changes to be made to the system, including flowcharts, the files to be modified/added and useful links.
0,Authors have clearly explained the changes to be made to the system. The design document was easy to understand.
0,The team is going to improve compatibility with web content that relies on the WebAudio API by implementing missing pieces of incomplete node types (OscillatorNode) along with entire missing nodes (ConstantSourceNode, StereoPannerNode, IIRFilterNode). 
0,Yes, they made detailed explanation about their changes.
0,The design seems to be flawless. All the principles and patterns used are flawless and to the point.
0,Yep, they have good structure to show what and how they gonna do with the project
0,The design looks good. The code is already committed and approved by the concerned team. Good Job !
0,Yes, their design appears to be sound.
0,The design appears to be sound and following appropriate principles.
0,The design seems to be sound. They have a sample design where they are explaining the tables and how they plan to work with them as well. The examples provided help understand how the data will be stored.
0,Yes
0,yeah, Their proposed design includes workflow, initial step, and subsequent steps. It was easy to follow their design. Their solution appears to be sound.
0,Yes, I am surprised that they have already finished the project. 
0, The design appears to be sound. They have weighed their options and are using an official gem to interact with the github api.
0,I don't see any issue in the design document. They have followed a good design principle.
0,1) The authors have mentioned several approaches in which these functionalities could be implemented. 2) Their chosen approach is follows MVC architecture and DRY principles.
0, The design sound very reasonable.
0,The design is concise and clear.
0,Yes
0,The design is concise and clear. They have added reference images of how the system would look after their changes, which properly shows the expected implementation results.
0,Yes. It is thoroughly investigated.
0,The design is simple and easy to understand. The sin waves and the description about it helps to properly understand the changes made and its impact.
0,The design was not unnecessarily complex. It was as easy as it could be.
0,Their design is much simple and clear, also easy to understand.
0,Yeah, I believe it is as simple as possible while choosing the best path for the expertiza project to grow, but it still sounds like a very ambitious project for 1 group to complete.
0,Use of flowcharts and step by step explanation simplified their solution. It was easy to grasp and design also appears to be simple.
0,Very simple and clear.
0,With proper documentation, the problem is explained nicely and understanding of the complex problem is made easier.
0,1) Have clearly mentioned when will GitHub Api be hit to retrive the data and which gem will be used.
0, Their design is simple and clear.
0,The team has done tremendous job in adding visualization aids. They have added application flow diagrams and visualized images. They have also included screenshots to explain the code functionality implementation of enabling self reviews and score pages. This makes the document descriptive and very easy to read and understand.  
0,Self explanatory visual changes have been added. All the changes are described via the visual aids.
0,Yes the flow diagram and graph plots help to understand the changes and its implications. The diagrams clearly describe the change approach followed.
0,The flowcharts included in the design document clearly explain the changes that need to be done.
0,The design document includes proper visualization. It included appropriate flow charts and screenshots which made it easier to understand the design document and the project.
0,Yes, the team has used flowcharts and diagrams which clearly describe the changes to be made to the system.
0,They provide pictures of their sound waves.
0,Yes, the authors are using already existing gems for the implementation. I would have liked to see a section on caching if any.  Rest the solution proposed looks simple and straightforward and looks that it will easily integrate into the current system  
0,The provided tests are in depth and will test the changes made thoroughly.
0,They have pretty good test plan as there is no code yet.
0,The use case diagram properly shows how the addition of this feature will help for the instructor role.
0,The visualizations used by the team are comprehensive and well made.
0,Good design
0,excellent use of screenshots, made things very clear for me.
0,Yes, they use a lot of diagrams to show use case.
0, The photos included are superb at showing the expected View. They can have more 1 or 2 more stars if most of the Expteriza work for the github metrics was already completed when they made these screen shots. Do you think it is feasible to expect that you can start a software project before getting a green light on the project in order to include high quality pictures of your proposed View in action?
0,It included a proper test plan. There was no test plan included in the previous version of the design document but authors have added it in the second round which made the design document complete.
0,Explains the different approaches with the help of use case diagram.
0,the design does include test plan and plans to test the functionalities 
0, They not only use use case diagram but also mock-up screenshot to help the reader understand their design.
0,No
0,Yes, it includes the test plan with a great detail.
0,Good test plan. Should include more test cases that check the functionality of GitHub integration. eg: If number of lines of code committed by a student is correctly computed.
0, Test plans for both of their subtasks were present.
0,Yes, the authors have clearly explained the changes to be made to the system. Document is simple, succinct and easy to understand. Great use of flow charts, uml diagrams and mockups to visually represent the information is done. 
0, Yes the author has provided a sufficient explanation of what changes needs to be done to the system by giving flow diagrams and screenshots about what changes they are going to incorporate in their system
0,Team has added all the diagrams and screenshots. The document is well explained and looks complete.
0,Yes, their explanations are adequately explained the changes.
0,1) The authors have clearly explained the changes to be made to the system. 2) They also have given the files to be modified/added for each change.  
0,Authors have clearly explained all the changes to be made and where to make them. The design document is quite clear and easy to understand.
0,I think that the authors have done a really good job of explaining and covering all the changes to be made. Overall this is the best document i have seen so far.
0,The authors have explained all the changes to be made very clearly and concisely. Each change is supplemented with sufficient diagrams and mock-ups so as to make the final task of visualization easier.
0,The document seems complete
0,Yes, one of the best design docs of project 4!
0,The document was very well written previously too, and they have improved it with diagrams and test. Nice work.
0,The authors have considerably improved on the document. UML diagrams as requested have been added.
0,Yes, the design follows appropriate principles and patterns. suggestions: not required.
0, As the project is based upon making changes to the UI of the system , thus there is no such specific pattern being followed however the design that they have made available in the form of screenshots appear very much inclined with the functionalities that they need to implement .
0,Design is good
0,Yes, their design is very sound, and principles and patterns are used appropriately.
0,1) The design appears to be sound. 2) Also follows proper design principles eg: for making changes to nomination and review questions, inheritance is used (inheriting methods from questions parent class)
0,The design seems to be appropriate and sound. It follows appropriate principles.
0,Yes, the design appears to be very sound and follows all the principles that I know. I loved the format of the documentation as well.
0,They have explained very well
0,Yes the design follows simple rails concepts and is pretty straightforward. I would like to see if the team uses existing gems available to speed up implementation and re use.   
0,Yes, looks clean. Any design patterns used????
0,Yes, the design appears to be sound and well made. 
0,Yes, the design appears to be sound. There could be some rearrangement in the mock-up layout, e.g. text box for email address and 'Add' button could have the same horizontal alignment for a better user interface.
0,The design seems to be very simple. I think the team has avoided unnecessary complications and are doing minimal changes to existing system to solve issues given to them.
0,The design approach seems justified and inline with the functionalities required to be implemented. They have mentioned step wise details for all the changes they are going to take. Done a good job. No rework required.
0, Yes the design is presented in a much simpler form which gives a very clear picture of how the changes are going to be implemented and which functionalities would be witnessing the changes , also as they have provide the screenshots it enhances the understanding about the project more.
0,Yes, their design is simple and clear enough to read and understand.
0,1) The design is simple and well modularized. 2) Each method is implementing only one task as it should.
0,The design does appear to be as simple as possible. The team have not unnecessarily complicated the project.
0,Yes, the design is pretty simple and to the point. The design proposed is very clear and talk why each change is necessary.
0, The design is straightforward and as simple as possible. The team has thought this project out very clearly and laid the same in the form of flowcharts and mock-ups. This has greatly reduced the complexity of the project and helped decrease the chances of clutter and confusion.
0,Yes, adequate amount of details present
0,Yes!  The requirements are simple and the design plan clearly explains all the points.
0,yes, design appears to be very simple.
0,Great use of UML diagrams, flowcharts and mock-ups by the team to clearly explain the flow of their work. It is easy to understand the flow and how the end product will look like.
0,They team has done awesome work in representing every detail possible in the flow diagrams. They have created UML diagrams which depicts the flow of the admin and students along with other actors. As mentioned earlier they have also represented the admin flow diagram and instructor flow diagram through the flow chart which makes it very easy for end user to understand the workflow of the requirements in the expertiza system.
0, Yes the visualization is pretty clear and good.
0,Proper use of UML to explain the use cases and flow charts to explain the workflow has been done. The plan is complete.
0,Yes, their visualization is good. They are clear and well described the changes.
0, The design document includes flow charts, UML diagrams and screenshots which is really impressive as it made the document easier to understand. 
0,Yes, the uml diagrams sufficiently provide visualization.
0,The authors have added UML diagrams as requested in the previous review and it has made a lot of difference. The explanation is much clearer now.
0,Test plan outlines the functionalities that the team will test and it seems sufficient to test the changes.
0,They team has done tremendous job in following the test driven approach for the project implementation. They have already included the tests they are writing for the functionality implementation. They have covered the exhaustive scenarios  for the project in their test. Their test plan is highly appreciative.
0, The test plan is quite good as it covers all the test cases in the form of 11 test cases which test all the functionalities for the admin and the instructor role. It also considers the negative test cases like throwing an exception when the pending instructor tries to add more then 10 students to his/her course.
0,Yes, they include the test plan.
0,1) The test cases cover all of the functionalities that they are going to implement.
0,Yes, the document includes a test plan. There was no test plan present in the previous version of the design document but the team included the test plan in the second round. The test plan is clear and seems like it would really test the functionalities.
0,The test plan has been written in a very good way following the great quality of documentation till the end. It covers all the edge cases and scenarios.
0,The test plans are excellent. The best I have seen so far.It has accurately taken all test cases into consideration and described the layout of the final test in the form of a pseudo code. Well Done on the test plan!!
0,Yes, test plans are included
0,Yes, the test plan looks good. It covers all the functionalities.
0,Test plan seems thorough and well thought out.
0,The team is following a Test Driven Development approach. They have defined the test cases that need to be tested after the implementation. It seems to completely test the feature.
0,Yes, changes to be made are explained clearly. Document is very clear, includes necessary diagrams, mock-ups and everything possible to make anyone understand what the issues are and what team is planning to do to resolve them. Everything is included in a proper order like for each issue there is a separate flowchart and mock-up. No suggestions required.
0,yes the authors have adaquately explained the changes to be made in the system.
0,The document is clearly and neatly written. All the necessary sections are present with good explanations.
0,Changes are well explained with good visual aids.
0,They have explained every change they want to make to fix the issue. The diagrams, in turn, help a lot to understand the flow of the system.
0,Yes the authors have adequately explained all the changes that need to be made. Each issue has a separate list of changes to be made and which files need to be edited.
0,The changes are very well documented. For each issue what are the files that needs to be changed is mentioned appropriately. The overall design looks efficient and avoids any duplication. Good Job!
0,Both the problems and proposed changes are clearly detailed. My only suggestion is to put the description of the issue being solved in the same location as the solution to it, otherwise one has to scroll around the page to figure out which problem is being fixed.
0,Yes, they have been thorough in their approach and this has been a project implemented to perfection. They have not only given proper UML diagrams and the like, but they have also implemented the code and showcased in the "Test Plan" and the "Proposed Design" section. 
0,In round one, Team has well explained their approach and how are they going to do it. In this round, they have included detailed information and mock UI. It was easy to relate their approach. Their test plan is also thorough. I think the team would definitely be able to incorporate the new changes. Good job guys! 
0,The design was well explained in this design doc.
0,Well explanation on problem statement. UML diagrams, flow charts given. Detailed explanation on problem statement. 
0,yes!
0,Yes, the document seems to be perfect. It does follow all the appropriate principles and patterns. No suggestions required.
0,As far as the issues are concerned, the solutions do seem logical.
0,The design is apt following the principles and are self-explanatory
0,Yes the design appears to be sound and the flow diagrams illustrate the flow of control very well.
0,All good design principles are being followed where necessary.
0,The design is perfectly well depicted in the form of the Logical Flow diagram they have been thorough in pointing out the application flow in the Proposed Design section so as to elucidate the problem statement.
0,The design appears to be neat. 
0,The design appears to be sound following the appropriate principles and patterns.
0,Yes, well designed document. UI mock-ups given. It is structured. 
0,sound. so many diagrams.
0,Yes, it is the simplest design and minimal work which is required to resolve the issues. It is very clearly explained. One can clearly understand the problem statement and the proposed solution for the same. The design document is properly structured as well. 
0,design is simple and easy to understand.
0,Yes, simple straightforward solutions.
0,The diagrams are very basic and covering the entire scope which is a good work by the team
0,Yes the design is robust and simple to understand. Each class and view only handles a specific functionality i.e it is modularised.
0,Yes the design is straight forward and easy to understand.
0,The design appears to be simple given the task at hand.
0,Yes, the design is a very simple and effective representation of the problem statement and they serve a good representation on how they are working and implemented the changes to the staggered deadlines assignment section. 
0,Undoubtedly, I like their color coding approach. It's something very simple and apt for the current system.
0,The design seems simple and clear.
0,very clear
0,Yes, the provided diagrams deliver sufficient information about the implementation. Flowcharts and mock UIs screenshots give a perfect picture of how the system will be after the required changes. No suggestions required.
0,flowcharts are drawn which describe the flow how the system will work after implementation.
0,Great use of mock ups. Really appreciate it.
0,Yes, they have added mock UI screenshots which is exactly what they are going to and should do.
0,Yes the diagrams clearly illustrate the proposed flow. Different diagrams are provided for different issues. One of the best wikis I have seen
0,Very good use of Class and Sequence diagrams to explain the entire design flow. It clearly conveys the thought  process of authors and the overall design.
0,Lots of great visualizations are provided that outline a good amount of detail.
0,The team has added their mock UI which shows they have thought about the changes and modification. Mock UIs of the screen shows they are halfway the project. 
0,The class diagram is very useful, and the mock UI with indication on it make it more useful. 
0,Yes, design is informative. Change proposal is detailed. It describes well about how changes are to be implemented.
0,The diagram is perfect and clear
0,Yes, design does include a well-described test plan. The provided tests will surely test the functionalities which will be implemenedt. The test plan is represented in a wonderful manner including pre-steps and different testing expectations. Great work. No suggestions are required.
0,The test plan is comprehensive.
0,They have covered all the test plans along with detailed steps.
0,The test plan is thorough and contains lots of detail that will make it easy to design RSpec tests in the future.
0,The Test Plans are thorough and they gone ahead and shown it in detail by breaking them into steps such as pre-steps, Functional, UI and Performance Testing. This is a very good way to achieve in-depth analysis of the problem and check how effective the solution is.
0,I have to say their test plan includes user interface testing, performance testing, database testing etc. I have to say they have worked really hard for it. I have not yet come across any team who has a test plan like this. 
0,An appropriate test plan is included in this design doc.
0,yes the test coverage seems good
0,1) The authors have explained the functionalities and the changes to be made to the project in depth.
0,The authors have made a comprehensive document that clearly outlines the changes that they made. They have included the UML diagram depicting the flow of control. The design section lists the files that were modified and newly created. It also comprises the contents of the summary sheet that gets displayed once an instructor clicks the 360 Assessment icon; LowFI UI and a prototype revealing the relevant fields that are to be displayed in the grade summary.
0,The team has mentioned the problem statement and its importance by giving an example of how it saves the time of instructors.
0,The changes are well explained with the help of use case UML diagrams, screen shots of the web pages and prototype of the view. Well done!
0,Yes, the proposed changes and intended output is clearly mentioned in the design document.
0,The team has done a pretty good job of explaining the changes they are intending to make in great detail. They have added more details from the earlier version.
0,The design looks fine, team has provided the initial test plans. A Lo-fi sketch is available as well. The team could have put git links to the test plan code for better organization.
0,1) The design doc is clearly explained. 2) Follows the right design principles.
0,The design looks sound and a lot of improvements have been made after the previous round. The design comprises of the list of files modified and created; the fields to be included in the summary sheet and screenshots showing sample prototype of the summary sheet. 
0,Yes, the design seems to incorporate appropriate design patterns. The new view file added is also in accordance with design principles.
0,The design document is sound and well written.
0,Yes, all required sketches, UML diagrams and views provided. Great work!
0,Very good design, they use LoFi sketch to demonstrate their design. 
0,Yes, the design looks accurate and well thought through. 
0,1) Simple and clear design.  
0,The design is simple and easy to understand because of ample explanation. The authors have also worked on the Activity UML diagram for this round making it easier for the readers to understand. All areas have been covered with respect to presenting the design lucidly.
0,The proposed design is easy to understand and explained properly with the help of appropriate screenshots of the view.
0,Actual project work has not started yet so code modifications have not been mentioned. However, the files to be changed seem appropriate.
0,Yes.
0,Yes, the design is quite simple and easy to understand. The authors have taken a straightforward approach to implement the feature.
0,UML and class diagram is not possible since the view is the main part. 1) The team explains how the final view should look like in detail.
0,Yes, the document makes extensive use of visual aids- be it activity diagram (UML), screenshots of the views, LowFi UI Sketch of the grade sheet and a prototype of the view showing grade sheet with Expertiza's color scheme and style conventions. All these tools clearly project the changes that are made to the system.
0,The team has made a great effort to explain the design through a UML diagram and screenshots of how the feature will work when added to the existing project.
0,The Use case UML diagrams, images of related pages and view's prototype makes it easier to understand the team plans to make required changes to the system.
0,Using a Lofi sketch the team clearly shows the intended output.
0,The authors have included flow diagrams, wire frames and even real screen mock-ups. They really help improve clarity.
0,1) The test comprehensively tests the functioning of the system
0,The team has completed the implementation and have included the screenshots of the Rspec code that tests the assessment360_controller.rb and specifically the course_student_grade_summary method. They test whether the instance variables provided in the view have been properly instantiated without concerning too much about the values that they hold. They back this up with a link to Ruby's best practice guide for functional tests for controllers. Plus they include feature tests to check whether correct details are displayed. They have also justified the reason for not performing unit tests as they don't alter the model. The highlight of this document is the video links showing the tests performed. Kudos to the team for the effort.
0,The test design includes both controller as well as feature tests. The team has also made an effort by putting up video links of the running of tests.
0,The authors have explained well on how they intend to test the controllers and features given that the project does not involve any changes to model files. I think  Ruby-On-Rails Guide - Functional Tests for Your Controllers is a good way to go.
0,The tests cover all the required functionality. And as it is mentioned controller tests make more sense than unit tests.
0,Yes, tests are explained thoroughly with written code. 
0,The authors have proposed an elaborate test plan and it covers the entirety of the functionality they are building.
0,Authors have explained well the changes to be made in the system.
0,They have mentioned all the changes that have to be made to fix the issues. The screenshots with which changes are to be made in the code explains a lot
0, The authors have described all the proposed changes well. Each issue and with it it's detailed code is given. Well written and solid effort!
0,The wiki documentation is extremely well written with all changes explained clearly and concisely. The good thing about this wiki is that the proposed solution sections is brilliantly explained. The team have clearly mentioned all filenames where they propose to make changes, drawn diagrams to illustrate the flow control, and added snippets of code where necessary. Brilliant
0,Yes, the authors have adequately explained what has to be done, the proposed changes,etc.
0,Yes, the authors have clearly explained where and what changes are to be made. They have provided a clear approach for the various fixes in the project.
0,Explained in detail which is very good.
0,Yes, the authors have nicely explained the changes to be made. Good work team.
0,The authors have highlighted certain parts pf the design where the changes were made. This makes is easier for the reader to understand the changes made. The team has explained the changes made in a clear manner.
0,The design and fixes are very well explained with codesnips that include the incorporated adjustments. Nice work.
0,Yes the design follow the principle and they have added designs for each issue specifying every detail which is quite a task
0, Yes the design appears to be sound and follows Ruby principles. No code has been repeated and they are using pre written functions in many places instead of just writing the logic again. Good work
0,The design/proposed solutions look completely logical and should fix the bugs with no/least redundancy. It also looks like the team has already managed to fix a few bugs as well. Kudos to them.
0,The design appears to be sound: I would make the same choices they did to address the issues.
0,Well, it looks sound to me. It follows the DRY principles as well.
0,The design appears to be sound and following appropriate principles. The document is also well described.
0,All the issues are stated and addressed nicely. The design looks good.
0,The design appears to be clear and the team has also implemented functionality to their project. It shows that the team has organized and implemented the design well.
0,The team has nailed down which parts of code need to be modified. The changes introduced in the design document are simple and minimal and do not require any extensive discussions about the appropriate principles or patterns.
0,design is simple and easy to understand.
0,The design is very clear and helps in better understanding the flow of the system.
0,The design proposal is coherent and easy to understand. The proposed design and steps for solution are also logical. The team have done a lot of work to think about how to solve the bugs. Good job guys :)
0,Design appears really simple. Only a couple of added lines here and there.
0,The design looks perfect. It is neither overly simple nor it is too complicated.
0,The design seems to be as simple as possible. Authors have not unnecessarily complicated the approach but rather have given a simple approach for various fixes.
0,Yes ,it looks simple based on the code snippets they have given and by the diagrams.
0,Yes, the design is a very simple and effective representation of the problem statement and they serve a good representation on how they are working and implemented the changes to the review section. 
0,The team has explained the issues and their solutions clearly. The design is simple, hence easy to understand. The proposed solution section is well written where the team has described the changes made in respective files.
0, The visualization provided in the form of flow diagrams in very easy to understand. However ER diagrams of main DB tables could have been provided because it is difficult to understand the data flow and inter relation between tables.
0,The diagrams in the wiki clearly describe the flow for proposed changes to the system. We can clearly decipher from the diagrams what the intended functionality is. Good job :)
0,No class diagram was needed, and their flow charts and code snippets show the control logic simply.  
0,The team has put UML diagrams for every issue which clearly explains the issue and the workflow.
0,The document includes flowcharts which clearly describe the project flow and what needs to be done.
0,yes it does.
0,Could have included some screenshots. Otherwise, great work by the team on UML diagrams.
0,The team has provided flow charts that explain the working of the system. The team has provided flowcharts for each issue which is commendable.
0,The provided diagrams are visualizations of the workflows of different actors in the context of given five issues. They further clarify the changes that are to be made in this project.
0,Detailed test plans are mentioned in the wiki which probably covers all the cases.
0, Yes the design includes a test plan. The tests really test the functionality and also test adverse conditions to see whether error messages are being shown
0,The test plan section defines the steps needed to manually test the functionalities, but I would suggest the team to also include the logic they propose to use in the rspec tests, the objects they would mock etc.
0,Test plan is included, but it makes many references to manual tests. The tests they state could be automated in a straight forward manner.
0,The test plan has all the manual testing and automatic testing to be done on each issue.
0,The test plan is included in the document.  Both manual and automated testing test plans are given which is appreciable. 
0,Elaborative test plan, which is really good.
0,Test plans are present and explained in detail. The tests are really in depth for each issue the team will be fixing.
0,The team has improved their design by adding extra test cases and test procedures which were lacking in the previous submission. The team has provided test cases for each issue, thereby testing every functionality of the project.
0,The design appears to be sound and seems to follow all the appropriate principles as far as I am concerned. And as mentioned earlier I would again like to point out that the proposed plan section has been handled really well.
0,The document is very well structured and is quite easy to follow. They have explained each and everything stepwise.
0,Yes, the design seems appropriate and suitable for the case. Maybe the author could specify the patterns they use in the document.
0,Yes, simple straightforward solutions.
0,the design is simple
0,The design is both simple and clear. It should be better to add another step for the comparison of the instructor review and the student review. Both as a final examination and a testing.
0,Yes, pretty simple. Great job!
0,The design appears to be simple to the best of my knowledge. Not a lot of files needed to be changed, signifying that they are just targeting specific files in order to make minimum number of changes possible not making it too complex.
0,The design is as simple as possible, and described in a straightforward manner.
0,The design seems simple and feasible.
0,The documentation done by the team is very detailed and explains the problem statement very clearly. They have described the functionality change in bullet points which makes it very easy to understand the sub parts required to achieve the main functionality in simple terms. 
0,Yes the author has made a great attempt to explain the changes by trying to explain the changes required with the help of the application flow diagram and the use case diagram and how the changes were implemented by giving screenshots of the changes.
0,The wiki page is very explanatory and the authors have explained the issue and fix very well
0,Yes the required changes for the reviews is explained clearly. The design for each required change is also explained in depth now.
0,The authors have clearly mentioned the changes to be made using Problem Statement and Use Case Diagram.
0,Yes, they have been thorough in their approach and this has been a project implemented to perfection. They have not only given proper UML diagrams and the like, but they have also implemented the code and showcased in the "Implementation" section. 
0,The team explained everything required and not leave anything behind.
0,The design seems to be following the appropriate principles and uses the appropriate guidelines. They usecase diagram mentions each actor and the role associated.
0,Yes
0,Yes the design is very simple and explains the changes required in a very clear manner
0,The flow and UML diagrams are well designed and explain a lot about the system flow. addition of detailed use case helps support the diagram
0,The design is perfectly well depicted in the form of the use case diagram in which the users are student and instructor and the data base is where the actions are stored in the database and the retrieved from the same for the case of reviews information.  Also, they have been thorough in pointing out the application flow in the Application Flow section so as to elucidate the problem statement.
0,I like the part where the peer review has been given more weightage in comparison to self review in the composite score.
0,The design appears to followed appropriate principles and patterns.
0,es the design is very simple and explains the changes required in a very clear manner
0,The design is simple and very much in depth. and follows the principle
0,Yes the design is simple and easy to understand for others too. The explanation along with diagrams provides enough information to understand the use-case.
0,Yes, the design is a very simple and effective representation of the problem statement and they serve a good representation on how they are working and implemented the changes to the review section. 
0,Yes, the design looks simple , no complications and the screenshots are really helpful.
0,The design is as simple as possible.
0,Basic UML used
0,yes the application flow diagram tells of how the functionality will be accessed both by user and student and the use case diagram explains the interaction of the instructor and the students for the particular functionalities 
0,Some UI screenshots are added along with design diagrams which describe the system. The UI or mock UI helps in better understanding
0,The visualizations seem to be complete. The team has included an application flow diagram, a use case diagram and also a screenshot of how the actual result should look. So, in my opinion, good job done!
0,The team has done tremendous job in adding visualization aids. They have added application flow diagrams for every actor along with the UML diagram of the student and instructor. They have also included screenshots to explain the code functionality implementation of enabling self reviews and score pages. This makes the document descriptive and very easy to read and understand.  
0,The chart and diagrams are well done and help explain how the code will work.
0,The use case diagram and application flow diagram very well explains the changes made to the system.
0,Yes the visuals provided with this doc are clear and just by that a lot can be understood.
0,The test plan added is just a basic case and as the changes are just some calculations to be made test plan is not much of a requirement for the project.
0,A test plan is included in this design doc.
0,Necessary visual inputs are present to aid explanation.
0,Yes, appropriate visual cue is present in the form of screen shots
0,Excellent use of visualizations!
0,No diagrams present
0,There are visual aids included with the design, depicting the current state of the system as well as proposed icons to institute the design changes.
0,Yes the test plan is included.I think the tests will cover all scenarios
0,The testing appears to be pretty rigorous. They have taken into account cases when TA/instructor's scores should be excluded. The test cases could have been better described.
0,Team has done a good job in identifying the cases that needs to be tested. It will be an improvement if they can add details on how they plan to test each controller/view separately.
0,Yes, there is a detailed test plan for this project. Not only basic features testing but also other more testing.
0,The test plan looks really thorough covering all the possible scenarios. I am personally happy with the given test-plan.
0,They have discussed clearly what functionalities they are going to test to make the project more efficient. I think they have made a quite descent research in the testing aspect of the project.
0,The design includes the test plan.
0,Yes, the test plan looks good. The author lists all the cases they need to test.
0,They have a paragraph saying what they are going to do, but it could be broken up into parts with images for better understanding
0,They have one scenario. maybe a few more could help better test their work
0,Yes, the proposed solutions part clearly stated that they will go through each review to compare the new review score, etc, and then they will store the review URL. However, the solution is not concrete enough and is a little bit hard to follow. It should be great if there's more details in stating about how to loop through each reviews.  
0,No changes has been done
0,Yes, they explained a lot for the changes. Great job!
0,The team has mentioned properly what changes they are doing and how they will be doing them. In the first submission they had suggested the possible approaches. Now, they are having a concrete way they are implementing these changes.
0,Yes, and at times, much more than necessary! 
0,Yes. The authors have made changes to the design document and are more specific about how exactly they plan to implement the new functionality.
0,The team added more information from the last time which aided in a better explanation of the problem. Good job team
0,1) The authors have adequately explained the changes to be made to the design document.
0,The explanations are more than sufficient. Not only have the authors explained the changes to the system, but also explained the reasoning for considering those changes. I like the way that they also explained the other different ways they could've integrated the GitHub metrics but avoided those methods with sufficient reasoning for the same.The team has also given an explanation of their database design modifications would be like which is good.
0,Yes , excellent work done by the team. The design document adequately explains what is the problem that they are trying to solve, what is the proposed solution and how the solution would look like.  There are enough details to in the document to understand what is being done and what changes are proposed. The document also has enough illustrations on what is the current situation. 
0,The authors adequately explained the changes they plan to make.
0,The team has provided a code snippet which includes solution to their problem statement. They have described the code and their proposed changes
0,By looking at the flow-charts and UML diagrams submitted by the team, their solution appears to be sound.
0,The team has provided diagrams that make it easier for the reader to understand the workflow of the system and the changes that they have proposed to implement the solution.
0,As mentioned, the team has provided UML diagrams stating the two actors in their system- Student, Instructor and their interaction with the email module and database.
0,The design seems to be sound. They have a sample design where they are explaining the tables and how they plan to work with them as well. The examples provided help understand how the data will be stored.
0,Yes
0,Design is okay
0,Yes
0,Very basic design
0,No visualization
0,No test plan
0, The design appears to be sound. They have weighed their options and are using an official gem to interact with the github api.
0,I don't see any issue in the design document. They have followed a good design principle.
0,1) The authors have mentioned several approaches in which these functionalities could be implemented. 2) Their chosen approach is follows MVC architecture and DRY principles.
0, The design sound very reasonable.
0,The design is concise and clear. They have added reference images of how the system would look after their changes, which properly shows the expected implementation results.
0,Yes. It is thoroughly investigated.
0,Yes
0,Their design is much simple and clear, also easy to understand.
0,With proper documentation, the problem is explained nicely and understanding of the complex problem is made easier.
0,1) Have clearly mentioned when will GitHub Api be hit to retrive the data and which gem will be used.
0, Their design is simple and clear.
0,The use case diagram properly shows how the addition of this feature will help for the instructor role.
0,The visualizations used by the team are comprehensive and well made.
0,Good design
0,excellent use of screenshots, made things very clear for me.
0,Yes, they use a lot of diagrams to show use case.
0,Use case diagram is present but it would have been nice to see a sequence diagram to understand the flow. 
0,Explains the different approaches with the help of use case diagram.
0, They not only use use case diagram but also mock-up screenshot to help the reader understand their design.
0,The test plan seems adequate at this stage, edge cases may need to be considered at a later stage.
0,No
0,The authors have explained well what changes they wish to make and how they plan to implement those changes. I would suggest them to add more details like, "where do they store the list of responses more than the notification threshold". Overall good job.
0,Yes, it includes the test plan with a great detail.
0, The test plan seems adequate enough to show that they understand what to test.
0,Yes, the design is as simple as it can get. Understanding the principle is not hard. But making it simple should also not make it costly. Good work to the team if the instructors were looking for something this simple :)
0,The UML diagrams given in the document list the process flow for testing/understanding the changes which will be made in the document. But, unfortunately, no diagram exists which describe the changes to be made.   I would suggest the team to add diagrams for the pseudo-code they may have written.
0, Test plans for both of their subtasks were present.
0,A format of the proposed email to be sent would be helpful
0,some additional tests can be added
0,Yes, the problem statement and the proposed changes have been clearly explained.
0,The design and application flow appear to be as simple as possible, as well as the proposed code changes snippet provided.
0,There are UML and application flow diagrams included with the design document, which serve to make the proposed design changes much clearer.
0,Test plan is as simple as required for the problem statement in question.
0,Yes, they include this part in the Proposed Solutions field. It would be better if they use visualization to let the readers better understand the flow.
0,The design seems workable. Maybe they can come up a more sound design. For example, they can try many ways to define the notification limit.
0,The design is simple and really better than before.
0,After the first review, the design has improved significantly. The proposed design clearly defines the changes being made by the team.
0,There has been a significant improvement in the level of details provided. The author can further improve the document by providing the details of the design pattern to be used.
0,The design seems to be pretty straightforward.
0,The author uses the UML diagram to properly describe the system. 
0,The document does contain a test plan which can definitely be extended to incorporate certain negative test cases.
0,The design has improved and updates has been done and it is easy to comprehend the changes to be made to the system.
0,The design seems simple.
0,Proper diagrams are used by the team. 
0,Design doc includes the test plan but more detail on negative test cases would have been better.
0,Yes, the use of visualization is great.
0,I know exactly what this team is doing.
0,It seems as though this team's approach was well designed.
0,The way the team plans to loop through each review to calculate a review score seems slightly more complex than necessary, but I agree with them taking this apporach as it will allow them to break down the reason why the scores are different.
0,They have a lot of mockups showing what they plan to do 
0,Yes, they include a problem statement in this page. The statement is clear and easy to understand.
0,The team has well explained the changes to be made to the system.
0,Yes, the authors have explained the changes to be made clearly along with diagrams
0,All the changes made to the system have been supplemented with explanations and mock-ups.
0,Explanations are okay , there needs to be more detail on what is being done and how the final outlook view would be. As of now not much details have been put in the document. A before and after view would have adequately shown the impact the this work will make. 
0, Yes, there is few basic details mentioned in the document, but not adequate changes are explained. It's far better work than last round, yet the team has to give a better overview on Bacui and elaborate the problem statement. 
0,The team has updated their design document to include all the changes they are planning to make. This is a good improvement from the earlier version.
0,Design is good
0,The design is reasonable and workable.
0,Since its UI based project, their design is pretty intuitive and simple.
0,There is no scope of using any design patterns or principles since this is a UI-based project and there is no scope for the application of design principles.
0,There is no design provided in the document, as its mainly UI changes. Yet, the team should have dived in detail about their choices to achieve a particular look and feel needed. The document seems to be over-simplification of the implementation and can be improved further.  
0,The changes are to be made in the UI and the team is planning to use appropriate design elements.
0,team plans to use all of the bootstrap functions and 
0,Yes, the design doc is simple and well explained
0,Yes, the design appears to be as simple as possible. There are a limited number of Bootstrap components being used the complexity of the project is limited and the end result appears to be as simple as possible. 
0,Yes this looks simple with several point fixes required to be done. The authors also talk about using bootstrap 4 which is good. I would have liked if they could quickly put up certain mock screens using the bootstrap.  
0,The tasks they need to do seems simple but more design details are needed.
0,Yes, the design is very simple.
0,Team has done their best in visualizing whatever design they had.
0,The diagrams added clearly explain which views need to be modified, but if the team could just mark the point where changes are to be made in the screenshot, it would be the icing on the cake. Still good work :)
0,They gave all the UI interfaces they are going to make. It's suggested that they can include the origin page and the changed page which the reader can compare with.
0,They have included mock UI screens which make their proposed changes quite clear. 
0,Class diagrams/UML diagrams do not apply here. But explanation with snapshots is provided.
0,Not necessary since it's a UI based project.
0,No, i feel that that adequate visual aids and diagrams are missing in the document. only a few screens to show. It would have been better if the authors could have put before and after details on what is being done. uml diagrams to show the flow and then justify the changes that they are trying to make  
0,Make sure to test each interactions properly after the design is complete.
0,no test plan section at all
0,Since it's Ui project, they says they will test all the pages changed.
0,Since this is a UI based project, they don't need any functionality testing. the team is planning to do manual testing which is all they need to for this project.
0,No, UI tests can be added here, but the team has not considered them.
0,No tests needed.
0,No test plan
0,There are no tests included in the document, but there is an issue need to be fixed, which needs test plan to make sure it can work correctly. Also, the UI need to test to guarantee the intended results.
0,There is no test plan.
0,Yes, the authors have clearly explained the changes to be made to the system. Document is simple, succinct and easy to understand. Great use of flow charts, uml diagrams and mockups to visually represent the information is done. 
0, Yes the author has provided a sufficient explanation of what changes needs to be done to the system by giving flow diagrams and screenshots about what changes they are going to incorporate in their system
0,Team has added all the diagrams and screenshots. The document is well explained and looks complete.
0,Yes, their explanations are adequately explained the changes.
0,1) The authors have clearly explained the changes to be made to the system. 2) They also have given the files to be modified/added for each change.  
0,Authors have clearly explained all the changes to be made and where to make them. The design document is quite clear and easy to understand.
0,I think that the authors have done a really good job of explaining and covering all the changes to be made. Overall this is the best document i have seen so far.
0,The authors have explained all the changes to be made very clearly and concisely. Each change is supplemented with sufficient diagrams and mock-ups so as to make the final task of visualization easier.
0,The document seems complete
0,Yes, one of the best design docs of project 4!
0,The document was very well written previously too, and they have improved it with diagrams and test. Nice work.
0,The authors have considerably improved on the document. UML diagrams as requested have been added.
0,Yes, the design follows appropriate principles and patterns. suggestions: not required.
0,Design is good
0,Yes, their design is very sound, and principles and patterns are used appropriately.
0,1) The design appears to be sound. 2) Also follows proper design principles eg: for making changes to nomination and review questions, inheritance is used (inheriting methods from questions parent class)
0,The design seems to be appropriate and sound. It follows appropriate principles.
0,Yes, the design appears to be very sound and follows all the principles that I know. I loved the format of the documentation as well.
0,They have explained very well
0,Yes the design follows simple rails concepts and is pretty straightforward. I would like to see if the team uses existing gems available to speed up implementation and re use.   
0,Yes, the design appears to be sound and well made. 
0,The design seems to be very simple. I think the team has avoided unnecessary complications and are doing minimal changes to existing system to solve issues given to them.
0,The design approach seems justified and inline with the functionalities required to be implemented. They have mentioned step wise details for all the changes they are going to take. Done a good job. No rework required.
0, Yes the design is presented in a much simpler form which gives a very clear picture of how the changes are going to be implemented and which functionalities would be witnessing the changes , also as they have provide the screenshots it enhances the understanding about the project more.
0,Yes, their design is simple and clear enough to read and understand.
0,1) The design is simple and well modularized. 2) Each method is implementing only one task as it should.
0,The design does appear to be as simple as possible. The team have not unnecessarily complicated the project.
0,Yes, the design is pretty simple and to the point. The design proposed is very clear and talk why each change is necessary.
0, The design is straightforward and as simple as possible. The team has thought this project out very clearly and laid the same in the form of flowcharts and mock-ups. This has greatly reduced the complexity of the project and helped decrease the chances of clutter and confusion.
0,Yes, adequate amount of details present
0,Yes!  The requirements are simple and the design plan clearly explains all the points.
0,yes, design appears to be very simple.
0,Yes, the design is quite simple.
0,Great use of UML diagrams, flowcharts and mock-ups by the team to clearly explain the flow of their work. It is easy to understand the flow and how the end product will look like.
0,They team has done awesome work in representing every detail possible in the flow diagrams. They have created UML diagrams which depicts the flow of the admin and students along with other actors. As mentioned earlier they have also represented the admin flow diagram and instructor flow diagram through the flow chart which makes it very easy for end user to understand the workflow of the requirements in the expertiza system.
0, Yes the visualization is pretty clear and good.
0,Proper use of UML to explain the use cases and flow charts to explain the workflow has been done. The plan is complete.
0,Yes, their visualization is good. They are clear and well described the changes.
0, The design document includes flow charts, UML diagrams and screenshots which is really impressive as it made the document easier to understand. 
0,I loved the overall use of the visualizations which aids to the understanding of the whole doc. The formatting of the documentation makes it really easy to read and understand.
0,Yes, the uml diagrams sufficiently provide visualization.
0,The authors have added UML diagrams as requested in the previous review and it has made a lot of difference. The explanation is much clearer now.
0,Test plan outlines the functionalities that the team will test and it seems sufficient to test the changes.
0,They team has done tremendous job in following the test driven approach for the project implementation. They have already included the tests they are writing for the functionality implementation. They have covered the exhaustive scenarios  for the project in their test. Their test plan is highly appreciative.
0, The test plan is quite good as it covers all the test cases in the form of 11 test cases which test all the functionalities for the admin and the instructor role. It also considers the negative test cases like throwing an exception when the pending instructor tries to add more then 10 students to his/her course.
0,Yes, they include the test plan.
0,1) The test cases cover all of the functionalities that they are going to implement.
0,Yes, the document includes a test plan. There was no test plan present in the previous version of the design document but the team included the test plan in the second round. The test plan is clear and seems like it would really test the functionalities.
0,The test plan has been written in a very good way following the great quality of documentation till the end. It covers all the edge cases and scenarios.
0,The test plans are excellent. The best I have seen so far.It has accurately taken all test cases into consideration and described the layout of the final test in the form of a pseudo code. Well Done on the test plan!!
0,Yes, test plans are included
0,Yes, the test plan looks good. It covers all the functionalities.
0,Test plan seems thorough and well thought out.
0,The team is following a Test Driven Development approach. They have defined the test cases that need to be tested after the implementation. It seems to completely test the feature.
0,The team has mentioned properly what changes they are doing and how they will be doing them. In the first submission they had suggested the possible approaches. Now, they are having a concrete way they are implementing these changes.
0,Yes. The authors have made changes to the design document and are more specific about how exactly they plan to implement the new functionality.
0,Yes, they explained a lot for the changes. Great job!
0,1) The authors have adequately explained the changes to be made to the design document.
0,Yes , excellent work done by the team. The design document adequately explains what is the problem that they are trying to solve, what is the proposed solution and how the solution would look like.  There are enough details to in the document to understand what is being done and what changes are proposed. The document also has enough illustrations on what is the current situation. 
0,The authors adequately explained the changes they plan to make.
0,The design seems to be sound. They have a sample design where they are explaining the tables and how they plan to work with them as well. The examples provided help understand how the data will be stored.
0,Yes
0,Yes
0, The design appears to be sound. They have weighed their options and are using an official gem to interact with the github api.
0,I don't see any issue in the design document. They have followed a good design principle.
0,1) The authors have mentioned several approaches in which these functionalities could be implemented. 2) Their chosen approach is follows MVC architecture and DRY principles.
0,Yes, the github api integration looks good. the only part missing was perhaps they could have documented the rest calls that they are going to make in the document as well. Usage of existing gems is good and eases lot of implementation pains  
0, The design sound very reasonable.
0,The design is concise and clear. They have added reference images of how the system would look after their changes, which properly shows the expected implementation results.
0,Yes. It is thoroughly investigated.
0,Yes
0,Their design is much simple and clear, also easy to understand.
0,Yeah, I believe it is as simple as possible while choosing the best path for the expertiza project to grow, but it still sounds like a very ambitious project for 1 group to complete.
0,With proper documentation, the problem is explained nicely and understanding of the complex problem is made easier.
0, Their design is simple and clear.
0,Yes, the authors are using already existing gems for the implementation. I would have liked to see a section on caching if any.  Rest the solution proposed looks simple and straightforward and looks that it will easily integrate into the current system  
0,The use case diagram properly shows how the addition of this feature will help for the instructor role.
0,The visualizations used by the team are comprehensive and well made.
0,Good design
0,excellent use of screenshots, made things very clear for me.
0,Yes, they use a lot of diagrams to show use case.
0,Explains the different approaches with the help of use case diagram.
0, They not only use use case diagram but also mock-up screenshot to help the reader understand their design.
0,The test plan does include a high level of testing scenarios the team plans to cover. I would suggest the team should add BDD tests so they can test the same after the development phase is over.
0,The test plan seems adequate at this stage, edge cases may need to be considered at a later stage.
0,No
0,Yes, it includes the test plan with a great detail.
0, The test plan seems adequate enough to show that they understand what to test.
0,Good test plan. Should include more test cases that check the functionality of GitHub integration. eg: If number of lines of code committed by a student is correctly computed.
0,The design includes a test plan. However the test plan has nothing related to tests or which test cases are going to be considered. It just explains the flow of how an instructor would reach the GitHub metrics data page.The team should at least mention which files are the test cases going to be written on and what functionalities are they going to test.
0,The test section looks inadequate as of now, only two test scenarios are mentioned and no details on automation or UI.  More so no mention of tests in the document.
0, Test plans for both of their subtasks were present.
0,The author has excellently explained about the changes that they would be making by providing the design diagram and the screenshot of the the changes that they have incorporated .Also they have mentioned about their choice of tool which is google chart and why do they prefer , so overall a good explanation
0,Changes that's needs to be made has been explained correctly.
0,Yes, their doc has adequately explained the changes.
0,The team have a well written design document and and the authors have explained the proposed changes well. The authors have also listed each file they are going to be changed.
0,yes, the team has well explained the changes that they are going to make. Last time it was a bit confusing but this time because of the help of the diagrams and mock UI screen, the solution seems clear now.
0,The authors have explained the changes made to the system. The design flow greatly helps to understand the flow of the system.
0,The authors have described what all changes they plan to do and where they plan to do it. Compared to the previous version of the design document they have now included what tools and framework they plan to work on. The design document looks complete and understandable now.
0,They will be changing mostly html and erb code to create a visual interface that delivers information to instructors more effectively.
0,The proposed changes have been explained in a simple manner.
0,The document adequately describes the project description and proposals made. The proposed change of generating a single or single bar chart graph based on the categories selected to display the chart, can be efficiently made to the system.
0,They have improved the document to provide a better description of changes to be made to the system.
0,Yes the design is sound and gives a proper explanation about how their implementation would behave.
0,Design seems correct.
0,Yes, their design is clear and sound, and the principles and patterns are well used.
0,The design documents is well explained. the authors haven't mentioned any design pattern as such. The authors have clearly stated the proposed changes though. they could have added uml and crc cards.
0,yeah their design seems to be sound and neat.
0,System is well defined 
0,The design document is good and I don't think any design pattern needs to be followed as very few changes are being made. 
0,The design makes use of the Google charts tool to generate visual charts for specific criteria set. Based on the design flow, it appears that the functionality can be consistently performed to generate the visual graph for the instructor.
0,Yes, the design appears to be sound and uses appropriate design principles.
0,Yes the design is pretty simple and inclusion of screenshot enhances the clarity of what the team has achieved in terms of the required changes. 
0,Design is simple and easy to understand.
0,Yes, the design is simple and easy to understand. I can easily know what they will do through their doc.
0,The design appears to be very simple and well written. They have explained the use case diagram very well. also they have added visualizations.
0,yes, the design is simple and easy to understand 
0,The team is using external tools to do the work and its clear and easy
0,Using google charts is a good idea.
0,From the reasons provided for choosing the Google charts tool, and it's effectiveness, it can be integrated into the system functionality easily making the design simpler to be executed.
0,Yes, design involves google charts API and seems very simple.
0,Yes the design flow and the screenshots very clearly describes the changes made to the system.
0,Flow diagram explains the flow correctly.
0,Yes, they have used visualization to help people understand their design.
0,They have worked on their weak point. Earlier their solution does not seem cogent but I would say now they have made good progress.
0,The sample data visualizations is good. The way they have given visualizations for sample data is nice. easier to understand and good.
0,The team already has mockups for their design.
0,The visualization is great, the screenshots clearly indicate the proposed output of the project.
0,Really good visualization provided.
0,According to the team "The specification of the project does not require us to use automated tests" but they plan to test the modified ruby code or the new features using the RSpec testing framework. Overall, the test  plan sounds good 
0,No tests are required for the project as stated
0,This team did not require any tests.
0,The design document does not include a test plan as testing requirement is very minimal since most changes are in view.
0,The test plan section specifies that it does not require performing any automated tests. However, since the new functionality of adding a visual diagram, the team would modified ruby code for the functions added to the grades_controller.
0,Yes, changes to be made are explained clearly. Document is very clear, includes necessary diagrams, mock-ups and everything possible to make anyone understand what the issues are and what team is planning to do to resolve them. Everything is included in a proper order like for each issue there is a separate flowchart and mock-up. No suggestions required.
0,yes the authors have adaquately explained the changes to be made in the system.
0,The document is clearly and neatly written. All the necessary sections are present with good explanations.
0,Changes are well explained with good visual aids.
0,They have explained every change they want to make to fix the issue. The diagrams, in turn, help a lot to understand the flow of the system.
0,Yes the authors have adequately explained all the changes that need to be made. Each issue has a separate list of changes to be made and which files need to be edited.
0,The changes are very well documented. For each issue what are the files that needs to be changed is mentioned appropriately. The overall design looks efficient and avoids any duplication. Good Job!
0,Yes, they have been thorough in their approach and this has been a project implemented to perfection. They have not only given proper UML diagrams and the like, but they have also implemented the code and showcased in the "Test Plan" and the "Proposed Design" section. 
0,In round one, Team has well explained their approach and how are they going to do it. In this round, they have included detailed information and mock UI. It was easy to relate their approach. Their test plan is also thorough. I think the team would definitely be able to incorporate the new changes. Good job guys! 
0,The design was well explained in this design doc.
0,Well explanation on problem statement. UML diagrams, flow charts given. Detailed explanation on problem statement. 
0,yes!
0,Yes, the document seems to be perfect. It does follow all the appropriate principles and patterns. No suggestions required.
0,As far as the issues are concerned, the solutions do seem logical.
0,The design is apt following the principles and are self-explanatory
0,Yes the design appears to be sound and the flow diagrams illustrate the flow of control very well.
0,All good design principles are being followed where necessary.
0,The design is perfectly well depicted in the form of the Logical Flow diagram they have been thorough in pointing out the application flow in the Proposed Design section so as to elucidate the problem statement.
0,The design appears to be neat. 
0,The design appears to be sound following the appropriate principles and patterns.
0,Yes, well designed document. UI mock-ups given. It is structured. 
0,sound. so many diagrams.
0,Yes, it is the simplest design and minimal work which is required to resolve the issues. It is very clearly explained. One can clearly understand the problem statement and the proposed solution for the same. The design document is properly structured as well. 
0,design is simple and easy to understand.
0,Yes, simple straightforward solutions.
0,The diagrams are very basic and covering the entire scope which is a good work by the team
0,Yes the design is robust and simple to understand. Each class and view only handles a specific functionality i.e it is modularised.
0,Yes the design is straight forward and easy to understand.
0,The design appears to be simple given the task at hand.
0,Yes, the design is a very simple and effective representation of the problem statement and they serve a good representation on how they are working and implemented the changes to the staggered deadlines assignment section. 
0,Undoubtedly, I like their color coding approach. It's something very simple and apt for the current system.
0,The design seems simple and clear.
0,very clear
0,Yes, the provided diagrams deliver sufficient information about the implementation. Flowcharts and mock UIs screenshots give a perfect picture of how the system will be after the required changes. No suggestions required.
0,flowcharts are drawn which describe the flow how the system will work after implementation.
0,Great use of mock ups. Really appreciate it.
0,Yes, they have added mock UI screenshots which is exactly what they are going to and should do.
0,Yes the diagrams clearly illustrate the proposed flow. Different diagrams are provided for different issues. One of the best wikis I have seen
0,Very good use of Class and Sequence diagrams to explain the entire design flow. It clearly conveys the thought  process of authors and the overall design.
0,Lots of great visualizations are provided that outline a good amount of detail.
0,The team has added their mock UI which shows they have thought about the changes and modification. Mock UIs of the screen shows they are halfway the project. 
0,Yes, design is informative. Change proposal is detailed. It describes well about how changes are to be implemented.
0,The diagram is perfect and clear
0,Yes, design does include a well-described test plan. The provided tests will surely test the functionalities which will be implemenedt. The test plan is represented in a wonderful manner including pre-steps and different testing expectations. Great work. No suggestions are required.
0,The test plan is comprehensive.
0,They have covered all the test plans along with detailed steps.
0,The test plan is thorough and contains lots of detail that will make it easy to design RSpec tests in the future.
0,The Test Plans are thorough and they gone ahead and shown it in detail by breaking them into steps such as pre-steps, Functional, UI and Performance Testing. This is a very good way to achieve in-depth analysis of the problem and check how effective the solution is.
0,I have to say their test plan includes user interface testing, performance testing, database testing etc. I have to say they have worked really hard for it. I have not yet come across any team who has a test plan like this. 
0,An appropriate test plan is included in this design doc.
0,yes the test coverage seems good
0,After the first review, the design has improved significantly. The proposed design clearly defines the changes being made by the team.
0,Yes, the proposed solutions part clearly stated that they will go through each review to compare the new review score, etc, and then they will store the review URL. However, the solution is not concrete enough and is a little bit hard to follow. It should be great if there's more details in stating about how to loop through each reviews.  
0,They have a paragraph saying what they are going to do, but it could be broken up into parts with images for better understanding
0,The authors have explained well what changes they wish to make and how they plan to implement those changes. I would suggest them to add more details like, "where do they store the list of responses more than the notification threshold". Overall good job.
0,A format of the proposed email to be sent would be helpful
0,Yes, they include this part in the Proposed Solutions field. It would be better if they use visualization to let the readers better understand the flow.
0,The team has provided a code snippet which includes solution to their problem statement. They have described the code and their proposed changes
0,I know exactly what this team is doing.
0,Yes, the problem statement and the proposed changes have been clearly explained.
0,The design has improved and updates has been done and it is easy to comprehend the changes to be made to the system.
0,There has been a significant improvement in the level of details provided. The author can further improve the document by providing the details of the design pattern to be used.
0,Design is okay
0,Design does seem to be sound, but complex. As mentioned in the earlier review, I am unsure if looping over each review is the correct thing to do or not. Maybe the team discussed this with the mentor and decided against it as no new information has been added in the document. If so, I would only suggest the team to include the complexity of the design in the document.
0,The design seems workable. Maybe they can come up a more sound design. For example, they can try many ways to define the notification limit.
0,By looking at the flow-charts and UML diagrams submitted by the team, their solution appears to be sound.
0,It seems as though this team's approach was well designed.
0,The design seems to be pretty straightforward.
0,The design is simple, although it could be better if it has more concrete examples.
0,Yes, the design is as simple as it can get. Understanding the principle is not hard. But making it simple should also not make it costly. Good work to the team if the instructors were looking for something this simple :)
0,Yes, it simple but some parts are not easy to understand.
0,The design is simple and really better than before.
0,The team has provided diagrams that make it easier for the reader to understand the workflow of the system and the changes that they have proposed to implement the solution.
0,The way the team plans to loop through each review to calculate a review score seems slightly more complex than necessary, but I agree with them taking this apporach as it will allow them to break down the reason why the scores are different.
0,The design does appear to be simple, as they have not planned to modify any of the existing methods. Their new method will interact with Response, AssignmentQuestionnaire model, and then link the assignment to the review in the email. However, they have not mentioned if they have planned any data structure/variable to store the assignment link and pass it on to the method where email notification will be sent. But, i suppose that storing it in a variable will suffice. 
0,The design and application flow appear to be as simple as possible, as well as the proposed code changes snippet provided.
0,The design seems simple.
0,The author uses the UML diagram to properly describe the system. 
0,Yes, the use of visualization is great.
0,They used the UML diagrams, it really help me a lot when reading the wiki page. Maybe they can also make diagrams about the changes they are going to make.
0,As mentioned, the team has provided UML diagrams stating the two actors in their system- Student, Instructor and their interaction with the email module and database.
0,The visualization aids used currently are application flow diagram, and use cases. They are useful to understand the scenario of the problem statement. However, a sequence or a communication diagram will really be beneficial to understand how the method interfaces with the other  methods. This will help identify if the new method impacts other functionalities and will portray the proposed solution efficiently.
0,There are UML and application flow diagrams included with the design document, which serve to make the proposed design changes much clearer.
0,Proper diagrams are used by the team. 
0,The document does contain a test plan which can definitely be extended to incorporate certain negative test cases.
0,They have one scenario. maybe a few more could help better test their work
0,some additional tests can be added
0,They did include a test plan. It would be better if they also test the instructor side.
0,The test plan seems overly simplistic. It only tests whether the team's changes work in the most drastic scenario possible. It seems like they should have more boundary value tests and more test cases to account for their new method of looping through the reviews to compare new reviews with previous ones.
0,Test plan is as simple as required for the problem statement in question.
0,Design doc includes the test plan but more detail on negative test cases would have been better.
0,Yes. The authors do have an adequate explanation. 
0,they have also added the UML diagrams which makes things a lot more clearer
0,I cannot remember what the explanation looked like last week, but the read through this week felt very clear. The organization of the article felt like it followed the logic of a design project. The problem statement felt like it was reduced to a clear, concise, set of requirements that are attainable. The addition of the program flow diagram and an explanation as to why there is no UML diagram also helped to cement my understanding and set my expectations.
0,Good work on adding UML diagrams. Now the problem is very well explained.
0,The authors have lucidly explained the changes that are to be made to the system. They show the current state of the system and the expected state which includes a new button to Analyze the review content in the segmented text box. The authors have specified 2 files that they plan to modify namely the view file response.html.erb and a partial _self_review.html.erb. The team clearly show the format of the response popup with suggestion metrics that capture sentiment score, sentiment tone, whether suggestions are present or not, chance of suggestions, volume of text and the volume of text without stop words. They also propose to improve the response time of extracting the output from the API.One suggestion is that the team could have touched upon the working of the suggestion detection algorithm though it is not part of their current implementation. They do mention that it is a black box and have included a link to the deployed NLP project for suggestion algorithm, where users can test the suggestion metrics generated for custom text.
0,yes they have explained it very well.
0,The changes proposed are well explained and clearly indicate the intended output.
0,The authors have adequately explained changes made to the system. They have explained the problem and proposed solution clearly and supported it with appopriate diagrams.
0,Very detailed and precise. Solution explained thoroughly. 
0,They explained from their requirements and in their flow, that they only need to plan to edit the View, so there is no need for a UML.
0,Documentation is proper. Team could have added DB tables as well in the design doc.
0,Since the task is to integrate a web service in the existing system, the design mentioned is sound and reasonably primitive. 
0,yes it does based on the proposed solution.
0,The design is good. However, there is no scope of using bad principles since the number of files that will be affected are minimal and restricted to just 2.
0,The design doc is sound and I believe no design patterns are required for this project.
0,The design appears sound.
0,Yes, design seems fit. More insight required on the algorithm itself and how it will be implemented.
0,Yes, the design in its current form seems straight forward.
0,The Requirements were distilled down to the fewest simple terms possible without over-generalization. It felt like they just gave me the tl;dr statement without any fluffy words to waste my time, and also feels like they have a strong grasp over what they are expected to accomplish.
0,Yes, the design appears to be simple. 
0,Yes the design is simple and illustrated well with the use of wireframes showing the current, expected state and UML diagram showing the flow diagram. It depicts that once the Analyze button is clicked, the request is sent as JSON which contains the text typed by reviewer in the segmented textbox to the API which generates the suggestion metrics. The response contains the suggestion metrics like sentiment score, sentiment tone, presence of suggestions, chance of suggestion, total volume of text and volume of text without stop words. 
0,Yes, the design is simple and clear. The task is to integrate a web service which returns a result in JSON format.
0,yes it does appear to be simple as possible.
0,The design is as simple as it could be since the flow of logic is pretty linear and there is no scope of complexity. The changes also seems to be restricted to just one file which is good and in keeping with sound principles.
0,The actual project work might not have been started yet so the code modifications have not been mentioned. But the files to be modified seem appropriate.
0,The design appears very simple.
0,The project does not necessarily need diagramatic explanations but UML diagrams have been used which show implementation plan fairly well.
0,The Flow diagram mentioned in the document clearly explains the changes need to be done.
0,the screenshots of the Expertiza system are very helpful in understanding the problem and the solution
0,The program flow diagram and an explanation as to why there is no UML diagram also helped to cement my understanding and set my expectations.
0,UML diagram explains the changes.
0,Yes, this team has made the best use of visualization tools that can be applied to their project. They have clearly shown wireframes of the current response page juxtaposed with the expected state with the Analyze button next to each rubric. The document also includes the flow of the project represented as UML diagram. Once the Analyze button is clicked the request text is sent to the suggestion detection algorithm. The API returns the response which contains the suggestion metrics like sentiment score, sentiment tone, presence of suggestions, chance of suggestion, total volume of text and volume of text without stop words. 
0,The use of visualization is not pivotal for this task as it can be explained theoretically as well. But still, the team has made an effort to present the task with help of a flow diagram.
0,yes, very well explained.
0,The screenshots clearly display where the output would be displayed.
0,The UML diagrams clearly descibes the design of the solution. The screenshots explain changes required in the system adequately.
0,Yes UML diagram is provided and it is detailed. Flow diagrams explains how suggestions will be given. 
0,I think more tests can be added
0,The use cases appear to offer a quality, general test approach to see if their design does what it should.
0,Test cases have been added. 
0,The team has included test plan in Connextra format by including the feature specification and two scenarios- one happy path and one to capture the edge case of response generated with no text. No more test cases can be added to check if the team's part in the project is implemented well. Some test case scenarios that check the efficiency of the suggestion detection algorithm (for example: to detect review responses that generate the generalized suggestion for all the projects) can be included.
0,the tests given tests there changes, which is enough.
0,The test plan is complete. The team plans to test the two possible cases:1. When the review is blank. Response should be no review in text box.2. When review is present response is the result of suggestion metrics analysis. The team is right in testing just these two cases because they should not test if the API itself is returning a correct response as that would be against testing rules.
0,the test cases seem appropriate given that the only thing which needs to be tested is if the suggestion detection algorithm is displaying the intended output or not.
0,The design doc includes the test plan which covers changes in the functionalities.
0,Their test plan includes a test case for successfully displaying the pop-up text message as JSON, and displaying suggestion metrics for the review segment( a block of review, a comment box). Try to include test cases where a review message is absent, i.e. the code should not break for empty review segment. Include a test case where review segment has a suggestion, and test if the output says "Suggestion present". Include a negative test case for the the suggestion, where a suggestion is not given by the reviewer, and test that the output says "suggestion absent".
0,Yes. Functional tests with scenarios provided.
0,Good additions on the purpose and use case of your work.
0,The Introduction and Proposed Solution sections appropriately describes the problem and the approach to resolve the issue. The changes proposed can be concisely implemented into the system. They have enlisted use case diagrams for the entire scenario to be added to the rubrics.
0,The desgn looks okay
0,The team has analysed the existing design principles used in the project and has appropriately defined the design for the new changes which will be made. the design looks good and easy to implement.
0,The design seems to be clear such that it provides the implementation procedure to be followed to include the feature of adding student generated questions to the rubrics.
0,The design is sound.
0,As per the documentation, the design seems simple.
0,Looks very doable
0,Yes from the diagrams I could say, design and design flow is simple enough and team has well understood the changes to be made.
0,Yes, the design appears to be very simple
0,Yes, the design is very simple and easy to follow.
0,The design appears to be simple and straightforward to implement. The team has also included all the files that will be changed to achieve the desired results
0,The design appears simple to be executed based on the procedure specified and the list of diagrams given that it justifies the implementation to be carried out.
0,Team has provided good amount of use case diagrams, which actually are heart of the whole design doc and explains the design and approach well.
0,They have made some UML diagrams which could describe the changes.
0,Yes, they use a lot of charts to explain the use cases. Great job!
0,The use case diagrams provided to describe the role of each user through the flow and specify how each case maps to another in order for the desired functionality to be achieved.
0,The diagram is logistic and it's easily to tell the logic behind the changes. By reading these diagrams, I can get an understanding of this project quickly.
0,Yes, the flow charts are complete and readable. All cases are included.
0,Yes they have
0,explained details about their solution and what will be changed after their implementation.
0,Yes, changes to be made are clearly explained
0,They have explained in detail about the proposed changes with individual diagrams for each case. It is very thorough in explanation
0,Great documentation. Tbh, the best i have seen yet.  
0,They have documented it in a very rehearsed manner
0,The design document is really well written. It clearly describes what needs to be done, how it needs to be done and what code changes need to be made. The files and tables affected are clearly listed.
0,The authors have prepared the design document quite well.
0,The author has explained extensively about the changes to be made to the system.
0,Yes, the problem definition and the proposed solution are pretty clear. They also provide some diagrams to explain their project which is helpful.
0,Their introduction and problem definition are clearly enough to explained the changes.
0,With er diagram and database details, the design looks good. 
0,The design follows appropriate principles and patterns as required
0,The project consists of making a search function to select specific users, assignments etc using some criteria. So they're creating a search functionality for individual models.
0,Yes the proposed changes make only required additions.
0,Yes it follows appropriate principles. 
0,The design appears to be sound. It is really well structured. It is easy to follow. It clearly states the changes to be made and the files affected by these changes.
0,The design appears to be sound and clearly indicates the proposed code changes.
0,Yes, the design is appropriate.
0,Yes, they provide solution for different problem situations.
0,Yes it is fairly simple
0,no complex design, only few places need to add functionalities, and they all very similar.
0,The design is simple, although the ER diagram takes a little time to decipher since it is quite big
0,Yes, the approach described in the design document is easy enough to understand. They have also backed their decision to go with the second approach with appropriate reasoning.
0,The design is simple and quite comprehensive covering lots of methods of searching.
0,YEs based on the proposed solution it appears to be simple as possible.
0,The design document appears really easy to follow. A person who is new to the project can get the summary of what is happening just by reading and going through the design document.
0,Yes, easy to understand.
0,The design has been explained in a simple way. The team has explained the design using use cases which is easy to comprehend.
0,Yes, the design is simple and feasible.
0,Yes, clear and simple.
0,They have used apt visual aid like UML diagrams and screen shots
0,No class diagram, but there is er diagram and tables for database, it looks a little complex, but give the idea of what is involving. 
0,Necessary diagrams are included.
0,The team has communicated their design clearly via use-case diagram and a class diagram with a description of various database tables involved.
0,Excellent use of visualizations. They already had an overall flow chart and this time additional tables and UML has been added. Best of what I've seen.
0,Yes they do explain everything. The er diagram, use case diagram, relevant tables explain everything.
0,The project has great visualization. A lot of UML diagrams have been included which makes the understanding the project easier. The UML diagrams also clarifies what work is to be done.
0,The pictures clearly demonstrate the changes being made to the system, although it is apparent where the changes would be visible. it would be nice if a image was posted having the current expertiza deployement to show where the changes would be visible
0,The team has described changes using use case and ER diagrams to clearly explain the system.
0,The authors add more diagrams to help to explain the change they are going to make. The relevant tables are really helpful.
0,test plans walk through necessary functionalities.
0,Yes, a good test plan is also included
0,The test cases described will cover the functionalities described given that they write multiples tests with the same structure as described for all search criteria. 
0,A concrete test plan is also added and it has both UI and automated test details.
0,Yes this is done very well.
0,They include a very described test plan. It has everything proper. What framework, what tests all this information is well included. They clearly specify what they aim to test.
0,The test plan is pretty good and it has both UI tests and automated tests. 
0,The test plan is designed efficiently. They have described the UI tests and automated tests which cover most of the cases. 
0,Two types of testing are listed, and the authors list all the cases they need to test.
0,Yes they have
0,explained details about their solution and what will be changed after their implementation.
0,They have explained in detail about the proposed changes with individual diagrams for each case. It is very thorough in explanation
0,yes the authors have adaquately explained the changes to be made in the system.
0,The document is clearly and neatly written. All the necessary sections are present with good explanations.
0,Changes are well explained with good visual aids.
0,They have explained every change they want to make to fix the issue. The diagrams, in turn, help a lot to understand the flow of the system.
0,Yes the authors have adequately explained all the changes that need to be made. Each issue has a separate list of changes to be made and which files need to be edited.
0,The changes are very well documented. For each issue what are the files that needs to be changed is mentioned appropriately. The overall design looks efficient and avoids any duplication. Good Job!
0,Yes, they have been thorough in their approach and this has been a project implemented to perfection. They have not only given proper UML diagrams and the like, but they have also implemented the code and showcased in the "Test Plan" and the "Proposed Design" section. 
0,In round one, Team has well explained their approach and how are they going to do it. In this round, they have included detailed information and mock UI. It was easy to relate their approach. Their test plan is also thorough. I think the team would definitely be able to incorporate the new changes. Good job guys! 
0,The design was well explained in this design doc.
0,Well explanation on problem statement. UML diagrams, flow charts given. Detailed explanation on problem statement. 
0,yes!
0,Yes, the document seems to be perfect. It does follow all the appropriate principles and patterns. No suggestions required.
0,As far as the issues are concerned, the solutions do seem logical.
0,The design is apt following the principles and are self-explanatory
0,Yes the design appears to be sound and the flow diagrams illustrate the flow of control very well.
0,All good design principles are being followed where necessary.
0,The design is perfectly well depicted in the form of the Logical Flow diagram they have been thorough in pointing out the application flow in the Proposed Design section so as to elucidate the problem statement.
0,The design appears to be neat. 
0,The design appears to be sound following the appropriate principles and patterns.
0,sound. so many diagrams.
0,Yes, it is the simplest design and minimal work which is required to resolve the issues. It is very clearly explained. One can clearly understand the problem statement and the proposed solution for the same. The design document is properly structured as well. 
0,design is simple and easy to understand.
0,Yes, simple straightforward solutions.
0,The diagrams are very basic and covering the entire scope which is a good work by the team
0,Yes the design is robust and simple to understand. Each class and view only handles a specific functionality i.e it is modularised.
0,Yes the design is straight forward and easy to understand.
0,The design appears to be simple given the task at hand.
0,Yes, the design is a very simple and effective representation of the problem statement and they serve a good representation on how they are working and implemented the changes to the staggered deadlines assignment section. 
0,Undoubtedly, I like their color coding approach. It's something very simple and apt for the current system.
0,The design seems simple and clear.
0,very clear
0,Yes, the provided diagrams deliver sufficient information about the implementation. Flowcharts and mock UIs screenshots give a perfect picture of how the system will be after the required changes. No suggestions required.
0,flowcharts are drawn which describe the flow how the system will work after implementation.
0,Great use of mock ups. Really appreciate it.
0,Yes, they have added mock UI screenshots which is exactly what they are going to and should do.
0,Yes the diagrams clearly illustrate the proposed flow. Different diagrams are provided for different issues. One of the best wikis I have seen
0,Very good use of Class and Sequence diagrams to explain the entire design flow. It clearly conveys the thought  process of authors and the overall design.
0,Lots of great visualizations are provided that outline a good amount of detail.
0,Yes, the diagrams are clear to show how the system works. But they, are not so lucid so as to show in the diagram how they are going to implement the changes in the system.   
0,The team has added their mock UI which shows they have thought about the changes and modification. Mock UIs of the screen shows they are halfway the project. 
0,The class diagram is very useful, and the mock UI with indication on it make it more useful. 
0,Yes, design is informative. Change proposal is detailed. It describes well about how changes are to be implemented.
0,The diagram is perfect and clear
0,Yes, design does include a well-described test plan. The provided tests will surely test the functionalities which will be implemenedt. The test plan is represented in a wonderful manner including pre-steps and different testing expectations. Great work. No suggestions are required.
0,The design includes test plan.On the testb plan provided it seems like they will test the functionalities. But nothing mentioned on how they will write.
0,The test plan is comprehensive.
0,They have covered all the test plans along with detailed steps.
0,The test plan is thorough and contains lots of detail that will make it easy to design RSpec tests in the future.
0,The Test Plans are thorough and they gone ahead and shown it in detail by breaking them into steps such as pre-steps, Functional, UI and Performance Testing. This is a very good way to achieve in-depth analysis of the problem and check how effective the solution is.
0,I have to say their test plan includes user interface testing, performance testing, database testing etc. I have to say they have worked really hard for it. I have not yet come across any team who has a test plan like this. 
0,An appropriate test plan is included in this design doc.
0,yes the test coverage seems good
0,The authors have explained the required changes in a concise manner.
0,Yes, the project design is meaningful and clear. The solution is well laid out.
0,Yes. 
0,Yes, the authors have specified the changes to be made in the system under the proposed project design. The changes have been included as sub heading with sub points under each. The authors have also included a relevant files heading that includes the files where changes are made.The changes involve allowing the instructor to change language for a course. In the process a separate language column will be added to the Courses table and a dropdown of languages in the Edit Courses page where a language can be chosen. Once the instructor updates the Edit Course page with the chosen language, the static strings in the Expertiza application will be changed to the chosen language. For adding multi-language support, Google Translate and Rails Internationalization API is being used. Also, two yaml files- en.yml and hi_EN.yml contains the translated strings for the respective languages. The routes.rb file and all the view files will be correspondingly modified to show the different languages after reading from the yaml files. 
0,The explanations provided by the authors seems to be good. They have referred the Rails Internationalization API guide which provides sufficient explanation for multi language support. They have mentioned the different elements that will be changed and how an instructor would proceed to change the language of the course verbally. In addition they have also added mock-ups to visually represent this information.
0,The explainations are succinct. The description in technical design section and before-after images clearly shows what the project intends to do.
0,The changes are clearly mentioned , they are very clear what and where to make changes. Only suggestion would be to include more about how these changes are going to be done. 
0,Adding a languages column to the Courses table makes sense and so does leveraging third-party APIs to handle the translation.
0,The design is as required, following the appropriate patterns.
0,As far as the issues are concerned, the solutions do seem logical.
0,It is sound.
0,Looking at the design there seems to be high use of cohesion  and low coupling. It's good that all the changes are restricted to the routes.rb and config/locales files so that the resulting changes won't be messy and ruin the rest of the system. Also this helps in refactoring if needed in the future as there will be limited number of files to be changed.
0,Yes, the design appears to be as simple as possible. The team has mentioned what needs to be done and how they plan to implement it.
0,The changes have been explained well enough to minimize the complexity. The implementation seems extremely clear.
0,Yes, simple straightforward solution.  
0,Yes. Only view files are involving since this topic is about changing the language.
0,The design appears to be very simple. The team has avoided unnecessary complications by adhereing to the Rails Internationalization guide. They have also avoided making unnecessary changes to many files and kept the changes to the minimum number of files required.
0,The design is really crisp and easy to understand. One can clearly understand the problem statement and the proposed solution for the same. The design document is properly structured as well.
0,Yes the current design looks simple and wholesome. Seems they have done a good job in implementing understanding how rails internationalization works. Good job   
0,The visualization clearly and effectively conveys the translation capability which the project proposes to provide to Expertiza.
0,Yes, the provided diagrams deliver sufficient information about the implementation.
0,The necessary visual inputs to aid explanation are present.
0,mock UIs screenshots give a perfect picture of how the system will be after the required changes.
0,There were mock-ups of the final result of the project however there were no UML diagrams. I think the UML diagrams are not necessary for this project since the flow of how the instructor will change the language is fairly simple and one can understand it by just reading the document. Maybe they could have done a mock-up of how some of the other views would have looked like once the language has changed. Especially the pages with flash messages if any. Currently they have just shown the proposed changes on the page where the instructor will change the language.
0,The team have written a test plan. But I feel more test cases could have been written to test the edge cases. Also the team could have explained their test cases in more detail.
0,A testplan that covers the entire functionality has been devised, it seems sufficient to test the change.
0,The test plan is compatible with the problem statement. 
0,Test plan have been shown clearly and tests are easy to understand.
0,Yup, because it only tests the ability to change the language. 
0,The team explained everything required and not leave anything behind.
0,Yes, they have been thorough in their approach and this has been a project implemented to perfection. They have not only given proper UML diagrams and the like, but they have also implemented the code and showcased in the "Implementation" section. 
0,The wiki page is very explanatory and the authors have explained the issue and fix very well
0,Yes the required changes for the reviews is explained clearly. The design for each required change is also explained in depth now.
0,The authors have clearly mentioned the changes to be made using Problem Statement and Use Case Diagram.
0,Yes the author has made a great attempt to explain the changes by trying to explain the changes required with the help of the application flow diagram and the use case diagram and how the changes were implemented by giving screenshots of the changes.
0,The documentation done by the team is very detailed and explains the problem statement very clearly. They have described the functionality change in bullet points which makes it very easy to understand the sub parts required to achieve the main functionality in simple terms. 
0,I like the part where the peer review has been given more weightage in comparison to self review in the composite score.
0,The design appears to followed appropriate principles and patterns.
0,The design is perfectly well depicted in the form of the use case diagram in which the users are student and instructor and the data base is where the actions are stored in the database and the retrieved from the same for the case of reviews information.  Also, they have been thorough in pointing out the application flow in the Application Flow section so as to elucidate the problem statement.
0,Yes
0,Yes the design is very simple and explains the changes required in a very clear manner
0,The flow and UML diagrams are well designed and explain a lot about the system flow. addition of detailed use case helps support the diagram
0,The design seems to be following the appropriate principles and uses the appropriate guidelines. They usecase diagram mentions each actor and the role associated.
0,The design is as simple as possible.
0,Yes, the design looks simple , no complications and the screenshots are really helpful.
0,Yes the design is simple and easy to understand for others too. The explanation along with diagrams provides enough information to understand the use-case.
0,Yes, the design is a very simple and effective representation of the problem statement and they serve a good representation on how they are working and implemented the changes to the review section. 
0,The design is simple and very much in depth. and follows the principle
0,es the design is very simple and explains the changes required in a very clear manner
0,Yes, the design appears to be as simple as possible. The team has mentioned what needs to be done and how they plan to implement it. Hence, it is easy to understand.
0,Application flow, use case diagram are both very useful to describe the changes, 
0,Yes the visuals provided with this doc are clear and just by that a lot can be understood.
0,The use case diagram and application flow diagram very well explains the changes made to the system.
0,The chart and diagrams are well done and help explain how the code will work.
0,Basic UML used
0,Some UI screenshots are added along with design diagrams which describe the system. The UI or mock UI helps in better understanding
0,The visualizations seem to be complete. The team has included an application flow diagram, a use case diagram and also a screenshot of how the actual result should look. So, in my opinion, good job done!
0,The UML diagrams are detailed and explained well. Suggestion: The application flow could be explained in points so that the reviewer has a clearer view of what is the sequence of events occurring.
0,The team has done tremendous job in adding visualization aids. They have added application flow diagrams for every actor along with the UML diagram of the student and instructor. They have also included screenshots to explain the code functionality implementation of enabling self reviews and score pages. This makes the document descriptive and very easy to read and understand.  
0,A test plan is included in this design doc.
0,After the first review, the design has improved significantly. The proposed design clearly defines the changes being made by the team.
0,Not enough explanation
0,A format of the proposed email to be sent would be helpful
0,I know exactly what this team is doing.
0,Yes, the problem statement and the proposed changes have been clearly explained.
0,The design has improved and updates has been done and it is easy to comprehend the changes to be made to the system.
0,Design is okay
0,By looking at the flow-charts and UML diagrams submitted by the team, their solution appears to be sound.
0,It seems as though this team's approach was well designed.
0,The design seems to be pretty straightforward.
0,The team has provided diagrams that make it easier for the reader to understand the workflow of the system and the changes that they have proposed to implement the solution.
0,The design and application flow appear to be as simple as possible, as well as the proposed code changes snippet provided.
0,The design seems simple.
0,The author uses the UML diagram to properly describe the system. 
0,Yes, the use of visualization is great.
0,They used the UML diagrams, it really help me a lot when reading the wiki page. Maybe they can also make diagrams about the changes they are going to make.
0,As mentioned, the team has provided UML diagrams stating the two actors in their system- Student, Instructor and their interaction with the email module and database.
0,The visualization aids used currently are application flow diagram, and use cases. They are useful to understand the scenario of the problem statement. However, a sequence or a communication diagram will really be beneficial to understand how the method interfaces with the other  methods. This will help identify if the new method impacts other functionalities and will portray the proposed solution efficiently.
0,Proper diagrams are used by the team. 
0,There are UML and application flow diagrams included with the design document, which serve to make the proposed design changes much clearer.
0,The authors have explained the required changes in a concise manner.
0,Yes, the project design is meaningful and clear. The solution is well laid out.
0,Yes. 
0,Yes, the authors have specified the changes to be made in the system under the proposed project design. The changes have been included as sub heading with sub points under each. The authors have also included a relevant files heading that includes the files where changes are made.The changes involve allowing the instructor to change language for a course. In the process a separate language column will be added to the Courses table and a dropdown of languages in the Edit Courses page where a language can be chosen. Once the instructor updates the Edit Course page with the chosen language, the static strings in the Expertiza application will be changed to the chosen language. For adding multi-language support, Google Translate and Rails Internationalization API is being used. Also, two yaml files- en.yml and hi_EN.yml contains the translated strings for the respective languages. The routes.rb file and all the view files will be correspondingly modified to show the different languages after reading from the yaml files. 
0,The explanations provided by the authors seems to be good. They have referred the Rails Internationalization API guide which provides sufficient explanation for multi language support. They have mentioned the different elements that will be changed and how an instructor would proceed to change the language of the course verbally. In addition they have also added mock-ups to visually represent this information.
0,The explainations are succinct. The description in technical design section and before-after images clearly shows what the project intends to do.
0,Adding a languages column to the Courses table makes sense and so does leveraging third-party APIs to handle the translation.
0,The design is as required, following the appropriate patterns.
0,As far as the issues are concerned, the solutions do seem logical.
0,It is sound.
0,some additional tests can be added
0,Looking at the design there seems to be high use of cohesion  and low coupling. It's good that all the changes are restricted to the routes.rb and config/locales files so that the resulting changes won't be messy and ruin the rest of the system. Also this helps in refactoring if needed in the future as there will be limited number of files to be changed.
0,Yes, the design appears to be as simple as possible. The team has mentioned what needs to be done and how they plan to implement it.
0,The changes have been explained well enough to minimize the complexity. The implementation seems extremely clear.
0,Yes, simple straightforward solution.  
0,Simple and easy to understand steps.
0,Yes. Only view files are involving since this topic is about changing the language.
0,The document does contain a test plan which can definitely be extended to incorporate certain negative test cases.
0,The design appears to be very simple. The team has avoided unnecessary complications by adhereing to the Rails Internationalization guide. They have also avoided making unnecessary changes to many files and kept the changes to the minimum number of files required.
0,They did include a test plan. It would be better if they also test the instructor side.
0,The design is really crisp and easy to understand. One can clearly understand the problem statement and the proposed solution for the same. The design document is properly structured as well.
0,Yes the current design looks simple and wholesome. Seems they have done a good job in implementing understanding how rails internationalization works. Good job   
0,No visualization or diagrams are necessary.
0,The visualization clearly and effectively conveys the translation capability which the project proposes to provide to Expertiza.
0,Yes, the provided diagrams deliver sufficient information about the implementation.
0,The necessary visual inputs to aid explanation are present.
0,mock UIs screenshots give a perfect picture of how the system will be after the required changes.
0,Test plan is as simple as required for the problem statement in question.
0,Design doc includes the test plan but more detail on negative test cases would have been better.
0,The team has provided a code snippet which includes solution to their problem statement. They have described the code and their proposed changes
0,A testplan that covers the entire functionality has been devised, it seems sufficient to test the change.
0,The test plan is compatible with the problem statement. 
0,Test plan have been shown clearly and tests are easy to understand.
0,Yup, because it only tests the ability to change the language. 
0,The design includes a brief test plan that lists three scenarios namely- the regular steps to update Course page to Hindi; checking if Edit Assignment page has also been translated and checking if other pages are translated. Some more test cases like checking if the change in language is reflected from a student login could have been included. The authors specify that Rspec and Capybara is used for testing the new feature.
0,As far as the issues are concerned, the solutions do seem logical.   
0,Yes, simple straightforward solutions.
0,Great use of mock ups and UML diagrams. It makes understanding the issues easier. Looks like a great amount of thought has gone into making it. 
0,Yes, the authors have nicely explained the changes to be made. This includes, the flow diagrams, UML diagrams and many of the screenshots. Good work team. Suggestion: Could include screenshots, if any, of the test plans implemented.
0,The design looks good. All the issues are stated and addressed nicely.
0,The design does not seem that complex. The team has clearly mentioned the issues and the way to go about it.  
0,The visualization is great. All the flow diagrams and required screenshots are in place as required.
0,Yes, they have been thorough in their approach and this has been a project implemented to perfection. They have not only given proper UML diagrams and the like, but they are yet to implement the code and showcase in the "UML Diagram for Review" section.     
0,  The design is perfectly well depicted in the form of the use case diagram in which the users are student and instructor and the data base is where the actions are stored in the database and the retrieved from the same for the case of reviews information.  Also, they have been thorough in pointing out the application flow in the Application Flow section so as to elucidate the problem statement. 
0,Yes, the design is a very simple and effective representation of the problem statement and they serve a good representation on how they are working and implemented the changes to the review section. 
0,Yes, the diagrams are clear to show how the system works. They have even gone a step ahead to show how they have thought of resolving the problem at each and every step of the Expertiza review section and the message popups they receive for the same. 
0,Yes, they have a working test plan in mind and also they have thought of the ways in which they are going to test the various edge cases for the various issues at hand.
0,The team has included all the details required to implement the given requirement. The wiki has complete details related to requirements , analysis of current designs and changes required to achieve the required functionality. overall great job !  The team did a great work in analyzing the issues and designing solutions for the issues. The UI mock ups are included for all the issues which makes the document very easy to understand.  
0,The team has analysed the existing design principles used in the project and has appropriately defined the design for the new changes which will be made. the design looks good and easy to implement. great work done !  
0,The design appears to be simple and straightforward to implement. The team has also included all the changes that will be made to achieve the desired results.  Great Work !
0,The team has included a lot of visual aids which complements the document making it a lot easier to understand.  Great work with the UI mockups / project design / UML diagrams.
0,Very well written document. Good job team.
0,Clearly explained with diagrams and UML diagrams.
0,The design is simple. 
0,Great work by the team on UML diagrams. 
0,As per the requirement document, test cases are not required.
0,Team have explained the Problem/Steps to Reproduce are really very clear. Solution part could have been explained better. Overall its a good work
0,The doc is very well written. Its like a blueprint to the project. Really appreciate the team efforts!
0,Since the project is aimed at fixing the issues, no design patterns need to be used.
0,Yes, they look well written and easy to follow with all the visual aids. 
0,the design is sound with appropriate principles and patterns.
0,yes, only a few files are being modified. 
0,A lots of visuals, very helpful when viewers walk through the design. 
0,Drastic improvements have been made to design doc. 
0,Yes, the deisgn appears to be totally sound. The changes proposed are very standardized, and follows appropriate industry standards.
0,Yes, the design is very simple, lucid and efficient.
0,The visualization is by far the best part of this writeup. Also, it's visualization is among the best I've reviewed till date. The author has put in a lot of efforts for the same. The diagrams make the architecture and the problem statement very simple to understand.
0,I understand what the team is supposed to do to the expertiza system.
0,It was weird that two of the bugs they were assigned don't exist, but that's not the team's fault.
0,This team consistently uses great diagrams that add to their documentation's clarity significantly.
0,The tests are really in depth for each issue the team will be fixing.
0,After the first review, the design has improved significantly. The proposed design clearly defines the changes being made by the team.
0,They have a paragraph saying what they are going to do, but it could be broken up into parts with images for better understanding
0,The authors have explained well what changes they wish to make and how they plan to implement those changes. I would suggest them to add more details like, "where do they store the list of responses more than the notification threshold". Overall good job.
0,A format of the proposed email to be sent would be helpful
0,Yes, they include this part in the Proposed Solutions field. It would be better if they use visualization to let the readers better understand the flow.
0,The team has provided a code snippet which includes solution to their problem statement. They have described the code and their proposed changes
0,I know exactly what this team is doing.
0,Yes, the problem statement and the proposed changes have been clearly explained.
0,The design has improved and updates has been done and it is easy to comprehend the changes to be made to the system.
0,There has been a significant improvement in the level of details provided. The author can further improve the document by providing the details of the design pattern to be used.
0,Design is okay
0,Design does seem to be sound, but complex. As mentioned in the earlier review, I am unsure if looping over each review is the correct thing to do or not. Maybe the team discussed this with the mentor and decided against it as no new information has been added in the document. If so, I would only suggest the team to include the complexity of the design in the document.
0,The design seems workable. Maybe they can come up a more sound design. For example, they can try many ways to define the notification limit.
0,By looking at the flow-charts and UML diagrams submitted by the team, their solution appears to be sound.
0,It seems as though this team's approach was well designed.
0,The design seems to be pretty straightforward.
0,The design is simple, although it could be better if it has more concrete examples.
0,Yes, the design is as simple as it can get. Understanding the principle is not hard. But making it simple should also not make it costly. Good work to the team if the instructors were looking for something this simple :)
0,The team has provided diagrams that make it easier for the reader to understand the workflow of the system and the changes that they have proposed to implement the solution.
0,The way the team plans to loop through each review to calculate a review score seems slightly more complex than necessary, but I agree with them taking this apporach as it will allow them to break down the reason why the scores are different.
0,The design does appear to be simple, as they have not planned to modify any of the existing methods. Their new method will interact with Response, AssignmentQuestionnaire model, and then link the assignment to the review in the email. However, they have not mentioned if they have planned any data structure/variable to store the assignment link and pass it on to the method where email notification will be sent. But, i suppose that storing it in a variable will suffice. 
0,The design and application flow appear to be as simple as possible, as well as the proposed code changes snippet provided.
0,The design seems simple.
0,The author uses the UML diagram to properly describe the system. 
0,Yes, the use of visualization is great.
0,They used the UML diagrams, it really help me a lot when reading the wiki page. Maybe they can also make diagrams about the changes they are going to make.
0,As mentioned, the team has provided UML diagrams stating the two actors in their system- Student, Instructor and their interaction with the email module and database.
0,The visualization aids used currently are application flow diagram, and use cases. They are useful to understand the scenario of the problem statement. However, a sequence or a communication diagram will really be beneficial to understand how the method interfaces with the other  methods. This will help identify if the new method impacts other functionalities and will portray the proposed solution efficiently.
0,There are UML and application flow diagrams included with the design document, which serve to make the proposed design changes much clearer.
0,Proper diagrams are used by the team. 
0,The document does contain a test plan which can definitely be extended to incorporate certain negative test cases.
0,They have one scenario. maybe a few more could help better test their work
0,some additional tests can be added
0,Yes, the doc contains test plan, but they are not specific.
0,They did include a test plan. It would be better if they also test the instructor side.
0,Test plan is as simple as required for the problem statement in question.
0,Design doc includes the test plan but more detail on negative test cases would have been better.
0,The authors have explained the changes in depth and with proper details.
0,Yes, the author has explained the scope of the project very clearly and has specified the changes to be made in the project to accomplish the goal.
0,The design seems pretty accurate, the schema of the database table records all the necessary details with reasonable granularity.
0,The design seems appropriate to the issue at hand
0,yes it does appear to be following appropriate principles.
0,Yes, design appears to be sound.
0,As approach described by the authors, design appears to be the simplest. It is concise and easy to understand.  
0,The authors have explained the changes in depth and with proper details.
0,Yes the design is simple and detailed thus explaining the required changes that would be implemented
0,Yes the author has explained the adequately the changes to be made to the system by giving a detailed flow diagram of the workflow of the the would be implementing the functionality of keeping a track of the review time of a student
0,The provided flowcharts are visually sufficient to display the changes made to the system.
0,Yes, the author has explained the scope of the project very clearly and has specified the changes to be made in the project to accomplish the goal.
0,Yes the changes are well explained
0,Explained very well.
0,Yes.
0,The design document was well-written initially too, and still is.
0,Great flowchart! It helps to see all the possible scenarios in a compact manner.
0,The design follows the required principle and the exact required patterns.
0,Yes the design is quite well understood and properly explained in a detailed manner through the flow diagram
0,The design seems pretty accurate, the schema of the database table records all the necessary details with reasonable granularity.
0,The design seems appropriate to the issue at hand
0,The test plan is provided in the functionality implementation describing the functionality and how it will be tested.
0,yes it does appear to be following appropriate principles.
0,Yes, design appears to be sound.
0,As approach described by the authors, design appears to be the simplest. It is concise and easy to understand.  
0,The project does not have any testing involved
0,The design follows a clear approach to the functionality, avoiding any uncertain flaws.
0,Yes the design is simple and detailed thus explaining the required changes that would be implemented
0,Yes, I think so.
0,It is clear and simple.
0,yes it does. they have given the proposed solution which appears to be simple.
0,The design appears to be simple and is easy to understand.
0,The provided flowcharts are visually sufficient to display the changes made to the system.
0,They have include a flow chart to illustrate how the part gonna work.
0,Great flowchart! It helps to see all the possible scenarios in a compact manner.
0,Yes, the given flowchart describes the sequence of events and how the application behaves in response to those events.
0,The flow chart is good and aids in understanding better.
0,great diagram, explains everything.
0,Clean flow chart
0,The test plan is provided in the functionality implementation describing the functionality and how it will be tested.
0,The issues have been identified and documented clearly. However, a little more of explanation is required for the solutions proposed for issues 2 - 5. They seem to me at a very high level.
0,Yes, the authors have nicely explained the changes to be made. This includes, the flow diagrams, UML diagrams and many of the screenshots. Good work team. Suggestion: Could include screenshots, if any, of the test plans implemented.
0,Yes, they look well written and easy to follow with all the visual aids. 
0,Very well written document. Good job team.
0,Yes, they have been thorough in their approach and this has been a project implemented to perfection. They have not only given proper UML diagrams and the like, but they are yet to implement the code and showcase in the "UML Diagram for Review" section.     
0,The doc is very well written. Its like a blueprint to the project. Really appreciate the team efforts!
0,I understand what the team is supposed to do to the expertiza system.
0,The team has included all the details required to implement the given requirement. The wiki has complete details related to requirements , analysis of current designs and changes required to achieve the required functionality. overall great job !  The team did a great work in analyzing the issues and designing solutions for the issues. The UI mock ups are included for all the issues which makes the document very easy to understand.  
0,Drastic improvements have been made to design doc. 
0,As far as the issues are concerned, the solutions do seem logical.   
0,The design looks good. All the issues are stated and addressed nicely.
0,Yes, the deisgn appears to be totally sound. The changes proposed are very standardized, and follows appropriate industry standards.
0,the design is sound with appropriate principles and patterns.
0,Clearly explained with diagrams and UML diagrams.
0,  The design is perfectly well depicted in the form of the use case diagram in which the users are student and instructor and the data base is where the actions are stored in the database and the retrieved from the same for the case of reviews information.  Also, they have been thorough in pointing out the application flow in the Application Flow section so as to elucidate the problem statement. 
0,Since the project is aimed at fixing the issues, no design patterns need to be used.
0,The team has analysed the existing design principles used in the project and has appropriately defined the design for the new changes which will be made. the design looks good and easy to implement. great work done !  
0,The design appears to be simple and straightforward to implement. The team has also included all the changes that will be made to achieve the desired results.  Great Work !
0,It was weird that two of the bugs they were assigned don't exist, but that's not the team's fault.
0,The explanation of each of the issues in details is done very well but it does seem to be complicated unless files to be modified and solutions are read.
0,Yes, the design is a very simple and effective representation of the problem statement and they serve a good representation on how they are working and implemented the changes to the review section. 
0,The design is simple. 
0,yes, only a few files are being modified. 
0,Yes, the design is very simple, lucid and efficient.
0,The design does not seem that complex. The team has clearly mentioned the issues and the way to go about it.  
0,Yes, simple straightforward solutions.
0,The visuals used are excellent but it would have been nice to not overwhelm the reader.
0,Great use of mock ups and UML diagrams. It makes understanding the issues easier. Looks like a great amount of thought has gone into making it. 
0,The visualization is great. All the flow diagrams and required screenshots are in place as required.
0,The visualization is by far the best part of this writeup. Also, it's visualization is among the best I've reviewed till date. The author has put in a lot of efforts for the same. The diagrams make the architecture and the problem statement very simple to understand.
0,A lots of visuals, very helpful when viewers walk through the design. 
0,Great work by the team on UML diagrams. 
0,Yes, the diagrams are clear to show how the system works. They have even gone a step ahead to show how they have thought of resolving the problem at each and every step of the Expertiza review section and the message popups they receive for the same. 
0,This team consistently uses great diagrams that add to their documentation's clarity significantly.
0,The team has included a lot of visual aids which complements the document making it a lot easier to understand.  Great work with the UI mockups / project design / UML diagrams.
0,Given UML diagram which are explaining the functionality appropriately but class diagram would have been better to explain the detail code level change 
0,There are some test plans in place and others will be done after the bugs are generated. Suggestions: It would have been great to have screenshots of the test plans.
0,Make include more details for test plan, other than that, the wiki looks very good. 
0,As per the requirement document, test cases are not required.
0,Yes, they have a working test plan in mind and also they have thought of the ways in which they are going to test the various edge cases for the various issues at hand.
0,The aspect of re-producing the issues are very clearly mentioned and hence tests are written briefly which can be easily understood.
0,The tests are really in depth for each issue the team will be fixing.
0,Yes, the explanations provided for changes to be made are clearly mentioned . The authors are very clear what and where to make changes. Use of flowchart makes reviewer to understand their approach more quickly and easily. Suggestion: No test plan is included in the project
0,The authors have explained the changes in depth and with proper details.
0,Yes the author has explained the adequately the changes to be made to the system by giving a detailed flow diagram of the workflow of the the would be implementing the functionality of keeping a track of the review time of a student
0,Yes, the author has explained the scope of the project very clearly and has specified the changes to be made in the project to accomplish the goal.
0,Yes the changes are well explained
0,Explained very well.
0,Yes.
0,The design document was well-written initially too, and still is.
0,The design follows the required principle and the exact required patterns.
0,Yes the design is quite well understood and properly explained in a detailed manner through the flow diagram
0,Not so good structure. 
0,The design seems pretty accurate, the schema of the database table records all the necessary details with reasonable granularity.
0,yes it does appear to be following appropriate principles.
0,Yes, design appears to be sound.
0,The design follows a clear approach to the functionality, avoiding any uncertain flaws.
0,Yes the design is simple and detailed thus explaining the required changes that would be implemented
0,Yes, I think so.
0,The design document is very simple and easy to read. Detailed explanation about the objective, the proposed plan for each objective, database schema and the user flow chart is defined clearly. The team could have added CRC cards to improve detailing about the code changes.
0,It is clear and simple.
0,yes it does. they have given the proposed solution which appears to be simple.
0,The design appears to be simple and is easy to understand.
0,Yes, the database design and flowchart gives a clear picture what system will do after the required changes. Suggestion: add before & after changes screen mock-ups to your document.
0,The provided flowcharts are visually sufficient to display the changes made to the system.
0,They have include a flow chart to illustrate how the part gonna work.
0,Great flowchart! It helps to see all the possible scenarios in a compact manner.
0,Yes, the given flowchart describes the sequence of events and how the application behaves in response to those events.
0,The flow chart is good and aids in understanding better.
0,great diagram, explains everything.
0,Clean flow chart
0,The test plan is provided in the functionality implementation describing the functionality and how it will be tested.
0,No
0,cannot find test plan.
0,The project does not have any testing involved
0,Not included.
0,No test plan provided.
0,Yes, they look well written and easy to follow with all the visual aids. 
0,Very well written document. Good job team.
0,The doc is very well written. Its like a blueprint to the project. Really appreciate the team efforts!
0,I understand what the team is supposed to do to the expertiza system.
0,As far as the issues are concerned, the solutions do seem logical.   
0,The design looks good. All the issues are stated and addressed nicely.
0,Yes, the deisgn appears to be totally sound. The changes proposed are very standardized, and follows appropriate industry standards.
0,the design is sound with appropriate principles and patterns.
0,Clearly explained with diagrams and UML diagrams.
0,Since the project is aimed at fixing the issues, no design patterns need to be used.
0,The team has analysed the existing design principles used in the project and has appropriately defined the design for the new changes which will be made. the design looks good and easy to implement. great work done !  
0,Yes, simple straightforward solutions.
0,The design does not seem that complex. The team has clearly mentioned the issues and the way to go about it.  
0,Yes, the design is very simple, lucid and efficient.
0,yes, only a few files are being modified. 
0,The design is simple. 
0,Yes, the design is a very simple and effective representation of the problem statement and they serve a good representation on how they are working and implemented the changes to the review section. 
0,It was weird that two of the bugs they were assigned don't exist, but that's not the team's fault.
0,The design appears to be simple and straightforward to implement. The team has also included all the changes that will be made to achieve the desired results.  Great Work !
0,Great use of mock ups and UML diagrams. It makes understanding the issues easier. Looks like a great amount of thought has gone into making it. 
0,The visualization is great. All the flow diagrams and required screenshots are in place as required.
0,The visualization is by far the best part of this writeup. Also, it's visualization is among the best I've reviewed till date. The author has put in a lot of efforts for the same. The diagrams make the architecture and the problem statement very simple to understand.
0,A lots of visuals, very helpful when viewers walk through the design. 
0,Great work by the team on UML diagrams. 
0,Yes, the diagrams are clear to show how the system works. They have even gone a step ahead to show how they have thought of resolving the problem at each and every step of the Expertiza review section and the message popups they receive for the same. 
0,This team consistently uses great diagrams that add to their documentation's clarity significantly.
0,The team has included a lot of visual aids which complements the document making it a lot easier to understand.  Great work with the UI mockups / project design / UML diagrams.
0,Given UML diagram which are explaining the functionality appropriately but class diagram would have been better to explain the detail code level change 
0,Yes, they have a working test plan in mind and also they have thought of the ways in which they are going to test the various edge cases for the various issues at hand.
0,Tests are given at a very high level and need to be described properly.
0,The tests are really in depth for each issue the team will be fixing.
0,While I'm awaiting to receive the details which are pending on the implementation, I feel the general nature of the changes is well-explained. 
0,Yes the approach is explained in detail.
0,Yes. The design is clear and the details are succinct.
0,The authors have adequately mentioned the desired changes in the approach and design section. The problem statement gives the gist of the issue at hand including adding feature to make student's reviews public. The proposals specified are effective to deal with the issue by creating a new MVC framework.
0,The overall design looks good. However, the author can add more details about the design principles being followed and appropriate patterns to be used.
0,Yes, Design shows a good amount of work to be done. Team is not using any design pattern.  
0,The design is proper.
0,Confronted with a tricky problem in creating links between different assignments across semesters to aggregate the reviews, I was really impressed with the way they plan to accomplish this feature.
0,I am not convinced with the "similar_assignments" table schema. For an assignment Ax, there is a foreign key that points to an assignment Ay such that Ax can be an assignment in say 2018 and Ay can be the same assignment in 2017. But what if one of the reviews from assignment Az which was in 2015 was really good and we need to include that as a sample and also include another review from Aw from 2016 as a sample.  According my understanding, this above requirement cannot be met with the current DB table design. Something that the team may look into.
0,The design and fixes are coherently described and are logical to be implemented for the given functionality. The issues are stated properly allowing the reader to understand it and the fixes suggested are enlisted in an appropriate manner.
0,Simple design
0,The steps taken by the team to implement the functionality is very clear and detailed. as stated above, the approach discusses the  step wise action that the team is going to take for the implementation.
0,Design doc is not complex and every section of the menu explains the itself with simplest term possible.
0,The design is concised and clear. Only makes the required changes and introduces no duplications.
0,For as difficult a problem as linking assignments from one year to the next is, they present an admirably simple design.
0,It is simple enough and also achieves the required features
0,The design looks simplified but there might be some edge cases that needs handling such as - What if a student makes his/her review public, this review is selected by the power user to create a sample and then the student wishes to make the review private?
0,The design makes it clear to understand the procedure adapted to realize the goal. The authors have made it a point to describe the tasks carried out in a simpler manner allowing the reader to realize the approach towards the issue. 
0,The team has represented the workflow through the UML diagrams which is very helpful to understand the flow of the requirement with multiple actors involved in the system. However, it would have been more helpful if they could add the design flow diagrams to explain the database design changes they are suggesting to be done. The new table they are suggesting to make and  the fields they would map to could be shown through a entity relationship diagram which will make it easy for the end user to understand the attributes and the relationship of different entities involved due to the functionality change.
0,The team has not used any class diagram.
0,some mock UI where this is going to be implemented would be helpful
0,I like the Use Case Diagram, but I would like class diagrams or a database visualization too, so it's easier to understand how the cross-course assignment linking will work.
0,There is one box for both review controller and assignment controller. A better picture of how they handle each event differently would have been helpful.
0,No test cases
0,The test plan section properly describes the flow that needs to be followed by each actor involved in the process. This could be enhanced either by providing a flow diagram or adding certain test case snippets for the scenarios.
0,The flowcharts included in the design document clearly explain the changes that need to be done.
0,The design document includes proper visualization. It included appropriate flow charts and screenshots which made it easier to understand the design document and the project.
0,They provide pictures of their sound waves.
